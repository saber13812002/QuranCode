using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing.Text;
using System.IO;
using System.Drawing;
using System.Drawing.Imaging;
using System.Windows.Forms;
using System.Threading;
using System.Reflection;
using System.ComponentModel;
using Model;

public partial class MainForm : Form, ISubscriber
{
    #region Interfaces
    ///////////////////////////////////////////////////////////////////////////////
    // ISubscriber method
    public void Notify(Subject subject, FileSystemEventArgs e)
    {
        try
        {
            if (m_subscriber_delegate == null)
            {
                m_subscriber_delegate = new SubscriberDelegate(SubscriberDelegateMethod);
            }

            if (this.InvokeRequired)
            {
                this.BeginInvoke(m_subscriber_delegate, new object[] { subject, e });
            }
            else
            {
                m_subscriber_delegate(subject, e);
            }
        }
        catch
        {
            // handle exception if desired... }
        }
    }
    private SubscriberDelegate m_subscriber_delegate = null;
    private delegate void SubscriberDelegate(Subject subject, FileSystemEventArgs e);
    private void SubscriberDelegateMethod(Subject subject, FileSystemEventArgs e)
    {
        switch (subject)
        {
            case Subject.LanguageSystem:
                {
                    LanguageComboBox_SelectedIndexChanged(null, null);
                }
                break;
            case Subject.SimplificationSystem:
                {
                    TextModeComboBox_SelectedIndexChanged(null, null);
                }
                break;
            case Subject.NumerologySystem:
                {
                    NumerologySystemComboBox_SelectedIndexChanged(null, null);
                }
                break;
            case Subject.DNASequenceSystem:
                {
                    DNASequenceSystemComboBox_SelectedIndexChanged(null, null);
                }
                break;
            case Subject.InterestingNumbers:
                {
                    MathsDivisorNumericUpDown_ValueChanged(null, null);
                    DistancesDivisorNumericUpDown_ValueChanged(null, null);
                }
                break;
            default:
                break;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Languages
    ///////////////////////////////////////////////////////////////////////////////
    private string l = DEFAULT_LANGUAGE;
    private string previous_l = null;
    private List<string> m_language_names = null;
    private void LanguageLabel_Click(object sender, EventArgs e)
    {
        Control control = sender as Control;
        if (control != null)
        {
            int pos = control.Name.IndexOf("LanguageLabel");
            if (pos > -1)
            {
                previous_l = l;

                l = control.Name.Remove(pos);
                LoadLanguage(l);

                LanguageComboBox.SelectedIndexChanged -= new EventHandler(LanguageComboBox_SelectedIndexChanged);
                LanguageComboBox.SelectedItem = l;
                LanguageComboBox.SelectedIndexChanged += new EventHandler(LanguageComboBox_SelectedIndexChanged);
            }
        }
    }
    private void InstallLanguages()
    {
        if (Directory.Exists(Globals.LANGUAGES_FOLDER))
        {
            LoadLanguageNames(Globals.LANGUAGES_FOLDER);
            PopulateLanguageComboBox();
        }
    }
    private void LoadLanguageNames(string languages_folder)
    {
        if (m_language_names == null)
        {
            m_language_names = new List<string>();
        }
        if (m_language_names != null)
        {
            m_language_names.Clear();

            DirectoryInfo folder = new DirectoryInfo(languages_folder);
            if (folder != null)
            {
                FileInfo[] files = folder.GetFiles("*.txt");
                if ((files != null) && (files.Length > 0))
                {
                    foreach (FileInfo file in files)
                    {
                        try
                        {
                            if (!String.IsNullOrEmpty(file.Name))
                            {
                                int pos = file.Name.IndexOf(file.Extension);
                                if (pos > -1)
                                {
                                    m_language_names.Add(file.Name.Remove(pos));
                                }
                            }
                        }
                        catch
                        {
                            // skip non-conformant language
                        }
                    }
                }
            }
        }
    }
    private void PopulateLanguageComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) LanguageComboBox.SelectedIndexChanged -= new EventHandler(LanguageComboBox_SelectedIndexChanged);
            LanguageComboBox.BeginUpdate();

            if (m_language_names != null)
            {
                LanguageComboBox.Items.Clear();
                foreach (string language_name in m_language_names)
                {
                    LanguageComboBox.Items.Add(language_name);
                }
            }
        }
        finally
        {
            LanguageComboBox.EndUpdate();
            LanguageComboBox.SelectedIndexChanged += new EventHandler(LanguageComboBox_SelectedIndexChanged);
        }
    }
    private void LanguageComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (LanguageComboBox.SelectedIndex > -1)
        {
            ApplyLanguage(LanguageComboBox.SelectedIndex);
        }
    }
    private void ApplyLanguage(int index)
    {
        if (m_language_names != null)
        {
            if ((index >= 0) && (index < m_language_names.Count))
            {
                previous_l = l;

                l = m_language_names[index];
                if (l != null)
                {
                    LoadLanguage(l);
                    //LanguageComboBox.SelectedItem = l;
                }
            }
        }
    }
    private Dictionary<string, Dictionary<string, string>> L = new Dictionary<string, Dictionary<string, string>>();
    private void LoadLanguage(string language_name)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (Directory.Exists(Globals.LANGUAGES_FOLDER))
            {
                Dictionary<string, string> language = new Dictionary<string, string>();
                List<Control> controls = GetDescendentControls(this);

                string filename = Globals.LANGUAGES_FOLDER + "/" + language_name + ".txt";
                List<string> lines = FileHelper.LoadLines(filename);
                foreach (string line in lines)
                {
                    string[] parts = line.Split('\t');
                    if (parts.Length >= 2)
                    {
                        if (parts[0] == "Dictionary")
                        {
                            if (parts.Length > 2)
                            {
                                if ((parts[1].Length > 0) && (parts[2].Length > 0))
                                {
                                    language.Add(parts[1], parts[2]);
                                }
                            }
                        }
                        else
                        {
                            foreach (Control control in controls)
                            {
                                if (parts[0] == control.Name)
                                {
                                    // set Text
                                    if (parts.Length > 2)
                                    {
                                        if (parts[2].Length > 0)
                                        {
                                            control.Text = parts[2];
                                        }
                                    }

                                    // set ToolTip
                                    if (parts.Length > 4)
                                    {
                                        if (parts[4].Length > 0)
                                        {
                                            if (control is TabPage)
                                            {
                                                (control as TabPage).ToolTipText = parts[4];
                                            }
                                            else
                                            {
                                                ToolTip.SetToolTip(control, parts[4]);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if (L.ContainsKey(l))
                {
                    L[l] = language;
                }
                else
                {
                    L.Add(language_name, language);
                }

                UpdateHeaderLabel();
                PopulateChaptersListBox();
                DisplayChapterRevelationInfo();

                UpdateGoldenRatioScopeLabel();
                UpdateGoldenRatioOrderLabel();
                UpdateGoldenRatioTypeLabel();

                UpdateFindByNumbersResultType();
                UpdateDistancesOptions();
                foreach (Control control in controls)
                {
                    if (control.Name.Contains("ComparisonOperator"))
                    {
                        if (control.Text.Length > 0)
                        {
                            ToolTip.SetToolTip(control, L[l][control.Text]);
                        }
                    }
                    else if (control.Name.Contains("NumberType"))
                    {
                        if (control.Text.Length > 0)
                        {
                            int remainder;
                            if (int.TryParse(control.Text, out remainder))
                            {
                                ToolTip.SetToolTip(control, L[l]["remainder"]);
                            }
                            else
                            {
                                ToolTip.SetToolTip(control, L[l][control.Text]);
                            }
                        }
                    }
                }

                ToolTip.SetToolTip(NumberKindIndexTextBox, L[l][m_number_kind.ToString() + " number index"]);
                if (ChapterSortComboBox.SelectedItem != null) ToolTip.SetToolTip(ChapterSortComboBox, L[l][ChapterSortComboBox.SelectedItem.ToString()]);
                ToolTip.SetToolTip(ChapterSortLabel, L[l][Chapter.SortOrder.ToString()]);

                if (ChapterSelectionComboBox.SelectedItem != null) ToolTip.SetToolTip(ChapterSelectionComboBox, L[l][(m_chapter_selection.ToString() + " " + "chapters")]);

                if (m_found_verses_displayed)
                {
                    if (m_word_wrap_search_textbox)
                    {
                        ToolTip.SetToolTip(WordWrapLabel, L[l]["Wrap"]);
                    }
                    else
                    {
                        ToolTip.SetToolTip(WordWrapLabel, L[l]["Unwrap"]);
                    }
                }
                else
                {
                    if (m_word_wrap_main_textbox)
                    {
                        ToolTip.SetToolTip(WordWrapLabel, L[l]["Wrap"]);
                    }
                    else
                    {
                        ToolTip.SetToolTip(WordWrapLabel, L[l]["Unwrap"]);
                    }
                }

                if (m_find_by_phrase_letter_frequency)
                {
                    ToolTip.SetToolTip(LetterFrequencyPositionSumSumLabel, L[l]["Base-10 letter frequency concatenation"]);
                    ToolTip.SetToolTip(LetterFrequencyDistanceSumSumLabel, L[l]["Base-19 letter frequency concatenation"]);
                }
                else
                {
                    ToolTip.SetToolTip(LetterFrequencyPositionSumSumLabel, L[l]["Sum of letter position sums"]);
                    ToolTip.SetToolTip(LetterFrequencyDistanceSumSumLabel, L[l]["Sum of letter distance sums"]);
                }

                int pos = ValueLabel.Text.IndexOf(" ");
                string text = ValueLabel.Text.Substring(pos + 1).Trim();
                if (L[l].ContainsKey(text))
                {
                    text = L[l][text];
                }
                else // reverse dictionary
                {
                    foreach (string key in L[l].Keys)
                    {
                        if (L[previous_l].ContainsKey(key))
                        {
                            if (text == L[previous_l][key])
                            {
                                text = L[l][key].ToTitleCase();
                                break;
                            }
                        }
                    }
                }
                if (m_show_add_controls)
                {
                    ValueLabel.Text = "-- " + text;
                    ToolTip.SetToolTip(ValueLabel, L[l]["Hide value-added positions and distances"]);
                }
                else
                {
                    ValueLabel.Text = "+ " + text;
                    ToolTip.SetToolTip(ValueLabel, L[l]["Show value-added positions and distances"]);
                }

                UpdateEmlaaeiLabel();

                LetterFrequencyColumnHeader.Text = L[l]["Freq"];// +"  "; // + 2 spaces for sort marker after them

                m_note_writing_instruction = L[l]["write a note for"];
                DisplayNoteWritingInstruction();

                long value = 0L;
                if (long.TryParse(ValueTextBox.Text, out value))
                {
                    UpdateValueNavigator(value);
                }

                RegisterContextMenus();
                SetToolTipPlayerVerseSilenceGapTrackBar();
                SetToolTipPlayerSelectionSilenceGapTrackBar();

                SetToolTips();
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void SetToolTips()
    {
        try
        {
            this.ToolTip.SetToolTip(this.HelpFolderLabel, "ٱللَّهُمَّ صَلِّ عَلَىٰ مُحَمَّدٍ وَءَالِ مُحَمَّدٍ");
            this.ToolTip.SetToolTip(this.FontLabel, L[l]["Font"]);
            this.ToolTip.SetToolTip(this.ResearchMethodsRunButton, L[l]["Run"]);
            this.ToolTip.SetToolTip(this.InspectChaptersLabel, L[l]["Inspect chapters"]);
            this.ToolTip.SetToolTip(this.InspectVersesLabel, L[l]["Inspect verses"]);
            this.ToolTip.SetToolTip(this.PlayerPlayLabel, L[l]["Play"]);
            this.ToolTip.SetToolTip(this.PlayerPreviousLabel, L[l]["Previous verse"]);
            this.ToolTip.SetToolTip(this.PlayerNextLabel, L[l]["Next verse"]);
            this.ToolTip.SetToolTip(this.PlayerStopLabel, L[l]["Stop"]);
            this.ToolTip.SetToolTip(this.PlayerRepeatLabel, L[l]["Repeat verse"]);
            this.ToolTip.SetToolTip(this.PlayerRepeatAllLabel, L[l]["Repeat selection"]);
            this.ToolTip.SetToolTip(this.PlayerRepeatCounterLabel, L[l]["Verse repetitions"]);
            this.ToolTip.SetToolTip(this.PlayerRepeatAllCounterLabel, L[l]["Selection repetitions"]);
            this.ToolTip.SetToolTip(this.PlayerMuteLabel, L[l]["Mute"]);
            this.ToolTip.SetToolTip(this.PlayerVerseSilenceGapTrackBar, L[l]["Silence between verses"]);
            this.ToolTip.SetToolTip(this.PlayerSelectionSilenceGapTrackBar, L[l]["Silence between selections"]);
            this.ToolTip.SetToolTip(this.UndoValueNavigationLabel, L[l]["Back"]);
            this.ToolTip.SetToolTip(this.RedoValueNavigationLabel, L[l]["Forward"]);
            //this.ToolTip.SetToolTip(this.TextModeComboBox, L[l]["Letter simplification system"]);
            //this.ToolTip.SetToolTip(this.NumerologySystemComboBox, L[l]["Letter valuation system"]);
            //this.ToolTip.SetToolTip(this.ChaptersTextBox, L[l]["Chapters in selection"]);
            //this.ToolTip.SetToolTip(this.VersesTextBox, L[l]["Verses in selection"]);
            //this.ToolTip.SetToolTip(this.WordsTextBox, L[l]["Words in selection"]);
            //this.ToolTip.SetToolTip(this.LettersTextBox, L[l]["Letters in selection"]);
            //this.ToolTip.SetToolTip(this.DecimalChaptersTextBox, L[l]["Chapters in selection"]);
            //this.ToolTip.SetToolTip(this.DecimalVersesTextBox, L[l]["Verses in selection"]);
            //this.ToolTip.SetToolTip(this.DecimalWordsTextBox, L[l]["Words in selection"]);
            //this.ToolTip.SetToolTip(this.DecimalLettersTextBox, L[l]["Letters in selection"]);
            this.ToolTip.SetToolTip(this.ChapterNumberSumTextBox, L[l]["Sum of chapter numbers"]);
            this.ToolTip.SetToolTip(this.VerseNumberSumTextBox, L[l]["Sum of verse numbers in their chapters"]);
            this.ToolTip.SetToolTip(this.WordNumberSumTextBox, L[l]["Sum of word numbers in their verses"]);
            this.ToolTip.SetToolTip(this.LetterNumberSumTextBox, L[l]["Sum of letter numbers in their words"]);
            //this.ToolTip.SetToolTip(this.ValueTextBox, L[l]["Value of selection"]);
            //this.ToolTip.SetToolTip(this.PrimeFactorsTextBox, L[l]["Prime factors of Value"]);
            this.ToolTip.SetToolTip(this.TranslationFontLabel, L[l]["Font"]);
            this.ToolTip.SetToolTip(this.SearchScopeBookLabel, L[l]["Search in entire book"]);
            this.ToolTip.SetToolTip(this.SearchScopeSelectionLabel, L[l]["Search in current selection"]);
            this.ToolTip.SetToolTip(this.SearchScopeResultLabel, L[l]["Search in current search result"]);
            this.ToolTip.SetToolTip(this.FindByTextTextBox, L[l]["text to search for in Arabic or any installed language"]);
            this.ToolTip.SetToolTip(this.FindByTextWordnessCheckBox, L[l]["find verses with whole word only"]);
            this.ToolTip.SetToolTip(this.FindByTextCaseSensitiveCheckBox, L[l]["case sensitive for non-Arabic languages"]);
            this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeVerseLabel, L[l]["in verses"]);
            this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeChapterLabel, L[l]["in chapters"]);
            this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizePageLabel, L[l]["in pages"]);
            this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeStationLabel, L[l]["in stations"]);
            this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizePartLabel, L[l]["in parts"]);
            this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeGroupLabel, L[l]["in groups"]);
            this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeHalfLabel, L[l]["in halfs"]);
            this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeQuarterLabel, L[l]["in quarters"]);
            this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeBowingLabel, L[l]["in bowings"]);
            this.ToolTip.SetToolTip(this.FindByTextExactSearchTypeLabel, L[l]["find exact word or expression"]);
            this.ToolTip.SetToolTip(this.FindByTextProximitySearchTypeLabel, L[l]["find any/all given words"]);
            this.ToolTip.SetToolTip(this.FindByTextRootSearchTypeLabel, L[l]["find words of given roots"]);
            this.ToolTip.SetToolTip(this.FindByTextAtChapterAnyRadioButton, L[l]["find anywhere in chapters"]);
            this.ToolTip.SetToolTip(this.FindByTextAtChapterStartRadioButton, L[l]["find in first verses"]);
            this.ToolTip.SetToolTip(this.FindByTextAtChapterMiddleRadioButton, L[l]["find in middle verses"]);
            this.ToolTip.SetToolTip(this.FindByTextAtChapterEndRadioButton, L[l]["find in last verses"]);
            this.ToolTip.SetToolTip(this.FindByTextAtVerseAnyRadioButton, L[l]["find anywhere in verses"]);
            this.ToolTip.SetToolTip(this.FindByTextAtVerseStartRadioButton, L[l]["find in first words"]);
            this.ToolTip.SetToolTip(this.FindByTextAtVerseMiddleRadioButton, L[l]["find in middle words"]);
            this.ToolTip.SetToolTip(this.FindByTextAtVerseEndRadioButton, L[l]["find in last words"]);
            this.ToolTip.SetToolTip(this.FindByTextAtWordAnyRadioButton, L[l]["find anywhere in words"]);
            this.ToolTip.SetToolTip(this.FindByTextAtWordStartRadioButton, L[l]["find at the beginning of words"]);
            this.ToolTip.SetToolTip(this.FindByTextAtWordMiddleRadioButton, L[l]["find in the middle of words"]);
            this.ToolTip.SetToolTip(this.FindByTextAtWordEndRadioButton, L[l]["find at the end of words"]);
            this.ToolTip.SetToolTip(this.FindByTextMultiplicityCheckBox, L[l]["find with repetitions"]);
            this.ToolTip.SetToolTip(this.FindByTextAllWordsRadioButton, L[l]["find verses with all words in any order"]);
            this.ToolTip.SetToolTip(this.FindByTextAnyWordRadioButton, L[l]["find verses with at least one word"]);
            this.ToolTip.SetToolTip(this.FindBySimilarityCurrentVerseTypeLabel, L[l]["find similar verses to the current verse"]);
            this.ToolTip.SetToolTip(this.FindBySimilarityAllVersesTypeLabel, L[l]["find similar verses to all verses in the Quran"]);
            this.ToolTip.SetToolTip(this.FindBySimilarityPercentageTrackBar, L[l]["similarity percentage"]);
            this.ToolTip.SetToolTip(this.FindBySimilarityTextRadioButton, L[l]["verses with similar text"]);
            this.ToolTip.SetToolTip(this.FindBySimilarityWordsRadioButton, L[l]["verses with similar words"]);
            this.ToolTip.SetToolTip(this.FindBySimilarityFirstHalfRadioButton, L[l]["verses with similar first half"]);
            this.ToolTip.SetToolTip(this.FindBySimilarityLastHalfRadioButton, L[l]["verses with similar last half"]);
            this.ToolTip.SetToolTip(this.FindBySimilarityFirstWordRadioButton, L[l]["verses with similar first word"]);
            this.ToolTip.SetToolTip(this.FindBySimilarityLastWordRadioButton, L[l]["verses with similar last word"]);
            this.ToolTip.SetToolTip(this.FindByNumbersResultTypeLettersLabel, L[l]["find letters"]);
            this.ToolTip.SetToolTip(this.FindByNumbersResultTypeWordsLabel, L[l]["find words"]);
            this.ToolTip.SetToolTip(this.FindByNumbersResultTypeSentencesLabel, L[l]["find sentences"]);
            this.ToolTip.SetToolTip(this.FindByNumbersResultTypeVersesLabel, L[l]["find verses"]);
            this.ToolTip.SetToolTip(this.FindByNumbersResultTypeChaptersLabel, L[l]["find chapters"]);
            this.ToolTip.SetToolTip(this.FindByFrequencyResultTypeWordsLabel, L[l]["find words"]);
            this.ToolTip.SetToolTip(this.FindByFrequencyResultTypeSentencesLabel, L[l]["find sentences"]);
            this.ToolTip.SetToolTip(this.FindByFrequencyResultTypeVersesLabel, L[l]["find verses"]);
            this.ToolTip.SetToolTip(this.FindByFrequencyResultTypeChaptersLabel, L[l]["find chapters"]);
            this.ToolTip.SetToolTip(this.FindByFrequencySearchTypeDuplicateLettersLabel, L[l]["include duplicate phrase letters"]);
            this.ToolTip.SetToolTip(this.FindByFrequencySearchTypeUniqueLettersLabel, L[l]["exclude duplicate phrase letters"]);
            this.ToolTip.SetToolTip(this.PCIndexChainL2RTextBox, L[l]["Prime-composite index chain --> P=0 C=1"]);
            this.ToolTip.SetToolTip(this.PCIndexChainR2LTextBox, L[l]["Prime-composite index chain <-- P=0 C=1"]);
            this.ToolTip.SetToolTip(this.CPIndexChainL2RTextBox, L[l]["Prime-composite index chain --> P=1 C=0"]);
            this.ToolTip.SetToolTip(this.CPIndexChainR2LTextBox, L[l]["Prime-composite index chain <-- P=1 C=0"]);
            this.ToolTip.SetToolTip(this.IndexChainLengthTextBox, L[l]["Prime-composite index chain length"]);
            this.ToolTip.SetToolTip(this.DigitSumTextBox, L[l]["Digit sum"]);
            this.ToolTip.SetToolTip(this.DigitalRootTextBox, L[l]["Digital root"]);
            this.ToolTip.SetToolTip(this.NthNumberTextBox, L[l]["Prime index"]);
            this.ToolTip.SetToolTip(this.NthAdditiveNumberTextBox, L[l]["Additive prime index"]);
            this.ToolTip.SetToolTip(this.NthNonAdditiveNumberTextBox, L[l]["Non-additive prime index"]);
            this.ToolTip.SetToolTip(this.AddPositionsAndDistancesToValueLabel, L[l]["Dynamic Numerology System - ©2008 Ali Adams"]);
            this.ToolTip.SetToolTip(this.AddToLetterLNumberCheckBox, L[l]["Add letter number in word to each letter value"]);
            this.ToolTip.SetToolTip(this.AddToLetterWNumberCheckBox, L[l]["Add word number in verse to each letter value"]);
            this.ToolTip.SetToolTip(this.AddToLetterVNumberCheckBox, L[l]["Add verse number in chapter to each letter value"]);
            this.ToolTip.SetToolTip(this.AddToLetterCNumberCheckBox, L[l]["Add chapter number in book to each letter value"]);
            this.ToolTip.SetToolTip(this.AddToLetterLDistanceCheckBox, L[l]["Add the number of letters back to the same letter"]);
            this.ToolTip.SetToolTip(this.AddToLetterWDistanceCheckBox, L[l]["Add the number of words back to the same letter"]);
            this.ToolTip.SetToolTip(this.AddToLetterVDistanceCheckBox, L[l]["Add the number of verses back to the same letter"]);
            this.ToolTip.SetToolTip(this.AddToLetterCDistanceCheckBox, L[l]["Add the number of chapters back to the same letter"]);
            this.ToolTip.SetToolTip(this.AddToWordWNumberCheckBox, L[l]["Add word number in verse to each word value"]);
            this.ToolTip.SetToolTip(this.AddToWordVNumberCheckBox, L[l]["Add verse number in chapter to each word value"]);
            this.ToolTip.SetToolTip(this.AddToWordCNumberCheckBox, L[l]["Add chapter number in book to each word value"]);
            this.ToolTip.SetToolTip(this.AddToWordWDistanceCheckBox, L[l]["Add the number of words back to the same word"]);
            this.ToolTip.SetToolTip(this.AddToWordVDistanceCheckBox, L[l]["Add the number of verses back to the same word"]);
            this.ToolTip.SetToolTip(this.AddToWordCDistanceCheckBox, L[l]["Add the number of chapters back to the same word"]);
            this.ToolTip.SetToolTip(this.AddToVerseVNumberCheckBox, L[l]["Add verse number in chapter to each verse value"]);
            this.ToolTip.SetToolTip(this.AddToVerseCNumberCheckBox, L[l]["Add chapter number in book to each verse value"]);
            this.ToolTip.SetToolTip(this.AddToVerseVDistanceCheckBox, L[l]["Add the number of verses back to the same verse"]);
            this.ToolTip.SetToolTip(this.AddToVerseCDistanceCheckBox, L[l]["Add the number of chapters back to the same verse"]);
            this.ToolTip.SetToolTip(this.AddToChapterCNumberCheckBox, L[l]["Add chapter number in book to each chapter value"]);
            this.ToolTip.SetToolTip(this.ChapterComboBox, "C, C-C, C:V, C:V-C, C-C:V, C:V-C:V, ..." + "\r\n" + "36  40-46  15:87  18:9-25  1-2:5  24:35-27:62  2:29,41:9-12");
            this.ToolTip.SetToolTip(this.ChapterVerseNumericUpDown, "V, V-V, ...");
            this.ToolTip.SetToolTip(this.ChapterWordNumericUpDown, "W, W-W, ...");
            this.ToolTip.SetToolTip(this.ChapterLetterNumericUpDown, "L, L-L, ...");
            this.ToolTip.SetToolTip(this.PartNumericUpDown, "P, P-P, ...");
            this.ToolTip.SetToolTip(this.PageNumericUpDown, "#, #-#, ...");
            this.ToolTip.SetToolTip(this.StationNumericUpDown, "S, S-S, ...");
            this.ToolTip.SetToolTip(this.GroupNumericUpDown, "G, G-G, ...");
            this.ToolTip.SetToolTip(this.HalfNumericUpDown, "H, H-H, ...");
            this.ToolTip.SetToolTip(this.QuarterNumericUpDown, "Q, Q-Q, ...");
            this.ToolTip.SetToolTip(this.BowingNumericUpDown, "B, B-B, ...");
            this.ToolTip.SetToolTip(this.VerseNumericUpDown, "V, V-V, ...");
            this.ToolTip.SetToolTip(this.WordNumericUpDown, "W, W-W, ...");
            this.ToolTip.SetToolTip(this.LetterNumericUpDown, "L, L-L, ...");

            // UserText labels' tooltips 
            for (int i = 0; i < 8; i++)
            {
                string filename = "UserText" + (i + 1) + ".txt";
                if (Directory.Exists(Globals.USERTEXT_FOLDER))
                {
                    string path = Globals.USERTEXT_FOLDER + "/" + filename;
                    string text = FileHelper.LoadText(path);

                    if ((text == "\r\n") || (text == "\n") || (text == "\r"))
                    {
                        text = "";
                    }

                    string load_control_name = "UserText" + (i + 1) + "LoadLabel";
                    Control control = GetControl(load_control_name);
                    if (control != null)
                    {
                        ToolTip.SetToolTip(control, (text.Length > 0) ? text : L[l]["Load"]);
                        control.ForeColor = (text.Length > 0) ? Color.Black : Color.Lime;
                        control.BackColor = (text.Length > 0) ? Color.Lime : Color.Black;
                    }

                    string save_control_name = "UserText" + (i + 1) + "SaveLabel";
                    control = GetControl(save_control_name);
                    if (control != null)
                    {
                        ToolTip.SetToolTip(control, (control == UserText1SaveLabel) ? "" : L[l]["Save"]);
                    }
                }
            }
        }
        catch
        {
            // ignore
        }
    }
    /////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Framework
    ///////////////////////////////////////////////////////////////////////////////
    // TextBox has no Ctrl+A by default, so add it
    private void FixMicrosoft(object sender, KeyPressEventArgs e)
    {
        // stop annoying beep due to parent not having an AcceptButton
        if ((e.KeyChar == (char)Keys.Enter) || (e.KeyChar == (char)Keys.Escape))
        {
            e.Handled = true;
        }
        // enable Ctrl+A to SelectAll
        if ((ModifierKeys == Keys.Control) && (e.KeyChar == (char)1))
        {
            TextBoxBase control = (sender as TextBoxBase);
            if (control != null)
            {
                control.SelectAll();
                e.Handled = true;
            }
        }
    }
    private void TextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (sender is TextBoxBase)
        {
            TextBoxBase control = (sender as TextBoxBase);
            if (control != null)
            {
                if (e.KeyCode == Keys.Enter)
                {
                    if (control.Focused)
                    {
                        control.Text.Insert(control.SelectionStart, "\n");
                        e.Handled = true;
                        return;
                    }
                }
                else if (e.KeyCode == Keys.Tab)
                {
                    control.Text.Insert(control.SelectionStart, "\t");
                    e.Handled = true;
                    return;
                }
                else
                {
                    if (ModifierKeys == Keys.Control)
                    {
                        if (e.KeyCode == Keys.A)
                        {
                            control.SelectAll();
                        }
                        else if (e.KeyCode == Keys.F)
                        {
                            // Find dialog
                        }
                        else if (e.KeyCode == Keys.H)
                        {
                            // Replace dialog
                        }
                        else if (e.KeyCode == Keys.S)
                        {
                            // Save As dialog
                        }
                    }
                }
            }
        }
        e.Handled = false;
    }
    private void DownloadFile(string uri, string path)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            Downloader.Download(uri, path, 30000);
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private FontConverter font_converter = new FontConverter();
    private ColorConverter color_converter = new ColorConverter();
    private List<Control> GetDescendentControls(Control control)
    {
        List<Control> result = new List<Control>();
        foreach (Control c in control.Controls)
        {
            result.Add(c);
            result.AddRange(GetDescendentControls(c));
        }
        return result;
    }
    private Control GetControl(string name)
    {
        Control[] controls = this.Controls.Find(name, true);
        if (controls.Length > 0)
        {
            return controls[0];
        }
        return null;
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Constants
    ///////////////////////////////////////////////////////////////////////////////
    private static int c = 140;
    private static Color[] CHAPTER_INITIALIZATION_COLORS =
    { 
        /* InitializationType.Key */                  Color.Black,
        /* InitializationType.PartiallyInitialized */ Color.FromArgb(c+32, c+0, 0),
        /* InitializationType.FullyInitialized */     Color.FromArgb(c+64, c+32, 0),
        /* InitializationType.DoublyInitialized */    Color.FromArgb(c+96, c+64, 0),
        /* InitializationType.NonInitialized */       Color.FromArgb(64, 64, 64),
    };

    private const int DEFAULT_WINDOW_WIDTH = 1290;
    private const int DEFAULT_WINDOW_HEIGHT = 753;
    private const string DEFAULT_LANGUAGE = "English";
    private const int DEFAULT_INFORMATION_BOX_TOP = 449;
    private const int DEFAULT_AUDIO_VOLUME = 1000;
    private const string VERSE_ADDRESS_TRANSLATION_SEPARATOR = " ";
    private const string VERSE_ADDRESS_MAIN_SEPARATOR = "\t";
    private const string SUM_SYMBOL = "Ʃ";
    private const string SPACE_GAP = "     ";
    private const int MAX_SELECTON_SCOPE_LENGTH = 16;
    private const string CAPTION_SEPARATOR = " ► ";
    private const string DEFAULT_QURAN_FONT_NAME = "me_quran";
    private const float DEFAULT_QURAN_FONT_SIZE = 14.0F;
    private const int DEFAULT_TRANSLATION_BOX_WIDTH = 409;
    private const string DEFAULT_TRANSALTION_FONT_NAME = "Microsoft Sans Serif";
    private const float DEFAULT_TRANSALTION_FONT_SIZE = 11.0F;
    private static Color DEFAULT_TRANSALTION_FONT_COLOR = Color.Navy;
    private const float DEFAULT_TEXT_ZOOM_FACTOR = 1.0F;
    private const float DEFAULT_GRAPHICS_ZOOM_FACTOR = 1.0F;
    private const int SELECTON_SCOPE_TEXT_MAX_LENGTH = 32;  // for longer text, use elipses (...)
    private const int DEFAULT_RADIX = 10;                   // base for current number system. Decimal by default.
    private const int RADIX_NINTEEN = 19;                   // base for current number system. 19 for OverItNineteen.
    private const int DEFAULT_DIVISOR = 19;                 // 19 for OverItNineteen.
    private const int MIN_DIVISOR = 2;                      // minimum divisor
    private const int MAX_DIVISOR = 9999;                   // maximum divisor
    private static Color DIVISOR_COLOR = Color.FromArgb(204, 255, 204); // background color if number is divisible by DEFAULT_DIVISOR or DISTANCES_DIVISOR.
    private static Color INTERESTING_NUMBER_COLOR = Color.Yellow; // background color if number is InterestingNumber, InterestingRatio.
    private const float DEFAULT_DPI_X = 96.0F;              // 100% = 96.0F,   125% = 120.0F,   150% = 144.0F
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region MainForm
    ///////////////////////////////////////////////////////////////////////////////
    private float m_dpi_x = DEFAULT_DPI_X;
    private string m_ini_filename = null;
    private Client m_client = null;
    private string m_current_text = null;
    public MainForm()
    {
        using (Graphics graphics = this.CreateGraphics())
        {
            m_dpi_x = graphics.DpiX;    // 100% = 96.0F,   125% = 120.0F,   150% = 144.0F
        }
        if (m_dpi_x == 96.0F)
        {
            InitializeComponent();
        }
        else if (m_dpi_x == 120.0F)
        {
            InitializeComponent125();
        }
        else if (m_dpi_x == 144.0F)
        {
            InitializeComponent125();  // use 125% until we test it on a Win10 machine
        }
        this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint | ControlStyles.DoubleBuffer, true);

        InstallLanguages();

        InstallFonts();
        AboutToolStripMenuItem.Font = new Font(AboutToolStripMenuItem.Font, AboutToolStripMenuItem.Font.Style | FontStyle.Bold);

        FindByTextButton.Enabled = true;
        FindBySimilarityButton.Enabled = false;
        FindByNumbersButton.Enabled = false;
        FindByFrequencyButton.Enabled = false;

        m_ini_filename = AppDomain.CurrentDomain.FriendlyName.Replace(".exe", ".ini");

        // must initialize here as it is null
        m_active_textbox = MainTextBox;

        //this.ChapterComboBox.MouseHover += new EventHandler(Control_MouseHover);
        //this.ChapterVerseNumericUpDown.MouseHover += new EventHandler(Control_MouseHover);
        //this.ChapterWordNumericUpDown.MouseHover += new EventHandler(Control_MouseHover);
        //this.ChapterLetterNumericUpDown.MouseHover += new EventHandler(Control_MouseHover);
        //this.PageNumericUpDown.MouseHover += new EventHandler(Control_MouseHover);
        //this.StationNumericUpDown.MouseHover += new EventHandler(Control_MouseHover);
        //this.PartNumericUpDown.MouseHover += new EventHandler(Control_MouseHover);
        //this.GroupNumericUpDown.MouseHover += new EventHandler(Control_MouseHover);
        //this.HalfNumericUpDown.MouseHover += new EventHandler(Control_MouseHover);
        //this.QuarterNumericUpDown.MouseHover += new EventHandler(Control_MouseHover);
        //this.BowingNumericUpDown.MouseHover += new EventHandler(Control_MouseHover);

        this.ChaptersTextBox.MouseHover += new EventHandler(Control_MouseHover);
        this.VersesTextBox.MouseHover += new EventHandler(Control_MouseHover);
        this.WordsTextBox.MouseHover += new EventHandler(Control_MouseHover);
        this.LettersTextBox.MouseHover += new EventHandler(Control_MouseHover);
        //this.ValueTextBox.MouseHover += new EventHandler(Control_MouseHover);
        this.DecimalChaptersTextBox.MouseHover += new EventHandler(Control_MouseHover);
        this.DecimalVersesTextBox.MouseHover += new EventHandler(Control_MouseHover);
        this.DecimalWordsTextBox.MouseHover += new EventHandler(Control_MouseHover);
        this.DecimalLettersTextBox.MouseHover += new EventHandler(Control_MouseHover);
        //this.DecimalValueTextBox.MouseHover += new EventHandler(Control_MouseHover);
        this.ChapterDiffTextBox.MouseHover += new EventHandler(Control_MouseHover);
        this.VerseDiffTextBox.MouseHover += new EventHandler(Control_MouseHover);
        this.WordDiffTextBox.MouseHover += new EventHandler(Control_MouseHover);
        this.LetterDiffTextBox.MouseHover += new EventHandler(Control_MouseHover);

        this.MainTextBox.HideSelection = false; // this won't shift the text to the left
        //this.MainTextBox.HideSelection = true; // this WILL shift the text to the left
        this.SearchResultTextBox.HideSelection = false; // this won't shift the text to the left
        //this.SearchResultTextBox.HideSelection = true; // this WILL shift the text to the left

        this.MainTextBox.MouseWheel += new MouseEventHandler(MainTextBox_MouseWheel);
        this.SearchResultTextBox.MouseWheel += new MouseEventHandler(MainTextBox_MouseWheel);

        this.BrowseGroupBox.Click += new EventHandler(BrowseGroupBox_Click);
        this.StatisticsGroupBox.Click += new EventHandler(StatisticsGroupBox_Click);

        //this.PictureBox.Cursor = Cursors.Cross;
    }
    private void InitializeComponent125()
    {
        this.components = new System.ComponentModel.Container();
        System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MainForm));
        this.StatusPanel = new System.Windows.Forms.Panel();
        this.ShowToolTipsCheckBox = new System.Windows.Forms.CheckBox();
        this.ChapterSortPanel = new System.Windows.Forms.Panel();
        this.ChapterSortLabel = new System.Windows.Forms.Label();
        this.ChapterSortComboBox = new System.Windows.Forms.ComboBox();
        this.DrawAdditivePrimesLabel = new System.Windows.Forms.Label();
        this.GeneratePrimeDrawingsLabel = new System.Windows.Forms.Label();
        this.DrawPrimesLabel = new System.Windows.Forms.Label();
        this.DrawNonAdditivePrimesLabel = new System.Windows.Forms.Label();
        this.DrawingsPanel = new System.Windows.Forms.Panel();
        this.DisplayWordsWithAllahLabel = new System.Windows.Forms.Label();
        this.DrawWordsWithAllahLabel = new System.Windows.Forms.Label();
        this.DrawWordAllahLabel = new System.Windows.Forms.Label();
        this.DrawWordValuesLabel = new System.Windows.Forms.Label();
        this.DrawLetterValuesLabel = new System.Windows.Forms.Label();
        this.ChangeDrawingShapeLabel = new System.Windows.Forms.Label();
        this.BookmarkPanel = new System.Windows.Forms.Panel();
        this.DeleteBookmarkLabel = new System.Windows.Forms.Label();
        this.ClearBookmarksLabel = new System.Windows.Forms.Label();
        this.BookmarkForwardButton = new System.Windows.Forms.Button();
        this.BookmarkCounterLabel = new System.Windows.Forms.Label();
        this.BookmarkBackwardButton = new System.Windows.Forms.Button();
        this.BookmarkTextBox = new System.Windows.Forms.TextBox();
        this.ResearchPanel = new System.Windows.Forms.Panel();
        this.ResearchMethodsRunButton = new System.Windows.Forms.Button();
        this.ResearchMethodParameterTextBox = new System.Windows.Forms.TextBox();
        this.ResearchMethodsComboBox = new System.Windows.Forms.ComboBox();
        this.PrimeNumbersLabel = new System.Windows.Forms.Label();
        this.VersionLabel = new System.Windows.Forms.Label();
        this.HelpFolderLabel = new System.Windows.Forms.Label();
        this.HelpMessageLabel = new System.Windows.Forms.Label();
        this.ChapterSelectionComboBox = new System.Windows.Forms.ComboBox();
        this.VerseDiffTextBox = new System.Windows.Forms.TextBox();
        this.LetterDiffTextBox = new System.Windows.Forms.TextBox();
        this.WordDiffTextBox = new System.Windows.Forms.TextBox();
        this.VerseByVerseNumberLabel = new System.Windows.Forms.Label();
        this.VerseByLetterNumberLabel = new System.Windows.Forms.Label();
        this.VerseByWordNumberLabel = new System.Windows.Forms.Label();
        this.UndoValueNavigationLabel = new System.Windows.Forms.Label();
        this.RedoValueNavigationLabel = new System.Windows.Forms.Label();
        this.ValueTextBox = new System.Windows.Forms.TextBox();
        this.FindByTextAtVerseEndRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextAtVerseStartRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextAtVerseAnyRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextAtVerseMiddleRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextCaseSensitiveCheckBox = new System.Windows.Forms.CheckBox();
        this.FindByTextWordnessCheckBox = new System.Windows.Forms.CheckBox();
        this.SearchScopeBookLabel = new System.Windows.Forms.Label();
        this.FindByFrequencySearchTypeDuplicateLettersLabel = new System.Windows.Forms.Label();
        this.NoorsoftLinkLabel = new System.Windows.Forms.Label();
        this.FindByTextMultiplicityCheckBox = new System.Windows.Forms.CheckBox();
        this.BrowseHistoryDeleteLabel = new System.Windows.Forms.Label();
        this.FindByFrequencySumLabel = new System.Windows.Forms.Label();
        this.FindByTextAllWordsRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextAnyWordRadioButton = new System.Windows.Forms.RadioButton();
        this.BrowseHistoryCounterLabel = new System.Windows.Forms.Label();
        this.BrowseGroupBox = new System.Windows.Forms.GroupBox();
        this.ChineseLanguageLabel = new System.Windows.Forms.Label();
        this.ArabicLanguageLabel = new System.Windows.Forms.Label();
        this.RussianLanguageLabel = new System.Windows.Forms.Label();
        this.EnglishLanguageLabel = new System.Windows.Forms.Label();
        this.BrowseHistoryClearLabel = new System.Windows.Forms.Label();
        this.BrowseHistoryForwardButton = new System.Windows.Forms.Button();
        this.BrowseHistoryBackwardButton = new System.Windows.Forms.Button();
        this.LanguageComboBox = new System.Windows.Forms.ComboBox();
        this.PrimalogyARLabel = new System.Windows.Forms.Label();
        this.PrimalogyLabel = new System.Windows.Forms.Label();
        this.ToolbarPanel = new System.Windows.Forms.Panel();
        this.ProgressBar = new System.Windows.Forms.ProgressBar();
        this.MainSplitContainer = new System.Windows.Forms.SplitContainer();
        this.SearchGroupBox = new System.Windows.Forms.GroupBox();
        this.FindByNumbersPanel = new System.Windows.Forms.Panel();
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel = new System.Windows.Forms.Label();
        this.FindByNumbersValueDigitalRootNumberTypeLabel = new System.Windows.Forms.Label();
        this.FindByNumbersValueDigitalRootNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.FindByNumbersValueDigitalRootLabel = new System.Windows.Forms.Label();
        this.FindByNumbersValueDigitSumComparisonOperatorLabel = new System.Windows.Forms.Label();
        this.FindByNumbersValueDigitSumNumberTypeLabel = new System.Windows.Forms.Label();
        this.FindByNumbersValueDigitSumNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.FindByNumbersValueDigitSumLabel = new System.Windows.Forms.Label();
        this.FindByNumbersButton = new System.Windows.Forms.Button();
        this.FindByNumbersResultTypeSentencesLabel = new System.Windows.Forms.Label();
        this.FindByNumbersResultTypeChaptersLabel = new System.Windows.Forms.Label();
        this.FindByNumbersResultTypeVersesLabel = new System.Windows.Forms.Label();
        this.FindByNumbersResultTypeWordsLabel = new System.Windows.Forms.Label();
        this.FindByNumbersResultTypeLettersLabel = new System.Windows.Forms.Label();
        this.FindByNumbersChaptersComparisonOperatorLabel = new System.Windows.Forms.Label();
        this.FindByNumbersChaptersNumberTypeLabel = new System.Windows.Forms.Label();
        this.FindByNumbersChaptersNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.FindByNumbersChaptersLabel = new System.Windows.Forms.Label();
        this.FindByNumbersNumberComparisonOperatorLabel = new System.Windows.Forms.Label();
        this.FindByNumbersNumberNumberTypeLabel = new System.Windows.Forms.Label();
        this.FindByNumbersNumberNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.FindByNumbersNumberLabel = new System.Windows.Forms.Label();
        this.FindByNumbersUniqueLettersNumberTypeLabel = new System.Windows.Forms.Label();
        this.FindByNumbersUniqueLettersComparisonOperatorLabel = new System.Windows.Forms.Label();
        this.FindByNumbersVersesComparisonOperatorLabel = new System.Windows.Forms.Label();
        this.FindByNumbersValueComparisonOperatorLabel = new System.Windows.Forms.Label();
        this.FindByNumbersUniqueLettersNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.FindByNumbersLettersComparisonOperatorLabel = new System.Windows.Forms.Label();
        this.FindByNumbersWordsComparisonOperatorLabel = new System.Windows.Forms.Label();
        this.FindByNumbersVersesNumberTypeLabel = new System.Windows.Forms.Label();
        this.FindByNumbersVersesNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.FindByNumbersValueNumberTypeLabel = new System.Windows.Forms.Label();
        this.FindByNumbersLettersNumberTypeLabel = new System.Windows.Forms.Label();
        this.FindByNumbersWordsNumberTypeLabel = new System.Windows.Forms.Label();
        this.FindByNumbersValueNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.FindByNumbersLettersNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.FindByNumbersWordsNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.FindByNumbersUniqueLettersLabel = new System.Windows.Forms.Label();
        this.FindByNumbersVersesLabel = new System.Windows.Forms.Label();
        this.FindByNumbersValueLabel = new System.Windows.Forms.Label();
        this.FindByNumbersLettersLabel = new System.Windows.Forms.Label();
        this.FindByNumbersWordsLabel = new System.Windows.Forms.Label();
        this.FindByNumbersLabel = new System.Windows.Forms.Label();
        this.SearchScopeResultLabel = new System.Windows.Forms.Label();
        this.SearchScopeSelectionLabel = new System.Windows.Forms.Label();
        this.FindBySimilarityPanel = new System.Windows.Forms.Panel();
        this.FindBySimilarityAllVersesTypeLabel = new System.Windows.Forms.Label();
        this.FindBySimilarityPercentageTrackBar = new System.Windows.Forms.TrackBar();
        this.FindBySimilarityWordsRadioButton = new System.Windows.Forms.RadioButton();
        this.FindBySimilarityLastHalfRadioButton = new System.Windows.Forms.RadioButton();
        this.FindBySimilarityLastWordRadioButton = new System.Windows.Forms.RadioButton();
        this.FindBySimilarityFirstWordRadioButton = new System.Windows.Forms.RadioButton();
        this.FindBySimilarityButton = new System.Windows.Forms.Button();
        this.FindBySimilarityFirstHalfRadioButton = new System.Windows.Forms.RadioButton();
        this.FindBySimilarityCurrentVerseTypeLabel = new System.Windows.Forms.Label();
        this.FindBySimilarityLabel = new System.Windows.Forms.Label();
        this.FindBySimilarityTextRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextPanel = new System.Windows.Forms.Panel();
        this.DrawSearchTermsLabel = new System.Windows.Forms.Label();
        this.FindByTextWithDiacriticsCheckBox = new System.Windows.Forms.CheckBox();
        this.FindByTextSearchBlockSizeBowingLabel = new System.Windows.Forms.Label();
        this.FindByTextMultiplicityNumberTypeLabel = new System.Windows.Forms.Label();
        this.FindByTextMultiplicityComparisonOperatorLabel = new System.Windows.Forms.Label();
        this.FindByTextSearchBlockSizeVerseLabel = new System.Windows.Forms.Label();
        this.TextLocationLabel = new System.Windows.Forms.Label();
        this.TextLocationWithinChapterPanel = new System.Windows.Forms.Panel();
        this.FindByTextAtChapterStartRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextAtChapterMiddleRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextAtChapterAnyRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextAtChapterEndRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextSearchBlockSizeChapterLabel = new System.Windows.Forms.Label();
        this.FindByTextButton = new System.Windows.Forms.Button();
        this.TextLocationInWordPanel = new System.Windows.Forms.Panel();
        this.FindByTextAtWordStartRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextAtWordEndRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextAtWordMiddleRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextAtWordAnyRadioButton = new System.Windows.Forms.RadioButton();
        this.FindByTextSearchBlockSizeQuarterLabel = new System.Windows.Forms.Label();
        this.TextLocationWithinVersePanel = new System.Windows.Forms.Panel();
        this.FindByTextSearchBlockSizePartLabel = new System.Windows.Forms.Label();
        this.KeyboardPanel = new System.Windows.Forms.Panel();
        this.FindByTextQuranHealingLabel = new System.Windows.Forms.Label();
        this.FindByTextRaaLabel = new System.Windows.Forms.Label();
        this.FindByTextOrLabel = new System.Windows.Forms.Label();
        this.FindByTextAndLabel = new System.Windows.Forms.Label();
        this.FindByTextPlusLabel = new System.Windows.Forms.Label();
        this.FindByTextMinusLabel = new System.Windows.Forms.Label();
        this.FindByTextDoubleQuoteLabel = new System.Windows.Forms.Label();
        this.FindByTextElfWaslLabel = new System.Windows.Forms.Label();
        this.FindByTextSpaceLabel = new System.Windows.Forms.Label();
        this.FindByTextBackspaceLabel = new System.Windows.Forms.Label();
        this.FindByTextHamzaAboveYaaLabel = new System.Windows.Forms.Label();
        this.FindByTextElfLabel = new System.Windows.Forms.Label();
        this.FindByTextTextBox = new System.Windows.Forms.TextBox();
        this.FindByTextYaaLabel = new System.Windows.Forms.Label();
        this.FindByTextKaafLabel = new System.Windows.Forms.Label();
        this.FindByTextHamzaAboveWawLabel = new System.Windows.Forms.Label();
        this.FindByTextAinLabel = new System.Windows.Forms.Label();
        this.FindByTextWawLabel = new System.Windows.Forms.Label();
        this.FindByTextHhaaLabel = new System.Windows.Forms.Label();
        this.FindByTextHamzaLabel = new System.Windows.Forms.Label();
        this.FindByTextTaaMarbootaLabel = new System.Windows.Forms.Label();
        this.FindByTextElfMaqsuraLabel = new System.Windows.Forms.Label();
        this.FindByTextHaaLabel = new System.Windows.Forms.Label();
        this.FindByTextSheenLabel = new System.Windows.Forms.Label();
        this.FindByTextZaaiLabel = new System.Windows.Forms.Label();
        this.FindByTextGhainLabel = new System.Windows.Forms.Label();
        this.FindByTextHamzaBelowElfLabel = new System.Windows.Forms.Label();
        this.FindByTextThaaLabel = new System.Windows.Forms.Label();
        this.FindByTextHamzaAboveElfLabel = new System.Windows.Forms.Label();
        this.FindByTextNoonLabel = new System.Windows.Forms.Label();
        this.FindByTextDhaaLabel = new System.Windows.Forms.Label();
        this.FindByTextMeemLabel = new System.Windows.Forms.Label();
        this.FindByTextBaaLabel = new System.Windows.Forms.Label();
        this.FindByTextQaafLabel = new System.Windows.Forms.Label();
        this.FindByTextTaaLabel = new System.Windows.Forms.Label();
        this.FindByTextDhaadLabel = new System.Windows.Forms.Label();
        this.FindByTextJeemLabel = new System.Windows.Forms.Label();
        this.FindByTextSeenLabel = new System.Windows.Forms.Label();
        this.FindByTextSaadLabel = new System.Windows.Forms.Label();
        this.FindByTextDaalLabel = new System.Windows.Forms.Label();
        this.FindByTextLaamLabel = new System.Windows.Forms.Label();
        this.FindByTextKhaaLabel = new System.Windows.Forms.Label();
        this.FindByTextFaaLabel = new System.Windows.Forms.Label();
        this.FindByTextThaalLabel = new System.Windows.Forms.Label();
        this.FindByTextTtaaLabel = new System.Windows.Forms.Label();
        this.FindByTextSearchBlockSizeHalfLabel = new System.Windows.Forms.Label();
        this.FindByTextProximitySearchTypeLabel = new System.Windows.Forms.Label();
        this.FindByTextSearchBlockSizeGroupLabel = new System.Windows.Forms.Label();
        this.FindByTextExactSearchTypeLabel = new System.Windows.Forms.Label();
        this.FindByTextSearchBlockSizePageLabel = new System.Windows.Forms.Label();
        this.FindByTextSearchBlockSizeStationLabel = new System.Windows.Forms.Label();
        this.FindByTextRootSearchTypeLabel = new System.Windows.Forms.Label();
        this.FindByTextMultiplicityNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.FindByTextLabel = new System.Windows.Forms.Label();
        this.PositionsGroupBox = new System.Windows.Forms.GroupBox();
        this.DifferenceStatisticsLabel = new System.Windows.Forms.Label();
        this.DifferencesLabel = new System.Windows.Forms.Label();
        this.VerseWordLetterPositionLabel = new System.Windows.Forms.Label();
        this.BowingPositionLabel = new System.Windows.Forms.Label();
        this.QuarterPositionLabel = new System.Windows.Forms.Label();
        this.HalfPositionLabel = new System.Windows.Forms.Label();
        this.GroupPositionLabel = new System.Windows.Forms.Label();
        this.PartPositionLabel = new System.Windows.Forms.Label();
        this.StationPositionLabel = new System.Windows.Forms.Label();
        this.PagePositionLabel = new System.Windows.Forms.Label();
        this.ChapterVerseWordLetterPositionLabel = new System.Windows.Forms.Label();
        this.ChapterPositionLabel = new System.Windows.Forms.Label();
        this.ChapterDiffTextBox = new System.Windows.Forms.TextBox();
        this.LetterNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.WordNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.VerseNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.BowingNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.QuarterNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.HalfNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.GroupNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.PartNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.StationNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.PageNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.ChapterLetterNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.ChapterWordNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.ChapterVerseNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.ChapterComboBox = new System.Windows.Forms.ComboBox();
        this.ChapterGroupBox = new System.Windows.Forms.GroupBox();
        this.InspectChaptersLabel = new System.Windows.Forms.Label();
        this.WordsListBox = new System.Windows.Forms.ListBox();
        this.WordsListBoxContextMenuStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
        this.FindSelectedWordsMenuItem = new System.Windows.Forms.ToolStripMenuItem();
        this.PinChapter1CheckBox = new System.Windows.Forms.CheckBox();
        this.ChaptersListBox = new ListBoxEx();
        this.FontComboBox = new System.Windows.Forms.ComboBox();
        this.WordsListBoxLabel = new System.Windows.Forms.Label();
        this.ClientSplitContainer = new System.Windows.Forms.SplitContainer();
        this.MainTextBox = new RichTextBoxEx();
        this.SearchResultTextBox = new RichTextBoxEx();
        this.HeaderPanel = new System.Windows.Forms.Panel();
        this.GenerateSentencesLabel = new System.Windows.Forms.Label();
        this.DuplicateLettersCheckBox = new System.Windows.Forms.CheckBox();
        this.GoldenRatioScopeLabel = new System.Windows.Forms.Label();
        this.DisplayProstrationVersesLabel = new System.Windows.Forms.Label();
        this.GoldenRatioTypeLabel = new System.Windows.Forms.Label();
        this.WordWrapLabel = new System.Windows.Forms.Label();
        this.FontLabel = new System.Windows.Forms.Label();
        this.EscapeButton = new System.Windows.Forms.Label();
        this.ZoomOutLabel = new System.Windows.Forms.Label();
        this.GoldenRatioOrderLabel = new System.Windows.Forms.Label();
        this.ZoomInLabel = new System.Windows.Forms.Label();
        this.InspectVersesLabel = new System.Windows.Forms.Label();
        this.HeaderLabel = new System.Windows.Forms.Label();
        this.PictureBox = new PictureBoxEx();
        this.TabControl = new System.Windows.Forms.TabControl();
        this.TranslationTabPage = new System.Windows.Forms.TabPage();
        this.TranslationSplitContainer = new System.Windows.Forms.SplitContainer();
        this.TranslationFontLabel = new System.Windows.Forms.Label();
        this.EditSaveTranslationLabel = new System.Windows.Forms.Label();
        this.TranslatorComboBox = new System.Windows.Forms.ComboBox();
        this.TranslationTextBox = new System.Windows.Forms.TextBox();
        this.TranslatorsCheckedListBox = new System.Windows.Forms.CheckedListBox();
        this.TranslationsApplySettingsLabel = new System.Windows.Forms.Label();
        this.TranslationsCancelSettingsLabel = new System.Windows.Forms.Label();
        this.AllTranslatorsCheckBox = new System.Windows.Forms.CheckBox();
        this.TranslatorsComboBox = new System.Windows.Forms.ComboBox();
        this.TranslationsTextBox = new System.Windows.Forms.TextBox();
        this.GrammarTabPage = new System.Windows.Forms.TabPage();
        this.GrammarTextBox = new System.Windows.Forms.TextBox();
        this.RelatedWordsTabPage = new System.Windows.Forms.TabPage();
        this.RelatedWordsButton = new System.Windows.Forms.Button();
        this.RelatedWordsTextBox = new System.Windows.Forms.TextBox();
        this.SymmetryTabPage = new System.Windows.Forms.TabPage();
        this.SymmetryIncludeBoundaryCasesCheckBox = new System.Windows.Forms.CheckBox();
        this.SymmetryTypeComboBox = new System.Windows.Forms.ComboBox();
        this.SymmetryInspectLabel = new System.Windows.Forms.Label();
        this.SymmetryTextBox = new System.Windows.Forms.TextBox();
        this.ValuesSequenceTabPage = new System.Windows.Forms.TabPage();
        this.ValuesSequenceInspectLabel = new System.Windows.Forms.Label();
        this.ValuesSequenceScopeComboBox = new System.Windows.Forms.ComboBox();
        this.ValuesSequenceRadixNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.ValuesSequenceRadixLabel = new System.Windows.Forms.Label();
        this.ValuesSequenceDirectionLabel = new System.Windows.Forms.Label();
        this.ValuesSequenceTextBox = new System.Windows.Forms.TextBox();
        this.CVWLSequenceTabPage = new System.Windows.Forms.TabPage();
        this.CVWLSequenceShowFactorsCheckBox = new System.Windows.Forms.CheckBox();
        this.CVWLSequenceTypeComboBox = new System.Windows.Forms.ComboBox();
        this.CVWLSequenceInspectLabel = new System.Windows.Forms.Label();
        this.CVWLSequenceDirectionLabel = new System.Windows.Forms.Label();
        this.CVWLSequenceTextBox = new System.Windows.Forms.TextBox();
        this.DNASequenceTabPage = new System.Windows.Forms.TabPage();
        this.DNASequenceDirectionLabel = new System.Windows.Forms.Label();
        this.DNASequenceSystemEditLabel = new System.Windows.Forms.Label();
        this.DNASequenceSystemComboBox = new System.Windows.Forms.ComboBox();
        this.DNASequenceTextBox = new System.Windows.Forms.TextBox();
        this.MathsTabPage = new System.Windows.Forms.TabPage();
        this.MathsPanel = new System.Windows.Forms.Panel();
        this.MathsInterestingNumbersEditLabel = new System.Windows.Forms.Label();
        this.MathsUpdateDivisorCheckBox = new System.Windows.Forms.CheckBox();
        this.MathsDivisorNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.MathsDivisorLabel = new System.Windows.Forms.Label();
        this.MathsVersesCDivideVDUSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCDivideVDUSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCDivideVCompositeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCDivideVPrimeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCDivideVEvenSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCDivideVOddSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCDivideVSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCDivideVSumLabel = new System.Windows.Forms.Label();
        this.MathsVersesCDivideVCompositeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCDivideVPrimeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCDivideVEvenSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCDivideVOddSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCDivideVSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCDivideVLabel = new System.Windows.Forms.Label();
        this.MathsVersesCMultiplyVDUSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMultiplyVDUSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMultiplyVCompositeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMultiplyVPrimeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMultiplyVEvenSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMultiplyVOddSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMultiplyVSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMultiplyVSumLabel = new System.Windows.Forms.Label();
        this.MathsVersesCMultiplyVCompositeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCMultiplyVPrimeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCMultiplyVEvenSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCMultiplyVOddSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCMultiplyVSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCMultiplyVLabel = new System.Windows.Forms.Label();
        this.MathsVersesCSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesSumInspectLabel = new System.Windows.Forms.Label();
        this.MathsVersesCMinusVDUSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCPlusVDUSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesVDUSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCDUSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMinusVDUSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCPlusVDUSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersVDUSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCDUSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMinusVCompositeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCPlusVCompositeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersVCompositeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCCompositeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMinusVPrimeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCPlusVPrimeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersVPrimeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCPrimeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMinusVEvenSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCPlusVEvenSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersVEvenSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCEvenSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMinusVOddSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCPlusVOddSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersVOddSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCOddSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMinusVSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCMinusVSumLabel = new System.Windows.Forms.Label();
        this.MathsChaptersCPlusVSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersCPlusVSumLabel = new System.Windows.Forms.Label();
        this.MathsChaptersVSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsChaptersVSumLabel = new System.Windows.Forms.Label();
        this.MathsChaptersCSumLabel = new System.Windows.Forms.Label();
        this.MathsVersesCMinusVCompositeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCPlusVCompositeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesVCompositeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCCompositeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCMinusVPrimeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCPlusVPrimeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesVPrimeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCPrimeSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCMinusVEvenSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCPlusVEvenSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesVEvenSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCEvenSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCMinusVOddSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCPlusVOddSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesVOddSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCOddSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCMinusVSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCMinusVLabel = new System.Windows.Forms.Label();
        this.MathsVersesCPlusVSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesCPlusVLabel = new System.Windows.Forms.Label();
        this.MathsVersesVSumTextBox = new System.Windows.Forms.TextBox();
        this.MathsVersesVLabel = new System.Windows.Forms.Label();
        this.MathsVersesCLabel = new System.Windows.Forms.Label();
        this.MathsVersesDUSumLabel = new System.Windows.Forms.Label();
        this.MathsVersesCompositeSumLabel = new System.Windows.Forms.Label();
        this.MathsVersesPrimeSumLabel = new System.Windows.Forms.Label();
        this.MathsVersesEvenSumLabel = new System.Windows.Forms.Label();
        this.MathsVersesOddSumLabel = new System.Windows.Forms.Label();
        this.MathsVersesSumLabel = new System.Windows.Forms.Label();
        this.MathsChaptersSumInspectLabel = new System.Windows.Forms.Label();
        this.MathsChaptersDUSumLabel = new System.Windows.Forms.Label();
        this.MathsChaptersSumLabel = new System.Windows.Forms.Label();
        this.MathsChaptersCompositeSumLabel = new System.Windows.Forms.Label();
        this.MathsChaptersPrimeSumLabel = new System.Windows.Forms.Label();
        this.MathsChaptersEvenSumLabel = new System.Windows.Forms.Label();
        this.MathsChaptersOddSumLabel = new System.Windows.Forms.Label();
        this.MathsChaptersCSumTextBox = new System.Windows.Forms.TextBox();
        this.DistancesTabPage = new System.Windows.Forms.TabPage();
        this.DistancesPanel = new System.Windows.Forms.Panel();
        this.DistancesInterestingNumbersEditLabel = new System.Windows.Forms.Label();
        this.DistancesUpdateDivisorCheckBox = new System.Windows.Forms.CheckBox();
        this.DistancesDivisorNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.DistancesDivisorLabel = new System.Windows.Forms.Label();
        this.DistancesRunningWordNumberScopeLabel = new System.Windows.Forms.Label();
        this.DistancesRunningVerseNumberScopeLabel = new System.Windows.Forms.Label();
        this.DistancesWordBeforeWithinVerseRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordDifferenceWithinVerseRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordAfterWithinVerseRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordWithinVerseRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordBeforeWithinChapterRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordDifferenceWithinChapterRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordAfterWithinChapterRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordWithinChapterRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseBeforeWithinChapterRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseDifferenceWithinChapterRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseAfterWithinChapterRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseWithinChapterRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordBeforeWithinBookRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordDifferenceWithinBookRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordAfterWithinBookRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordWithinBookRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseBeforeWithinBookRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseDifferenceWithinBookRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseAfterWithinBookRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseWithinBookRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesChapterBeforeWithinBookRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesChapterDifferenceWithinBookRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesChapterAfterWithinBookRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesChapterWithinBookRunningTotalTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordBeforeWithinVerseTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordDifferenceWithinVerseTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordAfterWithinVerseTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordWithinVerseTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordBeforeWithinChapterTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordDifferenceWithinChapterTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordAfterWithinChapterTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordWithinChapterTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseBeforeWithinChapterTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseDifferenceWithinChapterTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseAfterWithinChapterTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseWithinChapterTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordBeforeWithinBookTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordDifferenceWithinBookTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordAfterWithinBookTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordWithinBookTextBox = new System.Windows.Forms.TextBox();
        this.DistancesWordLabel = new System.Windows.Forms.Label();
        this.DistancesVerseBeforeWithinBookTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseDifferenceWithinBookTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseAfterWithinBookTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseWithinBookTextBox = new System.Windows.Forms.TextBox();
        this.DistancesVerseLabel = new System.Windows.Forms.Label();
        this.DistancesChapterBeforeWithinBookTextBox = new System.Windows.Forms.TextBox();
        this.DistancesChapterDifferenceWithinBookTextBox = new System.Windows.Forms.TextBox();
        this.DistancesChapterAfterWithinBookTextBox = new System.Windows.Forms.TextBox();
        this.DistancesChapterWithinBookTextBox = new System.Windows.Forms.TextBox();
        this.DistancesChapterLabel = new System.Windows.Forms.Label();
        this.DistancesRunningTotalLabel = new System.Windows.Forms.Label();
        this.DistancesWithinVerseRunningTotalLabel = new System.Windows.Forms.Label();
        this.DistancesWithinChapterRunningTotalLabel = new System.Windows.Forms.Label();
        this.DistancesWithinBookRunningTotalLabel = new System.Windows.Forms.Label();
        this.DistancesWithinVerseLabel = new System.Windows.Forms.Label();
        this.DistancesWithinChapterLabel = new System.Windows.Forms.Label();
        this.DistancesWithinBookLabel = new System.Windows.Forms.Label();
        this.UserTextTabPage = new System.Windows.Forms.TabPage();
        this.UserText8SaveLabel = new System.Windows.Forms.Label();
        this.UserText7SaveLabel = new System.Windows.Forms.Label();
        this.UserText6SaveLabel = new System.Windows.Forms.Label();
        this.UserText5SaveLabel = new System.Windows.Forms.Label();
        this.UserText4SaveLabel = new System.Windows.Forms.Label();
        this.UserText3SaveLabel = new System.Windows.Forms.Label();
        this.UserText2SaveLabel = new System.Windows.Forms.Label();
        this.UserText1SaveLabel = new System.Windows.Forms.Label();
        this.UserTextInspectLabel = new System.Windows.Forms.Label();
        this.UserTextValueButton = new System.Windows.Forms.Button();
        this.UserTextValueNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.UserTextValueLabel = new System.Windows.Forms.Label();
        this.UserTextTextBox = new System.Windows.Forms.TextBox();
        this.UserText8LoadLabel = new System.Windows.Forms.Label();
        this.UserText7LoadLabel = new System.Windows.Forms.Label();
        this.UserText6LoadLabel = new System.Windows.Forms.Label();
        this.UserText5LoadLabel = new System.Windows.Forms.Label();
        this.UserText4LoadLabel = new System.Windows.Forms.Label();
        this.UserText3LoadLabel = new System.Windows.Forms.Label();
        this.UserText2LoadLabel = new System.Windows.Forms.Label();
        this.UserText1LoadLabel = new System.Windows.Forms.Label();
        this.TanzilLabel = new System.Windows.Forms.Label();
        this.EmlaaeiTextLabel = new System.Windows.Forms.Label();
        this.FindByFrequencySumNumericUpDown = new System.Windows.Forms.NumericUpDown();
        this.StatisticsGroupBox = new System.Windows.Forms.GroupBox();
        this.ValueNavigatorPanel = new System.Windows.Forms.Panel();
        this.ValueNavigatorLinkLabel = new System.Windows.Forms.Label();
        this.ShaddaAsLetterCheckBox = new System.Windows.Forms.CheckBox();
        this.WawAsWordCheckBox = new System.Windows.Forms.CheckBox();
        this.WithBismAllahCheckBox = new System.Windows.Forms.CheckBox();
        this.DivisorValueUpLabel = new System.Windows.Forms.Label();
        this.DivisorValueDownLabel = new System.Windows.Forms.Label();
        this.ChapterNumberSumTextBox = new System.Windows.Forms.TextBox();
        this.DecimalChaptersTextBox = new System.Windows.Forms.TextBox();
        this.ChaptersTextBox = new System.Windows.Forms.TextBox();
        this.ChaptersLabel = new System.Windows.Forms.Label();
        this.LetterFrequencyPanel = new System.Windows.Forms.Panel();
        this.LetterFrequencyWithDiacriticsCheckBox = new System.Windows.Forms.CheckBox();
        this.LetterFrequencyDistanceSumSumLabel = new System.Windows.Forms.Label();
        this.FindByFrequencyTotalLabel = new System.Windows.Forms.Label();
        this.LetterFrequencyPositionSumSumLabel = new System.Windows.Forms.Label();
        this.LetterFrequencySumLabel = new System.Windows.Forms.Label();
        this.LetterFrequencyCountLabel = new System.Windows.Forms.Label();
        this.LetterFrequencyInspectLabel = new System.Windows.Forms.Label();
        this.LetterFrequencyListView = new System.Windows.Forms.ListView();
        this.LetterOrderColumnHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
        this.LetterCharacterColumnHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
        this.LetterFrequencyColumnHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
        this.LetterPositionSumColumnHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
        this.LetterDistanceSumColumnHeader = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader()));
        this.FindByFrequncyPanel = new System.Windows.Forms.Panel();
        this.FindByFrequencyLinkLabel = new System.Windows.Forms.Label();
        this.FindByFrequencyPhraseCheckBox = new System.Windows.Forms.CheckBox();
        this.FindByFrequencySumComparisonOperatorLabel = new System.Windows.Forms.Label();
        this.FindByFrequencySumNumberTypeLabel = new System.Windows.Forms.Label();
        this.FindByFrequencyPhraseTextBox = new System.Windows.Forms.TextBox();
        this.FindByFrequencyButton = new System.Windows.Forms.Button();
        this.FindByFrequencyLabel = new System.Windows.Forms.Label();
        this.FindByFrequencyResultTypeWordsLabel = new System.Windows.Forms.Label();
        this.FindByFrequencyResultTypeSentencesLabel = new System.Windows.Forms.Label();
        this.FindByFrequencyResultTypeVersesLabel = new System.Windows.Forms.Label();
        this.FindByFrequencyResultTypeChaptersLabel = new System.Windows.Forms.Label();
        this.FindByFrequencySearchTypeUniqueLettersLabel = new System.Windows.Forms.Label();
        this.LetterNumberSumTextBox = new System.Windows.Forms.TextBox();
        this.WordNumberSumTextBox = new System.Windows.Forms.TextBox();
        this.VerseNumberSumTextBox = new System.Windows.Forms.TextBox();
        this.DecimalLettersTextBox = new System.Windows.Forms.TextBox();
        this.DecimalWordsTextBox = new System.Windows.Forms.TextBox();
        this.DecimalVersesTextBox = new System.Windows.Forms.TextBox();
        this.RadixValueUpLabel = new System.Windows.Forms.Label();
        this.RadixValueDownLabel = new System.Windows.Forms.Label();
        this.RadixLabel = new System.Windows.Forms.Label();
        this.ValuePanel = new System.Windows.Forms.Panel();
        this.Nth4nPlus1NumberTextBox = new System.Windows.Forms.TextBox();
        this.SumOfDivisorsTextBox = new System.Windows.Forms.TextBox();
        this.SquareDiffTextBox = new System.Windows.Forms.TextBox();
        this.SquareSumTextBox = new System.Windows.Forms.TextBox();
        this.ValueInspectLabel = new System.Windows.Forms.Label();
        this.NthNonAdditiveNumberTextBox = new System.Windows.Forms.TextBox();
        this.DisplayAbundantNumbersLabel = new System.Windows.Forms.Label();
        this.DisplayPerfectNumbersLabel = new System.Windows.Forms.Label();
        this.DisplayDeficientNumbersLabel = new System.Windows.Forms.Label();
        this.DecimalValueTextBox = new System.Windows.Forms.TextBox();
        this.EditNumerologySystemLabel = new System.Windows.Forms.Label();
        this.NumberKindIndexTextBox = new System.Windows.Forms.TextBox();
        this.SumOfProperDivisorsTextBox = new System.Windows.Forms.TextBox();
        this.PCIndexChainPanel = new System.Windows.Forms.Panel();
        this.PCIndexChainLabel = new System.Windows.Forms.Label();
        this.IndexChainLengthTextBox = new System.Windows.Forms.TextBox();
        this.CPIndexChainL2RTextBox = new System.Windows.Forms.TextBox();
        this.PCIndexChainR2LTextBox = new System.Windows.Forms.TextBox();
        this.CPIndexChainR2LTextBox = new System.Windows.Forms.TextBox();
        this.PCIndexChainL2RTextBox = new System.Windows.Forms.TextBox();
        this.AddToChapterCNumberCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToVerseCDistanceCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToVerseCNumberCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToWordCDistanceCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToWordCNumberCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToVerseVDistanceCheckBox = new System.Windows.Forms.CheckBox();
        this.NumerologySystemComboBox = new System.Windows.Forms.ComboBox();
        this.AddToVerseVNumberCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToWordVDistanceCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToWordWDistanceCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToWordVNumberCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToWordWNumberCheckBox = new System.Windows.Forms.CheckBox();
        this.DigitalRootTextBox = new System.Windows.Forms.TextBox();
        this.DigitSumTextBox = new System.Windows.Forms.TextBox();
        this.NthAdditiveNumberTextBox = new System.Windows.Forms.TextBox();
        this.NthNumberTextBox = new System.Windows.Forms.TextBox();
        this.AddToLetterCDistanceCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToLetterCNumberCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToLetterVDistanceCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToLetterWDistanceCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToLetterLDistanceCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToLetterVNumberCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToLetterWNumberCheckBox = new System.Windows.Forms.CheckBox();
        this.AddToLetterLNumberCheckBox = new System.Windows.Forms.CheckBox();
        this.AddPositionsAndDistancesToValueLabel = new System.Windows.Forms.Label();
        this.PrimeFactorsTextBox = new System.Windows.Forms.TextBox();
        this.ValueLabel = new System.Windows.Forms.Label();
        this.AddDistancesWithinChaptersCheckBox = new System.Windows.Forms.CheckBox();
        this.AddDistancesToNextCheckBox = new System.Windows.Forms.CheckBox();
        this.AddDistancesToPreviousCheckBox = new System.Windows.Forms.CheckBox();
        this.AddPositionsCheckBox = new System.Windows.Forms.CheckBox();
        this.VersesTextBox = new System.Windows.Forms.TextBox();
        this.LettersTextBox = new System.Windows.Forms.TextBox();
        this.WordsTextBox = new System.Windows.Forms.TextBox();
        this.VersesLabel = new System.Windows.Forms.Label();
        this.WordsLabel = new System.Windows.Forms.Label();
        this.LettersLabel = new System.Windows.Forms.Label();
        this.TextModeComboBox = new System.Windows.Forms.ComboBox();
        this.DivisorLabel = new System.Windows.Forms.Label();
        this.DivisorValueLabel = new System.Windows.Forms.Label();
        this.RadixValueLabel = new System.Windows.Forms.Label();
        this.TotalChapterCountsCheckBox = new System.Windows.Forms.CheckBox();
        this.TextModeLabel = new System.Windows.Forms.Label();
        this.RecitationsCheckedListBox = new System.Windows.Forms.CheckedListBox();
        this.StatisticsSplitContainer = new System.Windows.Forms.SplitContainer();
        this.RecitationGroupBox = new System.Windows.Forms.GroupBox();
        this.PlayerPreviousLabel = new System.Windows.Forms.Label();
        this.PlayerRepeatCounterLabel = new System.Windows.Forms.Label();
        this.PlayerRepeatAllCounterLabel = new System.Windows.Forms.Label();
        this.PlayerStopLabel = new System.Windows.Forms.Label();
        this.PlayerPlayLabel = new System.Windows.Forms.Label();
        this.PlayerNextLabel = new System.Windows.Forms.Label();
        this.PlayerRepeatLabel = new System.Windows.Forms.Label();
        this.PlayerRepeatAllLabel = new System.Windows.Forms.Label();
        this.RecitationsApplySettingsLabel = new System.Windows.Forms.Label();
        this.RecitationsCancelSettingsLabel = new System.Windows.Forms.Label();
        this.PlayerVolumeTrackBar = new System.Windows.Forms.TrackBar();
        this.EveryAyahLabel = new System.Windows.Forms.Label();
        this.ReciterComboBox = new System.Windows.Forms.ComboBox();
        this.PlayerVerseSilenceGapTrackBar = new System.Windows.Forms.TrackBar();
        this.PlayerMuteLabel = new System.Windows.Forms.Label();
        this.PlayerSelectionSilenceGapTrackBar = new System.Windows.Forms.TrackBar();
        this.RecitationsDownloadGroupBox = new System.Windows.Forms.GroupBox();
        this.ToolTip = new System.Windows.Forms.ToolTip(this.components);
        this.NotifyIcon = new System.Windows.Forms.NotifyIcon(this.components);
        this.NotifyIconContextMenuStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
        this.AboutToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
        this.ExitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
        this.FontDialog = new System.Windows.Forms.FontDialog();
        this.LetterFrequencyContextMenuStrip = new System.Windows.Forms.ContextMenuStrip(this.components);
        this.PositionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
        this.DistancesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
        this.StatusPanel.SuspendLayout();
        this.ChapterSortPanel.SuspendLayout();
        this.DrawingsPanel.SuspendLayout();
        this.BookmarkPanel.SuspendLayout();
        this.ResearchPanel.SuspendLayout();
        this.BrowseGroupBox.SuspendLayout();
        this.ToolbarPanel.SuspendLayout();
        ((System.ComponentModel.ISupportInitialize)(this.MainSplitContainer)).BeginInit();
        this.MainSplitContainer.Panel1.SuspendLayout();
        this.MainSplitContainer.Panel2.SuspendLayout();
        this.MainSplitContainer.SuspendLayout();
        this.SearchGroupBox.SuspendLayout();
        this.FindByNumbersPanel.SuspendLayout();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersValueDigitalRootNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersValueDigitSumNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersChaptersNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersNumberNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersUniqueLettersNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersVersesNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersValueNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersLettersNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersWordsNumericUpDown)).BeginInit();
        this.FindBySimilarityPanel.SuspendLayout();
        ((System.ComponentModel.ISupportInitialize)(this.FindBySimilarityPercentageTrackBar)).BeginInit();
        this.FindByTextPanel.SuspendLayout();
        this.TextLocationWithinChapterPanel.SuspendLayout();
        this.TextLocationInWordPanel.SuspendLayout();
        this.TextLocationWithinVersePanel.SuspendLayout();
        this.KeyboardPanel.SuspendLayout();
        ((System.ComponentModel.ISupportInitialize)(this.FindByTextMultiplicityNumericUpDown)).BeginInit();
        this.PositionsGroupBox.SuspendLayout();
        ((System.ComponentModel.ISupportInitialize)(this.LetterNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.WordNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.VerseNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.BowingNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.QuarterNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.HalfNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.GroupNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.PartNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.StationNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.PageNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.ChapterLetterNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.ChapterWordNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.ChapterVerseNumericUpDown)).BeginInit();
        this.ChapterGroupBox.SuspendLayout();
        this.WordsListBoxContextMenuStrip.SuspendLayout();
        ((System.ComponentModel.ISupportInitialize)(this.ClientSplitContainer)).BeginInit();
        this.ClientSplitContainer.Panel1.SuspendLayout();
        this.ClientSplitContainer.Panel2.SuspendLayout();
        this.ClientSplitContainer.SuspendLayout();
        this.HeaderPanel.SuspendLayout();
        this.TabControl.SuspendLayout();
        this.TranslationTabPage.SuspendLayout();
        ((System.ComponentModel.ISupportInitialize)(this.TranslationSplitContainer)).BeginInit();
        this.TranslationSplitContainer.Panel1.SuspendLayout();
        this.TranslationSplitContainer.Panel2.SuspendLayout();
        this.TranslationSplitContainer.SuspendLayout();
        this.GrammarTabPage.SuspendLayout();
        this.RelatedWordsTabPage.SuspendLayout();
        this.SymmetryTabPage.SuspendLayout();
        this.ValuesSequenceTabPage.SuspendLayout();
        ((System.ComponentModel.ISupportInitialize)(this.ValuesSequenceRadixNumericUpDown)).BeginInit();
        this.CVWLSequenceTabPage.SuspendLayout();
        this.DNASequenceTabPage.SuspendLayout();
        this.MathsTabPage.SuspendLayout();
        this.MathsPanel.SuspendLayout();
        ((System.ComponentModel.ISupportInitialize)(this.MathsDivisorNumericUpDown)).BeginInit();
        this.DistancesTabPage.SuspendLayout();
        this.DistancesPanel.SuspendLayout();
        ((System.ComponentModel.ISupportInitialize)(this.DistancesDivisorNumericUpDown)).BeginInit();
        this.UserTextTabPage.SuspendLayout();
        ((System.ComponentModel.ISupportInitialize)(this.UserTextValueNumericUpDown)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByFrequencySumNumericUpDown)).BeginInit();
        this.StatisticsGroupBox.SuspendLayout();
        this.ValueNavigatorPanel.SuspendLayout();
        this.LetterFrequencyPanel.SuspendLayout();
        this.FindByFrequncyPanel.SuspendLayout();
        this.ValuePanel.SuspendLayout();
        this.PCIndexChainPanel.SuspendLayout();
        ((System.ComponentModel.ISupportInitialize)(this.StatisticsSplitContainer)).BeginInit();
        this.StatisticsSplitContainer.Panel1.SuspendLayout();
        this.StatisticsSplitContainer.SuspendLayout();
        this.RecitationGroupBox.SuspendLayout();
        ((System.ComponentModel.ISupportInitialize)(this.PlayerVolumeTrackBar)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.PlayerVerseSilenceGapTrackBar)).BeginInit();
        ((System.ComponentModel.ISupportInitialize)(this.PlayerSelectionSilenceGapTrackBar)).BeginInit();
        this.RecitationsDownloadGroupBox.SuspendLayout();
        this.NotifyIconContextMenuStrip.SuspendLayout();
        this.LetterFrequencyContextMenuStrip.SuspendLayout();
        this.SuspendLayout();
        // 
        // StatusPanel
        // 
        this.StatusPanel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.StatusPanel.BackColor = System.Drawing.Color.Transparent;
        this.StatusPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
        this.StatusPanel.Controls.Add(this.ShowToolTipsCheckBox);
        this.StatusPanel.Controls.Add(this.ChapterSortPanel);
        this.StatusPanel.Controls.Add(this.DrawAdditivePrimesLabel);
        this.StatusPanel.Controls.Add(this.GeneratePrimeDrawingsLabel);
        this.StatusPanel.Controls.Add(this.DrawPrimesLabel);
        this.StatusPanel.Controls.Add(this.DrawNonAdditivePrimesLabel);
        this.StatusPanel.Controls.Add(this.DrawingsPanel);
        this.StatusPanel.Controls.Add(this.BookmarkPanel);
        this.StatusPanel.Controls.Add(this.ResearchPanel);
        this.StatusPanel.Controls.Add(this.VersionLabel);
        this.StatusPanel.Controls.Add(this.HelpFolderLabel);
        this.StatusPanel.Controls.Add(this.HelpMessageLabel);
        this.StatusPanel.Location = new System.Drawing.Point(0, 718);
        this.StatusPanel.Margin = new System.Windows.Forms.Padding(4);
        this.StatusPanel.Name = "StatusPanel";
        this.StatusPanel.Size = new System.Drawing.Size(1115, 28);
        this.StatusPanel.TabIndex = 27;
        // 
        // ShowToolTipsCheckBox
        // 
        this.ShowToolTipsCheckBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.ShowToolTipsCheckBox.BackColor = System.Drawing.SystemColors.Control;
        this.ShowToolTipsCheckBox.CheckAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ShowToolTipsCheckBox.Checked = true;
        this.ShowToolTipsCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
        this.ShowToolTipsCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ShowToolTipsCheckBox.ForeColor = System.Drawing.Color.Navy;
        this.ShowToolTipsCheckBox.Location = new System.Drawing.Point(1104, 17);
        this.ShowToolTipsCheckBox.Name = "ShowToolTipsCheckBox";
        this.ShowToolTipsCheckBox.Size = new System.Drawing.Size(8, 8);
        this.ShowToolTipsCheckBox.TabIndex = 10000;
        this.ToolTip.SetToolTip(this.ShowToolTipsCheckBox, "Show tooltips");
        this.ShowToolTipsCheckBox.UseVisualStyleBackColor = false;
        this.ShowToolTipsCheckBox.CheckedChanged += new System.EventHandler(this.ShowToolTipsCheckBox_CheckedChanged);
        // 
        // ChapterSortPanel
        // 
        this.ChapterSortPanel.BackColor = System.Drawing.Color.Transparent;
        this.ChapterSortPanel.Controls.Add(this.ChapterSortLabel);
        this.ChapterSortPanel.Controls.Add(this.ChapterSortComboBox);
        this.ChapterSortPanel.Dock = System.Windows.Forms.DockStyle.Left;
        this.ChapterSortPanel.Location = new System.Drawing.Point(220, 0);
        this.ChapterSortPanel.Margin = new System.Windows.Forms.Padding(4);
        this.ChapterSortPanel.Name = "ChapterSortPanel";
        this.ChapterSortPanel.Size = new System.Drawing.Size(133, 26);
        this.ChapterSortPanel.TabIndex = 121;
        // 
        // ChapterSortLabel
        // 
        this.ChapterSortLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.ChapterSortLabel.BackColor = System.Drawing.SystemColors.ControlLight;
        this.ChapterSortLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ChapterSortLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChapterSortLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.ChapterSortLabel.Image = ((System.Drawing.Image)(resources.GetObject("ChapterSortLabel.Image")));
        this.ChapterSortLabel.Location = new System.Drawing.Point(107, 4);
        this.ChapterSortLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ChapterSortLabel.Name = "ChapterSortLabel";
        this.ChapterSortLabel.Size = new System.Drawing.Size(25, 18);
        this.ChapterSortLabel.TabIndex = 119;
        this.ChapterSortLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.ChapterSortLabel, "ترتيب نصاعدي Ascending");
        this.ChapterSortLabel.Click += new System.EventHandler(this.ChapterSortLabel_Click);
        // 
        // ChapterSortComboBox
        // 
        this.ChapterSortComboBox.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ChapterSortComboBox.Dock = System.Windows.Forms.DockStyle.Left;
        this.ChapterSortComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.ChapterSortComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChapterSortComboBox.FormattingEnabled = true;
        this.ChapterSortComboBox.Location = new System.Drawing.Point(0, 0);
        this.ChapterSortComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.ChapterSortComboBox.Name = "ChapterSortComboBox";
        this.ChapterSortComboBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.ChapterSortComboBox.Size = new System.Drawing.Size(132, 25);
        this.ChapterSortComboBox.TabIndex = 118;
        this.ChapterSortComboBox.SelectedIndexChanged += new System.EventHandler(this.ChapterSortComboBox_SelectedIndexChanged);
        // 
        // DrawAdditivePrimesLabel
        // 
        this.DrawAdditivePrimesLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.DrawAdditivePrimesLabel.BackColor = System.Drawing.Color.RoyalBlue;
        this.DrawAdditivePrimesLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DrawAdditivePrimesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DrawAdditivePrimesLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.DrawAdditivePrimesLabel.Location = new System.Drawing.Point(1015, 18);
        this.DrawAdditivePrimesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DrawAdditivePrimesLabel.Name = "DrawAdditivePrimesLabel";
        this.DrawAdditivePrimesLabel.Size = new System.Drawing.Size(19, 5);
        this.DrawAdditivePrimesLabel.TabIndex = 116;
        this.ToolTip.SetToolTip(this.DrawAdditivePrimesLabel, "Draw additive primes");
        this.DrawAdditivePrimesLabel.Click += new System.EventHandler(this.DrawAdditivePrimesLabel_Click);
        this.DrawAdditivePrimesLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // GeneratePrimeDrawingsLabel
        // 
        this.GeneratePrimeDrawingsLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.GeneratePrimeDrawingsLabel.BackColor = System.Drawing.Color.DimGray;
        this.GeneratePrimeDrawingsLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.GeneratePrimeDrawingsLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.GeneratePrimeDrawingsLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.GeneratePrimeDrawingsLabel.Location = new System.Drawing.Point(1061, 18);
        this.GeneratePrimeDrawingsLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.GeneratePrimeDrawingsLabel.Name = "GeneratePrimeDrawingsLabel";
        this.GeneratePrimeDrawingsLabel.Size = new System.Drawing.Size(21, 5);
        this.GeneratePrimeDrawingsLabel.TabIndex = 120;
        this.ToolTip.SetToolTip(this.GeneratePrimeDrawingsLabel, "Generate all prime drawings");
        this.GeneratePrimeDrawingsLabel.Click += new System.EventHandler(this.GeneratePrimeDrawingsLabel_Click);
        this.GeneratePrimeDrawingsLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // DrawPrimesLabel
        // 
        this.DrawPrimesLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.DrawPrimesLabel.BackColor = System.Drawing.Color.LightSteelBlue;
        this.DrawPrimesLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DrawPrimesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DrawPrimesLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.DrawPrimesLabel.Location = new System.Drawing.Point(992, 18);
        this.DrawPrimesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DrawPrimesLabel.Name = "DrawPrimesLabel";
        this.DrawPrimesLabel.Size = new System.Drawing.Size(19, 5);
        this.DrawPrimesLabel.TabIndex = 119;
        this.ToolTip.SetToolTip(this.DrawPrimesLabel, "Draw primes");
        this.DrawPrimesLabel.Click += new System.EventHandler(this.DrawPrimesLabel_Click);
        this.DrawPrimesLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // DrawNonAdditivePrimesLabel
        // 
        this.DrawNonAdditivePrimesLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.DrawNonAdditivePrimesLabel.BackColor = System.Drawing.Color.MediumSeaGreen;
        this.DrawNonAdditivePrimesLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DrawNonAdditivePrimesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DrawNonAdditivePrimesLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.DrawNonAdditivePrimesLabel.Location = new System.Drawing.Point(1037, 18);
        this.DrawNonAdditivePrimesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DrawNonAdditivePrimesLabel.Name = "DrawNonAdditivePrimesLabel";
        this.DrawNonAdditivePrimesLabel.Size = new System.Drawing.Size(19, 5);
        this.DrawNonAdditivePrimesLabel.TabIndex = 117;
        this.ToolTip.SetToolTip(this.DrawNonAdditivePrimesLabel, "Draw non-additive primes");
        this.DrawNonAdditivePrimesLabel.Click += new System.EventHandler(this.DrawNonAdditivePrimesLabel_Click);
        this.DrawNonAdditivePrimesLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // DrawingsPanel
        // 
        this.DrawingsPanel.BackColor = System.Drawing.SystemColors.ControlLight;
        this.DrawingsPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
        this.DrawingsPanel.Controls.Add(this.DisplayWordsWithAllahLabel);
        this.DrawingsPanel.Controls.Add(this.DrawWordsWithAllahLabel);
        this.DrawingsPanel.Controls.Add(this.DrawWordAllahLabel);
        this.DrawingsPanel.Controls.Add(this.DrawWordValuesLabel);
        this.DrawingsPanel.Controls.Add(this.DrawLetterValuesLabel);
        this.DrawingsPanel.Controls.Add(this.ChangeDrawingShapeLabel);
        this.DrawingsPanel.Dock = System.Windows.Forms.DockStyle.Right;
        this.DrawingsPanel.Location = new System.Drawing.Point(854, 0);
        this.DrawingsPanel.Margin = new System.Windows.Forms.Padding(4);
        this.DrawingsPanel.Name = "DrawingsPanel";
        this.DrawingsPanel.Size = new System.Drawing.Size(126, 26);
        this.DrawingsPanel.TabIndex = 115;
        // 
        // DisplayWordsWithAllahLabel
        // 
        this.DisplayWordsWithAllahLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DisplayWordsWithAllahLabel.Dock = System.Windows.Forms.DockStyle.Right;
        this.DisplayWordsWithAllahLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DisplayWordsWithAllahLabel.ForeColor = System.Drawing.Color.Crimson;
        this.DisplayWordsWithAllahLabel.Location = new System.Drawing.Point(105, 0);
        this.DisplayWordsWithAllahLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DisplayWordsWithAllahLabel.Name = "DisplayWordsWithAllahLabel";
        this.DisplayWordsWithAllahLabel.Size = new System.Drawing.Size(19, 24);
        this.DisplayWordsWithAllahLabel.TabIndex = 116;
        this.DisplayWordsWithAllahLabel.Text = "?";
        this.DisplayWordsWithAllahLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.DisplayWordsWithAllahLabel, "Display words with Allah");
        this.DisplayWordsWithAllahLabel.Click += new System.EventHandler(this.DisplayWordsWithAllahLabel_Click);
        this.DisplayWordsWithAllahLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // DrawWordsWithAllahLabel
        // 
        this.DrawWordsWithAllahLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DrawWordsWithAllahLabel.Dock = System.Windows.Forms.DockStyle.Left;
        this.DrawWordsWithAllahLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DrawWordsWithAllahLabel.ForeColor = System.Drawing.Color.Crimson;
        this.DrawWordsWithAllahLabel.Location = new System.Drawing.Point(78, 0);
        this.DrawWordsWithAllahLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DrawWordsWithAllahLabel.Name = "DrawWordsWithAllahLabel";
        this.DrawWordsWithAllahLabel.Size = new System.Drawing.Size(25, 24);
        this.DrawWordsWithAllahLabel.TabIndex = 115;
        this.DrawWordsWithAllahLabel.Text = "الله+";
        this.DrawWordsWithAllahLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.DrawWordsWithAllahLabel, "Draw words with Allah");
        this.DrawWordsWithAllahLabel.Click += new System.EventHandler(this.DrawWordsWithAllahLabel_Click);
        this.DrawWordsWithAllahLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // DrawWordAllahLabel
        // 
        this.DrawWordAllahLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DrawWordAllahLabel.Dock = System.Windows.Forms.DockStyle.Left;
        this.DrawWordAllahLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DrawWordAllahLabel.ForeColor = System.Drawing.Color.Crimson;
        this.DrawWordAllahLabel.Location = new System.Drawing.Point(59, 0);
        this.DrawWordAllahLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DrawWordAllahLabel.Name = "DrawWordAllahLabel";
        this.DrawWordAllahLabel.Size = new System.Drawing.Size(19, 24);
        this.DrawWordAllahLabel.TabIndex = 113;
        this.DrawWordAllahLabel.Text = "الله";
        this.DrawWordAllahLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.DrawWordAllahLabel, "Draw Allah words");
        this.DrawWordAllahLabel.Click += new System.EventHandler(this.DrawWordAllahLabel_Click);
        this.DrawWordAllahLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // DrawWordValuesLabel
        // 
        this.DrawWordValuesLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DrawWordValuesLabel.Dock = System.Windows.Forms.DockStyle.Left;
        this.DrawWordValuesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DrawWordValuesLabel.ForeColor = System.Drawing.Color.Crimson;
        this.DrawWordValuesLabel.Location = new System.Drawing.Point(40, 0);
        this.DrawWordValuesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DrawWordValuesLabel.Name = "DrawWordValuesLabel";
        this.DrawWordValuesLabel.Size = new System.Drawing.Size(19, 24);
        this.DrawWordValuesLabel.TabIndex = 109;
        this.DrawWordValuesLabel.Text = "W";
        this.DrawWordValuesLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.DrawWordValuesLabel, "Draw word values");
        this.DrawWordValuesLabel.Click += new System.EventHandler(this.DrawWordValuesLabel_Click);
        this.DrawWordValuesLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // DrawLetterValuesLabel
        // 
        this.DrawLetterValuesLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DrawLetterValuesLabel.Dock = System.Windows.Forms.DockStyle.Left;
        this.DrawLetterValuesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DrawLetterValuesLabel.ForeColor = System.Drawing.Color.Crimson;
        this.DrawLetterValuesLabel.Location = new System.Drawing.Point(25, 0);
        this.DrawLetterValuesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DrawLetterValuesLabel.Name = "DrawLetterValuesLabel";
        this.DrawLetterValuesLabel.Size = new System.Drawing.Size(15, 24);
        this.DrawLetterValuesLabel.TabIndex = 110;
        this.DrawLetterValuesLabel.Text = "L";
        this.DrawLetterValuesLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.DrawLetterValuesLabel, "Draw letter values");
        this.DrawLetterValuesLabel.Click += new System.EventHandler(this.DrawLetterValuesLabel_Click);
        this.DrawLetterValuesLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // ChangeDrawingShapeLabel
        // 
        this.ChangeDrawingShapeLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ChangeDrawingShapeLabel.Dock = System.Windows.Forms.DockStyle.Left;
        this.ChangeDrawingShapeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChangeDrawingShapeLabel.ForeColor = System.Drawing.Color.Red;
        this.ChangeDrawingShapeLabel.Image = ((System.Drawing.Image)(resources.GetObject("ChangeDrawingShapeLabel.Image")));
        this.ChangeDrawingShapeLabel.Location = new System.Drawing.Point(0, 0);
        this.ChangeDrawingShapeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ChangeDrawingShapeLabel.Name = "ChangeDrawingShapeLabel";
        this.ChangeDrawingShapeLabel.Size = new System.Drawing.Size(25, 24);
        this.ChangeDrawingShapeLabel.TabIndex = 108;
        this.ChangeDrawingShapeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.ChangeDrawingShapeLabel, "Change drawing shape");
        this.ChangeDrawingShapeLabel.Click += new System.EventHandler(this.ChangeDrawingShapeLabel_Click);
        this.ChangeDrawingShapeLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // BookmarkPanel
        // 
        this.BookmarkPanel.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.BookmarkPanel.BackColor = System.Drawing.Color.LightSteelBlue;
        this.BookmarkPanel.Controls.Add(this.DeleteBookmarkLabel);
        this.BookmarkPanel.Controls.Add(this.ClearBookmarksLabel);
        this.BookmarkPanel.Controls.Add(this.BookmarkForwardButton);
        this.BookmarkPanel.Controls.Add(this.BookmarkCounterLabel);
        this.BookmarkPanel.Controls.Add(this.BookmarkBackwardButton);
        this.BookmarkPanel.Controls.Add(this.BookmarkTextBox);
        this.BookmarkPanel.Location = new System.Drawing.Point(355, 0);
        this.BookmarkPanel.Margin = new System.Windows.Forms.Padding(4);
        this.BookmarkPanel.Name = "BookmarkPanel";
        this.BookmarkPanel.Size = new System.Drawing.Size(501, 26);
        this.BookmarkPanel.TabIndex = 109;
        // 
        // DeleteBookmarkLabel
        // 
        this.DeleteBookmarkLabel.BackColor = System.Drawing.SystemColors.ControlLight;
        this.DeleteBookmarkLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DeleteBookmarkLabel.Dock = System.Windows.Forms.DockStyle.Right;
        this.DeleteBookmarkLabel.Enabled = false;
        this.DeleteBookmarkLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DeleteBookmarkLabel.ForeColor = System.Drawing.Color.DarkGray;
        this.DeleteBookmarkLabel.Image = ((System.Drawing.Image)(resources.GetObject("DeleteBookmarkLabel.Image")));
        this.DeleteBookmarkLabel.Location = new System.Drawing.Point(469, 0);
        this.DeleteBookmarkLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DeleteBookmarkLabel.Name = "DeleteBookmarkLabel";
        this.DeleteBookmarkLabel.Size = new System.Drawing.Size(24, 26);
        this.DeleteBookmarkLabel.TabIndex = 100;
        this.DeleteBookmarkLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.DeleteBookmarkLabel, "Delete");
        this.DeleteBookmarkLabel.Click += new System.EventHandler(this.DeleteBookmarkLabel_Click);
        this.DeleteBookmarkLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // ClearBookmarksLabel
        // 
        this.ClearBookmarksLabel.BackColor = System.Drawing.Color.LightCoral;
        this.ClearBookmarksLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ClearBookmarksLabel.Dock = System.Windows.Forms.DockStyle.Right;
        this.ClearBookmarksLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ClearBookmarksLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.ClearBookmarksLabel.Location = new System.Drawing.Point(493, 0);
        this.ClearBookmarksLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ClearBookmarksLabel.Name = "ClearBookmarksLabel";
        this.ClearBookmarksLabel.Size = new System.Drawing.Size(8, 26);
        this.ClearBookmarksLabel.TabIndex = 101;
        this.ClearBookmarksLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.ClearBookmarksLabel, "Clear");
        this.ClearBookmarksLabel.Click += new System.EventHandler(this.ClearBookmarksLabel_Click);
        this.ClearBookmarksLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // BookmarkForwardButton
        // 
        this.BookmarkForwardButton.BackColor = System.Drawing.SystemColors.ControlLight;
        this.BookmarkForwardButton.Cursor = System.Windows.Forms.Cursors.Hand;
        this.BookmarkForwardButton.Dock = System.Windows.Forms.DockStyle.Left;
        this.BookmarkForwardButton.Enabled = false;
        this.BookmarkForwardButton.FlatAppearance.BorderSize = 0;
        this.BookmarkForwardButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
        this.BookmarkForwardButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.BookmarkForwardButton.ForeColor = System.Drawing.Color.Transparent;
        this.BookmarkForwardButton.Image = ((System.Drawing.Image)(resources.GetObject("BookmarkForwardButton.Image")));
        this.BookmarkForwardButton.Location = new System.Drawing.Point(111, 0);
        this.BookmarkForwardButton.Margin = new System.Windows.Forms.Padding(4);
        this.BookmarkForwardButton.Name = "BookmarkForwardButton";
        this.BookmarkForwardButton.Size = new System.Drawing.Size(27, 26);
        this.BookmarkForwardButton.TabIndex = 98;
        this.ToolTip.SetToolTip(this.BookmarkForwardButton, "Forward");
        this.BookmarkForwardButton.UseVisualStyleBackColor = false;
        this.BookmarkForwardButton.Click += new System.EventHandler(this.BookmarkForwardButton_Click);
        this.BookmarkForwardButton.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // BookmarkCounterLabel
        // 
        this.BookmarkCounterLabel.BackColor = System.Drawing.SystemColors.ControlLight;
        this.BookmarkCounterLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.BookmarkCounterLabel.Dock = System.Windows.Forms.DockStyle.Left;
        this.BookmarkCounterLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.BookmarkCounterLabel.ForeColor = System.Drawing.Color.MidnightBlue;
        this.BookmarkCounterLabel.Location = new System.Drawing.Point(27, 0);
        this.BookmarkCounterLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.BookmarkCounterLabel.Name = "BookmarkCounterLabel";
        this.BookmarkCounterLabel.Size = new System.Drawing.Size(84, 26);
        this.BookmarkCounterLabel.TabIndex = 97;
        this.BookmarkCounterLabel.Text = "0 / 0";
        this.BookmarkCounterLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.BookmarkCounterLabel, "Bookmarks");
        this.BookmarkCounterLabel.Click += new System.EventHandler(this.BookmarkCounterLabel_Click);
        this.BookmarkCounterLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // BookmarkBackwardButton
        // 
        this.BookmarkBackwardButton.BackColor = System.Drawing.SystemColors.ControlLight;
        this.BookmarkBackwardButton.Cursor = System.Windows.Forms.Cursors.Hand;
        this.BookmarkBackwardButton.Dock = System.Windows.Forms.DockStyle.Left;
        this.BookmarkBackwardButton.Enabled = false;
        this.BookmarkBackwardButton.FlatAppearance.BorderSize = 0;
        this.BookmarkBackwardButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
        this.BookmarkBackwardButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.BookmarkBackwardButton.ForeColor = System.Drawing.Color.Transparent;
        this.BookmarkBackwardButton.Image = ((System.Drawing.Image)(resources.GetObject("BookmarkBackwardButton.Image")));
        this.BookmarkBackwardButton.Location = new System.Drawing.Point(0, 0);
        this.BookmarkBackwardButton.Margin = new System.Windows.Forms.Padding(4);
        this.BookmarkBackwardButton.Name = "BookmarkBackwardButton";
        this.BookmarkBackwardButton.Size = new System.Drawing.Size(27, 26);
        this.BookmarkBackwardButton.TabIndex = 96;
        this.ToolTip.SetToolTip(this.BookmarkBackwardButton, "Back");
        this.BookmarkBackwardButton.UseVisualStyleBackColor = false;
        this.BookmarkBackwardButton.Click += new System.EventHandler(this.BookmarkBackwardButton_Click);
        this.BookmarkBackwardButton.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // BookmarkTextBox
        // 
        this.BookmarkTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.BookmarkTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.BookmarkTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.BookmarkTextBox.ForeColor = System.Drawing.Color.DarkGray;
        this.BookmarkTextBox.Location = new System.Drawing.Point(139, -1);
        this.BookmarkTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.BookmarkTextBox.Name = "BookmarkTextBox";
        this.BookmarkTextBox.Size = new System.Drawing.Size(329, 26);
        this.BookmarkTextBox.TabIndex = 99;
        this.BookmarkTextBox.Text = "write a note";
        this.BookmarkTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.BookmarkTextBox.Enter += new System.EventHandler(this.BookmarkTextBox_Enter);
        this.BookmarkTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.BookmarkTextBox_KeyDown);
        this.BookmarkTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        this.BookmarkTextBox.Leave += new System.EventHandler(this.BookmarkTextBox_Leave);
        // 
        // ResearchPanel
        // 
        this.ResearchPanel.BackColor = System.Drawing.Color.Transparent;
        this.ResearchPanel.Controls.Add(this.ResearchMethodsRunButton);
        this.ResearchPanel.Controls.Add(this.ResearchMethodParameterTextBox);
        this.ResearchPanel.Controls.Add(this.ResearchMethodsComboBox);
        this.ResearchPanel.Controls.Add(this.PrimeNumbersLabel);
        this.ResearchPanel.Dock = System.Windows.Forms.DockStyle.Left;
        this.ResearchPanel.Location = new System.Drawing.Point(0, 0);
        this.ResearchPanel.Margin = new System.Windows.Forms.Padding(4);
        this.ResearchPanel.Name = "ResearchPanel";
        this.ResearchPanel.Size = new System.Drawing.Size(220, 26);
        this.ResearchPanel.TabIndex = 108;
        // 
        // ResearchMethodsRunButton
        // 
        this.ResearchMethodsRunButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.ResearchMethodsRunButton.BackColor = System.Drawing.Color.Gainsboro;
        this.ResearchMethodsRunButton.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ResearchMethodsRunButton.FlatAppearance.BorderSize = 0;
        this.ResearchMethodsRunButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
        this.ResearchMethodsRunButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ResearchMethodsRunButton.ForeColor = System.Drawing.Color.Transparent;
        this.ResearchMethodsRunButton.Image = ((System.Drawing.Image)(resources.GetObject("ResearchMethodsRunButton.Image")));
        this.ResearchMethodsRunButton.Location = new System.Drawing.Point(195, 1);
        this.ResearchMethodsRunButton.Margin = new System.Windows.Forms.Padding(4);
        this.ResearchMethodsRunButton.Name = "ResearchMethodsRunButton";
        this.ResearchMethodsRunButton.Size = new System.Drawing.Size(25, 23);
        this.ResearchMethodsRunButton.TabIndex = 102;
        this.ToolTip.SetToolTip(this.ResearchMethodsRunButton, "Run");
        this.ResearchMethodsRunButton.UseVisualStyleBackColor = false;
        this.ResearchMethodsRunButton.Click += new System.EventHandler(this.ResearchMethodsRunButton_Click);
        this.ResearchMethodsRunButton.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // ResearchMethodParameterTextBox
        // 
        this.ResearchMethodParameterTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.ResearchMethodParameterTextBox.BackColor = System.Drawing.Color.MistyRose;
        this.ResearchMethodParameterTextBox.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
        this.ResearchMethodParameterTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ResearchMethodParameterTextBox.ForeColor = System.Drawing.Color.Black;
        this.ResearchMethodParameterTextBox.Location = new System.Drawing.Point(147, 0);
        this.ResearchMethodParameterTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.ResearchMethodParameterTextBox.Name = "ResearchMethodParameterTextBox";
        this.ResearchMethodParameterTextBox.Size = new System.Drawing.Size(49, 24);
        this.ResearchMethodParameterTextBox.TabIndex = 101;
        this.ResearchMethodParameterTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ToolTip.SetToolTip(this.ResearchMethodParameterTextBox, "Parameter");
        this.ResearchMethodParameterTextBox.Visible = false;
        this.ResearchMethodParameterTextBox.WordWrap = false;
        this.ResearchMethodParameterTextBox.Enter += new System.EventHandler(this.StatusControls_Enter);
        this.ResearchMethodParameterTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.ResearchMethodParameterTextBox_KeyDown);
        this.ResearchMethodParameterTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // ResearchMethodsComboBox
        // 
        this.ResearchMethodsComboBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.ResearchMethodsComboBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.ResearchMethodsComboBox.DropDownHeight = 100;
        this.ResearchMethodsComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.ResearchMethodsComboBox.DropDownWidth = 100;
        this.ResearchMethodsComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ResearchMethodsComboBox.ForeColor = System.Drawing.Color.Crimson;
        this.ResearchMethodsComboBox.FormattingEnabled = true;
        this.ResearchMethodsComboBox.IntegralHeight = false;
        this.ResearchMethodsComboBox.Location = new System.Drawing.Point(0, 0);
        this.ResearchMethodsComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.ResearchMethodsComboBox.MinimumSize = new System.Drawing.Size(140, 0);
        this.ResearchMethodsComboBox.Name = "ResearchMethodsComboBox";
        this.ResearchMethodsComboBox.Size = new System.Drawing.Size(212, 25);
        this.ResearchMethodsComboBox.TabIndex = 100;
        this.ToolTip.SetToolTip(this.ResearchMethodsComboBox, "بحوث إضافية");
        this.ResearchMethodsComboBox.DropDown += new System.EventHandler(this.ResearchMethodsComboBox_DropDown);
        this.ResearchMethodsComboBox.SelectedIndexChanged += new System.EventHandler(this.ResearchMethodsComboBox_SelectedIndexChanged);
        this.ResearchMethodsComboBox.Enter += new System.EventHandler(this.StatusControls_Enter);
        this.ResearchMethodsComboBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.ResearchMethodsComboBox_KeyDown);
        // 
        // PrimeNumbersLabel
        // 
        this.PrimeNumbersLabel.BackColor = System.Drawing.Color.Transparent;
        this.PrimeNumbersLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PrimeNumbersLabel.Dock = System.Windows.Forms.DockStyle.Fill;
        this.PrimeNumbersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PrimeNumbersLabel.ForeColor = System.Drawing.Color.SteelBlue;
        this.PrimeNumbersLabel.Location = new System.Drawing.Point(0, 0);
        this.PrimeNumbersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PrimeNumbersLabel.Name = "PrimeNumbersLabel";
        this.PrimeNumbersLabel.Size = new System.Drawing.Size(220, 26);
        this.PrimeNumbersLabel.TabIndex = 1;
        this.PrimeNumbersLabel.Tag = "http://heliwave.com/";
        this.PrimeNumbersLabel.Text = "Quran and Prime Numbers";
        this.PrimeNumbersLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.PrimeNumbersLabel, "القرءان والأعداد الأولية");
        this.PrimeNumbersLabel.Click += new System.EventHandler(this.LinkLabel_Click);
        // 
        // VersionLabel
        // 
        this.VersionLabel.BackColor = System.Drawing.SystemColors.ControlLight;
        this.VersionLabel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
        this.VersionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.VersionLabel.Dock = System.Windows.Forms.DockStyle.Right;
        this.VersionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.VersionLabel.ForeColor = System.Drawing.Color.SteelBlue;
        this.VersionLabel.Location = new System.Drawing.Point(980, 0);
        this.VersionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.VersionLabel.Name = "VersionLabel";
        this.VersionLabel.Padding = new System.Windows.Forms.Padding(0, 1, 0, 0);
        this.VersionLabel.Size = new System.Drawing.Size(107, 26);
        this.VersionLabel.TabIndex = 111;
        this.VersionLabel.Text = "v6.19.114";
        this.VersionLabel.TextAlign = System.Drawing.ContentAlignment.TopCenter;
        this.ToolTip.SetToolTip(this.VersionLabel, "About");
        this.VersionLabel.Click += new System.EventHandler(this.VersionLabel_Click);
        this.VersionLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // HelpFolderLabel
        // 
        this.HelpFolderLabel.BackColor = System.Drawing.Color.Transparent;
        this.HelpFolderLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.HelpFolderLabel.Dock = System.Windows.Forms.DockStyle.Right;
        this.HelpFolderLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.HelpFolderLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.HelpFolderLabel.Image = ((System.Drawing.Image)(resources.GetObject("HelpFolderLabel.Image")));
        this.HelpFolderLabel.Location = new System.Drawing.Point(1087, 0);
        this.HelpFolderLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.HelpFolderLabel.Name = "HelpFolderLabel";
        this.HelpFolderLabel.Size = new System.Drawing.Size(26, 26);
        this.HelpFolderLabel.TabIndex = 113;
        this.HelpFolderLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.HelpFolderLabel, "Help");
        this.HelpFolderLabel.Click += new System.EventHandler(this.HelpFolderLabel_Click);
        this.HelpFolderLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // HelpMessageLabel
        // 
        this.HelpMessageLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.HelpMessageLabel.BackColor = System.Drawing.Color.Transparent;
        this.HelpMessageLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.HelpMessageLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F);
        this.HelpMessageLabel.ForeColor = System.Drawing.Color.Navy;
        this.HelpMessageLabel.Location = new System.Drawing.Point(353, 0);
        this.HelpMessageLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.HelpMessageLabel.Name = "HelpMessageLabel";
        this.HelpMessageLabel.Size = new System.Drawing.Size(503, 26);
        this.HelpMessageLabel.TabIndex = 86;
        this.HelpMessageLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.HelpMessageLabel.Click += new System.EventHandler(this.HelpMessageLabel_Click);
        this.HelpMessageLabel.Enter += new System.EventHandler(this.StatusControls_Enter);
        // 
        // ChapterSelectionComboBox
        // 
        this.ChapterSelectionComboBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.ChapterSelectionComboBox.BackColor = System.Drawing.SystemColors.Info;
        this.ChapterSelectionComboBox.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ChapterSelectionComboBox.DropDownHeight = 1000;
        this.ChapterSelectionComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.ChapterSelectionComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChapterSelectionComboBox.FormattingEnabled = true;
        this.ChapterSelectionComboBox.IntegralHeight = false;
        this.ChapterSelectionComboBox.ItemHeight = 17;
        this.ChapterSelectionComboBox.Location = new System.Drawing.Point(3, 683);
        this.ChapterSelectionComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.ChapterSelectionComboBox.Name = "ChapterSelectionComboBox";
        this.ChapterSelectionComboBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.ChapterSelectionComboBox.Size = new System.Drawing.Size(132, 25);
        this.ChapterSelectionComboBox.TabIndex = 119;
        this.ChapterSelectionComboBox.SelectedIndexChanged += new System.EventHandler(this.ChapterSelectionComboBox_SelectedIndexChanged);
        // 
        // VerseDiffTextBox
        // 
        this.VerseDiffTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.VerseDiffTextBox.BackColor = System.Drawing.SystemColors.Control;
        this.VerseDiffTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.VerseDiffTextBox.Location = new System.Drawing.Point(978, 17);
        this.VerseDiffTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.VerseDiffTextBox.Name = "VerseDiffTextBox";
        this.VerseDiffTextBox.ReadOnly = true;
        this.VerseDiffTextBox.Size = new System.Drawing.Size(48, 23);
        this.VerseDiffTextBox.TabIndex = 20;
        this.VerseDiffTextBox.Text = "-/+";
        this.VerseDiffTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ToolTip.SetToolTip(this.VerseDiffTextBox, "Verses between mouse clicks");
        this.VerseDiffTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.VerseDiffTextBox.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.VerseDiffTextBox.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // LetterDiffTextBox
        // 
        this.LetterDiffTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.LetterDiffTextBox.BackColor = System.Drawing.SystemColors.Control;
        this.LetterDiffTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.LetterDiffTextBox.Location = new System.Drawing.Point(1085, 17);
        this.LetterDiffTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.LetterDiffTextBox.Name = "LetterDiffTextBox";
        this.LetterDiffTextBox.ReadOnly = true;
        this.LetterDiffTextBox.Size = new System.Drawing.Size(63, 23);
        this.LetterDiffTextBox.TabIndex = 22;
        this.LetterDiffTextBox.Text = "-/+";
        this.LetterDiffTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ToolTip.SetToolTip(this.LetterDiffTextBox, "Letters between mouse clicks");
        this.LetterDiffTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.LetterDiffTextBox.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.LetterDiffTextBox.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // WordDiffTextBox
        // 
        this.WordDiffTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.WordDiffTextBox.BackColor = System.Drawing.SystemColors.Control;
        this.WordDiffTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.WordDiffTextBox.Location = new System.Drawing.Point(1026, 17);
        this.WordDiffTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.WordDiffTextBox.Name = "WordDiffTextBox";
        this.WordDiffTextBox.ReadOnly = true;
        this.WordDiffTextBox.Size = new System.Drawing.Size(56, 23);
        this.WordDiffTextBox.TabIndex = 21;
        this.WordDiffTextBox.Text = "-/+";
        this.WordDiffTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ToolTip.SetToolTip(this.WordDiffTextBox, "Words between mouse clicks");
        this.WordDiffTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.WordDiffTextBox.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.WordDiffTextBox.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // VerseByVerseNumberLabel
        // 
        this.VerseByVerseNumberLabel.BackColor = System.Drawing.SystemColors.Info;
        this.VerseByVerseNumberLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.VerseByVerseNumberLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.VerseByVerseNumberLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.VerseByVerseNumberLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.VerseByVerseNumberLabel.Location = new System.Drawing.Point(9, 1);
        this.VerseByVerseNumberLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.VerseByVerseNumberLabel.Name = "VerseByVerseNumberLabel";
        this.VerseByVerseNumberLabel.Size = new System.Drawing.Size(72, 22);
        this.VerseByVerseNumberLabel.TabIndex = 171;
        this.VerseByVerseNumberLabel.Text = "---.---";
        this.VerseByVerseNumberLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.VerseByVerseNumberLabel.Click += new System.EventHandler(this.VerseFromNumerologyValue_Click);
        this.VerseByVerseNumberLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // VerseByLetterNumberLabel
        // 
        this.VerseByLetterNumberLabel.BackColor = System.Drawing.SystemColors.Info;
        this.VerseByLetterNumberLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.VerseByLetterNumberLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.VerseByLetterNumberLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.VerseByLetterNumberLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.VerseByLetterNumberLabel.Location = new System.Drawing.Point(153, 1);
        this.VerseByLetterNumberLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.VerseByLetterNumberLabel.Name = "VerseByLetterNumberLabel";
        this.VerseByLetterNumberLabel.Size = new System.Drawing.Size(72, 22);
        this.VerseByLetterNumberLabel.TabIndex = 173;
        this.VerseByLetterNumberLabel.Text = "---.---";
        this.VerseByLetterNumberLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.VerseByLetterNumberLabel.Click += new System.EventHandler(this.VerseFromNumerologyValue_Click);
        this.VerseByLetterNumberLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // VerseByWordNumberLabel
        // 
        this.VerseByWordNumberLabel.BackColor = System.Drawing.SystemColors.Info;
        this.VerseByWordNumberLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.VerseByWordNumberLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.VerseByWordNumberLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.VerseByWordNumberLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.VerseByWordNumberLabel.Location = new System.Drawing.Point(81, 1);
        this.VerseByWordNumberLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.VerseByWordNumberLabel.Name = "VerseByWordNumberLabel";
        this.VerseByWordNumberLabel.Size = new System.Drawing.Size(72, 22);
        this.VerseByWordNumberLabel.TabIndex = 172;
        this.VerseByWordNumberLabel.Text = "---.---";
        this.VerseByWordNumberLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.VerseByWordNumberLabel.Click += new System.EventHandler(this.VerseFromNumerologyValue_Click);
        this.VerseByWordNumberLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // UndoValueNavigationLabel
        // 
        this.UndoValueNavigationLabel.BackColor = System.Drawing.Color.Transparent;
        this.UndoValueNavigationLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UndoValueNavigationLabel.ForeColor = System.Drawing.Color.LightGray;
        this.UndoValueNavigationLabel.Location = new System.Drawing.Point(-8, 4);
        this.UndoValueNavigationLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.UndoValueNavigationLabel.Name = "UndoValueNavigationLabel";
        this.UndoValueNavigationLabel.Size = new System.Drawing.Size(17, 22);
        this.UndoValueNavigationLabel.TabIndex = 170;
        this.UndoValueNavigationLabel.Text = "<";
        this.UndoValueNavigationLabel.Click += new System.EventHandler(this.UndoValueNavigationLabel_Click);
        this.UndoValueNavigationLabel.Enter += new System.EventHandler(this.ValueNavigatorControls_Enter);
        // 
        // RedoValueNavigationLabel
        // 
        this.RedoValueNavigationLabel.BackColor = System.Drawing.Color.Transparent;
        this.RedoValueNavigationLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.RedoValueNavigationLabel.ForeColor = System.Drawing.Color.LightGray;
        this.RedoValueNavigationLabel.Location = new System.Drawing.Point(223, 4);
        this.RedoValueNavigationLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.RedoValueNavigationLabel.Name = "RedoValueNavigationLabel";
        this.RedoValueNavigationLabel.Size = new System.Drawing.Size(17, 22);
        this.RedoValueNavigationLabel.TabIndex = 174;
        this.RedoValueNavigationLabel.Text = ">";
        this.RedoValueNavigationLabel.Click += new System.EventHandler(this.RedoValueNavigationLabel_Click);
        this.RedoValueNavigationLabel.Enter += new System.EventHandler(this.ValueNavigatorControls_Enter);
        // 
        // ValueTextBox
        // 
        this.ValueTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.ValueTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.ValueTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ValueTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.ValueTextBox.Location = new System.Drawing.Point(73, 23);
        this.ValueTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.ValueTextBox.Name = "ValueTextBox";
        this.ValueTextBox.Size = new System.Drawing.Size(164, 23);
        this.ValueTextBox.TabIndex = 21;
        this.ValueTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
        this.ValueTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.ValueTextBox.TextChanged += new System.EventHandler(this.ValueTextBox_TextChanged);
        this.ValueTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.ValueTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.ValueTextBox_KeyDown);
        this.ValueTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // FindByTextAtVerseEndRadioButton
        // 
        this.FindByTextAtVerseEndRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAtVerseEndRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAtVerseEndRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAtVerseEndRadioButton.Location = new System.Drawing.Point(4, 58);
        this.FindByTextAtVerseEndRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAtVerseEndRadioButton.Name = "FindByTextAtVerseEndRadioButton";
        this.FindByTextAtVerseEndRadioButton.Size = new System.Drawing.Size(64, 21);
        this.FindByTextAtVerseEndRadioButton.TabIndex = 9;
        this.FindByTextAtVerseEndRadioButton.TabStop = true;
        this.FindByTextAtVerseEndRadioButton.Text = "end";
        this.FindByTextAtVerseEndRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAtVerseEndRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAtVerseEndRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextAtVerseStartRadioButton
        // 
        this.FindByTextAtVerseStartRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAtVerseStartRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAtVerseStartRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAtVerseStartRadioButton.Location = new System.Drawing.Point(4, 18);
        this.FindByTextAtVerseStartRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAtVerseStartRadioButton.Name = "FindByTextAtVerseStartRadioButton";
        this.FindByTextAtVerseStartRadioButton.Size = new System.Drawing.Size(64, 21);
        this.FindByTextAtVerseStartRadioButton.TabIndex = 7;
        this.FindByTextAtVerseStartRadioButton.TabStop = true;
        this.FindByTextAtVerseStartRadioButton.Text = "start";
        this.FindByTextAtVerseStartRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAtVerseStartRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAtVerseStartRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextAtVerseAnyRadioButton
        // 
        this.FindByTextAtVerseAnyRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAtVerseAnyRadioButton.Checked = true;
        this.FindByTextAtVerseAnyRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAtVerseAnyRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAtVerseAnyRadioButton.Location = new System.Drawing.Point(4, 0);
        this.FindByTextAtVerseAnyRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAtVerseAnyRadioButton.Name = "FindByTextAtVerseAnyRadioButton";
        this.FindByTextAtVerseAnyRadioButton.Size = new System.Drawing.Size(64, 22);
        this.FindByTextAtVerseAnyRadioButton.TabIndex = 6;
        this.FindByTextAtVerseAnyRadioButton.TabStop = true;
        this.FindByTextAtVerseAnyRadioButton.Text = "any";
        this.FindByTextAtVerseAnyRadioButton.UseCompatibleTextRendering = true;
        this.FindByTextAtVerseAnyRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAtVerseAnyRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAtVerseAnyRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextAtVerseMiddleRadioButton
        // 
        this.FindByTextAtVerseMiddleRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAtVerseMiddleRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAtVerseMiddleRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAtVerseMiddleRadioButton.Location = new System.Drawing.Point(4, 38);
        this.FindByTextAtVerseMiddleRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAtVerseMiddleRadioButton.Name = "FindByTextAtVerseMiddleRadioButton";
        this.FindByTextAtVerseMiddleRadioButton.Size = new System.Drawing.Size(64, 21);
        this.FindByTextAtVerseMiddleRadioButton.TabIndex = 8;
        this.FindByTextAtVerseMiddleRadioButton.TabStop = true;
        this.FindByTextAtVerseMiddleRadioButton.Text = "mid";
        this.FindByTextAtVerseMiddleRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAtVerseMiddleRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAtVerseMiddleRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextCaseSensitiveCheckBox
        // 
        this.FindByTextCaseSensitiveCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextCaseSensitiveCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextCaseSensitiveCheckBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.FindByTextCaseSensitiveCheckBox.Location = new System.Drawing.Point(4, 289);
        this.FindByTextCaseSensitiveCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextCaseSensitiveCheckBox.Name = "FindByTextCaseSensitiveCheckBox";
        this.FindByTextCaseSensitiveCheckBox.Size = new System.Drawing.Size(112, 21);
        this.FindByTextCaseSensitiveCheckBox.TabIndex = 16;
        this.FindByTextCaseSensitiveCheckBox.Text = "case aware";
        this.ToolTip.SetToolTip(this.FindByTextCaseSensitiveCheckBox, "case sensitive (English)");
        this.FindByTextCaseSensitiveCheckBox.UseVisualStyleBackColor = false;
        this.FindByTextCaseSensitiveCheckBox.CheckedChanged += new System.EventHandler(this.FindByTextCaseSensitiveCheckBox_CheckedChanged);
        this.FindByTextCaseSensitiveCheckBox.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextWordnessCheckBox
        // 
        this.FindByTextWordnessCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextWordnessCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextWordnessCheckBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.FindByTextWordnessCheckBox.Location = new System.Drawing.Point(4, 270);
        this.FindByTextWordnessCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextWordnessCheckBox.Name = "FindByTextWordnessCheckBox";
        this.FindByTextWordnessCheckBox.Size = new System.Drawing.Size(112, 21);
        this.FindByTextWordnessCheckBox.TabIndex = 15;
        this.FindByTextWordnessCheckBox.Text = "whole word";
        this.FindByTextWordnessCheckBox.ThreeState = true;
        this.FindByTextWordnessCheckBox.UseVisualStyleBackColor = false;
        this.FindByTextWordnessCheckBox.CheckStateChanged += new System.EventHandler(this.FindByTextWordnessCheckBox_CheckStateChanged);
        this.FindByTextWordnessCheckBox.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // SearchScopeBookLabel
        // 
        this.SearchScopeBookLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.SearchScopeBookLabel.BackColor = System.Drawing.Color.DarkGray;
        this.SearchScopeBookLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.SearchScopeBookLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.SearchScopeBookLabel.ForeColor = System.Drawing.Color.White;
        this.SearchScopeBookLabel.Location = new System.Drawing.Point(5, 18);
        this.SearchScopeBookLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.SearchScopeBookLabel.Name = "SearchScopeBookLabel";
        this.SearchScopeBookLabel.Size = new System.Drawing.Size(56, 25);
        this.SearchScopeBookLabel.TabIndex = 23;
        this.SearchScopeBookLabel.Text = "Book";
        this.SearchScopeBookLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.SearchScopeBookLabel, "Entire Book");
        this.SearchScopeBookLabel.Click += new System.EventHandler(this.SearchScopeBookLabel_Click);
        // 
        // FindByFrequencySearchTypeDuplicateLettersLabel
        // 
        this.FindByFrequencySearchTypeDuplicateLettersLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByFrequencySearchTypeDuplicateLettersLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByFrequencySearchTypeDuplicateLettersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencySearchTypeDuplicateLettersLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByFrequencySearchTypeDuplicateLettersLabel.Location = new System.Drawing.Point(3, 44);
        this.FindByFrequencySearchTypeDuplicateLettersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByFrequencySearchTypeDuplicateLettersLabel.Name = "FindByFrequencySearchTypeDuplicateLettersLabel";
        this.FindByFrequencySearchTypeDuplicateLettersLabel.Size = new System.Drawing.Size(101, 17);
        this.FindByFrequencySearchTypeDuplicateLettersLabel.TabIndex = 5;
        this.FindByFrequencySearchTypeDuplicateLettersLabel.Text = "DUPLICATES";
        this.FindByFrequencySearchTypeDuplicateLettersLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByFrequencySearchTypeDuplicateLettersLabel.Click += new System.EventHandler(this.FindByFrequencySearchTypeDuplicateLettersLabel_Click);
        this.FindByFrequencySearchTypeDuplicateLettersLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // NoorsoftLinkLabel
        // 
        this.NoorsoftLinkLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.NoorsoftLinkLabel.BackColor = System.Drawing.Color.Pink;
        this.NoorsoftLinkLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.NoorsoftLinkLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.NoorsoftLinkLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.NoorsoftLinkLabel.Location = new System.Drawing.Point(192, 22);
        this.NoorsoftLinkLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.NoorsoftLinkLabel.Name = "NoorsoftLinkLabel";
        this.NoorsoftLinkLabel.Size = new System.Drawing.Size(7, 5);
        this.NoorsoftLinkLabel.TabIndex = 0;
        this.NoorsoftLinkLabel.Tag = "http://noorsoft.org";
        this.NoorsoftLinkLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.ToolTip.SetToolTip(this.NoorsoftLinkLabel, "©2005 Noorsoft Root List");
        this.NoorsoftLinkLabel.Click += new System.EventHandler(this.LinkLabel_Click);
        this.NoorsoftLinkLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextMultiplicityCheckBox
        // 
        this.FindByTextMultiplicityCheckBox.AutoSize = true;
        this.FindByTextMultiplicityCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextMultiplicityCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextMultiplicityCheckBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.FindByTextMultiplicityCheckBox.Location = new System.Drawing.Point(4, 311);
        this.FindByTextMultiplicityCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextMultiplicityCheckBox.Name = "FindByTextMultiplicityCheckBox";
        this.FindByTextMultiplicityCheckBox.Size = new System.Drawing.Size(65, 21);
        this.FindByTextMultiplicityCheckBox.TabIndex = 17;
        this.FindByTextMultiplicityCheckBox.Text = "count";
        this.ToolTip.SetToolTip(this.FindByTextMultiplicityCheckBox, "number of times repeated in verse");
        this.FindByTextMultiplicityCheckBox.UseVisualStyleBackColor = false;
        this.FindByTextMultiplicityCheckBox.CheckedChanged += new System.EventHandler(this.FindByTextMultiplicityCheckBox_CheckedChanged);
        this.FindByTextMultiplicityCheckBox.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // BrowseHistoryDeleteLabel
        // 
        this.BrowseHistoryDeleteLabel.BackColor = System.Drawing.SystemColors.ControlLight;
        this.BrowseHistoryDeleteLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.BrowseHistoryDeleteLabel.Enabled = false;
        this.BrowseHistoryDeleteLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.BrowseHistoryDeleteLabel.ForeColor = System.Drawing.Color.DarkGray;
        this.BrowseHistoryDeleteLabel.Image = ((System.Drawing.Image)(resources.GetObject("BrowseHistoryDeleteLabel.Image")));
        this.BrowseHistoryDeleteLabel.Location = new System.Drawing.Point(175, 17);
        this.BrowseHistoryDeleteLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.BrowseHistoryDeleteLabel.Name = "BrowseHistoryDeleteLabel";
        this.BrowseHistoryDeleteLabel.Size = new System.Drawing.Size(24, 23);
        this.BrowseHistoryDeleteLabel.TabIndex = 4;
        this.BrowseHistoryDeleteLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.BrowseHistoryDeleteLabel, "Delete");
        this.BrowseHistoryDeleteLabel.Click += new System.EventHandler(this.BrowseHistoryDeleteLabel_Click);
        // 
        // FindByFrequencySumLabel
        // 
        this.FindByFrequencySumLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByFrequencySumLabel.Cursor = System.Windows.Forms.Cursors.Default;
        this.FindByFrequencySumLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencySumLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.FindByFrequencySumLabel.Location = new System.Drawing.Point(3, 44);
        this.FindByFrequencySumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByFrequencySumLabel.Name = "FindByFrequencySumLabel";
        this.FindByFrequencySumLabel.Padding = new System.Windows.Forms.Padding(0, 4, 0, 0);
        this.FindByFrequencySumLabel.Size = new System.Drawing.Size(231, 26);
        this.FindByFrequencySumLabel.TabIndex = 0;
        this.FindByFrequencySumLabel.Text = "Sum";
        this.FindByFrequencySumLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // FindByTextAllWordsRadioButton
        // 
        this.FindByTextAllWordsRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAllWordsRadioButton.Enabled = false;
        this.FindByTextAllWordsRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAllWordsRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAllWordsRadioButton.Location = new System.Drawing.Point(108, 268);
        this.FindByTextAllWordsRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAllWordsRadioButton.Name = "FindByTextAllWordsRadioButton";
        this.FindByTextAllWordsRadioButton.Size = new System.Drawing.Size(107, 21);
        this.FindByTextAllWordsRadioButton.TabIndex = 19;
        this.FindByTextAllWordsRadioButton.TabStop = true;
        this.FindByTextAllWordsRadioButton.Text = "all  words";
        this.FindByTextAllWordsRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAllWordsRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAllWordsRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextAnyWordRadioButton
        // 
        this.FindByTextAnyWordRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAnyWordRadioButton.Enabled = false;
        this.FindByTextAnyWordRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAnyWordRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAnyWordRadioButton.Location = new System.Drawing.Point(108, 287);
        this.FindByTextAnyWordRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAnyWordRadioButton.Name = "FindByTextAnyWordRadioButton";
        this.FindByTextAnyWordRadioButton.Size = new System.Drawing.Size(107, 21);
        this.FindByTextAnyWordRadioButton.TabIndex = 20;
        this.FindByTextAnyWordRadioButton.TabStop = true;
        this.FindByTextAnyWordRadioButton.Text = "any word";
        this.FindByTextAnyWordRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAnyWordRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAnyWordRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // BrowseHistoryCounterLabel
        // 
        this.BrowseHistoryCounterLabel.BackColor = System.Drawing.SystemColors.ControlLight;
        this.BrowseHistoryCounterLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.BrowseHistoryCounterLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.BrowseHistoryCounterLabel.ForeColor = System.Drawing.Color.MidnightBlue;
        this.BrowseHistoryCounterLabel.Location = new System.Drawing.Point(47, 17);
        this.BrowseHistoryCounterLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.BrowseHistoryCounterLabel.Name = "BrowseHistoryCounterLabel";
        this.BrowseHistoryCounterLabel.Size = new System.Drawing.Size(89, 23);
        this.BrowseHistoryCounterLabel.TabIndex = 2;
        this.BrowseHistoryCounterLabel.Text = "0";
        this.BrowseHistoryCounterLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.BrowseHistoryCounterLabel, "History");
        this.BrowseHistoryCounterLabel.Click += new System.EventHandler(this.BrowseHistoryCounterLabel_Click);
        // 
        // BrowseGroupBox
        // 
        this.BrowseGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.BrowseGroupBox.BackColor = System.Drawing.SystemColors.WindowText;
        this.BrowseGroupBox.Controls.Add(this.ChineseLanguageLabel);
        this.BrowseGroupBox.Controls.Add(this.ArabicLanguageLabel);
        this.BrowseGroupBox.Controls.Add(this.RussianLanguageLabel);
        this.BrowseGroupBox.Controls.Add(this.EnglishLanguageLabel);
        this.BrowseGroupBox.Controls.Add(this.BrowseHistoryClearLabel);
        this.BrowseGroupBox.Controls.Add(this.BrowseHistoryForwardButton);
        this.BrowseGroupBox.Controls.Add(this.BrowseHistoryBackwardButton);
        this.BrowseGroupBox.Controls.Add(this.BrowseHistoryCounterLabel);
        this.BrowseGroupBox.Controls.Add(this.BrowseHistoryDeleteLabel);
        this.BrowseGroupBox.Controls.Add(this.LanguageComboBox);
        this.BrowseGroupBox.Cursor = System.Windows.Forms.Cursors.Hand;
        this.BrowseGroupBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.BrowseGroupBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.BrowseGroupBox.Location = new System.Drawing.Point(0, 0);
        this.BrowseGroupBox.Margin = new System.Windows.Forms.Padding(4);
        this.BrowseGroupBox.Name = "BrowseGroupBox";
        this.BrowseGroupBox.Padding = new System.Windows.Forms.Padding(4);
        this.BrowseGroupBox.Size = new System.Drawing.Size(212, 47);
        this.BrowseGroupBox.TabIndex = 89;
        this.BrowseGroupBox.TabStop = false;
        this.BrowseGroupBox.Text = "Book = Key + Message    ";
        this.ToolTip.SetToolTip(this.BrowseGroupBox, "Book              = Key + Message\r\n114 chapters =    1   +      113\r\n6236 verses " +
    "  =    7   +    6229");
        // 
        // ChineseLanguageLabel
        // 
        this.ChineseLanguageLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.ChineseLanguageLabel.BackColor = System.Drawing.Color.Transparent;
        this.ChineseLanguageLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ChineseLanguageLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChineseLanguageLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.ChineseLanguageLabel.Image = ((System.Drawing.Image)(resources.GetObject("ChineseLanguageLabel.Image")));
        this.ChineseLanguageLabel.Location = new System.Drawing.Point(168, 2);
        this.ChineseLanguageLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ChineseLanguageLabel.Name = "ChineseLanguageLabel";
        this.ChineseLanguageLabel.Size = new System.Drawing.Size(21, 14);
        this.ChineseLanguageLabel.TabIndex = 7;
        this.ChineseLanguageLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.ChineseLanguageLabel, "中文");
        this.ChineseLanguageLabel.Click += new System.EventHandler(this.LanguageLabel_Click);
        // 
        // ArabicLanguageLabel
        // 
        this.ArabicLanguageLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.ArabicLanguageLabel.BackColor = System.Drawing.Color.Transparent;
        this.ArabicLanguageLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ArabicLanguageLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ArabicLanguageLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.ArabicLanguageLabel.Image = ((System.Drawing.Image)(resources.GetObject("ArabicLanguageLabel.Image")));
        this.ArabicLanguageLabel.Location = new System.Drawing.Point(188, 2);
        this.ArabicLanguageLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ArabicLanguageLabel.Name = "ArabicLanguageLabel";
        this.ArabicLanguageLabel.Size = new System.Drawing.Size(21, 14);
        this.ArabicLanguageLabel.TabIndex = 2;
        this.ArabicLanguageLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.ArabicLanguageLabel, "عربي");
        this.ArabicLanguageLabel.Click += new System.EventHandler(this.LanguageLabel_Click);
        // 
        // RussianLanguageLabel
        // 
        this.RussianLanguageLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.RussianLanguageLabel.BackColor = System.Drawing.Color.Transparent;
        this.RussianLanguageLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.RussianLanguageLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.RussianLanguageLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.RussianLanguageLabel.Image = ((System.Drawing.Image)(resources.GetObject("RussianLanguageLabel.Image")));
        this.RussianLanguageLabel.Location = new System.Drawing.Point(149, 2);
        this.RussianLanguageLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.RussianLanguageLabel.Name = "RussianLanguageLabel";
        this.RussianLanguageLabel.Size = new System.Drawing.Size(21, 14);
        this.RussianLanguageLabel.TabIndex = 6;
        this.RussianLanguageLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.RussianLanguageLabel, "Pусский");
        this.RussianLanguageLabel.Click += new System.EventHandler(this.LanguageLabel_Click);
        // 
        // EnglishLanguageLabel
        // 
        this.EnglishLanguageLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.EnglishLanguageLabel.BackColor = System.Drawing.Color.Transparent;
        this.EnglishLanguageLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.EnglishLanguageLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.EnglishLanguageLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.EnglishLanguageLabel.Image = ((System.Drawing.Image)(resources.GetObject("EnglishLanguageLabel.Image")));
        this.EnglishLanguageLabel.Location = new System.Drawing.Point(128, 2);
        this.EnglishLanguageLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.EnglishLanguageLabel.Name = "EnglishLanguageLabel";
        this.EnglishLanguageLabel.Size = new System.Drawing.Size(21, 14);
        this.EnglishLanguageLabel.TabIndex = 1;
        this.EnglishLanguageLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.EnglishLanguageLabel, "English");
        this.EnglishLanguageLabel.Click += new System.EventHandler(this.LanguageLabel_Click);
        // 
        // BrowseHistoryClearLabel
        // 
        this.BrowseHistoryClearLabel.BackColor = System.Drawing.Color.LightCoral;
        this.BrowseHistoryClearLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.BrowseHistoryClearLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.BrowseHistoryClearLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.BrowseHistoryClearLabel.Location = new System.Drawing.Point(199, 17);
        this.BrowseHistoryClearLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.BrowseHistoryClearLabel.Name = "BrowseHistoryClearLabel";
        this.BrowseHistoryClearLabel.Size = new System.Drawing.Size(8, 23);
        this.BrowseHistoryClearLabel.TabIndex = 5;
        this.BrowseHistoryClearLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.BrowseHistoryClearLabel, "Clear");
        this.BrowseHistoryClearLabel.Click += new System.EventHandler(this.BrowseHistoryClearLabel_Click);
        // 
        // BrowseHistoryForwardButton
        // 
        this.BrowseHistoryForwardButton.BackColor = System.Drawing.SystemColors.ControlLight;
        this.BrowseHistoryForwardButton.Cursor = System.Windows.Forms.Cursors.Hand;
        this.BrowseHistoryForwardButton.Enabled = false;
        this.BrowseHistoryForwardButton.FlatAppearance.BorderSize = 0;
        this.BrowseHistoryForwardButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
        this.BrowseHistoryForwardButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.BrowseHistoryForwardButton.ForeColor = System.Drawing.Color.Black;
        this.BrowseHistoryForwardButton.Image = ((System.Drawing.Image)(resources.GetObject("BrowseHistoryForwardButton.Image")));
        this.BrowseHistoryForwardButton.Location = new System.Drawing.Point(136, 17);
        this.BrowseHistoryForwardButton.Margin = new System.Windows.Forms.Padding(4);
        this.BrowseHistoryForwardButton.Name = "BrowseHistoryForwardButton";
        this.BrowseHistoryForwardButton.Size = new System.Drawing.Size(39, 23);
        this.BrowseHistoryForwardButton.TabIndex = 3;
        this.BrowseHistoryForwardButton.TabStop = false;
        this.ToolTip.SetToolTip(this.BrowseHistoryForwardButton, "Forward");
        this.BrowseHistoryForwardButton.UseVisualStyleBackColor = false;
        this.BrowseHistoryForwardButton.Click += new System.EventHandler(this.BrowseHistoryForwardButton_Click);
        // 
        // BrowseHistoryBackwardButton
        // 
        this.BrowseHistoryBackwardButton.BackColor = System.Drawing.SystemColors.ControlLight;
        this.BrowseHistoryBackwardButton.Cursor = System.Windows.Forms.Cursors.Hand;
        this.BrowseHistoryBackwardButton.Enabled = false;
        this.BrowseHistoryBackwardButton.FlatAppearance.BorderSize = 0;
        this.BrowseHistoryBackwardButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
        this.BrowseHistoryBackwardButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.BrowseHistoryBackwardButton.ForeColor = System.Drawing.Color.Black;
        this.BrowseHistoryBackwardButton.Image = ((System.Drawing.Image)(resources.GetObject("BrowseHistoryBackwardButton.Image")));
        this.BrowseHistoryBackwardButton.Location = new System.Drawing.Point(8, 17);
        this.BrowseHistoryBackwardButton.Margin = new System.Windows.Forms.Padding(4);
        this.BrowseHistoryBackwardButton.Name = "BrowseHistoryBackwardButton";
        this.BrowseHistoryBackwardButton.Size = new System.Drawing.Size(39, 23);
        this.BrowseHistoryBackwardButton.TabIndex = 1;
        this.BrowseHistoryBackwardButton.TabStop = false;
        this.ToolTip.SetToolTip(this.BrowseHistoryBackwardButton, "Back");
        this.BrowseHistoryBackwardButton.UseVisualStyleBackColor = false;
        this.BrowseHistoryBackwardButton.Click += new System.EventHandler(this.BrowseHistoryBackwardButton_Click);
        // 
        // LanguageComboBox
        // 
        this.LanguageComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.LanguageComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.LanguageComboBox.FormattingEnabled = true;
        this.LanguageComboBox.Location = new System.Drawing.Point(7, -4);
        this.LanguageComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.LanguageComboBox.Name = "LanguageComboBox";
        this.LanguageComboBox.Size = new System.Drawing.Size(117, 23);
        this.LanguageComboBox.TabIndex = 1;
        this.LanguageComboBox.SelectedIndexChanged += new System.EventHandler(this.LanguageComboBox_SelectedIndexChanged);
        // 
        // PrimalogyARLabel
        // 
        this.PrimalogyARLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.PrimalogyARLabel.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192)))), ((int)(((byte)(255)))), ((int)(((byte)(192)))));
        this.PrimalogyARLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PrimalogyARLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PrimalogyARLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.PrimalogyARLabel.Location = new System.Drawing.Point(3, 11);
        this.PrimalogyARLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PrimalogyARLabel.Name = "PrimalogyARLabel";
        this.PrimalogyARLabel.Size = new System.Drawing.Size(5, 10);
        this.PrimalogyARLabel.TabIndex = 155;
        this.PrimalogyARLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.ToolTip.SetToolTip(this.PrimalogyARLabel, "نظام الجُمَّل الوتري  - البرايمولوجي\r\n©علي عبد الرزاق عبد الكريم القره غولي 2008");
        this.PrimalogyARLabel.Click += new System.EventHandler(this.PrimalogyARLabel_Click);
        // 
        // PrimalogyLabel
        // 
        this.PrimalogyLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.PrimalogyLabel.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(128)))), ((int)(((byte)(128)))), ((int)(((byte)(255)))));
        this.PrimalogyLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PrimalogyLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PrimalogyLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.PrimalogyLabel.Location = new System.Drawing.Point(3, 2);
        this.PrimalogyLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PrimalogyLabel.Name = "PrimalogyLabel";
        this.PrimalogyLabel.Size = new System.Drawing.Size(5, 10);
        this.PrimalogyLabel.TabIndex = 154;
        this.PrimalogyLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.ToolTip.SetToolTip(this.PrimalogyLabel, "Primalogy System ©2008 Ali Adams");
        this.PrimalogyLabel.Click += new System.EventHandler(this.PrimalogyLabel_Click);
        // 
        // ToolbarPanel
        // 
        this.ToolbarPanel.BackColor = System.Drawing.SystemColors.ControlText;
        this.ToolbarPanel.Controls.Add(this.ProgressBar);
        this.ToolbarPanel.Dock = System.Windows.Forms.DockStyle.Top;
        this.ToolbarPanel.Location = new System.Drawing.Point(0, 0);
        this.ToolbarPanel.Margin = new System.Windows.Forms.Padding(4);
        this.ToolbarPanel.Name = "ToolbarPanel";
        this.ToolbarPanel.Size = new System.Drawing.Size(1370, 10);
        this.ToolbarPanel.TabIndex = 0;
        // 
        // ProgressBar
        // 
        this.ProgressBar.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ProgressBar.Dock = System.Windows.Forms.DockStyle.Top;
        this.ProgressBar.Location = new System.Drawing.Point(0, 0);
        this.ProgressBar.Margin = new System.Windows.Forms.Padding(4);
        this.ProgressBar.Name = "ProgressBar";
        this.ProgressBar.Size = new System.Drawing.Size(1370, 12);
        this.ProgressBar.Style = System.Windows.Forms.ProgressBarStyle.Continuous;
        this.ProgressBar.TabIndex = 0;
        this.ProgressBar.Value = 83;
        this.ProgressBar.Click += new System.EventHandler(this.ProgressBar_Click);
        this.ProgressBar.MouseMove += new System.Windows.Forms.MouseEventHandler(this.ProgressBar_MouseMove);
        // 
        // MainSplitContainer
        // 
        this.MainSplitContainer.Dock = System.Windows.Forms.DockStyle.Fill;
        this.MainSplitContainer.FixedPanel = System.Windows.Forms.FixedPanel.Panel1;
        this.MainSplitContainer.IsSplitterFixed = true;
        this.MainSplitContainer.Location = new System.Drawing.Point(0, 10);
        this.MainSplitContainer.Margin = new System.Windows.Forms.Padding(4);
        this.MainSplitContainer.Name = "MainSplitContainer";
        // 
        // MainSplitContainer.Panel1
        // 
        this.MainSplitContainer.Panel1.BackColor = System.Drawing.Color.LightSteelBlue;
        this.MainSplitContainer.Panel1.Controls.Add(this.BrowseGroupBox);
        this.MainSplitContainer.Panel1.Controls.Add(this.SearchGroupBox);
        this.MainSplitContainer.Panel1.RightToLeft = System.Windows.Forms.RightToLeft.No;
        // 
        // MainSplitContainer.Panel2
        // 
        this.MainSplitContainer.Panel2.BackColor = System.Drawing.Color.Transparent;
        this.MainSplitContainer.Panel2.Controls.Add(this.ChapterSelectionComboBox);
        this.MainSplitContainer.Panel2.Controls.Add(this.PositionsGroupBox);
        this.MainSplitContainer.Panel2.Controls.Add(this.ChapterGroupBox);
        this.MainSplitContainer.Panel2.Controls.Add(this.ClientSplitContainer);
        this.MainSplitContainer.Panel2.ForeColor = System.Drawing.SystemColors.WindowText;
        this.MainSplitContainer.Panel2.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.MainSplitContainer.Size = new System.Drawing.Size(1370, 735);
        this.MainSplitContainer.SplitterDistance = 212;
        this.MainSplitContainer.SplitterWidth = 5;
        this.MainSplitContainer.TabIndex = 29;
        this.MainSplitContainer.TabStop = false;
        // 
        // SearchGroupBox
        // 
        this.SearchGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)));
        this.SearchGroupBox.Controls.Add(this.FindByNumbersPanel);
        this.SearchGroupBox.Controls.Add(this.SearchScopeResultLabel);
        this.SearchGroupBox.Controls.Add(this.SearchScopeSelectionLabel);
        this.SearchGroupBox.Controls.Add(this.FindBySimilarityPanel);
        this.SearchGroupBox.Controls.Add(this.FindByTextPanel);
        this.SearchGroupBox.Controls.Add(this.SearchScopeBookLabel);
        this.SearchGroupBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.SearchGroupBox.Location = new System.Drawing.Point(0, 47);
        this.SearchGroupBox.Margin = new System.Windows.Forms.Padding(4);
        this.SearchGroupBox.Name = "SearchGroupBox";
        this.SearchGroupBox.Padding = new System.Windows.Forms.Padding(4);
        this.SearchGroupBox.Size = new System.Drawing.Size(215, 806);
        this.SearchGroupBox.TabIndex = 0;
        this.SearchGroupBox.TabStop = false;
        this.SearchGroupBox.Text = "Search in";
        this.SearchGroupBox.Enter += new System.EventHandler(this.SearchGroupBox_Enter);
        this.SearchGroupBox.Leave += new System.EventHandler(this.SearchGroupBox_Leave);
        // 
        // FindByNumbersPanel
        // 
        this.FindByNumbersPanel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersPanel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersValueDigitalRootComparisonOperatorLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersValueDigitalRootNumberTypeLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersValueDigitalRootNumericUpDown);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersValueDigitalRootLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersValueDigitSumComparisonOperatorLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersValueDigitSumNumberTypeLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersValueDigitSumNumericUpDown);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersValueDigitSumLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersButton);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersResultTypeSentencesLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersResultTypeChaptersLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersResultTypeVersesLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersResultTypeWordsLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersResultTypeLettersLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersChaptersComparisonOperatorLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersChaptersNumberTypeLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersChaptersNumericUpDown);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersChaptersLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersNumberComparisonOperatorLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersNumberNumberTypeLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersNumberNumericUpDown);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersNumberLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersUniqueLettersNumberTypeLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersUniqueLettersComparisonOperatorLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersVersesComparisonOperatorLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersValueComparisonOperatorLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersUniqueLettersNumericUpDown);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersLettersComparisonOperatorLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersWordsComparisonOperatorLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersVersesNumberTypeLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersVersesNumericUpDown);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersValueNumberTypeLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersLettersNumberTypeLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersWordsNumberTypeLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersValueNumericUpDown);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersLettersNumericUpDown);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersWordsNumericUpDown);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersUniqueLettersLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersVersesLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersValueLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersLettersLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersWordsLabel);
        this.FindByNumbersPanel.Controls.Add(this.FindByNumbersLabel);
        this.FindByNumbersPanel.Location = new System.Drawing.Point(4, 402);
        this.FindByNumbersPanel.Margin = new System.Windows.Forms.Padding(4);
        this.FindByNumbersPanel.Name = "FindByNumbersPanel";
        this.FindByNumbersPanel.Size = new System.Drawing.Size(207, 260);
        this.FindByNumbersPanel.TabIndex = 169;
        this.FindByNumbersPanel.TabStop = true;
        // 
        // FindByNumbersValueDigitalRootComparisonOperatorLabel
        // 
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.Location = new System.Drawing.Point(68, 231);
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.Name = "FindByNumbersValueDigitalRootComparisonOperatorLabel";
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.Size = new System.Drawing.Size(24, 22);
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.TabIndex = 69;
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.Text = "=";
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.FindByNumbersValueDigitalRootComparisonOperatorLabel, "equals to");
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.Click += new System.EventHandler(this.FindByNumbersComparisonOperatorLabel_Click);
        this.FindByNumbersValueDigitalRootComparisonOperatorLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersValueDigitalRootNumberTypeLabel
        // 
        this.FindByNumbersValueDigitalRootNumberTypeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersValueDigitalRootNumberTypeLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersValueDigitalRootNumberTypeLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersValueDigitalRootNumberTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersValueDigitalRootNumberTypeLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersValueDigitalRootNumberTypeLabel.Location = new System.Drawing.Point(165, 231);
        this.FindByNumbersValueDigitalRootNumberTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersValueDigitalRootNumberTypeLabel.Name = "FindByNumbersValueDigitalRootNumberTypeLabel";
        this.FindByNumbersValueDigitalRootNumberTypeLabel.Size = new System.Drawing.Size(32, 22);
        this.FindByNumbersValueDigitalRootNumberTypeLabel.TabIndex = 71;
        this.FindByNumbersValueDigitalRootNumberTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersValueDigitalRootNumberTypeLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersValueDigitalRootNumberTypeLabel.Click += new System.EventHandler(this.FindByNumbersNumberTypeLabel_Click);
        this.FindByNumbersValueDigitalRootNumberTypeLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersValueDigitalRootNumericUpDown
        // 
        this.FindByNumbersValueDigitalRootNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersValueDigitalRootNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersValueDigitalRootNumericUpDown.Location = new System.Drawing.Point(92, 231);
        this.FindByNumbersValueDigitalRootNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.FindByNumbersValueDigitalRootNumericUpDown.Maximum = new decimal(new int[] {
            9,
            0,
            0,
            0});
        this.FindByNumbersValueDigitalRootNumericUpDown.Name = "FindByNumbersValueDigitalRootNumericUpDown";
        this.FindByNumbersValueDigitalRootNumericUpDown.Size = new System.Drawing.Size(75, 23);
        this.FindByNumbersValueDigitalRootNumericUpDown.TabIndex = 70;
        this.FindByNumbersValueDigitalRootNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.FindByNumbersValueDigitalRootNumericUpDown.ValueChanged += new System.EventHandler(this.FindByNumbersNumericUpDown_ValueChanged);
        this.FindByNumbersValueDigitalRootNumericUpDown.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersValueDigitalRootNumericUpDown.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        this.FindByNumbersValueDigitalRootNumericUpDown.Leave += new System.EventHandler(this.FindByNumbersNumericUpDown_Leave);
        // 
        // FindByNumbersValueDigitalRootLabel
        // 
        this.FindByNumbersValueDigitalRootLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByNumbersValueDigitalRootLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersValueDigitalRootLabel.Location = new System.Drawing.Point(-1, 235);
        this.FindByNumbersValueDigitalRootLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersValueDigitalRootLabel.Name = "FindByNumbersValueDigitalRootLabel";
        this.FindByNumbersValueDigitalRootLabel.Size = new System.Drawing.Size(77, 16);
        this.FindByNumbersValueDigitalRootLabel.TabIndex = 64;
        this.FindByNumbersValueDigitalRootLabel.Text = "digital root";
        this.ToolTip.SetToolTip(this.FindByNumbersValueDigitalRootLabel, "value digital root");
        this.FindByNumbersValueDigitalRootLabel.Click += new System.EventHandler(this.FindByNumbersLabel_Click);
        this.FindByNumbersValueDigitalRootLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersValueDigitSumComparisonOperatorLabel
        // 
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.Location = new System.Drawing.Point(68, 208);
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.Name = "FindByNumbersValueDigitSumComparisonOperatorLabel";
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.Size = new System.Drawing.Size(24, 22);
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.TabIndex = 66;
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.Text = "=";
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.FindByNumbersValueDigitSumComparisonOperatorLabel, "equals to");
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.Click += new System.EventHandler(this.FindByNumbersComparisonOperatorLabel_Click);
        this.FindByNumbersValueDigitSumComparisonOperatorLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersValueDigitSumNumberTypeLabel
        // 
        this.FindByNumbersValueDigitSumNumberTypeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersValueDigitSumNumberTypeLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersValueDigitSumNumberTypeLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersValueDigitSumNumberTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersValueDigitSumNumberTypeLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersValueDigitSumNumberTypeLabel.Location = new System.Drawing.Point(165, 208);
        this.FindByNumbersValueDigitSumNumberTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersValueDigitSumNumberTypeLabel.Name = "FindByNumbersValueDigitSumNumberTypeLabel";
        this.FindByNumbersValueDigitSumNumberTypeLabel.Size = new System.Drawing.Size(32, 22);
        this.FindByNumbersValueDigitSumNumberTypeLabel.TabIndex = 68;
        this.FindByNumbersValueDigitSumNumberTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersValueDigitSumNumberTypeLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersValueDigitSumNumberTypeLabel.Click += new System.EventHandler(this.FindByNumbersNumberTypeLabel_Click);
        this.FindByNumbersValueDigitSumNumberTypeLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersValueDigitSumNumericUpDown
        // 
        this.FindByNumbersValueDigitSumNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersValueDigitSumNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersValueDigitSumNumericUpDown.Location = new System.Drawing.Point(92, 208);
        this.FindByNumbersValueDigitSumNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.FindByNumbersValueDigitSumNumericUpDown.Maximum = new decimal(new int[] {
            999,
            0,
            0,
            0});
        this.FindByNumbersValueDigitSumNumericUpDown.Name = "FindByNumbersValueDigitSumNumericUpDown";
        this.FindByNumbersValueDigitSumNumericUpDown.Size = new System.Drawing.Size(75, 23);
        this.FindByNumbersValueDigitSumNumericUpDown.TabIndex = 67;
        this.FindByNumbersValueDigitSumNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.FindByNumbersValueDigitSumNumericUpDown.ValueChanged += new System.EventHandler(this.FindByNumbersNumericUpDown_ValueChanged);
        this.FindByNumbersValueDigitSumNumericUpDown.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersValueDigitSumNumericUpDown.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        this.FindByNumbersValueDigitSumNumericUpDown.Leave += new System.EventHandler(this.FindByNumbersNumericUpDown_Leave);
        // 
        // FindByNumbersValueDigitSumLabel
        // 
        this.FindByNumbersValueDigitSumLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByNumbersValueDigitSumLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersValueDigitSumLabel.Location = new System.Drawing.Point(-1, 212);
        this.FindByNumbersValueDigitSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersValueDigitSumLabel.Name = "FindByNumbersValueDigitSumLabel";
        this.FindByNumbersValueDigitSumLabel.Size = new System.Drawing.Size(77, 16);
        this.FindByNumbersValueDigitSumLabel.TabIndex = 65;
        this.FindByNumbersValueDigitSumLabel.Text = "digit sum";
        this.ToolTip.SetToolTip(this.FindByNumbersValueDigitSumLabel, "value digit sum");
        this.FindByNumbersValueDigitSumLabel.Click += new System.EventHandler(this.FindByNumbersLabel_Click);
        this.FindByNumbersValueDigitSumLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersButton
        // 
        this.FindByNumbersButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersButton.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersButton.Enabled = false;
        this.FindByNumbersButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersButton.ForeColor = System.Drawing.Color.RoyalBlue;
        this.FindByNumbersButton.Location = new System.Drawing.Point(131, 0);
        this.FindByNumbersButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByNumbersButton.Name = "FindByNumbersButton";
        this.FindByNumbersButton.Size = new System.Drawing.Size(69, 25);
        this.FindByNumbersButton.TabIndex = 62;
        this.FindByNumbersButton.Text = "Find";
        this.FindByNumbersButton.UseVisualStyleBackColor = true;
        this.FindByNumbersButton.Click += new System.EventHandler(this.FindByNumbersButton_Click);
        // 
        // FindByNumbersResultTypeSentencesLabel
        // 
        this.FindByNumbersResultTypeSentencesLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByNumbersResultTypeSentencesLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersResultTypeSentencesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersResultTypeSentencesLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersResultTypeSentencesLabel.Location = new System.Drawing.Point(80, 26);
        this.FindByNumbersResultTypeSentencesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersResultTypeSentencesLabel.Name = "FindByNumbersResultTypeSentencesLabel";
        this.FindByNumbersResultTypeSentencesLabel.Size = new System.Drawing.Size(38, 17);
        this.FindByNumbersResultTypeSentencesLabel.TabIndex = 32;
        this.FindByNumbersResultTypeSentencesLabel.Text = "S";
        this.FindByNumbersResultTypeSentencesLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersResultTypeSentencesLabel.Click += new System.EventHandler(this.FindByNumbersResultTypeSentencesLabel_Click);
        this.FindByNumbersResultTypeSentencesLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersResultTypeChaptersLabel
        // 
        this.FindByNumbersResultTypeChaptersLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByNumbersResultTypeChaptersLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersResultTypeChaptersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersResultTypeChaptersLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersResultTypeChaptersLabel.Location = new System.Drawing.Point(158, 26);
        this.FindByNumbersResultTypeChaptersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersResultTypeChaptersLabel.Name = "FindByNumbersResultTypeChaptersLabel";
        this.FindByNumbersResultTypeChaptersLabel.Size = new System.Drawing.Size(38, 17);
        this.FindByNumbersResultTypeChaptersLabel.TabIndex = 34;
        this.FindByNumbersResultTypeChaptersLabel.Text = "C";
        this.FindByNumbersResultTypeChaptersLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersResultTypeChaptersLabel.Click += new System.EventHandler(this.FindByNumbersResultTypeChaptersLabel_Click);
        this.FindByNumbersResultTypeChaptersLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersResultTypeVersesLabel
        // 
        this.FindByNumbersResultTypeVersesLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByNumbersResultTypeVersesLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersResultTypeVersesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersResultTypeVersesLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersResultTypeVersesLabel.Location = new System.Drawing.Point(119, 26);
        this.FindByNumbersResultTypeVersesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersResultTypeVersesLabel.Name = "FindByNumbersResultTypeVersesLabel";
        this.FindByNumbersResultTypeVersesLabel.Size = new System.Drawing.Size(38, 17);
        this.FindByNumbersResultTypeVersesLabel.TabIndex = 33;
        this.FindByNumbersResultTypeVersesLabel.Text = "V";
        this.FindByNumbersResultTypeVersesLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersResultTypeVersesLabel.Click += new System.EventHandler(this.FindByNumbersResultTypeVersesLabel_Click);
        this.FindByNumbersResultTypeVersesLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersResultTypeWordsLabel
        // 
        this.FindByNumbersResultTypeWordsLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByNumbersResultTypeWordsLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersResultTypeWordsLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersResultTypeWordsLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersResultTypeWordsLabel.Location = new System.Drawing.Point(41, 26);
        this.FindByNumbersResultTypeWordsLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersResultTypeWordsLabel.Name = "FindByNumbersResultTypeWordsLabel";
        this.FindByNumbersResultTypeWordsLabel.Size = new System.Drawing.Size(38, 17);
        this.FindByNumbersResultTypeWordsLabel.TabIndex = 31;
        this.FindByNumbersResultTypeWordsLabel.Text = "W";
        this.FindByNumbersResultTypeWordsLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersResultTypeWordsLabel.Click += new System.EventHandler(this.FindByNumbersResultTypeWordsLabel_Click);
        this.FindByNumbersResultTypeWordsLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersResultTypeLettersLabel
        // 
        this.FindByNumbersResultTypeLettersLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByNumbersResultTypeLettersLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersResultTypeLettersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersResultTypeLettersLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersResultTypeLettersLabel.Location = new System.Drawing.Point(2, 26);
        this.FindByNumbersResultTypeLettersLabel.Name = "FindByNumbersResultTypeLettersLabel";
        this.FindByNumbersResultTypeLettersLabel.Size = new System.Drawing.Size(38, 17);
        this.FindByNumbersResultTypeLettersLabel.TabIndex = 30;
        this.FindByNumbersResultTypeLettersLabel.Text = "L";
        this.FindByNumbersResultTypeLettersLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersResultTypeLettersLabel.Click += new System.EventHandler(this.FindByNumbersResultTypeLettersLabel_Click);
        // 
        // FindByNumbersChaptersComparisonOperatorLabel
        // 
        this.FindByNumbersChaptersComparisonOperatorLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersChaptersComparisonOperatorLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByNumbersChaptersComparisonOperatorLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersChaptersComparisonOperatorLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersChaptersComparisonOperatorLabel.Enabled = false;
        this.FindByNumbersChaptersComparisonOperatorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersChaptersComparisonOperatorLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersChaptersComparisonOperatorLabel.Location = new System.Drawing.Point(68, 68);
        this.FindByNumbersChaptersComparisonOperatorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersChaptersComparisonOperatorLabel.Name = "FindByNumbersChaptersComparisonOperatorLabel";
        this.FindByNumbersChaptersComparisonOperatorLabel.Size = new System.Drawing.Size(24, 22);
        this.FindByNumbersChaptersComparisonOperatorLabel.TabIndex = 38;
        this.FindByNumbersChaptersComparisonOperatorLabel.Text = "=";
        this.FindByNumbersChaptersComparisonOperatorLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.FindByNumbersChaptersComparisonOperatorLabel, "equals to");
        this.FindByNumbersChaptersComparisonOperatorLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersChaptersComparisonOperatorLabel.Click += new System.EventHandler(this.FindByNumbersComparisonOperatorLabel_Click);
        this.FindByNumbersChaptersComparisonOperatorLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersChaptersNumberTypeLabel
        // 
        this.FindByNumbersChaptersNumberTypeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersChaptersNumberTypeLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByNumbersChaptersNumberTypeLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersChaptersNumberTypeLabel.Enabled = false;
        this.FindByNumbersChaptersNumberTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersChaptersNumberTypeLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersChaptersNumberTypeLabel.Location = new System.Drawing.Point(165, 68);
        this.FindByNumbersChaptersNumberTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersChaptersNumberTypeLabel.Name = "FindByNumbersChaptersNumberTypeLabel";
        this.FindByNumbersChaptersNumberTypeLabel.Size = new System.Drawing.Size(32, 22);
        this.FindByNumbersChaptersNumberTypeLabel.TabIndex = 40;
        this.FindByNumbersChaptersNumberTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersChaptersNumberTypeLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersChaptersNumberTypeLabel.Click += new System.EventHandler(this.FindByNumbersNumberTypeLabel_Click);
        this.FindByNumbersChaptersNumberTypeLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersChaptersNumericUpDown
        // 
        this.FindByNumbersChaptersNumericUpDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersChaptersNumericUpDown.BackColor = System.Drawing.Color.LightGray;
        this.FindByNumbersChaptersNumericUpDown.Enabled = false;
        this.FindByNumbersChaptersNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersChaptersNumericUpDown.Location = new System.Drawing.Point(92, 68);
        this.FindByNumbersChaptersNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.FindByNumbersChaptersNumericUpDown.Maximum = new decimal(new int[] {
            999,
            0,
            0,
            0});
        this.FindByNumbersChaptersNumericUpDown.Name = "FindByNumbersChaptersNumericUpDown";
        this.FindByNumbersChaptersNumericUpDown.Size = new System.Drawing.Size(75, 23);
        this.FindByNumbersChaptersNumericUpDown.TabIndex = 39;
        this.FindByNumbersChaptersNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.FindByNumbersChaptersNumericUpDown.ValueChanged += new System.EventHandler(this.FindByNumbersNumericUpDown_ValueChanged);
        this.FindByNumbersChaptersNumericUpDown.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersChaptersNumericUpDown.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        this.FindByNumbersChaptersNumericUpDown.Leave += new System.EventHandler(this.FindByNumbersNumericUpDown_Leave);
        // 
        // FindByNumbersChaptersLabel
        // 
        this.FindByNumbersChaptersLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByNumbersChaptersLabel.Enabled = false;
        this.FindByNumbersChaptersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersChaptersLabel.Location = new System.Drawing.Point(1, 71);
        this.FindByNumbersChaptersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersChaptersLabel.Name = "FindByNumbersChaptersLabel";
        this.FindByNumbersChaptersLabel.Size = new System.Drawing.Size(77, 16);
        this.FindByNumbersChaptersLabel.TabIndex = 0;
        this.FindByNumbersChaptersLabel.Text = "chapters";
        this.ToolTip.SetToolTip(this.FindByNumbersChaptersLabel, "number of chapters");
        this.FindByNumbersChaptersLabel.Click += new System.EventHandler(this.FindByNumbersLabel_Click);
        this.FindByNumbersChaptersLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersNumberComparisonOperatorLabel
        // 
        this.FindByNumbersNumberComparisonOperatorLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersNumberComparisonOperatorLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersNumberComparisonOperatorLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersNumberComparisonOperatorLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersNumberComparisonOperatorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersNumberComparisonOperatorLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersNumberComparisonOperatorLabel.Location = new System.Drawing.Point(68, 44);
        this.FindByNumbersNumberComparisonOperatorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersNumberComparisonOperatorLabel.Name = "FindByNumbersNumberComparisonOperatorLabel";
        this.FindByNumbersNumberComparisonOperatorLabel.Size = new System.Drawing.Size(24, 22);
        this.FindByNumbersNumberComparisonOperatorLabel.TabIndex = 35;
        this.FindByNumbersNumberComparisonOperatorLabel.Text = "=";
        this.FindByNumbersNumberComparisonOperatorLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.FindByNumbersNumberComparisonOperatorLabel, "equals to");
        this.FindByNumbersNumberComparisonOperatorLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersNumberComparisonOperatorLabel.Click += new System.EventHandler(this.FindByNumbersComparisonOperatorLabel_Click);
        this.FindByNumbersNumberComparisonOperatorLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersNumberNumberTypeLabel
        // 
        this.FindByNumbersNumberNumberTypeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersNumberNumberTypeLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersNumberNumberTypeLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersNumberNumberTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersNumberNumberTypeLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersNumberNumberTypeLabel.Location = new System.Drawing.Point(165, 44);
        this.FindByNumbersNumberNumberTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersNumberNumberTypeLabel.Name = "FindByNumbersNumberNumberTypeLabel";
        this.FindByNumbersNumberNumberTypeLabel.Size = new System.Drawing.Size(32, 22);
        this.FindByNumbersNumberNumberTypeLabel.TabIndex = 37;
        this.FindByNumbersNumberNumberTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersNumberNumberTypeLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersNumberNumberTypeLabel.Click += new System.EventHandler(this.FindByNumbersNumberTypeLabel_Click);
        this.FindByNumbersNumberNumberTypeLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersNumberNumericUpDown
        // 
        this.FindByNumbersNumberNumericUpDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersNumberNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersNumberNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersNumberNumericUpDown.Location = new System.Drawing.Point(92, 44);
        this.FindByNumbersNumberNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.FindByNumbersNumberNumericUpDown.Maximum = new decimal(new int[] {
            99999,
            0,
            0,
            0});
        this.FindByNumbersNumberNumericUpDown.Minimum = new decimal(new int[] {
            99999,
            0,
            0,
            -2147483648});
        this.FindByNumbersNumberNumericUpDown.Name = "FindByNumbersNumberNumericUpDown";
        this.FindByNumbersNumberNumericUpDown.Size = new System.Drawing.Size(75, 23);
        this.FindByNumbersNumberNumericUpDown.TabIndex = 36;
        this.FindByNumbersNumberNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.FindByNumbersNumberNumericUpDown.ValueChanged += new System.EventHandler(this.FindByNumbersNumericUpDown_ValueChanged);
        this.FindByNumbersNumberNumericUpDown.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersNumberNumericUpDown.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        this.FindByNumbersNumberNumericUpDown.Leave += new System.EventHandler(this.FindByNumbersNumericUpDown_Leave);
        // 
        // FindByNumbersNumberLabel
        // 
        this.FindByNumbersNumberLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByNumbersNumberLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersNumberLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersNumberLabel.Location = new System.Drawing.Point(1, 48);
        this.FindByNumbersNumberLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersNumberLabel.Name = "FindByNumbersNumberLabel";
        this.FindByNumbersNumberLabel.Size = new System.Drawing.Size(77, 16);
        this.FindByNumbersNumberLabel.TabIndex = 0;
        this.FindByNumbersNumberLabel.Text = "number";
        this.ToolTip.SetToolTip(this.FindByNumbersNumberLabel, "number");
        this.FindByNumbersNumberLabel.Click += new System.EventHandler(this.FindByNumbersNumberLabel_Click);
        this.FindByNumbersNumberLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersUniqueLettersNumberTypeLabel
        // 
        this.FindByNumbersUniqueLettersNumberTypeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersUniqueLettersNumberTypeLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersUniqueLettersNumberTypeLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersUniqueLettersNumberTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersUniqueLettersNumberTypeLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersUniqueLettersNumberTypeLabel.Location = new System.Drawing.Point(165, 161);
        this.FindByNumbersUniqueLettersNumberTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersUniqueLettersNumberTypeLabel.Name = "FindByNumbersUniqueLettersNumberTypeLabel";
        this.FindByNumbersUniqueLettersNumberTypeLabel.Size = new System.Drawing.Size(32, 22);
        this.FindByNumbersUniqueLettersNumberTypeLabel.TabIndex = 52;
        this.FindByNumbersUniqueLettersNumberTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersUniqueLettersNumberTypeLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersUniqueLettersNumberTypeLabel.Click += new System.EventHandler(this.FindByNumbersNumberTypeLabel_Click);
        this.FindByNumbersUniqueLettersNumberTypeLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersUniqueLettersComparisonOperatorLabel
        // 
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.Location = new System.Drawing.Point(68, 161);
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.Name = "FindByNumbersUniqueLettersComparisonOperatorLabel";
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.Size = new System.Drawing.Size(24, 22);
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.TabIndex = 50;
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.Text = "=";
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.FindByNumbersUniqueLettersComparisonOperatorLabel, "equals to");
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.Click += new System.EventHandler(this.FindByNumbersComparisonOperatorLabel_Click);
        this.FindByNumbersUniqueLettersComparisonOperatorLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersVersesComparisonOperatorLabel
        // 
        this.FindByNumbersVersesComparisonOperatorLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersVersesComparisonOperatorLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByNumbersVersesComparisonOperatorLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersVersesComparisonOperatorLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersVersesComparisonOperatorLabel.Enabled = false;
        this.FindByNumbersVersesComparisonOperatorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersVersesComparisonOperatorLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersVersesComparisonOperatorLabel.Location = new System.Drawing.Point(68, 91);
        this.FindByNumbersVersesComparisonOperatorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersVersesComparisonOperatorLabel.Name = "FindByNumbersVersesComparisonOperatorLabel";
        this.FindByNumbersVersesComparisonOperatorLabel.Size = new System.Drawing.Size(24, 22);
        this.FindByNumbersVersesComparisonOperatorLabel.TabIndex = 41;
        this.FindByNumbersVersesComparisonOperatorLabel.Text = "=";
        this.FindByNumbersVersesComparisonOperatorLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.FindByNumbersVersesComparisonOperatorLabel, "equals to");
        this.FindByNumbersVersesComparisonOperatorLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersVersesComparisonOperatorLabel.Click += new System.EventHandler(this.FindByNumbersComparisonOperatorLabel_Click);
        this.FindByNumbersVersesComparisonOperatorLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersValueComparisonOperatorLabel
        // 
        this.FindByNumbersValueComparisonOperatorLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersValueComparisonOperatorLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersValueComparisonOperatorLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersValueComparisonOperatorLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersValueComparisonOperatorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersValueComparisonOperatorLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersValueComparisonOperatorLabel.Location = new System.Drawing.Point(68, 185);
        this.FindByNumbersValueComparisonOperatorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersValueComparisonOperatorLabel.Name = "FindByNumbersValueComparisonOperatorLabel";
        this.FindByNumbersValueComparisonOperatorLabel.Size = new System.Drawing.Size(24, 22);
        this.FindByNumbersValueComparisonOperatorLabel.TabIndex = 53;
        this.FindByNumbersValueComparisonOperatorLabel.Text = "=";
        this.FindByNumbersValueComparisonOperatorLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.FindByNumbersValueComparisonOperatorLabel, "equals to");
        this.FindByNumbersValueComparisonOperatorLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersValueComparisonOperatorLabel.Click += new System.EventHandler(this.FindByNumbersComparisonOperatorLabel_Click);
        this.FindByNumbersValueComparisonOperatorLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersUniqueLettersNumericUpDown
        // 
        this.FindByNumbersUniqueLettersNumericUpDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersUniqueLettersNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersUniqueLettersNumericUpDown.Location = new System.Drawing.Point(92, 161);
        this.FindByNumbersUniqueLettersNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.FindByNumbersUniqueLettersNumericUpDown.Maximum = new decimal(new int[] {
            99,
            0,
            0,
            0});
        this.FindByNumbersUniqueLettersNumericUpDown.Name = "FindByNumbersUniqueLettersNumericUpDown";
        this.FindByNumbersUniqueLettersNumericUpDown.Size = new System.Drawing.Size(75, 23);
        this.FindByNumbersUniqueLettersNumericUpDown.TabIndex = 51;
        this.FindByNumbersUniqueLettersNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.FindByNumbersUniqueLettersNumericUpDown.ValueChanged += new System.EventHandler(this.FindByNumbersNumericUpDown_ValueChanged);
        this.FindByNumbersUniqueLettersNumericUpDown.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersUniqueLettersNumericUpDown.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        this.FindByNumbersUniqueLettersNumericUpDown.Leave += new System.EventHandler(this.FindByNumbersNumericUpDown_Leave);
        // 
        // FindByNumbersLettersComparisonOperatorLabel
        // 
        this.FindByNumbersLettersComparisonOperatorLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersLettersComparisonOperatorLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersLettersComparisonOperatorLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersLettersComparisonOperatorLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersLettersComparisonOperatorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersLettersComparisonOperatorLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersLettersComparisonOperatorLabel.Location = new System.Drawing.Point(68, 138);
        this.FindByNumbersLettersComparisonOperatorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersLettersComparisonOperatorLabel.Name = "FindByNumbersLettersComparisonOperatorLabel";
        this.FindByNumbersLettersComparisonOperatorLabel.Size = new System.Drawing.Size(24, 22);
        this.FindByNumbersLettersComparisonOperatorLabel.TabIndex = 47;
        this.FindByNumbersLettersComparisonOperatorLabel.Text = "=";
        this.FindByNumbersLettersComparisonOperatorLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.FindByNumbersLettersComparisonOperatorLabel, "equals to");
        this.FindByNumbersLettersComparisonOperatorLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersLettersComparisonOperatorLabel.Click += new System.EventHandler(this.FindByNumbersComparisonOperatorLabel_Click);
        this.FindByNumbersLettersComparisonOperatorLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersWordsComparisonOperatorLabel
        // 
        this.FindByNumbersWordsComparisonOperatorLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersWordsComparisonOperatorLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersWordsComparisonOperatorLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersWordsComparisonOperatorLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByNumbersWordsComparisonOperatorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersWordsComparisonOperatorLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersWordsComparisonOperatorLabel.Location = new System.Drawing.Point(68, 114);
        this.FindByNumbersWordsComparisonOperatorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersWordsComparisonOperatorLabel.Name = "FindByNumbersWordsComparisonOperatorLabel";
        this.FindByNumbersWordsComparisonOperatorLabel.Size = new System.Drawing.Size(24, 22);
        this.FindByNumbersWordsComparisonOperatorLabel.TabIndex = 44;
        this.FindByNumbersWordsComparisonOperatorLabel.Text = "=";
        this.FindByNumbersWordsComparisonOperatorLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.FindByNumbersWordsComparisonOperatorLabel, "equals to");
        this.FindByNumbersWordsComparisonOperatorLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersWordsComparisonOperatorLabel.Click += new System.EventHandler(this.FindByNumbersComparisonOperatorLabel_Click);
        this.FindByNumbersWordsComparisonOperatorLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersVersesNumberTypeLabel
        // 
        this.FindByNumbersVersesNumberTypeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersVersesNumberTypeLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByNumbersVersesNumberTypeLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersVersesNumberTypeLabel.Enabled = false;
        this.FindByNumbersVersesNumberTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersVersesNumberTypeLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersVersesNumberTypeLabel.Location = new System.Drawing.Point(165, 91);
        this.FindByNumbersVersesNumberTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersVersesNumberTypeLabel.Name = "FindByNumbersVersesNumberTypeLabel";
        this.FindByNumbersVersesNumberTypeLabel.Size = new System.Drawing.Size(32, 22);
        this.FindByNumbersVersesNumberTypeLabel.TabIndex = 43;
        this.FindByNumbersVersesNumberTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersVersesNumberTypeLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersVersesNumberTypeLabel.Click += new System.EventHandler(this.FindByNumbersNumberTypeLabel_Click);
        this.FindByNumbersVersesNumberTypeLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersVersesNumericUpDown
        // 
        this.FindByNumbersVersesNumericUpDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersVersesNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersVersesNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersVersesNumericUpDown.Location = new System.Drawing.Point(92, 91);
        this.FindByNumbersVersesNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.FindByNumbersVersesNumericUpDown.Maximum = new decimal(new int[] {
            9999,
            0,
            0,
            0});
        this.FindByNumbersVersesNumericUpDown.Name = "FindByNumbersVersesNumericUpDown";
        this.FindByNumbersVersesNumericUpDown.Size = new System.Drawing.Size(75, 23);
        this.FindByNumbersVersesNumericUpDown.TabIndex = 42;
        this.FindByNumbersVersesNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.FindByNumbersVersesNumericUpDown.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
        this.FindByNumbersVersesNumericUpDown.ValueChanged += new System.EventHandler(this.FindByNumbersNumericUpDown_ValueChanged);
        this.FindByNumbersVersesNumericUpDown.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersVersesNumericUpDown.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        this.FindByNumbersVersesNumericUpDown.Leave += new System.EventHandler(this.FindByNumbersNumericUpDown_Leave);
        // 
        // FindByNumbersValueNumberTypeLabel
        // 
        this.FindByNumbersValueNumberTypeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersValueNumberTypeLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersValueNumberTypeLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersValueNumberTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersValueNumberTypeLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersValueNumberTypeLabel.Location = new System.Drawing.Point(165, 185);
        this.FindByNumbersValueNumberTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersValueNumberTypeLabel.Name = "FindByNumbersValueNumberTypeLabel";
        this.FindByNumbersValueNumberTypeLabel.Size = new System.Drawing.Size(32, 22);
        this.FindByNumbersValueNumberTypeLabel.TabIndex = 55;
        this.FindByNumbersValueNumberTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersValueNumberTypeLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersValueNumberTypeLabel.Click += new System.EventHandler(this.FindByNumbersNumberTypeLabel_Click);
        this.FindByNumbersValueNumberTypeLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersLettersNumberTypeLabel
        // 
        this.FindByNumbersLettersNumberTypeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersLettersNumberTypeLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersLettersNumberTypeLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersLettersNumberTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersLettersNumberTypeLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersLettersNumberTypeLabel.Location = new System.Drawing.Point(165, 138);
        this.FindByNumbersLettersNumberTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersLettersNumberTypeLabel.Name = "FindByNumbersLettersNumberTypeLabel";
        this.FindByNumbersLettersNumberTypeLabel.Size = new System.Drawing.Size(32, 22);
        this.FindByNumbersLettersNumberTypeLabel.TabIndex = 49;
        this.FindByNumbersLettersNumberTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersLettersNumberTypeLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersLettersNumberTypeLabel.Click += new System.EventHandler(this.FindByNumbersNumberTypeLabel_Click);
        this.FindByNumbersLettersNumberTypeLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersWordsNumberTypeLabel
        // 
        this.FindByNumbersWordsNumberTypeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersWordsNumberTypeLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersWordsNumberTypeLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByNumbersWordsNumberTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersWordsNumberTypeLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByNumbersWordsNumberTypeLabel.Location = new System.Drawing.Point(165, 114);
        this.FindByNumbersWordsNumberTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersWordsNumberTypeLabel.Name = "FindByNumbersWordsNumberTypeLabel";
        this.FindByNumbersWordsNumberTypeLabel.Size = new System.Drawing.Size(32, 22);
        this.FindByNumbersWordsNumberTypeLabel.TabIndex = 46;
        this.FindByNumbersWordsNumberTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByNumbersWordsNumberTypeLabel.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersWordsNumberTypeLabel.Click += new System.EventHandler(this.FindByNumbersNumberTypeLabel_Click);
        this.FindByNumbersWordsNumberTypeLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersValueNumericUpDown
        // 
        this.FindByNumbersValueNumericUpDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersValueNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersValueNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersValueNumericUpDown.Location = new System.Drawing.Point(92, 185);
        this.FindByNumbersValueNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.FindByNumbersValueNumericUpDown.Maximum = new decimal(new int[] {
            999999999,
            0,
            0,
            0});
        this.FindByNumbersValueNumericUpDown.Name = "FindByNumbersValueNumericUpDown";
        this.FindByNumbersValueNumericUpDown.Size = new System.Drawing.Size(75, 23);
        this.FindByNumbersValueNumericUpDown.TabIndex = 54;
        this.FindByNumbersValueNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.FindByNumbersValueNumericUpDown.ValueChanged += new System.EventHandler(this.FindByNumbersNumericUpDown_ValueChanged);
        this.FindByNumbersValueNumericUpDown.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersValueNumericUpDown.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        this.FindByNumbersValueNumericUpDown.Leave += new System.EventHandler(this.FindByNumbersNumericUpDown_Leave);
        // 
        // FindByNumbersLettersNumericUpDown
        // 
        this.FindByNumbersLettersNumericUpDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersLettersNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersLettersNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersLettersNumericUpDown.Location = new System.Drawing.Point(92, 138);
        this.FindByNumbersLettersNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.FindByNumbersLettersNumericUpDown.Maximum = new decimal(new int[] {
            999999,
            0,
            0,
            0});
        this.FindByNumbersLettersNumericUpDown.Name = "FindByNumbersLettersNumericUpDown";
        this.FindByNumbersLettersNumericUpDown.Size = new System.Drawing.Size(75, 23);
        this.FindByNumbersLettersNumericUpDown.TabIndex = 48;
        this.FindByNumbersLettersNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.FindByNumbersLettersNumericUpDown.ValueChanged += new System.EventHandler(this.FindByNumbersNumericUpDown_ValueChanged);
        this.FindByNumbersLettersNumericUpDown.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersLettersNumericUpDown.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        this.FindByNumbersLettersNumericUpDown.Leave += new System.EventHandler(this.FindByNumbersNumericUpDown_Leave);
        // 
        // FindByNumbersWordsNumericUpDown
        // 
        this.FindByNumbersWordsNumericUpDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByNumbersWordsNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.FindByNumbersWordsNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersWordsNumericUpDown.Location = new System.Drawing.Point(92, 114);
        this.FindByNumbersWordsNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.FindByNumbersWordsNumericUpDown.Maximum = new decimal(new int[] {
            99999,
            0,
            0,
            0});
        this.FindByNumbersWordsNumericUpDown.Name = "FindByNumbersWordsNumericUpDown";
        this.FindByNumbersWordsNumericUpDown.Size = new System.Drawing.Size(75, 23);
        this.FindByNumbersWordsNumericUpDown.TabIndex = 45;
        this.FindByNumbersWordsNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.FindByNumbersWordsNumericUpDown.ValueChanged += new System.EventHandler(this.FindByNumbersNumericUpDown_ValueChanged);
        this.FindByNumbersWordsNumericUpDown.EnabledChanged += new System.EventHandler(this.FindByNumbersControl_EnabledChanged);
        this.FindByNumbersWordsNumericUpDown.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        this.FindByNumbersWordsNumericUpDown.Leave += new System.EventHandler(this.FindByNumbersNumericUpDown_Leave);
        // 
        // FindByNumbersUniqueLettersLabel
        // 
        this.FindByNumbersUniqueLettersLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByNumbersUniqueLettersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersUniqueLettersLabel.Location = new System.Drawing.Point(1, 165);
        this.FindByNumbersUniqueLettersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersUniqueLettersLabel.Name = "FindByNumbersUniqueLettersLabel";
        this.FindByNumbersUniqueLettersLabel.Size = new System.Drawing.Size(77, 16);
        this.FindByNumbersUniqueLettersLabel.TabIndex = 0;
        this.FindByNumbersUniqueLettersLabel.Text = "unique";
        this.ToolTip.SetToolTip(this.FindByNumbersUniqueLettersLabel, "number of unique letters");
        this.FindByNumbersUniqueLettersLabel.Click += new System.EventHandler(this.FindByNumbersLabel_Click);
        this.FindByNumbersUniqueLettersLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersVersesLabel
        // 
        this.FindByNumbersVersesLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByNumbersVersesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersVersesLabel.Location = new System.Drawing.Point(1, 95);
        this.FindByNumbersVersesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersVersesLabel.Name = "FindByNumbersVersesLabel";
        this.FindByNumbersVersesLabel.Size = new System.Drawing.Size(77, 16);
        this.FindByNumbersVersesLabel.TabIndex = 0;
        this.FindByNumbersVersesLabel.Text = "verses";
        this.ToolTip.SetToolTip(this.FindByNumbersVersesLabel, "number of verses");
        this.FindByNumbersVersesLabel.Click += new System.EventHandler(this.FindByNumbersLabel_Click);
        this.FindByNumbersVersesLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersValueLabel
        // 
        this.FindByNumbersValueLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByNumbersValueLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersValueLabel.Location = new System.Drawing.Point(1, 188);
        this.FindByNumbersValueLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersValueLabel.Name = "FindByNumbersValueLabel";
        this.FindByNumbersValueLabel.Size = new System.Drawing.Size(77, 16);
        this.FindByNumbersValueLabel.TabIndex = 0;
        this.FindByNumbersValueLabel.Text = "value";
        this.ToolTip.SetToolTip(this.FindByNumbersValueLabel, "value in current valuation system");
        this.FindByNumbersValueLabel.Click += new System.EventHandler(this.FindByNumbersLabel_Click);
        this.FindByNumbersValueLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersLettersLabel
        // 
        this.FindByNumbersLettersLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByNumbersLettersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersLettersLabel.Location = new System.Drawing.Point(1, 143);
        this.FindByNumbersLettersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersLettersLabel.Name = "FindByNumbersLettersLabel";
        this.FindByNumbersLettersLabel.Size = new System.Drawing.Size(77, 16);
        this.FindByNumbersLettersLabel.TabIndex = 0;
        this.FindByNumbersLettersLabel.Text = "letters";
        this.ToolTip.SetToolTip(this.FindByNumbersLettersLabel, "number of letters");
        this.FindByNumbersLettersLabel.Click += new System.EventHandler(this.FindByNumbersLabel_Click);
        this.FindByNumbersLettersLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersWordsLabel
        // 
        this.FindByNumbersWordsLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByNumbersWordsLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersWordsLabel.Location = new System.Drawing.Point(1, 119);
        this.FindByNumbersWordsLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersWordsLabel.Name = "FindByNumbersWordsLabel";
        this.FindByNumbersWordsLabel.Size = new System.Drawing.Size(77, 16);
        this.FindByNumbersWordsLabel.TabIndex = 0;
        this.FindByNumbersWordsLabel.Text = "words";
        this.ToolTip.SetToolTip(this.FindByNumbersWordsLabel, "number of words");
        this.FindByNumbersWordsLabel.Click += new System.EventHandler(this.FindByNumbersLabel_Click);
        this.FindByNumbersWordsLabel.Enter += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // FindByNumbersLabel
        // 
        this.FindByNumbersLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByNumbersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByNumbersLabel.ForeColor = System.Drawing.Color.Navy;
        this.FindByNumbersLabel.Location = new System.Drawing.Point(1, 2);
        this.FindByNumbersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByNumbersLabel.Name = "FindByNumbersLabel";
        this.FindByNumbersLabel.Size = new System.Drawing.Size(200, 16);
        this.FindByNumbersLabel.TabIndex = 0;
        this.FindByNumbersLabel.Text = "by Numbers";
        this.FindByNumbersLabel.Click += new System.EventHandler(this.FindByNumbersControls_Enter);
        // 
        // SearchScopeResultLabel
        // 
        this.SearchScopeResultLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.SearchScopeResultLabel.BackColor = System.Drawing.Color.DarkGray;
        this.SearchScopeResultLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.SearchScopeResultLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.SearchScopeResultLabel.ForeColor = System.Drawing.Color.White;
        this.SearchScopeResultLabel.Location = new System.Drawing.Point(149, 18);
        this.SearchScopeResultLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.SearchScopeResultLabel.Name = "SearchScopeResultLabel";
        this.SearchScopeResultLabel.Size = new System.Drawing.Size(61, 25);
        this.SearchScopeResultLabel.TabIndex = 158;
        this.SearchScopeResultLabel.Text = "Result";
        this.SearchScopeResultLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.SearchScopeResultLabel, "Search Result");
        this.SearchScopeResultLabel.Click += new System.EventHandler(this.SearchScopeResultLabel_Click);
        // 
        // SearchScopeSelectionLabel
        // 
        this.SearchScopeSelectionLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.SearchScopeSelectionLabel.BackColor = System.Drawing.Color.DarkGray;
        this.SearchScopeSelectionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.SearchScopeSelectionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.SearchScopeSelectionLabel.ForeColor = System.Drawing.Color.White;
        this.SearchScopeSelectionLabel.Location = new System.Drawing.Point(63, 18);
        this.SearchScopeSelectionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.SearchScopeSelectionLabel.Name = "SearchScopeSelectionLabel";
        this.SearchScopeSelectionLabel.Size = new System.Drawing.Size(85, 25);
        this.SearchScopeSelectionLabel.TabIndex = 157;
        this.SearchScopeSelectionLabel.Text = "Selection";
        this.SearchScopeSelectionLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.SearchScopeSelectionLabel, "Current Selection");
        this.SearchScopeSelectionLabel.Click += new System.EventHandler(this.SearchScopeSelectionLabel_Click);
        // 
        // FindBySimilarityPanel
        // 
        this.FindBySimilarityPanel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.FindBySimilarityPanel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindBySimilarityPanel.Controls.Add(this.FindBySimilarityAllVersesTypeLabel);
        this.FindBySimilarityPanel.Controls.Add(this.FindBySimilarityPercentageTrackBar);
        this.FindBySimilarityPanel.Controls.Add(this.FindBySimilarityWordsRadioButton);
        this.FindBySimilarityPanel.Controls.Add(this.FindBySimilarityLastHalfRadioButton);
        this.FindBySimilarityPanel.Controls.Add(this.FindBySimilarityLastWordRadioButton);
        this.FindBySimilarityPanel.Controls.Add(this.FindBySimilarityFirstWordRadioButton);
        this.FindBySimilarityPanel.Controls.Add(this.FindBySimilarityButton);
        this.FindBySimilarityPanel.Controls.Add(this.FindBySimilarityFirstHalfRadioButton);
        this.FindBySimilarityPanel.Controls.Add(this.FindBySimilarityCurrentVerseTypeLabel);
        this.FindBySimilarityPanel.Controls.Add(this.FindBySimilarityLabel);
        this.FindBySimilarityPanel.Controls.Add(this.FindBySimilarityTextRadioButton);
        this.FindBySimilarityPanel.Location = new System.Drawing.Point(5, 660);
        this.FindBySimilarityPanel.Margin = new System.Windows.Forms.Padding(4);
        this.FindBySimilarityPanel.Name = "FindBySimilarityPanel";
        this.FindBySimilarityPanel.Size = new System.Drawing.Size(207, 101);
        this.FindBySimilarityPanel.TabIndex = 3;
        this.FindBySimilarityPanel.TabStop = true;
        this.FindBySimilarityPanel.Enter += new System.EventHandler(this.FindBySimilarityControls_Enter);
        // 
        // FindBySimilarityAllVersesTypeLabel
        // 
        this.FindBySimilarityAllVersesTypeLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindBySimilarityAllVersesTypeLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindBySimilarityAllVersesTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindBySimilarityAllVersesTypeLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindBySimilarityAllVersesTypeLabel.Location = new System.Drawing.Point(96, 22);
        this.FindBySimilarityAllVersesTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindBySimilarityAllVersesTypeLabel.Name = "FindBySimilarityAllVersesTypeLabel";
        this.FindBySimilarityAllVersesTypeLabel.Size = new System.Drawing.Size(103, 17);
        this.FindBySimilarityAllVersesTypeLabel.TabIndex = 72;
        this.FindBySimilarityAllVersesTypeLabel.Text = "ALL VERSES";
        this.FindBySimilarityAllVersesTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindBySimilarityAllVersesTypeLabel.Click += new System.EventHandler(this.FindBySimilarityAllVersesTypeLabel_Click);
        this.FindBySimilarityAllVersesTypeLabel.Enter += new System.EventHandler(this.FindBySimilarityControls_Enter);
        // 
        // FindBySimilarityPercentageTrackBar
        // 
        this.FindBySimilarityPercentageTrackBar.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.FindBySimilarityPercentageTrackBar.AutoSize = false;
        this.FindBySimilarityPercentageTrackBar.BackColor = System.Drawing.Color.LightSteelBlue;
        this.FindBySimilarityPercentageTrackBar.LargeChange = 10;
        this.FindBySimilarityPercentageTrackBar.Location = new System.Drawing.Point(183, 37);
        this.FindBySimilarityPercentageTrackBar.Margin = new System.Windows.Forms.Padding(4);
        this.FindBySimilarityPercentageTrackBar.Maximum = 100;
        this.FindBySimilarityPercentageTrackBar.Name = "FindBySimilarityPercentageTrackBar";
        this.FindBySimilarityPercentageTrackBar.Orientation = System.Windows.Forms.Orientation.Vertical;
        this.FindBySimilarityPercentageTrackBar.Size = new System.Drawing.Size(19, 63);
        this.FindBySimilarityPercentageTrackBar.TabIndex = 79;
        this.FindBySimilarityPercentageTrackBar.TickFrequency = 10;
        this.FindBySimilarityPercentageTrackBar.TickStyle = System.Windows.Forms.TickStyle.None;
        this.FindBySimilarityPercentageTrackBar.Value = 73;
        this.FindBySimilarityPercentageTrackBar.Scroll += new System.EventHandler(this.FindBySimilarityPercentageTrackBar_ValueChanged);
        this.FindBySimilarityPercentageTrackBar.ValueChanged += new System.EventHandler(this.FindBySimilarityPercentageTrackBar_ValueChanged);
        this.FindBySimilarityPercentageTrackBar.Enter += new System.EventHandler(this.FindBySimilarityControls_Enter);
        // 
        // FindBySimilarityWordsRadioButton
        // 
        this.FindBySimilarityWordsRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindBySimilarityWordsRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindBySimilarityWordsRadioButton.Location = new System.Drawing.Point(95, 38);
        this.FindBySimilarityWordsRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindBySimilarityWordsRadioButton.Name = "FindBySimilarityWordsRadioButton";
        this.FindBySimilarityWordsRadioButton.Size = new System.Drawing.Size(95, 21);
        this.FindBySimilarityWordsRadioButton.TabIndex = 74;
        this.FindBySimilarityWordsRadioButton.TabStop = true;
        this.FindBySimilarityWordsRadioButton.Text = "words";
        this.FindBySimilarityWordsRadioButton.UseVisualStyleBackColor = false;
        this.FindBySimilarityWordsRadioButton.CheckedChanged += new System.EventHandler(this.FindBySimilarityRadioButton_CheckedChanged);
        this.FindBySimilarityWordsRadioButton.Enter += new System.EventHandler(this.FindBySimilarityControls_Enter);
        // 
        // FindBySimilarityLastHalfRadioButton
        // 
        this.FindBySimilarityLastHalfRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindBySimilarityLastHalfRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindBySimilarityLastHalfRadioButton.Location = new System.Drawing.Point(95, 57);
        this.FindBySimilarityLastHalfRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindBySimilarityLastHalfRadioButton.Name = "FindBySimilarityLastHalfRadioButton";
        this.FindBySimilarityLastHalfRadioButton.Size = new System.Drawing.Size(95, 21);
        this.FindBySimilarityLastHalfRadioButton.TabIndex = 76;
        this.FindBySimilarityLastHalfRadioButton.TabStop = true;
        this.FindBySimilarityLastHalfRadioButton.Text = "last half";
        this.FindBySimilarityLastHalfRadioButton.UseVisualStyleBackColor = false;
        this.FindBySimilarityLastHalfRadioButton.CheckedChanged += new System.EventHandler(this.FindBySimilarityRadioButton_CheckedChanged);
        this.FindBySimilarityLastHalfRadioButton.Enter += new System.EventHandler(this.FindBySimilarityControls_Enter);
        // 
        // FindBySimilarityLastWordRadioButton
        // 
        this.FindBySimilarityLastWordRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindBySimilarityLastWordRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindBySimilarityLastWordRadioButton.Location = new System.Drawing.Point(95, 75);
        this.FindBySimilarityLastWordRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindBySimilarityLastWordRadioButton.Name = "FindBySimilarityLastWordRadioButton";
        this.FindBySimilarityLastWordRadioButton.Size = new System.Drawing.Size(95, 21);
        this.FindBySimilarityLastWordRadioButton.TabIndex = 78;
        this.FindBySimilarityLastWordRadioButton.TabStop = true;
        this.FindBySimilarityLastWordRadioButton.Text = "last word";
        this.FindBySimilarityLastWordRadioButton.UseVisualStyleBackColor = false;
        this.FindBySimilarityLastWordRadioButton.CheckedChanged += new System.EventHandler(this.FindBySimilarityRadioButton_CheckedChanged);
        this.FindBySimilarityLastWordRadioButton.Enter += new System.EventHandler(this.FindBySimilarityControls_Enter);
        // 
        // FindBySimilarityFirstWordRadioButton
        // 
        this.FindBySimilarityFirstWordRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindBySimilarityFirstWordRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindBySimilarityFirstWordRadioButton.Location = new System.Drawing.Point(4, 75);
        this.FindBySimilarityFirstWordRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindBySimilarityFirstWordRadioButton.Name = "FindBySimilarityFirstWordRadioButton";
        this.FindBySimilarityFirstWordRadioButton.Size = new System.Drawing.Size(95, 21);
        this.FindBySimilarityFirstWordRadioButton.TabIndex = 77;
        this.FindBySimilarityFirstWordRadioButton.TabStop = true;
        this.FindBySimilarityFirstWordRadioButton.Text = "first word";
        this.FindBySimilarityFirstWordRadioButton.UseVisualStyleBackColor = false;
        this.FindBySimilarityFirstWordRadioButton.CheckedChanged += new System.EventHandler(this.FindBySimilarityRadioButton_CheckedChanged);
        this.FindBySimilarityFirstWordRadioButton.Enter += new System.EventHandler(this.FindBySimilarityControls_Enter);
        // 
        // FindBySimilarityButton
        // 
        this.FindBySimilarityButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindBySimilarityButton.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindBySimilarityButton.Enabled = false;
        this.FindBySimilarityButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindBySimilarityButton.ForeColor = System.Drawing.Color.RoyalBlue;
        this.FindBySimilarityButton.Location = new System.Drawing.Point(112, 0);
        this.FindBySimilarityButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindBySimilarityButton.Name = "FindBySimilarityButton";
        this.FindBySimilarityButton.Size = new System.Drawing.Size(87, 22);
        this.FindBySimilarityButton.TabIndex = 80;
        this.FindBySimilarityButton.Text = "Find";
        this.FindBySimilarityButton.UseVisualStyleBackColor = true;
        this.FindBySimilarityButton.Click += new System.EventHandler(this.FindBySimilarityButton_Click);
        this.FindBySimilarityButton.Enter += new System.EventHandler(this.FindBySimilarityControls_Enter);
        // 
        // FindBySimilarityFirstHalfRadioButton
        // 
        this.FindBySimilarityFirstHalfRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindBySimilarityFirstHalfRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindBySimilarityFirstHalfRadioButton.Location = new System.Drawing.Point(4, 57);
        this.FindBySimilarityFirstHalfRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindBySimilarityFirstHalfRadioButton.Name = "FindBySimilarityFirstHalfRadioButton";
        this.FindBySimilarityFirstHalfRadioButton.Size = new System.Drawing.Size(95, 21);
        this.FindBySimilarityFirstHalfRadioButton.TabIndex = 75;
        this.FindBySimilarityFirstHalfRadioButton.TabStop = true;
        this.FindBySimilarityFirstHalfRadioButton.Text = "first half";
        this.FindBySimilarityFirstHalfRadioButton.UseVisualStyleBackColor = false;
        this.FindBySimilarityFirstHalfRadioButton.CheckedChanged += new System.EventHandler(this.FindBySimilarityRadioButton_CheckedChanged);
        this.FindBySimilarityFirstHalfRadioButton.Enter += new System.EventHandler(this.FindBySimilarityControls_Enter);
        // 
        // FindBySimilarityCurrentVerseTypeLabel
        // 
        this.FindBySimilarityCurrentVerseTypeLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindBySimilarityCurrentVerseTypeLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindBySimilarityCurrentVerseTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindBySimilarityCurrentVerseTypeLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindBySimilarityCurrentVerseTypeLabel.Location = new System.Drawing.Point(3, 22);
        this.FindBySimilarityCurrentVerseTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindBySimilarityCurrentVerseTypeLabel.Name = "FindBySimilarityCurrentVerseTypeLabel";
        this.FindBySimilarityCurrentVerseTypeLabel.Size = new System.Drawing.Size(92, 17);
        this.FindBySimilarityCurrentVerseTypeLabel.TabIndex = 71;
        this.FindBySimilarityCurrentVerseTypeLabel.Text = "VERSE";
        this.FindBySimilarityCurrentVerseTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindBySimilarityCurrentVerseTypeLabel.Click += new System.EventHandler(this.FindBySimilarityCurrentVerseTypeLabel_Click);
        this.FindBySimilarityCurrentVerseTypeLabel.Enter += new System.EventHandler(this.FindBySimilarityControls_Enter);
        // 
        // FindBySimilarityLabel
        // 
        this.FindBySimilarityLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindBySimilarityLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindBySimilarityLabel.ForeColor = System.Drawing.Color.Navy;
        this.FindBySimilarityLabel.Location = new System.Drawing.Point(1, 2);
        this.FindBySimilarityLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindBySimilarityLabel.Name = "FindBySimilarityLabel";
        this.FindBySimilarityLabel.Size = new System.Drawing.Size(200, 16);
        this.FindBySimilarityLabel.TabIndex = 0;
        this.FindBySimilarityLabel.Text = "by Similarity";
        this.FindBySimilarityLabel.Click += new System.EventHandler(this.FindBySimilarityControls_Enter);
        this.FindBySimilarityLabel.Enter += new System.EventHandler(this.FindBySimilarityControls_Enter);
        // 
        // FindBySimilarityTextRadioButton
        // 
        this.FindBySimilarityTextRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindBySimilarityTextRadioButton.Checked = true;
        this.FindBySimilarityTextRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindBySimilarityTextRadioButton.Location = new System.Drawing.Point(4, 38);
        this.FindBySimilarityTextRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindBySimilarityTextRadioButton.Name = "FindBySimilarityTextRadioButton";
        this.FindBySimilarityTextRadioButton.Size = new System.Drawing.Size(95, 21);
        this.FindBySimilarityTextRadioButton.TabIndex = 73;
        this.FindBySimilarityTextRadioButton.TabStop = true;
        this.FindBySimilarityTextRadioButton.Text = "text";
        this.FindBySimilarityTextRadioButton.UseVisualStyleBackColor = false;
        this.FindBySimilarityTextRadioButton.CheckedChanged += new System.EventHandler(this.FindBySimilarityRadioButton_CheckedChanged);
        this.FindBySimilarityTextRadioButton.Enter += new System.EventHandler(this.FindBySimilarityControls_Enter);
        // 
        // FindByTextPanel
        // 
        this.FindByTextPanel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByTextPanel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByTextPanel.Controls.Add(this.DrawSearchTermsLabel);
        this.FindByTextPanel.Controls.Add(this.NoorsoftLinkLabel);
        this.FindByTextPanel.Controls.Add(this.FindByTextWithDiacriticsCheckBox);
        this.FindByTextPanel.Controls.Add(this.FindByTextSearchBlockSizeBowingLabel);
        this.FindByTextPanel.Controls.Add(this.FindByTextMultiplicityNumberTypeLabel);
        this.FindByTextPanel.Controls.Add(this.FindByTextMultiplicityComparisonOperatorLabel);
        this.FindByTextPanel.Controls.Add(this.FindByTextMultiplicityCheckBox);
        this.FindByTextPanel.Controls.Add(this.FindByTextSearchBlockSizeVerseLabel);
        this.FindByTextPanel.Controls.Add(this.TextLocationLabel);
        this.FindByTextPanel.Controls.Add(this.TextLocationWithinChapterPanel);
        this.FindByTextPanel.Controls.Add(this.FindByTextSearchBlockSizeChapterLabel);
        this.FindByTextPanel.Controls.Add(this.FindByTextButton);
        this.FindByTextPanel.Controls.Add(this.TextLocationInWordPanel);
        this.FindByTextPanel.Controls.Add(this.FindByTextSearchBlockSizeQuarterLabel);
        this.FindByTextPanel.Controls.Add(this.TextLocationWithinVersePanel);
        this.FindByTextPanel.Controls.Add(this.FindByTextAnyWordRadioButton);
        this.FindByTextPanel.Controls.Add(this.FindByTextSearchBlockSizePartLabel);
        this.FindByTextPanel.Controls.Add(this.FindByTextAllWordsRadioButton);
        this.FindByTextPanel.Controls.Add(this.KeyboardPanel);
        this.FindByTextPanel.Controls.Add(this.FindByTextSearchBlockSizeHalfLabel);
        this.FindByTextPanel.Controls.Add(this.FindByTextProximitySearchTypeLabel);
        this.FindByTextPanel.Controls.Add(this.FindByTextSearchBlockSizeGroupLabel);
        this.FindByTextPanel.Controls.Add(this.FindByTextExactSearchTypeLabel);
        this.FindByTextPanel.Controls.Add(this.FindByTextSearchBlockSizePageLabel);
        this.FindByTextPanel.Controls.Add(this.FindByTextSearchBlockSizeStationLabel);
        this.FindByTextPanel.Controls.Add(this.FindByTextRootSearchTypeLabel);
        this.FindByTextPanel.Controls.Add(this.FindByTextWordnessCheckBox);
        this.FindByTextPanel.Controls.Add(this.FindByTextMultiplicityNumericUpDown);
        this.FindByTextPanel.Controls.Add(this.FindByTextCaseSensitiveCheckBox);
        this.FindByTextPanel.Controls.Add(this.FindByTextLabel);
        this.FindByTextPanel.Location = new System.Drawing.Point(5, 44);
        this.FindByTextPanel.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextPanel.Name = "FindByTextPanel";
        this.FindByTextPanel.Size = new System.Drawing.Size(207, 358);
        this.FindByTextPanel.TabIndex = 1;
        this.FindByTextPanel.TabStop = true;
        this.FindByTextPanel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextPanel.Leave += new System.EventHandler(this.FindByTextPanel_Leave);
        // 
        // DrawSearchTermsLabel
        // 
        this.DrawSearchTermsLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DrawSearchTermsLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DrawSearchTermsLabel.ForeColor = System.Drawing.Color.Crimson;
        this.DrawSearchTermsLabel.Image = ((System.Drawing.Image)(resources.GetObject("DrawSearchTermsLabel.Image")));
        this.DrawSearchTermsLabel.Location = new System.Drawing.Point(85, 1);
        this.DrawSearchTermsLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DrawSearchTermsLabel.Name = "DrawSearchTermsLabel";
        this.DrawSearchTermsLabel.Size = new System.Drawing.Size(19, 20);
        this.DrawSearchTermsLabel.TabIndex = 160;
        this.DrawSearchTermsLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.DrawSearchTermsLabel, "Draw search terms");
        this.DrawSearchTermsLabel.Click += new System.EventHandler(this.DrawSearchTermsLabel_Click);
        this.DrawSearchTermsLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextWithDiacriticsCheckBox
        // 
        this.FindByTextWithDiacriticsCheckBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByTextWithDiacriticsCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextWithDiacriticsCheckBox.CheckAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextWithDiacriticsCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextWithDiacriticsCheckBox.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextWithDiacriticsCheckBox.Location = new System.Drawing.Point(105, 1);
        this.FindByTextWithDiacriticsCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextWithDiacriticsCheckBox.Name = "FindByTextWithDiacriticsCheckBox";
        this.FindByTextWithDiacriticsCheckBox.Size = new System.Drawing.Size(20, 21);
        this.FindByTextWithDiacriticsCheckBox.TabIndex = 21;
        this.ToolTip.SetToolTip(this.FindByTextWithDiacriticsCheckBox, "with diacritics  مع الحركات");
        this.FindByTextWithDiacriticsCheckBox.UseVisualStyleBackColor = false;
        this.FindByTextWithDiacriticsCheckBox.CheckedChanged += new System.EventHandler(this.FindByTextWithDiacriticsCheckBox_CheckedChanged);
        this.FindByTextWithDiacriticsCheckBox.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextSearchBlockSizeBowingLabel
        // 
        this.FindByTextSearchBlockSizeBowingLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByTextSearchBlockSizeBowingLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextSearchBlockSizeBowingLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextSearchBlockSizeBowingLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByTextSearchBlockSizeBowingLabel.Location = new System.Drawing.Point(177, 335);
        this.FindByTextSearchBlockSizeBowingLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextSearchBlockSizeBowingLabel.Name = "FindByTextSearchBlockSizeBowingLabel";
        this.FindByTextSearchBlockSizeBowingLabel.Size = new System.Drawing.Size(21, 17);
        this.FindByTextSearchBlockSizeBowingLabel.TabIndex = 29;
        this.FindByTextSearchBlockSizeBowingLabel.Text = "B";
        this.FindByTextSearchBlockSizeBowingLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextSearchBlockSizeBowingLabel.Click += new System.EventHandler(this.FindByTextSearchBlockSizeBowingLabel_Click);
        this.FindByTextSearchBlockSizeBowingLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextMultiplicityNumberTypeLabel
        // 
        this.FindByTextMultiplicityNumberTypeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByTextMultiplicityNumberTypeLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextMultiplicityNumberTypeLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByTextMultiplicityNumberTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextMultiplicityNumberTypeLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextMultiplicityNumberTypeLabel.Location = new System.Drawing.Point(167, 309);
        this.FindByTextMultiplicityNumberTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextMultiplicityNumberTypeLabel.Name = "FindByTextMultiplicityNumberTypeLabel";
        this.FindByTextMultiplicityNumberTypeLabel.Size = new System.Drawing.Size(32, 22);
        this.FindByTextMultiplicityNumberTypeLabel.TabIndex = 20;
        this.FindByTextMultiplicityNumberTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextMultiplicityNumberTypeLabel.EnabledChanged += new System.EventHandler(this.FindByTextControl_EnabledChanged);
        this.FindByTextMultiplicityNumberTypeLabel.Click += new System.EventHandler(this.FindByTextMultiplicityNumberTypeLabel_Click);
        this.FindByTextMultiplicityNumberTypeLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextMultiplicityComparisonOperatorLabel
        // 
        this.FindByTextMultiplicityComparisonOperatorLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByTextMultiplicityComparisonOperatorLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextMultiplicityComparisonOperatorLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByTextMultiplicityComparisonOperatorLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextMultiplicityComparisonOperatorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextMultiplicityComparisonOperatorLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextMultiplicityComparisonOperatorLabel.Location = new System.Drawing.Point(68, 309);
        this.FindByTextMultiplicityComparisonOperatorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextMultiplicityComparisonOperatorLabel.Name = "FindByTextMultiplicityComparisonOperatorLabel";
        this.FindByTextMultiplicityComparisonOperatorLabel.Size = new System.Drawing.Size(24, 22);
        this.FindByTextMultiplicityComparisonOperatorLabel.TabIndex = 18;
        this.FindByTextMultiplicityComparisonOperatorLabel.Text = "=";
        this.FindByTextMultiplicityComparisonOperatorLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.FindByTextMultiplicityComparisonOperatorLabel, "equals to");
        this.FindByTextMultiplicityComparisonOperatorLabel.EnabledChanged += new System.EventHandler(this.FindByTextControl_EnabledChanged);
        this.FindByTextMultiplicityComparisonOperatorLabel.Click += new System.EventHandler(this.FindByTextMultiplicityComparisonOperatorLabel_Click);
        this.FindByTextMultiplicityComparisonOperatorLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextSearchBlockSizeVerseLabel
        // 
        this.FindByTextSearchBlockSizeVerseLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByTextSearchBlockSizeVerseLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextSearchBlockSizeVerseLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextSearchBlockSizeVerseLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByTextSearchBlockSizeVerseLabel.Location = new System.Drawing.Point(4, 335);
        this.FindByTextSearchBlockSizeVerseLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextSearchBlockSizeVerseLabel.Name = "FindByTextSearchBlockSizeVerseLabel";
        this.FindByTextSearchBlockSizeVerseLabel.Size = new System.Drawing.Size(21, 17);
        this.FindByTextSearchBlockSizeVerseLabel.TabIndex = 21;
        this.FindByTextSearchBlockSizeVerseLabel.Text = "V";
        this.FindByTextSearchBlockSizeVerseLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextSearchBlockSizeVerseLabel.Click += new System.EventHandler(this.FindByTextSearchBlockSizeVerseLabel_Click);
        this.FindByTextSearchBlockSizeVerseLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // TextLocationLabel
        // 
        this.TextLocationLabel.BackColor = System.Drawing.Color.Transparent;
        this.TextLocationLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.TextLocationLabel.ForeColor = System.Drawing.Color.Navy;
        this.TextLocationLabel.Location = new System.Drawing.Point(1, 170);
        this.TextLocationLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.TextLocationLabel.Name = "TextLocationLabel";
        this.TextLocationLabel.Size = new System.Drawing.Size(200, 16);
        this.TextLocationLabel.TabIndex = 1;
        this.TextLocationLabel.Text = "chapter      verse        word";
        // 
        // TextLocationWithinChapterPanel
        // 
        this.TextLocationWithinChapterPanel.Controls.Add(this.FindByTextAtChapterStartRadioButton);
        this.TextLocationWithinChapterPanel.Controls.Add(this.FindByTextAtChapterMiddleRadioButton);
        this.TextLocationWithinChapterPanel.Controls.Add(this.FindByTextAtChapterAnyRadioButton);
        this.TextLocationWithinChapterPanel.Controls.Add(this.FindByTextAtChapterEndRadioButton);
        this.TextLocationWithinChapterPanel.Location = new System.Drawing.Point(0, 185);
        this.TextLocationWithinChapterPanel.Margin = new System.Windows.Forms.Padding(4);
        this.TextLocationWithinChapterPanel.Name = "TextLocationWithinChapterPanel";
        this.TextLocationWithinChapterPanel.Size = new System.Drawing.Size(68, 82);
        this.TextLocationWithinChapterPanel.TabIndex = 5;
        this.TextLocationWithinChapterPanel.TabStop = true;
        // 
        // FindByTextAtChapterStartRadioButton
        // 
        this.FindByTextAtChapterStartRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAtChapterStartRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAtChapterStartRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAtChapterStartRadioButton.Location = new System.Drawing.Point(4, 18);
        this.FindByTextAtChapterStartRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAtChapterStartRadioButton.Name = "FindByTextAtChapterStartRadioButton";
        this.FindByTextAtChapterStartRadioButton.Size = new System.Drawing.Size(64, 21);
        this.FindByTextAtChapterStartRadioButton.TabIndex = 2;
        this.FindByTextAtChapterStartRadioButton.TabStop = true;
        this.FindByTextAtChapterStartRadioButton.Text = "start";
        this.FindByTextAtChapterStartRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAtChapterStartRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAtChapterStartRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextAtChapterMiddleRadioButton
        // 
        this.FindByTextAtChapterMiddleRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAtChapterMiddleRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAtChapterMiddleRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAtChapterMiddleRadioButton.Location = new System.Drawing.Point(4, 38);
        this.FindByTextAtChapterMiddleRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAtChapterMiddleRadioButton.Name = "FindByTextAtChapterMiddleRadioButton";
        this.FindByTextAtChapterMiddleRadioButton.Size = new System.Drawing.Size(64, 21);
        this.FindByTextAtChapterMiddleRadioButton.TabIndex = 3;
        this.FindByTextAtChapterMiddleRadioButton.TabStop = true;
        this.FindByTextAtChapterMiddleRadioButton.Text = "mid";
        this.FindByTextAtChapterMiddleRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAtChapterMiddleRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAtChapterMiddleRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextAtChapterAnyRadioButton
        // 
        this.FindByTextAtChapterAnyRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAtChapterAnyRadioButton.Checked = true;
        this.FindByTextAtChapterAnyRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAtChapterAnyRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAtChapterAnyRadioButton.Location = new System.Drawing.Point(4, 0);
        this.FindByTextAtChapterAnyRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAtChapterAnyRadioButton.Name = "FindByTextAtChapterAnyRadioButton";
        this.FindByTextAtChapterAnyRadioButton.Size = new System.Drawing.Size(64, 22);
        this.FindByTextAtChapterAnyRadioButton.TabIndex = 1;
        this.FindByTextAtChapterAnyRadioButton.TabStop = true;
        this.FindByTextAtChapterAnyRadioButton.Text = "any";
        this.FindByTextAtChapterAnyRadioButton.UseCompatibleTextRendering = true;
        this.FindByTextAtChapterAnyRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAtChapterAnyRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAtChapterAnyRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextAtChapterEndRadioButton
        // 
        this.FindByTextAtChapterEndRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAtChapterEndRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAtChapterEndRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAtChapterEndRadioButton.Location = new System.Drawing.Point(4, 58);
        this.FindByTextAtChapterEndRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAtChapterEndRadioButton.Name = "FindByTextAtChapterEndRadioButton";
        this.FindByTextAtChapterEndRadioButton.Size = new System.Drawing.Size(64, 21);
        this.FindByTextAtChapterEndRadioButton.TabIndex = 4;
        this.FindByTextAtChapterEndRadioButton.TabStop = true;
        this.FindByTextAtChapterEndRadioButton.Text = "end";
        this.FindByTextAtChapterEndRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAtChapterEndRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAtChapterEndRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextSearchBlockSizeChapterLabel
        // 
        this.FindByTextSearchBlockSizeChapterLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByTextSearchBlockSizeChapterLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextSearchBlockSizeChapterLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextSearchBlockSizeChapterLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByTextSearchBlockSizeChapterLabel.Location = new System.Drawing.Point(25, 335);
        this.FindByTextSearchBlockSizeChapterLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextSearchBlockSizeChapterLabel.Name = "FindByTextSearchBlockSizeChapterLabel";
        this.FindByTextSearchBlockSizeChapterLabel.Size = new System.Drawing.Size(21, 17);
        this.FindByTextSearchBlockSizeChapterLabel.TabIndex = 22;
        this.FindByTextSearchBlockSizeChapterLabel.Text = "C";
        this.FindByTextSearchBlockSizeChapterLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextSearchBlockSizeChapterLabel.Click += new System.EventHandler(this.FindByTextSearchBlockSizeChapterLabel_Click);
        this.FindByTextSearchBlockSizeChapterLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextButton
        // 
        this.FindByTextButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByTextButton.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextButton.ForeColor = System.Drawing.Color.RoyalBlue;
        this.FindByTextButton.Location = new System.Drawing.Point(131, 0);
        this.FindByTextButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextButton.Name = "FindByTextButton";
        this.FindByTextButton.Size = new System.Drawing.Size(69, 22);
        this.FindByTextButton.TabIndex = 22;
        this.FindByTextButton.Text = "Find";
        this.FindByTextButton.UseVisualStyleBackColor = true;
        this.FindByTextButton.Click += new System.EventHandler(this.FindByTextButton_Click);
        // 
        // TextLocationInWordPanel
        // 
        this.TextLocationInWordPanel.Controls.Add(this.FindByTextAtWordStartRadioButton);
        this.TextLocationInWordPanel.Controls.Add(this.FindByTextAtWordEndRadioButton);
        this.TextLocationInWordPanel.Controls.Add(this.FindByTextAtWordMiddleRadioButton);
        this.TextLocationInWordPanel.Controls.Add(this.FindByTextAtWordAnyRadioButton);
        this.TextLocationInWordPanel.Location = new System.Drawing.Point(137, 185);
        this.TextLocationInWordPanel.Margin = new System.Windows.Forms.Padding(4);
        this.TextLocationInWordPanel.Name = "TextLocationInWordPanel";
        this.TextLocationInWordPanel.Size = new System.Drawing.Size(64, 82);
        this.TextLocationInWordPanel.TabIndex = 15;
        this.TextLocationInWordPanel.TabStop = true;
        // 
        // FindByTextAtWordStartRadioButton
        // 
        this.FindByTextAtWordStartRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAtWordStartRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAtWordStartRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAtWordStartRadioButton.Location = new System.Drawing.Point(3, 18);
        this.FindByTextAtWordStartRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAtWordStartRadioButton.Name = "FindByTextAtWordStartRadioButton";
        this.FindByTextAtWordStartRadioButton.Size = new System.Drawing.Size(69, 21);
        this.FindByTextAtWordStartRadioButton.TabIndex = 12;
        this.FindByTextAtWordStartRadioButton.TabStop = true;
        this.FindByTextAtWordStartRadioButton.Text = "start";
        this.FindByTextAtWordStartRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAtWordStartRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAtWordStartRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextAtWordEndRadioButton
        // 
        this.FindByTextAtWordEndRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAtWordEndRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAtWordEndRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAtWordEndRadioButton.Location = new System.Drawing.Point(3, 58);
        this.FindByTextAtWordEndRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAtWordEndRadioButton.Name = "FindByTextAtWordEndRadioButton";
        this.FindByTextAtWordEndRadioButton.Size = new System.Drawing.Size(69, 21);
        this.FindByTextAtWordEndRadioButton.TabIndex = 14;
        this.FindByTextAtWordEndRadioButton.TabStop = true;
        this.FindByTextAtWordEndRadioButton.Text = "end";
        this.FindByTextAtWordEndRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAtWordEndRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAtWordEndRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextAtWordMiddleRadioButton
        // 
        this.FindByTextAtWordMiddleRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAtWordMiddleRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAtWordMiddleRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAtWordMiddleRadioButton.Location = new System.Drawing.Point(3, 38);
        this.FindByTextAtWordMiddleRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAtWordMiddleRadioButton.Name = "FindByTextAtWordMiddleRadioButton";
        this.FindByTextAtWordMiddleRadioButton.Size = new System.Drawing.Size(69, 21);
        this.FindByTextAtWordMiddleRadioButton.TabIndex = 13;
        this.FindByTextAtWordMiddleRadioButton.TabStop = true;
        this.FindByTextAtWordMiddleRadioButton.Text = "mid";
        this.FindByTextAtWordMiddleRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAtWordMiddleRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAtWordMiddleRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextAtWordAnyRadioButton
        // 
        this.FindByTextAtWordAnyRadioButton.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextAtWordAnyRadioButton.Checked = true;
        this.FindByTextAtWordAnyRadioButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAtWordAnyRadioButton.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextAtWordAnyRadioButton.Location = new System.Drawing.Point(3, 0);
        this.FindByTextAtWordAnyRadioButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextAtWordAnyRadioButton.Name = "FindByTextAtWordAnyRadioButton";
        this.FindByTextAtWordAnyRadioButton.Size = new System.Drawing.Size(69, 22);
        this.FindByTextAtWordAnyRadioButton.TabIndex = 11;
        this.FindByTextAtWordAnyRadioButton.TabStop = true;
        this.FindByTextAtWordAnyRadioButton.Text = "any";
        this.FindByTextAtWordAnyRadioButton.UseCompatibleTextRendering = true;
        this.FindByTextAtWordAnyRadioButton.UseVisualStyleBackColor = false;
        this.FindByTextAtWordAnyRadioButton.CheckedChanged += new System.EventHandler(this.FindByTextRadioButton_CheckedChanged);
        this.FindByTextAtWordAnyRadioButton.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextSearchBlockSizeQuarterLabel
        // 
        this.FindByTextSearchBlockSizeQuarterLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByTextSearchBlockSizeQuarterLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextSearchBlockSizeQuarterLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextSearchBlockSizeQuarterLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByTextSearchBlockSizeQuarterLabel.Location = new System.Drawing.Point(156, 335);
        this.FindByTextSearchBlockSizeQuarterLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextSearchBlockSizeQuarterLabel.Name = "FindByTextSearchBlockSizeQuarterLabel";
        this.FindByTextSearchBlockSizeQuarterLabel.Size = new System.Drawing.Size(21, 17);
        this.FindByTextSearchBlockSizeQuarterLabel.TabIndex = 28;
        this.FindByTextSearchBlockSizeQuarterLabel.Text = "Q";
        this.FindByTextSearchBlockSizeQuarterLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextSearchBlockSizeQuarterLabel.Click += new System.EventHandler(this.FindByTextSearchBlockSizeQuarterLabel_Click);
        this.FindByTextSearchBlockSizeQuarterLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // TextLocationWithinVersePanel
        // 
        this.TextLocationWithinVersePanel.Controls.Add(this.FindByTextAtVerseStartRadioButton);
        this.TextLocationWithinVersePanel.Controls.Add(this.FindByTextAtVerseMiddleRadioButton);
        this.TextLocationWithinVersePanel.Controls.Add(this.FindByTextAtVerseAnyRadioButton);
        this.TextLocationWithinVersePanel.Controls.Add(this.FindByTextAtVerseEndRadioButton);
        this.TextLocationWithinVersePanel.Location = new System.Drawing.Point(69, 185);
        this.TextLocationWithinVersePanel.Margin = new System.Windows.Forms.Padding(4);
        this.TextLocationWithinVersePanel.Name = "TextLocationWithinVersePanel";
        this.TextLocationWithinVersePanel.Size = new System.Drawing.Size(68, 82);
        this.TextLocationWithinVersePanel.TabIndex = 10;
        this.TextLocationWithinVersePanel.TabStop = true;
        // 
        // FindByTextSearchBlockSizePartLabel
        // 
        this.FindByTextSearchBlockSizePartLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByTextSearchBlockSizePartLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextSearchBlockSizePartLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextSearchBlockSizePartLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByTextSearchBlockSizePartLabel.Location = new System.Drawing.Point(92, 335);
        this.FindByTextSearchBlockSizePartLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextSearchBlockSizePartLabel.Name = "FindByTextSearchBlockSizePartLabel";
        this.FindByTextSearchBlockSizePartLabel.Size = new System.Drawing.Size(21, 17);
        this.FindByTextSearchBlockSizePartLabel.TabIndex = 25;
        this.FindByTextSearchBlockSizePartLabel.Text = "P";
        this.FindByTextSearchBlockSizePartLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextSearchBlockSizePartLabel.Click += new System.EventHandler(this.FindByTextSearchBlockSizePartLabel_Click);
        this.FindByTextSearchBlockSizePartLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // KeyboardPanel
        // 
        this.KeyboardPanel.BackColor = System.Drawing.Color.LightGray;
        this.KeyboardPanel.Controls.Add(this.FindByTextQuranHealingLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextRaaLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextOrLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextAndLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextPlusLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextMinusLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextDoubleQuoteLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextElfWaslLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextSpaceLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextBackspaceLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextHamzaAboveYaaLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextElfLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextTextBox);
        this.KeyboardPanel.Controls.Add(this.FindByTextYaaLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextKaafLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextHamzaAboveWawLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextAinLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextWawLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextHhaaLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextHamzaLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextTaaMarbootaLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextElfMaqsuraLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextHaaLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextSheenLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextZaaiLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextGhainLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextHamzaBelowElfLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextThaaLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextHamzaAboveElfLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextNoonLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextDhaaLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextMeemLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextBaaLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextQaafLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextTaaLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextDhaadLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextJeemLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextSeenLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextSaadLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextDaalLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextLaamLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextKhaaLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextFaaLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextThaalLabel);
        this.KeyboardPanel.Controls.Add(this.FindByTextTtaaLabel);
        this.KeyboardPanel.Location = new System.Drawing.Point(3, 41);
        this.KeyboardPanel.Margin = new System.Windows.Forms.Padding(4);
        this.KeyboardPanel.Name = "KeyboardPanel";
        this.KeyboardPanel.Size = new System.Drawing.Size(197, 127);
        this.KeyboardPanel.TabIndex = 0;
        // 
        // FindByTextQuranHealingLabel
        // 
        this.FindByTextQuranHealingLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextQuranHealingLabel.Enabled = false;
        this.FindByTextQuranHealingLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextQuranHealingLabel.ForeColor = System.Drawing.Color.LightCoral;
        this.FindByTextQuranHealingLabel.Location = new System.Drawing.Point(172, 107);
        this.FindByTextQuranHealingLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextQuranHealingLabel.Name = "FindByTextQuranHealingLabel";
        this.FindByTextQuranHealingLabel.Size = new System.Drawing.Size(21, 18);
        this.FindByTextQuranHealingLabel.TabIndex = 6;
        this.FindByTextQuranHealingLabel.Text = "♥";
        this.FindByTextQuranHealingLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.FindByTextQuranHealingLabel, "Value Navigator");
        this.FindByTextQuranHealingLabel.Click += new System.EventHandler(this.FindByTextQuranHealingLabel_Click);
        this.FindByTextQuranHealingLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextQuranHealingLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextQuranHealingLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        // 
        // FindByTextRaaLabel
        // 
        this.FindByTextRaaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextRaaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextRaaLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(160)))));
        this.FindByTextRaaLabel.Location = new System.Drawing.Point(151, 47);
        this.FindByTextRaaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextRaaLabel.Name = "FindByTextRaaLabel";
        this.FindByTextRaaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextRaaLabel.TabIndex = 0;
        this.FindByTextRaaLabel.Text = "ر";
        this.FindByTextRaaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextRaaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextRaaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextRaaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextRaaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextRaaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextOrLabel
        // 
        this.FindByTextOrLabel.BackColor = System.Drawing.Color.Silver;
        this.FindByTextOrLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextOrLabel.ForeColor = System.Drawing.Color.LightGray;
        this.FindByTextOrLabel.Location = new System.Drawing.Point(129, 107);
        this.FindByTextOrLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextOrLabel.Name = "FindByTextOrLabel";
        this.FindByTextOrLabel.Size = new System.Drawing.Size(21, 18);
        this.FindByTextOrLabel.TabIndex = 0;
        this.FindByTextOrLabel.Text = "|";
        this.FindByTextOrLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextOrLabel.Visible = false;
        this.FindByTextOrLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextOrLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextOrLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextOrLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardModifierLabel_MouseLeave);
        this.FindByTextOrLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextAndLabel
        // 
        this.FindByTextAndLabel.BackColor = System.Drawing.Color.Silver;
        this.FindByTextAndLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAndLabel.ForeColor = System.Drawing.Color.LightGray;
        this.FindByTextAndLabel.Location = new System.Drawing.Point(151, 107);
        this.FindByTextAndLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextAndLabel.Name = "FindByTextAndLabel";
        this.FindByTextAndLabel.Size = new System.Drawing.Size(21, 18);
        this.FindByTextAndLabel.TabIndex = 0;
        this.FindByTextAndLabel.Text = "&&";
        this.FindByTextAndLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextAndLabel.Visible = false;
        this.FindByTextAndLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextAndLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextAndLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextAndLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardModifierLabel_MouseLeave);
        this.FindByTextAndLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextPlusLabel
        // 
        this.FindByTextPlusLabel.BackColor = System.Drawing.Color.Silver;
        this.FindByTextPlusLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextPlusLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextPlusLabel.Location = new System.Drawing.Point(1, 107);
        this.FindByTextPlusLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextPlusLabel.Name = "FindByTextPlusLabel";
        this.FindByTextPlusLabel.Size = new System.Drawing.Size(21, 18);
        this.FindByTextPlusLabel.TabIndex = 0;
        this.FindByTextPlusLabel.Text = "+";
        this.FindByTextPlusLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextPlusLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextPlusLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextPlusLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextPlusLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardModifierLabel_MouseLeave);
        this.FindByTextPlusLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextMinusLabel
        // 
        this.FindByTextMinusLabel.BackColor = System.Drawing.Color.Silver;
        this.FindByTextMinusLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextMinusLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextMinusLabel.Location = new System.Drawing.Point(23, 107);
        this.FindByTextMinusLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextMinusLabel.Name = "FindByTextMinusLabel";
        this.FindByTextMinusLabel.Size = new System.Drawing.Size(21, 18);
        this.FindByTextMinusLabel.TabIndex = 0;
        this.FindByTextMinusLabel.Text = "-";
        this.FindByTextMinusLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextMinusLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextMinusLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextMinusLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextMinusLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardModifierLabel_MouseLeave);
        this.FindByTextMinusLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextDoubleQuoteLabel
        // 
        this.FindByTextDoubleQuoteLabel.BackColor = System.Drawing.Color.Silver;
        this.FindByTextDoubleQuoteLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextDoubleQuoteLabel.ForeColor = System.Drawing.Color.LightGray;
        this.FindByTextDoubleQuoteLabel.Location = new System.Drawing.Point(44, 107);
        this.FindByTextDoubleQuoteLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextDoubleQuoteLabel.Name = "FindByTextDoubleQuoteLabel";
        this.FindByTextDoubleQuoteLabel.Size = new System.Drawing.Size(20, 18);
        this.FindByTextDoubleQuoteLabel.TabIndex = 0;
        this.FindByTextDoubleQuoteLabel.Text = "\"";
        this.FindByTextDoubleQuoteLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextDoubleQuoteLabel.Visible = false;
        this.FindByTextDoubleQuoteLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextDoubleQuoteLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextDoubleQuoteLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextDoubleQuoteLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardModifierLabel_MouseLeave);
        this.FindByTextDoubleQuoteLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextElfWaslLabel
        // 
        this.FindByTextElfWaslLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextElfWaslLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextElfWaslLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(96)))), ((int)(((byte)(96)))), ((int)(((byte)(96)))));
        this.FindByTextElfWaslLabel.Location = new System.Drawing.Point(172, 47);
        this.FindByTextElfWaslLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextElfWaslLabel.Name = "FindByTextElfWaslLabel";
        this.FindByTextElfWaslLabel.Size = new System.Drawing.Size(23, 20);
        this.FindByTextElfWaslLabel.TabIndex = 0;
        this.FindByTextElfWaslLabel.Text = "ٱ";
        this.FindByTextElfWaslLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextElfWaslLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextElfWaslLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextElfWaslLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextElfWaslLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextElfWaslLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextSpaceLabel
        // 
        this.FindByTextSpaceLabel.BackColor = System.Drawing.Color.Silver;
        this.FindByTextSpaceLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextSpaceLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextSpaceLabel.Location = new System.Drawing.Point(67, 107);
        this.FindByTextSpaceLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextSpaceLabel.Name = "FindByTextSpaceLabel";
        this.FindByTextSpaceLabel.Size = new System.Drawing.Size(61, 18);
        this.FindByTextSpaceLabel.TabIndex = 0;
        this.FindByTextSpaceLabel.Text = " ";
        this.FindByTextSpaceLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextSpaceLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextSpaceLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextSpaceLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextSpaceLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardModifierLabel_MouseLeave);
        this.FindByTextSpaceLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextBackspaceLabel
        // 
        this.FindByTextBackspaceLabel.BackColor = System.Drawing.Color.Silver;
        this.FindByTextBackspaceLabel.Font = new System.Drawing.Font("Arial Narrow", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextBackspaceLabel.ForeColor = System.Drawing.Color.White;
        this.FindByTextBackspaceLabel.Location = new System.Drawing.Point(1, 2);
        this.FindByTextBackspaceLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextBackspaceLabel.Name = "FindByTextBackspaceLabel";
        this.FindByTextBackspaceLabel.Size = new System.Drawing.Size(24, 23);
        this.FindByTextBackspaceLabel.TabIndex = 0;
        this.FindByTextBackspaceLabel.Text = "►";
        this.FindByTextBackspaceLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.FindByTextBackspaceLabel.Click += new System.EventHandler(this.FindByTextBackspaceLabel_Click);
        this.FindByTextBackspaceLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextBackspaceLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextBackspaceLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardModifierLabel_MouseLeave);
        this.FindByTextBackspaceLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextHamzaAboveYaaLabel
        // 
        this.FindByTextHamzaAboveYaaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextHamzaAboveYaaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextHamzaAboveYaaLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(96)))));
        this.FindByTextHamzaAboveYaaLabel.Location = new System.Drawing.Point(44, 86);
        this.FindByTextHamzaAboveYaaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextHamzaAboveYaaLabel.Name = "FindByTextHamzaAboveYaaLabel";
        this.FindByTextHamzaAboveYaaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextHamzaAboveYaaLabel.TabIndex = 0;
        this.FindByTextHamzaAboveYaaLabel.Text = "ئ";
        this.FindByTextHamzaAboveYaaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextHamzaAboveYaaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextHamzaAboveYaaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextHamzaAboveYaaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextHamzaAboveYaaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextHamzaAboveYaaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextElfLabel
        // 
        this.FindByTextElfLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextElfLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextElfLabel.ForeColor = System.Drawing.Color.Maroon;
        this.FindByTextElfLabel.Location = new System.Drawing.Point(172, 27);
        this.FindByTextElfLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextElfLabel.Name = "FindByTextElfLabel";
        this.FindByTextElfLabel.Size = new System.Drawing.Size(23, 20);
        this.FindByTextElfLabel.TabIndex = 0;
        this.FindByTextElfLabel.Text = "ا";
        this.FindByTextElfLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextElfLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextElfLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextElfLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextElfLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextElfLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextTextBox
        // 
        this.FindByTextTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.FindByTextTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextTextBox.Location = new System.Drawing.Point(24, 1);
        this.FindByTextTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextTextBox.Name = "FindByTextTextBox";
        this.FindByTextTextBox.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
        this.FindByTextTextBox.Size = new System.Drawing.Size(168, 23);
        this.FindByTextTextBox.TabIndex = 4;
        this.FindByTextTextBox.TextChanged += new System.EventHandler(this.FindByTextTextBox_TextChanged);
        this.FindByTextTextBox.Enter += new System.EventHandler(this.FindByTextTextBox_Enter);
        this.FindByTextTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.FindByTextTextBox_KeyDown);
        this.FindByTextTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FindByTextTextBox_KeyPress);
        // 
        // FindByTextYaaLabel
        // 
        this.FindByTextYaaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextYaaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextYaaLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(96)))));
        this.FindByTextYaaLabel.Location = new System.Drawing.Point(65, 86);
        this.FindByTextYaaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextYaaLabel.Name = "FindByTextYaaLabel";
        this.FindByTextYaaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextYaaLabel.TabIndex = 0;
        this.FindByTextYaaLabel.Text = "ي";
        this.FindByTextYaaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextYaaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextYaaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextYaaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextYaaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextYaaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextKaafLabel
        // 
        this.FindByTextKaafLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextKaafLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextKaafLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextKaafLabel.Location = new System.Drawing.Point(65, 66);
        this.FindByTextKaafLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextKaafLabel.Name = "FindByTextKaafLabel";
        this.FindByTextKaafLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextKaafLabel.TabIndex = 0;
        this.FindByTextKaafLabel.Text = "ك";
        this.FindByTextKaafLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextKaafLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextKaafLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextKaafLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextKaafLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextKaafLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextHamzaAboveWawLabel
        // 
        this.FindByTextHamzaAboveWawLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextHamzaAboveWawLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextHamzaAboveWawLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(96)))));
        this.FindByTextHamzaAboveWawLabel.Location = new System.Drawing.Point(87, 86);
        this.FindByTextHamzaAboveWawLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextHamzaAboveWawLabel.Name = "FindByTextHamzaAboveWawLabel";
        this.FindByTextHamzaAboveWawLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextHamzaAboveWawLabel.TabIndex = 0;
        this.FindByTextHamzaAboveWawLabel.Text = "ؤ";
        this.FindByTextHamzaAboveWawLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextHamzaAboveWawLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextHamzaAboveWawLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextHamzaAboveWawLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextHamzaAboveWawLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextHamzaAboveWawLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextAinLabel
        // 
        this.FindByTextAinLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextAinLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextAinLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextAinLabel.Location = new System.Drawing.Point(151, 66);
        this.FindByTextAinLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextAinLabel.Name = "FindByTextAinLabel";
        this.FindByTextAinLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextAinLabel.TabIndex = 0;
        this.FindByTextAinLabel.Text = "ع";
        this.FindByTextAinLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextAinLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextAinLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextAinLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextAinLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextAinLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextWawLabel
        // 
        this.FindByTextWawLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextWawLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextWawLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(96)))));
        this.FindByTextWawLabel.Location = new System.Drawing.Point(108, 86);
        this.FindByTextWawLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextWawLabel.Name = "FindByTextWawLabel";
        this.FindByTextWawLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextWawLabel.TabIndex = 0;
        this.FindByTextWawLabel.Text = "و";
        this.FindByTextWawLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextWawLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextWawLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextWawLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextWawLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextWawLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextHhaaLabel
        // 
        this.FindByTextHhaaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextHhaaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextHhaaLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextHhaaLabel.Location = new System.Drawing.Point(65, 27);
        this.FindByTextHhaaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextHhaaLabel.Name = "FindByTextHhaaLabel";
        this.FindByTextHhaaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextHhaaLabel.TabIndex = 0;
        this.FindByTextHhaaLabel.Text = "ح";
        this.FindByTextHhaaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextHhaaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextHhaaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextHhaaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextHhaaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextHhaaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextHamzaLabel
        // 
        this.FindByTextHamzaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextHamzaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextHamzaLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextHamzaLabel.Location = new System.Drawing.Point(1, 86);
        this.FindByTextHamzaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextHamzaLabel.Name = "FindByTextHamzaLabel";
        this.FindByTextHamzaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextHamzaLabel.TabIndex = 0;
        this.FindByTextHamzaLabel.Text = "ء";
        this.FindByTextHamzaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextHamzaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextHamzaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextHamzaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextHamzaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextHamzaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextTaaMarbootaLabel
        // 
        this.FindByTextTaaMarbootaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextTaaMarbootaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextTaaMarbootaLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextTaaMarbootaLabel.Location = new System.Drawing.Point(129, 86);
        this.FindByTextTaaMarbootaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextTaaMarbootaLabel.Name = "FindByTextTaaMarbootaLabel";
        this.FindByTextTaaMarbootaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextTaaMarbootaLabel.TabIndex = 0;
        this.FindByTextTaaMarbootaLabel.Text = "ة";
        this.FindByTextTaaMarbootaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextTaaMarbootaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextTaaMarbootaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextTaaMarbootaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextTaaMarbootaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextTaaMarbootaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextElfMaqsuraLabel
        // 
        this.FindByTextElfMaqsuraLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextElfMaqsuraLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextElfMaqsuraLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextElfMaqsuraLabel.Location = new System.Drawing.Point(23, 86);
        this.FindByTextElfMaqsuraLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextElfMaqsuraLabel.Name = "FindByTextElfMaqsuraLabel";
        this.FindByTextElfMaqsuraLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextElfMaqsuraLabel.TabIndex = 0;
        this.FindByTextElfMaqsuraLabel.Text = "ى";
        this.FindByTextElfMaqsuraLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextElfMaqsuraLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextElfMaqsuraLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextElfMaqsuraLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextElfMaqsuraLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextElfMaqsuraLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextHaaLabel
        // 
        this.FindByTextHaaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextHaaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextHaaLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextHaaLabel.Location = new System.Drawing.Point(151, 86);
        this.FindByTextHaaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextHaaLabel.Name = "FindByTextHaaLabel";
        this.FindByTextHaaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextHaaLabel.TabIndex = 0;
        this.FindByTextHaaLabel.Text = "ه";
        this.FindByTextHaaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextHaaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextHaaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextHaaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextHaaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextHaaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextSheenLabel
        // 
        this.FindByTextSheenLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextSheenLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextSheenLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextSheenLabel.Location = new System.Drawing.Point(87, 47);
        this.FindByTextSheenLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextSheenLabel.Name = "FindByTextSheenLabel";
        this.FindByTextSheenLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextSheenLabel.TabIndex = 0;
        this.FindByTextSheenLabel.Text = "ش";
        this.FindByTextSheenLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextSheenLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextSheenLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextSheenLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextSheenLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextSheenLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextZaaiLabel
        // 
        this.FindByTextZaaiLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextZaaiLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextZaaiLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextZaaiLabel.Location = new System.Drawing.Point(129, 47);
        this.FindByTextZaaiLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextZaaiLabel.Name = "FindByTextZaaiLabel";
        this.FindByTextZaaiLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextZaaiLabel.TabIndex = 0;
        this.FindByTextZaaiLabel.Text = "ز";
        this.FindByTextZaaiLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextZaaiLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextZaaiLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextZaaiLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextZaaiLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextZaaiLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextGhainLabel
        // 
        this.FindByTextGhainLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextGhainLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextGhainLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextGhainLabel.Location = new System.Drawing.Point(129, 66);
        this.FindByTextGhainLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextGhainLabel.Name = "FindByTextGhainLabel";
        this.FindByTextGhainLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextGhainLabel.TabIndex = 0;
        this.FindByTextGhainLabel.Text = "غ";
        this.FindByTextGhainLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextGhainLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextGhainLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextGhainLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextGhainLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextGhainLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextHamzaBelowElfLabel
        // 
        this.FindByTextHamzaBelowElfLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextHamzaBelowElfLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextHamzaBelowElfLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextHamzaBelowElfLabel.Location = new System.Drawing.Point(172, 86);
        this.FindByTextHamzaBelowElfLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextHamzaBelowElfLabel.Name = "FindByTextHamzaBelowElfLabel";
        this.FindByTextHamzaBelowElfLabel.Size = new System.Drawing.Size(23, 20);
        this.FindByTextHamzaBelowElfLabel.TabIndex = 0;
        this.FindByTextHamzaBelowElfLabel.Text = "إ";
        this.FindByTextHamzaBelowElfLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextHamzaBelowElfLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextHamzaBelowElfLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextHamzaBelowElfLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextHamzaBelowElfLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextHamzaBelowElfLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextThaaLabel
        // 
        this.FindByTextThaaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextThaaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextThaaLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextThaaLabel.Location = new System.Drawing.Point(108, 27);
        this.FindByTextThaaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextThaaLabel.Name = "FindByTextThaaLabel";
        this.FindByTextThaaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextThaaLabel.TabIndex = 0;
        this.FindByTextThaaLabel.Text = "ث";
        this.FindByTextThaaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextThaaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextThaaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextThaaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextThaaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextThaaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextHamzaAboveElfLabel
        // 
        this.FindByTextHamzaAboveElfLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextHamzaAboveElfLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextHamzaAboveElfLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextHamzaAboveElfLabel.Location = new System.Drawing.Point(172, 66);
        this.FindByTextHamzaAboveElfLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextHamzaAboveElfLabel.Name = "FindByTextHamzaAboveElfLabel";
        this.FindByTextHamzaAboveElfLabel.Size = new System.Drawing.Size(23, 20);
        this.FindByTextHamzaAboveElfLabel.TabIndex = 0;
        this.FindByTextHamzaAboveElfLabel.Text = "أ";
        this.FindByTextHamzaAboveElfLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextHamzaAboveElfLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextHamzaAboveElfLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextHamzaAboveElfLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextHamzaAboveElfLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextHamzaAboveElfLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextNoonLabel
        // 
        this.FindByTextNoonLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextNoonLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextNoonLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(96)))));
        this.FindByTextNoonLabel.Location = new System.Drawing.Point(1, 66);
        this.FindByTextNoonLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextNoonLabel.Name = "FindByTextNoonLabel";
        this.FindByTextNoonLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextNoonLabel.TabIndex = 0;
        this.FindByTextNoonLabel.Text = "ن";
        this.FindByTextNoonLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextNoonLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextNoonLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextNoonLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextNoonLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextNoonLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextDhaaLabel
        // 
        this.FindByTextDhaaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextDhaaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextDhaaLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextDhaaLabel.Location = new System.Drawing.Point(1, 47);
        this.FindByTextDhaaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextDhaaLabel.Name = "FindByTextDhaaLabel";
        this.FindByTextDhaaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextDhaaLabel.TabIndex = 0;
        this.FindByTextDhaaLabel.Text = "ظ";
        this.FindByTextDhaaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextDhaaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextDhaaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextDhaaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextDhaaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextDhaaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextMeemLabel
        // 
        this.FindByTextMeemLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextMeemLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextMeemLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(96)))));
        this.FindByTextMeemLabel.Location = new System.Drawing.Point(23, 66);
        this.FindByTextMeemLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextMeemLabel.Name = "FindByTextMeemLabel";
        this.FindByTextMeemLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextMeemLabel.TabIndex = 0;
        this.FindByTextMeemLabel.Text = "م";
        this.FindByTextMeemLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextMeemLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextMeemLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextMeemLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextMeemLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextMeemLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextBaaLabel
        // 
        this.FindByTextBaaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextBaaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextBaaLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(128)))), ((int)(((byte)(64)))));
        this.FindByTextBaaLabel.Location = new System.Drawing.Point(151, 27);
        this.FindByTextBaaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextBaaLabel.Name = "FindByTextBaaLabel";
        this.FindByTextBaaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextBaaLabel.TabIndex = 0;
        this.FindByTextBaaLabel.Text = "ب";
        this.FindByTextBaaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextBaaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextBaaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextBaaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextBaaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextBaaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextQaafLabel
        // 
        this.FindByTextQaafLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextQaafLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextQaafLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextQaafLabel.Location = new System.Drawing.Point(87, 66);
        this.FindByTextQaafLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextQaafLabel.Name = "FindByTextQaafLabel";
        this.FindByTextQaafLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextQaafLabel.TabIndex = 0;
        this.FindByTextQaafLabel.Text = "ق";
        this.FindByTextQaafLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextQaafLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextQaafLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextQaafLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextQaafLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextQaafLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextTaaLabel
        // 
        this.FindByTextTaaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextTaaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextTaaLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextTaaLabel.Location = new System.Drawing.Point(129, 27);
        this.FindByTextTaaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextTaaLabel.Name = "FindByTextTaaLabel";
        this.FindByTextTaaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextTaaLabel.TabIndex = 0;
        this.FindByTextTaaLabel.Text = "ت";
        this.FindByTextTaaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextTaaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextTaaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextTaaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextTaaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextTaaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextDhaadLabel
        // 
        this.FindByTextDhaadLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextDhaadLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextDhaadLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextDhaadLabel.Location = new System.Drawing.Point(44, 47);
        this.FindByTextDhaadLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextDhaadLabel.Name = "FindByTextDhaadLabel";
        this.FindByTextDhaadLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextDhaadLabel.TabIndex = 0;
        this.FindByTextDhaadLabel.Text = "ض";
        this.FindByTextDhaadLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextDhaadLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextDhaadLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextDhaadLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextDhaadLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextDhaadLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextJeemLabel
        // 
        this.FindByTextJeemLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextJeemLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextJeemLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextJeemLabel.Location = new System.Drawing.Point(87, 27);
        this.FindByTextJeemLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextJeemLabel.Name = "FindByTextJeemLabel";
        this.FindByTextJeemLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextJeemLabel.TabIndex = 0;
        this.FindByTextJeemLabel.Text = "ج";
        this.FindByTextJeemLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextJeemLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextJeemLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextJeemLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextJeemLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextJeemLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextSeenLabel
        // 
        this.FindByTextSeenLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextSeenLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextSeenLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextSeenLabel.Location = new System.Drawing.Point(108, 47);
        this.FindByTextSeenLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextSeenLabel.Name = "FindByTextSeenLabel";
        this.FindByTextSeenLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextSeenLabel.TabIndex = 0;
        this.FindByTextSeenLabel.Text = "س";
        this.FindByTextSeenLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextSeenLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextSeenLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextSeenLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextSeenLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextSeenLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextSaadLabel
        // 
        this.FindByTextSaadLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextSaadLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextSaadLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextSaadLabel.Location = new System.Drawing.Point(65, 47);
        this.FindByTextSaadLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextSaadLabel.Name = "FindByTextSaadLabel";
        this.FindByTextSaadLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextSaadLabel.TabIndex = 0;
        this.FindByTextSaadLabel.Text = "ص";
        this.FindByTextSaadLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextSaadLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextSaadLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextSaadLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextSaadLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextSaadLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextDaalLabel
        // 
        this.FindByTextDaalLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextDaalLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextDaalLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextDaalLabel.Location = new System.Drawing.Point(23, 27);
        this.FindByTextDaalLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextDaalLabel.Name = "FindByTextDaalLabel";
        this.FindByTextDaalLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextDaalLabel.TabIndex = 0;
        this.FindByTextDaalLabel.Text = "د";
        this.FindByTextDaalLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextDaalLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextDaalLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextDaalLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextDaalLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextDaalLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextLaamLabel
        // 
        this.FindByTextLaamLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextLaamLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextLaamLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(160)))));
        this.FindByTextLaamLabel.Location = new System.Drawing.Point(44, 66);
        this.FindByTextLaamLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextLaamLabel.Name = "FindByTextLaamLabel";
        this.FindByTextLaamLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextLaamLabel.TabIndex = 0;
        this.FindByTextLaamLabel.Text = "ل";
        this.FindByTextLaamLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextLaamLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextLaamLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextLaamLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextLaamLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextLaamLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextKhaaLabel
        // 
        this.FindByTextKhaaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextKhaaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextKhaaLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByTextKhaaLabel.Location = new System.Drawing.Point(44, 27);
        this.FindByTextKhaaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextKhaaLabel.Name = "FindByTextKhaaLabel";
        this.FindByTextKhaaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextKhaaLabel.TabIndex = 0;
        this.FindByTextKhaaLabel.Text = "خ";
        this.FindByTextKhaaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextKhaaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextKhaaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextKhaaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextKhaaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextKhaaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextFaaLabel
        // 
        this.FindByTextFaaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextFaaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextFaaLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextFaaLabel.Location = new System.Drawing.Point(108, 66);
        this.FindByTextFaaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextFaaLabel.Name = "FindByTextFaaLabel";
        this.FindByTextFaaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextFaaLabel.TabIndex = 0;
        this.FindByTextFaaLabel.Text = "ف";
        this.FindByTextFaaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextFaaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextFaaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextFaaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextFaaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextFaaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextThaalLabel
        // 
        this.FindByTextThaalLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextThaalLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextThaalLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextThaalLabel.Location = new System.Drawing.Point(1, 27);
        this.FindByTextThaalLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextThaalLabel.Name = "FindByTextThaalLabel";
        this.FindByTextThaalLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextThaalLabel.TabIndex = 0;
        this.FindByTextThaalLabel.Text = "ذ";
        this.FindByTextThaalLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextThaalLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextThaalLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextThaalLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextThaalLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextThaalLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextTtaaLabel
        // 
        this.FindByTextTtaaLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextTtaaLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextTtaaLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(0)))), ((int)(((byte)(64)))));
        this.FindByTextTtaaLabel.Location = new System.Drawing.Point(23, 47);
        this.FindByTextTtaaLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextTtaaLabel.Name = "FindByTextTtaaLabel";
        this.FindByTextTtaaLabel.Size = new System.Drawing.Size(21, 20);
        this.FindByTextTtaaLabel.TabIndex = 0;
        this.FindByTextTtaaLabel.Text = "ط";
        this.FindByTextTtaaLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextTtaaLabel.Click += new System.EventHandler(this.FindByTextKeyboardLabel_Click);
        this.FindByTextTtaaLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextTtaaLabel.MouseEnter += new System.EventHandler(this.FindByTextKeyboardLabel_MouseEnter);
        this.FindByTextTtaaLabel.MouseLeave += new System.EventHandler(this.FindByTextKeyboardLabel_MouseLeave);
        this.FindByTextTtaaLabel.MouseHover += new System.EventHandler(this.FindByTextOrLabel_MouseHover);
        // 
        // FindByTextSearchBlockSizeHalfLabel
        // 
        this.FindByTextSearchBlockSizeHalfLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByTextSearchBlockSizeHalfLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextSearchBlockSizeHalfLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextSearchBlockSizeHalfLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByTextSearchBlockSizeHalfLabel.Location = new System.Drawing.Point(135, 335);
        this.FindByTextSearchBlockSizeHalfLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextSearchBlockSizeHalfLabel.Name = "FindByTextSearchBlockSizeHalfLabel";
        this.FindByTextSearchBlockSizeHalfLabel.Size = new System.Drawing.Size(21, 17);
        this.FindByTextSearchBlockSizeHalfLabel.TabIndex = 27;
        this.FindByTextSearchBlockSizeHalfLabel.Text = "H";
        this.FindByTextSearchBlockSizeHalfLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextSearchBlockSizeHalfLabel.Click += new System.EventHandler(this.FindByTextSearchBlockSizeHalfLabel_Click);
        this.FindByTextSearchBlockSizeHalfLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextProximitySearchTypeLabel
        // 
        this.FindByTextProximitySearchTypeLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByTextProximitySearchTypeLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextProximitySearchTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextProximitySearchTypeLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByTextProximitySearchTypeLabel.Location = new System.Drawing.Point(69, 22);
        this.FindByTextProximitySearchTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextProximitySearchTypeLabel.Name = "FindByTextProximitySearchTypeLabel";
        this.FindByTextProximitySearchTypeLabel.Size = new System.Drawing.Size(64, 17);
        this.FindByTextProximitySearchTypeLabel.TabIndex = 2;
        this.FindByTextProximitySearchTypeLabel.Text = "WORDS";
        this.FindByTextProximitySearchTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextProximitySearchTypeLabel.Click += new System.EventHandler(this.FindByTextProximitySearchTypeLabel_Click);
        this.FindByTextProximitySearchTypeLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextSearchBlockSizeGroupLabel
        // 
        this.FindByTextSearchBlockSizeGroupLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByTextSearchBlockSizeGroupLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextSearchBlockSizeGroupLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextSearchBlockSizeGroupLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByTextSearchBlockSizeGroupLabel.Location = new System.Drawing.Point(113, 335);
        this.FindByTextSearchBlockSizeGroupLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextSearchBlockSizeGroupLabel.Name = "FindByTextSearchBlockSizeGroupLabel";
        this.FindByTextSearchBlockSizeGroupLabel.Size = new System.Drawing.Size(21, 17);
        this.FindByTextSearchBlockSizeGroupLabel.TabIndex = 26;
        this.FindByTextSearchBlockSizeGroupLabel.Text = "G";
        this.FindByTextSearchBlockSizeGroupLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextSearchBlockSizeGroupLabel.Click += new System.EventHandler(this.FindByTextSearchBlockSizeGroupLabel_Click);
        this.FindByTextSearchBlockSizeGroupLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextExactSearchTypeLabel
        // 
        this.FindByTextExactSearchTypeLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByTextExactSearchTypeLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextExactSearchTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextExactSearchTypeLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByTextExactSearchTypeLabel.Location = new System.Drawing.Point(4, 22);
        this.FindByTextExactSearchTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextExactSearchTypeLabel.Name = "FindByTextExactSearchTypeLabel";
        this.FindByTextExactSearchTypeLabel.Size = new System.Drawing.Size(64, 17);
        this.FindByTextExactSearchTypeLabel.TabIndex = 1;
        this.FindByTextExactSearchTypeLabel.Text = "EXACT";
        this.FindByTextExactSearchTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextExactSearchTypeLabel.Click += new System.EventHandler(this.FindByTextExactSearchTypeLabel_Click);
        this.FindByTextExactSearchTypeLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextSearchBlockSizePageLabel
        // 
        this.FindByTextSearchBlockSizePageLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByTextSearchBlockSizePageLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextSearchBlockSizePageLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextSearchBlockSizePageLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByTextSearchBlockSizePageLabel.Location = new System.Drawing.Point(48, 335);
        this.FindByTextSearchBlockSizePageLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextSearchBlockSizePageLabel.Name = "FindByTextSearchBlockSizePageLabel";
        this.FindByTextSearchBlockSizePageLabel.Size = new System.Drawing.Size(21, 17);
        this.FindByTextSearchBlockSizePageLabel.TabIndex = 23;
        this.FindByTextSearchBlockSizePageLabel.Text = "#";
        this.FindByTextSearchBlockSizePageLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextSearchBlockSizePageLabel.Click += new System.EventHandler(this.FindByTextSearchBlockSizePageLabel_Click);
        this.FindByTextSearchBlockSizePageLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextSearchBlockSizeStationLabel
        // 
        this.FindByTextSearchBlockSizeStationLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByTextSearchBlockSizeStationLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextSearchBlockSizeStationLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextSearchBlockSizeStationLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByTextSearchBlockSizeStationLabel.Location = new System.Drawing.Point(71, 335);
        this.FindByTextSearchBlockSizeStationLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextSearchBlockSizeStationLabel.Name = "FindByTextSearchBlockSizeStationLabel";
        this.FindByTextSearchBlockSizeStationLabel.Size = new System.Drawing.Size(21, 17);
        this.FindByTextSearchBlockSizeStationLabel.TabIndex = 24;
        this.FindByTextSearchBlockSizeStationLabel.Text = "S";
        this.FindByTextSearchBlockSizeStationLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextSearchBlockSizeStationLabel.Click += new System.EventHandler(this.FindByTextSearchBlockSizeStationLabel_Click);
        this.FindByTextSearchBlockSizeStationLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // FindByTextRootSearchTypeLabel
        // 
        this.FindByTextRootSearchTypeLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByTextRootSearchTypeLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByTextRootSearchTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextRootSearchTypeLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByTextRootSearchTypeLabel.Location = new System.Drawing.Point(135, 22);
        this.FindByTextRootSearchTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextRootSearchTypeLabel.Name = "FindByTextRootSearchTypeLabel";
        this.FindByTextRootSearchTypeLabel.Size = new System.Drawing.Size(65, 17);
        this.FindByTextRootSearchTypeLabel.TabIndex = 3;
        this.FindByTextRootSearchTypeLabel.Text = "ROOTS";
        this.FindByTextRootSearchTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByTextRootSearchTypeLabel.Click += new System.EventHandler(this.FindByTextRootSearchTypeLabel_Click);
        this.FindByTextRootSearchTypeLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextRootSearchTypeLabel.Leave += new System.EventHandler(this.FindByTextPanel_Leave);
        // 
        // FindByTextMultiplicityNumericUpDown
        // 
        this.FindByTextMultiplicityNumericUpDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByTextMultiplicityNumericUpDown.BackColor = System.Drawing.Color.LightGray;
        this.FindByTextMultiplicityNumericUpDown.Enabled = false;
        this.FindByTextMultiplicityNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextMultiplicityNumericUpDown.Location = new System.Drawing.Point(92, 309);
        this.FindByTextMultiplicityNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.FindByTextMultiplicityNumericUpDown.Maximum = new decimal(new int[] {
            999999,
            0,
            0,
            0});
        this.FindByTextMultiplicityNumericUpDown.Minimum = new decimal(new int[] {
            1,
            0,
            0,
            -2147483648});
        this.FindByTextMultiplicityNumericUpDown.Name = "FindByTextMultiplicityNumericUpDown";
        this.FindByTextMultiplicityNumericUpDown.Size = new System.Drawing.Size(75, 23);
        this.FindByTextMultiplicityNumericUpDown.TabIndex = 19;
        this.FindByTextMultiplicityNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.FindByTextMultiplicityNumericUpDown.Value = new decimal(new int[] {
            1,
            0,
            0,
            -2147483648});
        this.FindByTextMultiplicityNumericUpDown.ValueChanged += new System.EventHandler(this.FindByTextMultiplicityNumericUpDown_ValueChanged);
        this.FindByTextMultiplicityNumericUpDown.EnabledChanged += new System.EventHandler(this.FindByTextControl_EnabledChanged);
        this.FindByTextMultiplicityNumericUpDown.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        this.FindByTextMultiplicityNumericUpDown.Leave += new System.EventHandler(this.FindByTextControls_Leave);
        // 
        // FindByTextLabel
        // 
        this.FindByTextLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByTextLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByTextLabel.ForeColor = System.Drawing.Color.Navy;
        this.FindByTextLabel.Location = new System.Drawing.Point(1, 2);
        this.FindByTextLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByTextLabel.Name = "FindByTextLabel";
        this.FindByTextLabel.Size = new System.Drawing.Size(200, 16);
        this.FindByTextLabel.TabIndex = 0;
        this.FindByTextLabel.Text = "by Text";
        this.FindByTextLabel.Click += new System.EventHandler(this.FindByTextLabel_Click);
        this.FindByTextLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // PositionsGroupBox
        // 
        this.PositionsGroupBox.BackColor = System.Drawing.SystemColors.WindowText;
        this.PositionsGroupBox.Controls.Add(this.DifferenceStatisticsLabel);
        this.PositionsGroupBox.Controls.Add(this.DifferencesLabel);
        this.PositionsGroupBox.Controls.Add(this.VerseWordLetterPositionLabel);
        this.PositionsGroupBox.Controls.Add(this.BowingPositionLabel);
        this.PositionsGroupBox.Controls.Add(this.QuarterPositionLabel);
        this.PositionsGroupBox.Controls.Add(this.HalfPositionLabel);
        this.PositionsGroupBox.Controls.Add(this.GroupPositionLabel);
        this.PositionsGroupBox.Controls.Add(this.PartPositionLabel);
        this.PositionsGroupBox.Controls.Add(this.StationPositionLabel);
        this.PositionsGroupBox.Controls.Add(this.PagePositionLabel);
        this.PositionsGroupBox.Controls.Add(this.ChapterVerseWordLetterPositionLabel);
        this.PositionsGroupBox.Controls.Add(this.ChapterPositionLabel);
        this.PositionsGroupBox.Controls.Add(this.LetterDiffTextBox);
        this.PositionsGroupBox.Controls.Add(this.WordDiffTextBox);
        this.PositionsGroupBox.Controls.Add(this.VerseDiffTextBox);
        this.PositionsGroupBox.Controls.Add(this.ChapterDiffTextBox);
        this.PositionsGroupBox.Controls.Add(this.LetterNumericUpDown);
        this.PositionsGroupBox.Controls.Add(this.WordNumericUpDown);
        this.PositionsGroupBox.Controls.Add(this.VerseNumericUpDown);
        this.PositionsGroupBox.Controls.Add(this.BowingNumericUpDown);
        this.PositionsGroupBox.Controls.Add(this.QuarterNumericUpDown);
        this.PositionsGroupBox.Controls.Add(this.HalfNumericUpDown);
        this.PositionsGroupBox.Controls.Add(this.GroupNumericUpDown);
        this.PositionsGroupBox.Controls.Add(this.PartNumericUpDown);
        this.PositionsGroupBox.Controls.Add(this.StationNumericUpDown);
        this.PositionsGroupBox.Controls.Add(this.PageNumericUpDown);
        this.PositionsGroupBox.Controls.Add(this.ChapterLetterNumericUpDown);
        this.PositionsGroupBox.Controls.Add(this.ChapterWordNumericUpDown);
        this.PositionsGroupBox.Controls.Add(this.ChapterVerseNumericUpDown);
        this.PositionsGroupBox.Controls.Add(this.ChapterComboBox);
        this.PositionsGroupBox.Dock = System.Windows.Forms.DockStyle.Top;
        this.PositionsGroupBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PositionsGroupBox.Location = new System.Drawing.Point(0, 0);
        this.PositionsGroupBox.Margin = new System.Windows.Forms.Padding(4);
        this.PositionsGroupBox.Name = "PositionsGroupBox";
        this.PositionsGroupBox.Padding = new System.Windows.Forms.Padding(4);
        this.PositionsGroupBox.Size = new System.Drawing.Size(1153, 47);
        this.PositionsGroupBox.TabIndex = 135;
        this.PositionsGroupBox.TabStop = false;
        // 
        // DifferenceStatisticsLabel
        // 
        this.DifferenceStatisticsLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.DifferenceStatisticsLabel.BackColor = System.Drawing.Color.LightSteelBlue;
        this.DifferenceStatisticsLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DifferenceStatisticsLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DifferenceStatisticsLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.DifferenceStatisticsLabel.Location = new System.Drawing.Point(1141, 1);
        this.DifferenceStatisticsLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DifferenceStatisticsLabel.Name = "DifferenceStatisticsLabel";
        this.DifferenceStatisticsLabel.Size = new System.Drawing.Size(5, 15);
        this.DifferenceStatisticsLabel.TabIndex = 87;
        this.DifferenceStatisticsLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.ToolTip.SetToolTip(this.DifferenceStatisticsLabel, "Statistics");
        this.DifferenceStatisticsLabel.Click += new System.EventHandler(this.DifferenceStatisticsLabel_Click);
        // 
        // DifferencesLabel
        // 
        this.DifferencesLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.DifferencesLabel.Cursor = System.Windows.Forms.Cursors.Default;
        this.DifferencesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DifferencesLabel.ForeColor = System.Drawing.Color.LightSteelBlue;
        this.DifferencesLabel.Location = new System.Drawing.Point(925, 0);
        this.DifferencesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DifferencesLabel.Name = "DifferencesLabel";
        this.DifferencesLabel.Size = new System.Drawing.Size(231, 16);
        this.DifferencesLabel.TabIndex = 86;
        this.DifferencesLabel.Tag = "∆ ∂ δ d";
        this.DifferencesLabel.Text = "   ∆C        ∆V        ∆W           ∆L";
        this.ToolTip.SetToolTip(this.DifferencesLabel, "Distance between mouse clicks");
        // 
        // VerseWordLetterPositionLabel
        // 
        this.VerseWordLetterPositionLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.VerseWordLetterPositionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.VerseWordLetterPositionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.VerseWordLetterPositionLabel.ForeColor = System.Drawing.Color.LightSteelBlue;
        this.VerseWordLetterPositionLabel.Location = new System.Drawing.Point(697, 0);
        this.VerseWordLetterPositionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.VerseWordLetterPositionLabel.Name = "VerseWordLetterPositionLabel";
        this.VerseWordLetterPositionLabel.Size = new System.Drawing.Size(231, 16);
        this.VerseWordLetterPositionLabel.TabIndex = 95;
        this.VerseWordLetterPositionLabel.Text = "Verse      Word     Letter";
        this.ToolTip.SetToolTip(this.VerseWordLetterPositionLabel, "Book word symmetry");
        this.VerseWordLetterPositionLabel.Click += new System.EventHandler(this.VerseWordLetterPositionLabel_Click);
        // 
        // BowingPositionLabel
        // 
        this.BowingPositionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.BowingPositionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.BowingPositionLabel.ForeColor = System.Drawing.Color.LightSteelBlue;
        this.BowingPositionLabel.Location = new System.Drawing.Point(703, 0);
        this.BowingPositionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.BowingPositionLabel.Name = "BowingPositionLabel";
        this.BowingPositionLabel.Size = new System.Drawing.Size(517, 16);
        this.BowingPositionLabel.TabIndex = 94;
        this.BowingPositionLabel.Text = "Bowing";
        this.ToolTip.SetToolTip(this.BowingPositionLabel, "Bowing word symmetry");
        this.BowingPositionLabel.Click += new System.EventHandler(this.BowingPositionLabel_Click);
        // 
        // QuarterPositionLabel
        // 
        this.QuarterPositionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.QuarterPositionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.QuarterPositionLabel.ForeColor = System.Drawing.Color.LightSteelBlue;
        this.QuarterPositionLabel.Location = new System.Drawing.Point(629, 0);
        this.QuarterPositionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.QuarterPositionLabel.Name = "QuarterPositionLabel";
        this.QuarterPositionLabel.Size = new System.Drawing.Size(75, 16);
        this.QuarterPositionLabel.TabIndex = 93;
        this.QuarterPositionLabel.Text = "Quarter";
        this.ToolTip.SetToolTip(this.QuarterPositionLabel, "Quarter word symmetry");
        this.QuarterPositionLabel.Click += new System.EventHandler(this.QuarterPositionLabel_Click);
        // 
        // HalfPositionLabel
        // 
        this.HalfPositionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.HalfPositionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.HalfPositionLabel.ForeColor = System.Drawing.Color.LightSteelBlue;
        this.HalfPositionLabel.Location = new System.Drawing.Point(579, 0);
        this.HalfPositionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.HalfPositionLabel.Name = "HalfPositionLabel";
        this.HalfPositionLabel.Size = new System.Drawing.Size(65, 16);
        this.HalfPositionLabel.TabIndex = 92;
        this.HalfPositionLabel.Text = "Half";
        this.ToolTip.SetToolTip(this.HalfPositionLabel, "Half word symmetry");
        this.HalfPositionLabel.Click += new System.EventHandler(this.HalfPositionLabel_Click);
        // 
        // GroupPositionLabel
        // 
        this.GroupPositionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.GroupPositionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.GroupPositionLabel.ForeColor = System.Drawing.Color.LightSteelBlue;
        this.GroupPositionLabel.Location = new System.Drawing.Point(509, 0);
        this.GroupPositionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.GroupPositionLabel.Name = "GroupPositionLabel";
        this.GroupPositionLabel.Size = new System.Drawing.Size(75, 16);
        this.GroupPositionLabel.TabIndex = 91;
        this.GroupPositionLabel.Text = "Group";
        this.ToolTip.SetToolTip(this.GroupPositionLabel, "Group word symmetry");
        this.GroupPositionLabel.Click += new System.EventHandler(this.GroupPositionLabel_Click);
        // 
        // PartPositionLabel
        // 
        this.PartPositionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PartPositionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PartPositionLabel.ForeColor = System.Drawing.Color.LightSteelBlue;
        this.PartPositionLabel.Location = new System.Drawing.Point(459, 0);
        this.PartPositionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PartPositionLabel.Name = "PartPositionLabel";
        this.PartPositionLabel.Size = new System.Drawing.Size(56, 16);
        this.PartPositionLabel.TabIndex = 90;
        this.PartPositionLabel.Text = "Part";
        this.ToolTip.SetToolTip(this.PartPositionLabel, "Part word symmetry");
        this.PartPositionLabel.Click += new System.EventHandler(this.PartPositionLabel_Click);
        // 
        // StationPositionLabel
        // 
        this.StationPositionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.StationPositionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.StationPositionLabel.ForeColor = System.Drawing.Color.LightSteelBlue;
        this.StationPositionLabel.Location = new System.Drawing.Point(393, 0);
        this.StationPositionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.StationPositionLabel.Name = "StationPositionLabel";
        this.StationPositionLabel.Size = new System.Drawing.Size(75, 16);
        this.StationPositionLabel.TabIndex = 56;
        this.StationPositionLabel.Text = "Station";
        this.ToolTip.SetToolTip(this.StationPositionLabel, "Station word symmetry");
        this.StationPositionLabel.Click += new System.EventHandler(this.StationPositionLabel_Click);
        // 
        // PagePositionLabel
        // 
        this.PagePositionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PagePositionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PagePositionLabel.ForeColor = System.Drawing.Color.LightSkyBlue;
        this.PagePositionLabel.Location = new System.Drawing.Point(335, 0);
        this.PagePositionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PagePositionLabel.Name = "PagePositionLabel";
        this.PagePositionLabel.Size = new System.Drawing.Size(72, 16);
        this.PagePositionLabel.TabIndex = 87;
        this.PagePositionLabel.Text = "Page";
        this.ToolTip.SetToolTip(this.PagePositionLabel, "Page word symmetry");
        this.PagePositionLabel.Click += new System.EventHandler(this.PagePositionLabel_Click);
        // 
        // ChapterVerseWordLetterPositionLabel
        // 
        this.ChapterVerseWordLetterPositionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ChapterVerseWordLetterPositionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChapterVerseWordLetterPositionLabel.ForeColor = System.Drawing.Color.CornflowerBlue;
        this.ChapterVerseWordLetterPositionLabel.Location = new System.Drawing.Point(127, 0);
        this.ChapterVerseWordLetterPositionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ChapterVerseWordLetterPositionLabel.Name = "ChapterVerseWordLetterPositionLabel";
        this.ChapterVerseWordLetterPositionLabel.Size = new System.Drawing.Size(223, 16);
        this.ChapterVerseWordLetterPositionLabel.TabIndex = 89;
        this.ChapterVerseWordLetterPositionLabel.Text = " Verse    Word     Letter";
        this.ToolTip.SetToolTip(this.ChapterVerseWordLetterPositionLabel, "Verse word symmetry");
        this.ChapterVerseWordLetterPositionLabel.Click += new System.EventHandler(this.ChapterVerseWordLetterPositionLabel_Click);
        // 
        // ChapterPositionLabel
        // 
        this.ChapterPositionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ChapterPositionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChapterPositionLabel.ForeColor = System.Drawing.Color.CornflowerBlue;
        this.ChapterPositionLabel.Location = new System.Drawing.Point(8, 0);
        this.ChapterPositionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ChapterPositionLabel.Name = "ChapterPositionLabel";
        this.ChapterPositionLabel.Size = new System.Drawing.Size(128, 16);
        this.ChapterPositionLabel.TabIndex = 67;
        this.ChapterPositionLabel.Text = "    Chapter";
        this.ToolTip.SetToolTip(this.ChapterPositionLabel, "Chapter word symmetry");
        this.ChapterPositionLabel.Click += new System.EventHandler(this.ChapterPositionLabel_Click);
        // 
        // ChapterDiffTextBox
        // 
        this.ChapterDiffTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.ChapterDiffTextBox.BackColor = System.Drawing.SystemColors.Control;
        this.ChapterDiffTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChapterDiffTextBox.Location = new System.Drawing.Point(933, 17);
        this.ChapterDiffTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.ChapterDiffTextBox.Name = "ChapterDiffTextBox";
        this.ChapterDiffTextBox.ReadOnly = true;
        this.ChapterDiffTextBox.Size = new System.Drawing.Size(43, 23);
        this.ChapterDiffTextBox.TabIndex = 19;
        this.ChapterDiffTextBox.Text = "-/+";
        this.ChapterDiffTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ToolTip.SetToolTip(this.ChapterDiffTextBox, "Chapters between mouse clicks");
        this.ChapterDiffTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.ChapterDiffTextBox.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.ChapterDiffTextBox.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // LetterNumericUpDown
        // 
        this.LetterNumericUpDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.LetterNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.LetterNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.LetterNumericUpDown.Location = new System.Drawing.Point(825, 17);
        this.LetterNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.LetterNumericUpDown.Maximum = new decimal(new int[] {
            999999,
            0,
            0,
            0});
        this.LetterNumericUpDown.Name = "LetterNumericUpDown";
        this.LetterNumericUpDown.Size = new System.Drawing.Size(76, 23);
        this.LetterNumericUpDown.TabIndex = 18;
        this.LetterNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.LetterNumericUpDown.ValueChanged += new System.EventHandler(this.NumericUpDown_ValueChanged);
        this.LetterNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.LetterNumericUpDown.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.LetterNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumericUpDown_KeyDown);
        this.LetterNumericUpDown.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // WordNumericUpDown
        // 
        this.WordNumericUpDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.WordNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.WordNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.WordNumericUpDown.Location = new System.Drawing.Point(762, 17);
        this.WordNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.WordNumericUpDown.Maximum = new decimal(new int[] {
            999999,
            0,
            0,
            0});
        this.WordNumericUpDown.Name = "WordNumericUpDown";
        this.WordNumericUpDown.Size = new System.Drawing.Size(64, 23);
        this.WordNumericUpDown.TabIndex = 17;
        this.WordNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.WordNumericUpDown.ValueChanged += new System.EventHandler(this.NumericUpDown_ValueChanged);
        this.WordNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.WordNumericUpDown.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.WordNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumericUpDown_KeyDown);
        this.WordNumericUpDown.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // VerseNumericUpDown
        // 
        this.VerseNumericUpDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.VerseNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.VerseNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.VerseNumericUpDown.Location = new System.Drawing.Point(693, 17);
        this.VerseNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.VerseNumericUpDown.Maximum = new decimal(new int[] {
            9999,
            0,
            0,
            0});
        this.VerseNumericUpDown.Name = "VerseNumericUpDown";
        this.VerseNumericUpDown.Size = new System.Drawing.Size(60, 23);
        this.VerseNumericUpDown.TabIndex = 16;
        this.VerseNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.VerseNumericUpDown.ValueChanged += new System.EventHandler(this.NumericUpDown_ValueChanged);
        this.VerseNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.VerseNumericUpDown.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.VerseNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumericUpDown_KeyDown);
        this.VerseNumericUpDown.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // BowingNumericUpDown
        // 
        this.BowingNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.BowingNumericUpDown.Location = new System.Drawing.Point(701, 17);
        this.BowingNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.BowingNumericUpDown.Maximum = new decimal(new int[] {
            999,
            0,
            0,
            0});
        this.BowingNumericUpDown.Name = "BowingNumericUpDown";
        this.BowingNumericUpDown.Size = new System.Drawing.Size(64, 23);
        this.BowingNumericUpDown.TabIndex = 15;
        this.BowingNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.BowingNumericUpDown.ValueChanged += new System.EventHandler(this.NumericUpDown_ValueChanged);
        this.BowingNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.BowingNumericUpDown.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.BowingNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumericUpDown_KeyDown);
        this.BowingNumericUpDown.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // QuarterNumericUpDown
        // 
        this.QuarterNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.QuarterNumericUpDown.Location = new System.Drawing.Point(632, 17);
        this.QuarterNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.QuarterNumericUpDown.Maximum = new decimal(new int[] {
            999,
            0,
            0,
            0});
        this.QuarterNumericUpDown.Name = "QuarterNumericUpDown";
        this.QuarterNumericUpDown.Size = new System.Drawing.Size(64, 23);
        this.QuarterNumericUpDown.TabIndex = 14;
        this.QuarterNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.QuarterNumericUpDown.ValueChanged += new System.EventHandler(this.NumericUpDown_ValueChanged);
        this.QuarterNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.QuarterNumericUpDown.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.QuarterNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumericUpDown_KeyDown);
        this.QuarterNumericUpDown.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // HalfNumericUpDown
        // 
        this.HalfNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.HalfNumericUpDown.Location = new System.Drawing.Point(567, 17);
        this.HalfNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.HalfNumericUpDown.Maximum = new decimal(new int[] {
            999,
            0,
            0,
            0});
        this.HalfNumericUpDown.Name = "HalfNumericUpDown";
        this.HalfNumericUpDown.Size = new System.Drawing.Size(64, 23);
        this.HalfNumericUpDown.TabIndex = 13;
        this.HalfNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.HalfNumericUpDown.ValueChanged += new System.EventHandler(this.NumericUpDown_ValueChanged);
        this.HalfNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.HalfNumericUpDown.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.HalfNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumericUpDown_KeyDown);
        this.HalfNumericUpDown.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // GroupNumericUpDown
        // 
        this.GroupNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.GroupNumericUpDown.Location = new System.Drawing.Point(509, 17);
        this.GroupNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.GroupNumericUpDown.Maximum = new decimal(new int[] {
            99,
            0,
            0,
            0});
        this.GroupNumericUpDown.Name = "GroupNumericUpDown";
        this.GroupNumericUpDown.Size = new System.Drawing.Size(59, 23);
        this.GroupNumericUpDown.TabIndex = 12;
        this.GroupNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.GroupNumericUpDown.ValueChanged += new System.EventHandler(this.NumericUpDown_ValueChanged);
        this.GroupNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.GroupNumericUpDown.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.GroupNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumericUpDown_KeyDown);
        this.GroupNumericUpDown.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // PartNumericUpDown
        // 
        this.PartNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PartNumericUpDown.Location = new System.Drawing.Point(451, 17);
        this.PartNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.PartNumericUpDown.Maximum = new decimal(new int[] {
            99,
            0,
            0,
            0});
        this.PartNumericUpDown.Name = "PartNumericUpDown";
        this.PartNumericUpDown.Size = new System.Drawing.Size(59, 23);
        this.PartNumericUpDown.TabIndex = 11;
        this.PartNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.PartNumericUpDown.ValueChanged += new System.EventHandler(this.NumericUpDown_ValueChanged);
        this.PartNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.PartNumericUpDown.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.PartNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumericUpDown_KeyDown);
        this.PartNumericUpDown.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // StationNumericUpDown
        // 
        this.StationNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.StationNumericUpDown.Location = new System.Drawing.Point(392, 17);
        this.StationNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.StationNumericUpDown.Maximum = new decimal(new int[] {
            9,
            0,
            0,
            0});
        this.StationNumericUpDown.Name = "StationNumericUpDown";
        this.StationNumericUpDown.Size = new System.Drawing.Size(59, 23);
        this.StationNumericUpDown.TabIndex = 10;
        this.StationNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.StationNumericUpDown.ValueChanged += new System.EventHandler(this.NumericUpDown_ValueChanged);
        this.StationNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.StationNumericUpDown.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.StationNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumericUpDown_KeyDown);
        this.StationNumericUpDown.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // PageNumericUpDown
        // 
        this.PageNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.PageNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PageNumericUpDown.Location = new System.Drawing.Point(336, 17);
        this.PageNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.PageNumericUpDown.Maximum = new decimal(new int[] {
            999,
            0,
            0,
            0});
        this.PageNumericUpDown.Name = "PageNumericUpDown";
        this.PageNumericUpDown.Size = new System.Drawing.Size(56, 23);
        this.PageNumericUpDown.TabIndex = 9;
        this.PageNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.PageNumericUpDown.ValueChanged += new System.EventHandler(this.NumericUpDown_ValueChanged);
        this.PageNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.PageNumericUpDown.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.PageNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumericUpDown_KeyDown);
        this.PageNumericUpDown.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // ChapterLetterNumericUpDown
        // 
        this.ChapterLetterNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.ChapterLetterNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChapterLetterNumericUpDown.Location = new System.Drawing.Point(256, 17);
        this.ChapterLetterNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.ChapterLetterNumericUpDown.Maximum = new decimal(new int[] {
            99999,
            0,
            0,
            0});
        this.ChapterLetterNumericUpDown.Name = "ChapterLetterNumericUpDown";
        this.ChapterLetterNumericUpDown.Size = new System.Drawing.Size(76, 23);
        this.ChapterLetterNumericUpDown.TabIndex = 8;
        this.ChapterLetterNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ChapterLetterNumericUpDown.ValueChanged += new System.EventHandler(this.NumericUpDown_ValueChanged);
        this.ChapterLetterNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.ChapterLetterNumericUpDown.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.ChapterLetterNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumericUpDown_KeyDown);
        this.ChapterLetterNumericUpDown.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // ChapterWordNumericUpDown
        // 
        this.ChapterWordNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.ChapterWordNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChapterWordNumericUpDown.Location = new System.Drawing.Point(189, 17);
        this.ChapterWordNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.ChapterWordNumericUpDown.Maximum = new decimal(new int[] {
            9999,
            0,
            0,
            0});
        this.ChapterWordNumericUpDown.Name = "ChapterWordNumericUpDown";
        this.ChapterWordNumericUpDown.Size = new System.Drawing.Size(67, 23);
        this.ChapterWordNumericUpDown.TabIndex = 7;
        this.ChapterWordNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ChapterWordNumericUpDown.ValueChanged += new System.EventHandler(this.NumericUpDown_ValueChanged);
        this.ChapterWordNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.ChapterWordNumericUpDown.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.ChapterWordNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumericUpDown_KeyDown);
        this.ChapterWordNumericUpDown.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // ChapterVerseNumericUpDown
        // 
        this.ChapterVerseNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.ChapterVerseNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChapterVerseNumericUpDown.Location = new System.Drawing.Point(128, 17);
        this.ChapterVerseNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.ChapterVerseNumericUpDown.Maximum = new decimal(new int[] {
            999,
            0,
            0,
            0});
        this.ChapterVerseNumericUpDown.Name = "ChapterVerseNumericUpDown";
        this.ChapterVerseNumericUpDown.Size = new System.Drawing.Size(61, 23);
        this.ChapterVerseNumericUpDown.TabIndex = 6;
        this.ChapterVerseNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ChapterVerseNumericUpDown.ValueChanged += new System.EventHandler(this.NumericUpDown_ValueChanged);
        this.ChapterVerseNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.ChapterVerseNumericUpDown.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.ChapterVerseNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumericUpDown_KeyDown);
        this.ChapterVerseNumericUpDown.Leave += new System.EventHandler(this.NumericUpDown_Leave);
        // 
        // ChapterComboBox
        // 
        this.ChapterComboBox.DropDownHeight = 594;
        this.ChapterComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.Simple;
        this.ChapterComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChapterComboBox.FormattingEnabled = true;
        this.ChapterComboBox.IntegralHeight = false;
        this.ChapterComboBox.Location = new System.Drawing.Point(7, 17);
        this.ChapterComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.ChapterComboBox.Name = "ChapterComboBox";
        this.ChapterComboBox.Size = new System.Drawing.Size(120, 24);
        this.ChapterComboBox.TabIndex = 5;
        this.ChapterComboBox.SelectedIndexChanged += new System.EventHandler(this.ChapterComboBox_SelectedIndexChanged);
        this.ChapterComboBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.ChapterComboBox.Enter += new System.EventHandler(this.NumericUpDown_Enter);
        this.ChapterComboBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.ChapterComboBox_KeyDown);
        this.ChapterComboBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // ChapterGroupBox
        // 
        this.ChapterGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)));
        this.ChapterGroupBox.BackColor = System.Drawing.Color.Transparent;
        this.ChapterGroupBox.Controls.Add(this.InspectChaptersLabel);
        this.ChapterGroupBox.Controls.Add(this.WordsListBox);
        this.ChapterGroupBox.Controls.Add(this.PinChapter1CheckBox);
        this.ChapterGroupBox.Controls.Add(this.ChaptersListBox);
        this.ChapterGroupBox.Controls.Add(this.FontComboBox);
        this.ChapterGroupBox.Controls.Add(this.WordsListBoxLabel);
        this.ChapterGroupBox.Cursor = System.Windows.Forms.Cursors.Default;
        this.ChapterGroupBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChapterGroupBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.ChapterGroupBox.Location = new System.Drawing.Point(1, 46);
        this.ChapterGroupBox.Margin = new System.Windows.Forms.Padding(4);
        this.ChapterGroupBox.Name = "ChapterGroupBox";
        this.ChapterGroupBox.Padding = new System.Windows.Forms.Padding(4);
        this.ChapterGroupBox.Size = new System.Drawing.Size(136, 650);
        this.ChapterGroupBox.TabIndex = 92;
        this.ChapterGroupBox.TabStop = false;
        this.ChapterGroupBox.Text = "  0 Chapters       ";
        this.ToolTip.SetToolTip(this.ChapterGroupBox, "Revelation التنزيل");
        // 
        // InspectChaptersLabel
        // 
        this.InspectChaptersLabel.BackColor = System.Drawing.Color.Transparent;
        this.InspectChaptersLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.InspectChaptersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.InspectChaptersLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.InspectChaptersLabel.Image = ((System.Drawing.Image)(resources.GetObject("InspectChaptersLabel.Image")));
        this.InspectChaptersLabel.Location = new System.Drawing.Point(103, 0);
        this.InspectChaptersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.InspectChaptersLabel.Name = "InspectChaptersLabel";
        this.InspectChaptersLabel.Size = new System.Drawing.Size(25, 20);
        this.InspectChaptersLabel.TabIndex = 202;
        this.ToolTip.SetToolTip(this.InspectChaptersLabel, "Inspect chapters");
        this.InspectChaptersLabel.Click += new System.EventHandler(this.InspectChaptersLabel_Click);
        // 
        // WordsListBox
        // 
        this.WordsListBox.BackColor = System.Drawing.Color.LightSteelBlue;
        this.WordsListBox.ColumnWidth = 63;
        this.WordsListBox.ContextMenuStrip = this.WordsListBoxContextMenuStrip;
        this.WordsListBox.Dock = System.Windows.Forms.DockStyle.Fill;
        this.WordsListBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.WordsListBox.FormattingEnabled = true;
        this.WordsListBox.ItemHeight = 17;
        this.WordsListBox.Location = new System.Drawing.Point(4, 20);
        this.WordsListBox.Margin = new System.Windows.Forms.Padding(4);
        this.WordsListBox.Name = "WordsListBox";
        this.WordsListBox.ScrollAlwaysVisible = true;
        this.WordsListBox.SelectionMode = System.Windows.Forms.SelectionMode.MultiExtended;
        this.WordsListBox.Size = new System.Drawing.Size(128, 626);
        this.WordsListBox.TabIndex = 3;
        this.WordsListBox.Click += new System.EventHandler(this.WordsListBox_Click);
        this.WordsListBox.SelectedIndexChanged += new System.EventHandler(this.WordsListBox_SelectedIndexChanged);
        this.WordsListBox.DoubleClick += new System.EventHandler(this.WordsListBox_DoubleClick);
        this.WordsListBox.Enter += new System.EventHandler(this.WordsListBox_Enter);
        this.WordsListBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.WordsListBox_KeyDown);
        this.WordsListBox.MouseDown += new System.Windows.Forms.MouseEventHandler(this.WordsListBox_MouseDown);
        this.WordsListBox.MouseMove += new System.Windows.Forms.MouseEventHandler(this.WordsListBox_MouseMove);
        // 
        // WordsListBoxContextMenuStrip
        // 
        this.WordsListBoxContextMenuStrip.ImageScalingSize = new System.Drawing.Size(20, 20);
        this.WordsListBoxContextMenuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.FindSelectedWordsMenuItem});
        this.WordsListBoxContextMenuStrip.Name = "WordsListBoxContextMenuStrip";
        this.WordsListBoxContextMenuStrip.Size = new System.Drawing.Size(107, 28);
        // 
        // FindSelectedWordsMenuItem
        // 
        this.FindSelectedWordsMenuItem.Name = "FindSelectedWordsMenuItem";
        this.FindSelectedWordsMenuItem.Size = new System.Drawing.Size(106, 24);
        this.FindSelectedWordsMenuItem.Text = "Find";
        this.FindSelectedWordsMenuItem.Click += new System.EventHandler(this.FindSelectedWordsMenuItem_Click);
        // 
        // PinChapter1CheckBox
        // 
        this.PinChapter1CheckBox.AutoSize = true;
        this.PinChapter1CheckBox.Checked = true;
        this.PinChapter1CheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
        this.PinChapter1CheckBox.Location = new System.Drawing.Point(109, 22);
        this.PinChapter1CheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.PinChapter1CheckBox.Name = "PinChapter1CheckBox";
        this.PinChapter1CheckBox.Size = new System.Drawing.Size(18, 17);
        this.PinChapter1CheckBox.TabIndex = 201;
        this.ToolTip.SetToolTip(this.PinChapter1CheckBox, "Pin الفاتحة");
        this.PinChapter1CheckBox.UseVisualStyleBackColor = true;
        this.PinChapter1CheckBox.CheckStateChanged += new System.EventHandler(this.PinChapter1CheckBox_CheckStateChanged);
        // 
        // ChaptersListBox
        // 
        this.ChaptersListBox.BackColor = System.Drawing.SystemColors.Info;
        this.ChaptersListBox.ColumnWidth = 63;
        this.ChaptersListBox.Dock = System.Windows.Forms.DockStyle.Fill;
        this.ChaptersListBox.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
        this.ChaptersListBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChaptersListBox.FormattingEnabled = true;
        this.ChaptersListBox.Location = new System.Drawing.Point(4, 20);
        this.ChaptersListBox.Margin = new System.Windows.Forms.Padding(4);
        this.ChaptersListBox.Name = "ChaptersListBox";
        this.ChaptersListBox.ScrollAlwaysVisible = true;
        this.ChaptersListBox.SelectionMode = System.Windows.Forms.SelectionMode.MultiExtended;
        this.ChaptersListBox.Size = new System.Drawing.Size(128, 626);
        this.ChaptersListBox.TabIndex = 3;
        this.ChaptersListBox.SelectedIndexChanged += new System.EventHandler(this.ChaptersListBox_SelectedIndexChanged);
        this.ChaptersListBox.MouseMove += new System.Windows.Forms.MouseEventHandler(this.ChaptersListBox_MouseMove);
        // 
        // FontComboBox
        // 
        this.FontComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.FontComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FontComboBox.FormattingEnabled = true;
        this.FontComboBox.Location = new System.Drawing.Point(161, -2);
        this.FontComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.FontComboBox.Name = "FontComboBox";
        this.FontComboBox.Size = new System.Drawing.Size(83, 23);
        this.FontComboBox.TabIndex = 109;
        this.ToolTip.SetToolTip(this.FontComboBox, "Font");
        this.FontComboBox.Visible = false;
        this.FontComboBox.SelectedIndexChanged += new System.EventHandler(this.FontComboBox_SelectedIndexChanged);
        // 
        // WordsListBoxLabel
        // 
        this.WordsListBoxLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.WordsListBoxLabel.BackColor = System.Drawing.Color.LightSteelBlue;
        this.WordsListBoxLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.WordsListBoxLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.WordsListBoxLabel.ForeColor = System.Drawing.Color.Black;
        this.WordsListBoxLabel.Location = new System.Drawing.Point(3, 0);
        this.WordsListBoxLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.WordsListBoxLabel.Name = "WordsListBoxLabel";
        this.WordsListBoxLabel.Size = new System.Drawing.Size(103, 20);
        this.WordsListBoxLabel.TabIndex = 89;
        this.WordsListBoxLabel.Text = "000 (00)";
        this.WordsListBoxLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.WordsListBoxLabel, "Sort");
        this.WordsListBoxLabel.Click += new System.EventHandler(this.WordsListBoxLabel_Click);
        this.WordsListBoxLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // ClientSplitContainer
        // 
        this.ClientSplitContainer.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.ClientSplitContainer.BackColor = System.Drawing.Color.Transparent;
        this.ClientSplitContainer.ForeColor = System.Drawing.SystemColors.WindowText;
        this.ClientSplitContainer.Location = new System.Drawing.Point(136, 50);
        this.ClientSplitContainer.Margin = new System.Windows.Forms.Padding(4);
        this.ClientSplitContainer.Name = "ClientSplitContainer";
        this.ClientSplitContainer.Orientation = System.Windows.Forms.Orientation.Horizontal;
        // 
        // ClientSplitContainer.Panel1
        // 
        this.ClientSplitContainer.Panel1.BackColor = System.Drawing.Color.Transparent;
        this.ClientSplitContainer.Panel1.Controls.Add(this.MainTextBox);
        this.ClientSplitContainer.Panel1.Controls.Add(this.SearchResultTextBox);
        this.ClientSplitContainer.Panel1.Controls.Add(this.HeaderPanel);
        this.ClientSplitContainer.Panel1.Controls.Add(this.PictureBox);
        this.ClientSplitContainer.Panel1.ForeColor = System.Drawing.SystemColors.WindowText;
        // 
        // ClientSplitContainer.Panel2
        // 
        this.ClientSplitContainer.Panel2.BackColor = System.Drawing.Color.LightGray;
        this.ClientSplitContainer.Panel2.Controls.Add(this.TabControl);
        this.ClientSplitContainer.Size = new System.Drawing.Size(757, 658);
        this.ClientSplitContainer.SplitterDistance = 413;
        this.ClientSplitContainer.TabIndex = 6;
        this.ClientSplitContainer.SplitterMoved += new System.Windows.Forms.SplitterEventHandler(this.ClientSplitContainer_SplitterMoved);
        this.ClientSplitContainer.Resize += new System.EventHandler(this.ClientSplitContainer_Resize);
        // 
        // MainTextBox
        // 
        this.MainTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.MainTextBox.BackColor = System.Drawing.SystemColors.Info;
        this.MainTextBox.Font = new System.Drawing.Font("Traditional Arabic", 20F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MainTextBox.ForeColor = System.Drawing.Color.Navy;
        this.MainTextBox.Location = new System.Drawing.Point(1, 16);
        this.MainTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MainTextBox.Name = "MainTextBox";
        this.MainTextBox.ReadOnly = true;
        this.MainTextBox.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
        this.MainTextBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.ForcedBoth;
        this.MainTextBox.SelectionAlignment = RichTextBoxEx.TextAlign.Right;
        this.MainTextBox.Size = new System.Drawing.Size(756, 398);
        this.MainTextBox.TabIndex = 69;
        this.MainTextBox.Text = "";
        this.MainTextBox.WordWrap = false;
        this.MainTextBox.SelectionChanged += new System.EventHandler(this.MainTextBox_SelectionChanged);
        this.MainTextBox.Click += new System.EventHandler(this.MainTextBox_Click);
        this.MainTextBox.TextChanged += new System.EventHandler(this.MainTextBox_TextChanged);
        this.MainTextBox.DoubleClick += new System.EventHandler(this.MainTextBox_DoubleClick);
        this.MainTextBox.Enter += new System.EventHandler(this.MainTextBox_Enter);
        this.MainTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.MainTextBox_KeyDown);
        this.MainTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.MainTextBox_KeyPress);
        this.MainTextBox.KeyUp += new System.Windows.Forms.KeyEventHandler(this.MainTextBox_KeyUp);
        this.MainTextBox.MouseDown += new System.Windows.Forms.MouseEventHandler(this.MainTextBox_MouseDown);
        this.MainTextBox.MouseEnter += new System.EventHandler(this.MainTextBox_MouseEnter);
        this.MainTextBox.MouseLeave += new System.EventHandler(this.MainTextBox_MouseLeave);
        this.MainTextBox.MouseMove += new System.Windows.Forms.MouseEventHandler(this.MainTextBox_MouseMove);
        this.MainTextBox.MouseUp += new System.Windows.Forms.MouseEventHandler(this.MainTextBox_MouseUp);
        // 
        // SearchResultTextBox
        // 
        this.SearchResultTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.SearchResultTextBox.BackColor = System.Drawing.Color.AliceBlue;
        this.SearchResultTextBox.Font = new System.Drawing.Font("Traditional Arabic", 20F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.SearchResultTextBox.ForeColor = System.Drawing.Color.Navy;
        this.SearchResultTextBox.Location = new System.Drawing.Point(1, 16);
        this.SearchResultTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.SearchResultTextBox.Name = "SearchResultTextBox";
        this.SearchResultTextBox.ReadOnly = true;
        this.SearchResultTextBox.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
        this.SearchResultTextBox.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.ForcedBoth;
        this.SearchResultTextBox.SelectionAlignment = RichTextBoxEx.TextAlign.Right;
        this.SearchResultTextBox.Size = new System.Drawing.Size(756, 398);
        this.SearchResultTextBox.TabIndex = 70;
        this.SearchResultTextBox.Text = "";
        this.SearchResultTextBox.WordWrap = false;
        this.SearchResultTextBox.SelectionChanged += new System.EventHandler(this.MainTextBox_SelectionChanged);
        this.SearchResultTextBox.Click += new System.EventHandler(this.MainTextBox_Click);
        this.SearchResultTextBox.TextChanged += new System.EventHandler(this.MainTextBox_TextChanged);
        this.SearchResultTextBox.DoubleClick += new System.EventHandler(this.MainTextBox_DoubleClick);
        this.SearchResultTextBox.Enter += new System.EventHandler(this.MainTextBox_Enter);
        this.SearchResultTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.MainTextBox_KeyDown);
        this.SearchResultTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.MainTextBox_KeyPress);
        this.SearchResultTextBox.KeyUp += new System.Windows.Forms.KeyEventHandler(this.MainTextBox_KeyUp);
        this.SearchResultTextBox.MouseDown += new System.Windows.Forms.MouseEventHandler(this.MainTextBox_MouseDown);
        this.SearchResultTextBox.MouseEnter += new System.EventHandler(this.MainTextBox_MouseEnter);
        this.SearchResultTextBox.MouseLeave += new System.EventHandler(this.MainTextBox_MouseLeave);
        this.SearchResultTextBox.MouseMove += new System.Windows.Forms.MouseEventHandler(this.MainTextBox_MouseMove);
        this.SearchResultTextBox.MouseUp += new System.Windows.Forms.MouseEventHandler(this.MainTextBox_MouseUp);
        // 
        // HeaderPanel
        // 
        this.HeaderPanel.BackColor = System.Drawing.Color.Transparent;
        this.HeaderPanel.Controls.Add(this.GenerateSentencesLabel);
        this.HeaderPanel.Controls.Add(this.DuplicateLettersCheckBox);
        this.HeaderPanel.Controls.Add(this.GoldenRatioScopeLabel);
        this.HeaderPanel.Controls.Add(this.DisplayProstrationVersesLabel);
        this.HeaderPanel.Controls.Add(this.GoldenRatioTypeLabel);
        this.HeaderPanel.Controls.Add(this.WordWrapLabel);
        this.HeaderPanel.Controls.Add(this.FontLabel);
        this.HeaderPanel.Controls.Add(this.EscapeButton);
        this.HeaderPanel.Controls.Add(this.ZoomOutLabel);
        this.HeaderPanel.Controls.Add(this.GoldenRatioOrderLabel);
        this.HeaderPanel.Controls.Add(this.ZoomInLabel);
        this.HeaderPanel.Controls.Add(this.InspectVersesLabel);
        this.HeaderPanel.Controls.Add(this.HeaderLabel);
        this.HeaderPanel.Dock = System.Windows.Forms.DockStyle.Top;
        this.HeaderPanel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.HeaderPanel.Location = new System.Drawing.Point(0, 0);
        this.HeaderPanel.Margin = new System.Windows.Forms.Padding(4);
        this.HeaderPanel.Name = "HeaderPanel";
        this.HeaderPanel.Size = new System.Drawing.Size(757, 17);
        this.HeaderPanel.TabIndex = 88;
        // 
        // GenerateSentencesLabel
        // 
        this.GenerateSentencesLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.GenerateSentencesLabel.BackColor = System.Drawing.Color.Transparent;
        this.GenerateSentencesLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.GenerateSentencesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.GenerateSentencesLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.GenerateSentencesLabel.Image = ((System.Drawing.Image)(resources.GetObject("GenerateSentencesLabel.Image")));
        this.GenerateSentencesLabel.Location = new System.Drawing.Point(649, -3);
        this.GenerateSentencesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.GenerateSentencesLabel.Name = "GenerateSentencesLabel";
        this.GenerateSentencesLabel.Size = new System.Drawing.Size(14, 23);
        this.GenerateSentencesLabel.TabIndex = 116;
        this.ToolTip.SetToolTip(this.GenerateSentencesLabel, "Generate sentences");
        this.GenerateSentencesLabel.Visible = false;
        this.GenerateSentencesLabel.Click += new System.EventHandler(this.GenerateSentencesLabel_Click);
        // 
        // DuplicateLettersCheckBox
        // 
        this.DuplicateLettersCheckBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.DuplicateLettersCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.DuplicateLettersCheckBox.CheckAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.DuplicateLettersCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DuplicateLettersCheckBox.ForeColor = System.Drawing.Color.Navy;
        this.DuplicateLettersCheckBox.Location = new System.Drawing.Point(655, -1);
        this.DuplicateLettersCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.DuplicateLettersCheckBox.Name = "DuplicateLettersCheckBox";
        this.DuplicateLettersCheckBox.Size = new System.Drawing.Size(20, 18);
        this.DuplicateLettersCheckBox.TabIndex = 117;
        this.ToolTip.SetToolTip(this.DuplicateLettersCheckBox, "Duplicate letters");
        this.DuplicateLettersCheckBox.UseVisualStyleBackColor = false;
        this.DuplicateLettersCheckBox.Visible = false;
        // 
        // GoldenRatioScopeLabel
        // 
        this.GoldenRatioScopeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.GoldenRatioScopeLabel.BackColor = System.Drawing.Color.Transparent;
        this.GoldenRatioScopeLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.GoldenRatioScopeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.GoldenRatioScopeLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.GoldenRatioScopeLabel.Image = ((System.Drawing.Image)(resources.GetObject("GoldenRatioScopeLabel.Image")));
        this.GoldenRatioScopeLabel.Location = new System.Drawing.Point(677, -1);
        this.GoldenRatioScopeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.GoldenRatioScopeLabel.Name = "GoldenRatioScopeLabel";
        this.GoldenRatioScopeLabel.Size = new System.Drawing.Size(24, 4);
        this.GoldenRatioScopeLabel.TabIndex = 108;
        this.GoldenRatioScopeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.GoldenRatioScopeLabel, "Golden ratio colorization");
        this.GoldenRatioScopeLabel.Click += new System.EventHandler(this.GoldenRatioScopeLabel_Click);
        // 
        // DisplayProstrationVersesLabel
        // 
        this.DisplayProstrationVersesLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.DisplayProstrationVersesLabel.BackColor = System.Drawing.Color.Transparent;
        this.DisplayProstrationVersesLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DisplayProstrationVersesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DisplayProstrationVersesLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DisplayProstrationVersesLabel.Location = new System.Drawing.Point(724, -2);
        this.DisplayProstrationVersesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DisplayProstrationVersesLabel.Name = "DisplayProstrationVersesLabel";
        this.DisplayProstrationVersesLabel.Size = new System.Drawing.Size(19, 17);
        this.DisplayProstrationVersesLabel.TabIndex = 119;
        this.DisplayProstrationVersesLabel.Text = "۩";
        this.DisplayProstrationVersesLabel.TextAlign = System.Drawing.ContentAlignment.TopCenter;
        this.ToolTip.SetToolTip(this.DisplayProstrationVersesLabel, "Prostration verses");
        this.DisplayProstrationVersesLabel.Click += new System.EventHandler(this.DisplayProstrationVersesLabel_Click);
        // 
        // GoldenRatioTypeLabel
        // 
        this.GoldenRatioTypeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.GoldenRatioTypeLabel.BackColor = System.Drawing.Color.Transparent;
        this.GoldenRatioTypeLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.GoldenRatioTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.GoldenRatioTypeLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.GoldenRatioTypeLabel.Image = ((System.Drawing.Image)(resources.GetObject("GoldenRatioTypeLabel.Image")));
        this.GoldenRatioTypeLabel.Location = new System.Drawing.Point(677, 5);
        this.GoldenRatioTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.GoldenRatioTypeLabel.Name = "GoldenRatioTypeLabel";
        this.GoldenRatioTypeLabel.Size = new System.Drawing.Size(24, 4);
        this.GoldenRatioTypeLabel.TabIndex = 131;
        this.GoldenRatioTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.GoldenRatioTypeLabel, "Text-based  golden ratio");
        this.GoldenRatioTypeLabel.Click += new System.EventHandler(this.GoldenRatioTypeLabel_Click);
        // 
        // WordWrapLabel
        // 
        this.WordWrapLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.WordWrapLabel.BackColor = System.Drawing.Color.Transparent;
        this.WordWrapLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.WordWrapLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.WordWrapLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.WordWrapLabel.Image = ((System.Drawing.Image)(resources.GetObject("WordWrapLabel.Image")));
        this.WordWrapLabel.Location = new System.Drawing.Point(737, -3);
        this.WordWrapLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.WordWrapLabel.Name = "WordWrapLabel";
        this.WordWrapLabel.Size = new System.Drawing.Size(25, 23);
        this.WordWrapLabel.TabIndex = 99;
        this.WordWrapLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.WordWrapLabel, "Wrap text");
        this.WordWrapLabel.Click += new System.EventHandler(this.WordWrapLabel_Click);
        // 
        // FontLabel
        // 
        this.FontLabel.BackColor = System.Drawing.Color.Transparent;
        this.FontLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FontLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Italic))), System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FontLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FontLabel.Image = ((System.Drawing.Image)(resources.GetObject("FontLabel.Image")));
        this.FontLabel.Location = new System.Drawing.Point(26, -2);
        this.FontLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FontLabel.Name = "FontLabel";
        this.FontLabel.Size = new System.Drawing.Size(24, 18);
        this.FontLabel.TabIndex = 0;
        this.FontLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.FontLabel, "Font");
        this.FontLabel.Click += new System.EventHandler(this.FontLabel_Click);
        // 
        // EscapeButton
        // 
        this.EscapeButton.BackColor = System.Drawing.Color.Transparent;
        this.EscapeButton.Cursor = System.Windows.Forms.Cursors.Hand;
        this.EscapeButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Italic))), System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.EscapeButton.ForeColor = System.Drawing.SystemColors.Window;
        this.EscapeButton.Image = ((System.Drawing.Image)(resources.GetObject("EscapeButton.Image")));
        this.EscapeButton.Location = new System.Drawing.Point(1, -2);
        this.EscapeButton.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.EscapeButton.Name = "EscapeButton";
        this.EscapeButton.Size = new System.Drawing.Size(24, 21);
        this.EscapeButton.TabIndex = 114;
        this.EscapeButton.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.EscapeButton, "Esc");
        this.EscapeButton.Click += new System.EventHandler(this.EscapeButton_Click);
        // 
        // ZoomOutLabel
        // 
        this.ZoomOutLabel.BackColor = System.Drawing.Color.Transparent;
        this.ZoomOutLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ZoomOutLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Italic))), System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ZoomOutLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.ZoomOutLabel.Image = ((System.Drawing.Image)(resources.GetObject("ZoomOutLabel.Image")));
        this.ZoomOutLabel.Location = new System.Drawing.Point(51, -2);
        this.ZoomOutLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ZoomOutLabel.Name = "ZoomOutLabel";
        this.ZoomOutLabel.Size = new System.Drawing.Size(24, 18);
        this.ZoomOutLabel.TabIndex = 0;
        this.ZoomOutLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.ZoomOutLabel, "Zoom out");
        this.ZoomOutLabel.Click += new System.EventHandler(this.ZoomOutLabel_Click);
        // 
        // GoldenRatioOrderLabel
        // 
        this.GoldenRatioOrderLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.GoldenRatioOrderLabel.BackColor = System.Drawing.Color.Transparent;
        this.GoldenRatioOrderLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.GoldenRatioOrderLabel.Enabled = false;
        this.GoldenRatioOrderLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.GoldenRatioOrderLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.GoldenRatioOrderLabel.Image = ((System.Drawing.Image)(resources.GetObject("GoldenRatioOrderLabel.Image")));
        this.GoldenRatioOrderLabel.Location = new System.Drawing.Point(677, 11);
        this.GoldenRatioOrderLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.GoldenRatioOrderLabel.Name = "GoldenRatioOrderLabel";
        this.GoldenRatioOrderLabel.Size = new System.Drawing.Size(24, 4);
        this.GoldenRatioOrderLabel.TabIndex = 107;
        this.GoldenRatioOrderLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.GoldenRatioOrderLabel, "Golden ratio ~= 0.618 + 1");
        this.GoldenRatioOrderLabel.Click += new System.EventHandler(this.GoldenRatioOrderLabel_Click);
        // 
        // ZoomInLabel
        // 
        this.ZoomInLabel.BackColor = System.Drawing.Color.Transparent;
        this.ZoomInLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ZoomInLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Italic))), System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ZoomInLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.ZoomInLabel.Image = ((System.Drawing.Image)(resources.GetObject("ZoomInLabel.Image")));
        this.ZoomInLabel.Location = new System.Drawing.Point(72, -2);
        this.ZoomInLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ZoomInLabel.Name = "ZoomInLabel";
        this.ZoomInLabel.Size = new System.Drawing.Size(24, 18);
        this.ZoomInLabel.TabIndex = 0;
        this.ZoomInLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.ZoomInLabel, "Zoom in");
        this.ZoomInLabel.Click += new System.EventHandler(this.ZoomInLabel_Click);
        // 
        // InspectVersesLabel
        // 
        this.InspectVersesLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.InspectVersesLabel.BackColor = System.Drawing.Color.Transparent;
        this.InspectVersesLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.InspectVersesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.InspectVersesLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.InspectVersesLabel.Image = ((System.Drawing.Image)(resources.GetObject("InspectVersesLabel.Image")));
        this.InspectVersesLabel.Location = new System.Drawing.Point(702, -3);
        this.InspectVersesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.InspectVersesLabel.Name = "InspectVersesLabel";
        this.InspectVersesLabel.Size = new System.Drawing.Size(25, 20);
        this.InspectVersesLabel.TabIndex = 113;
        this.ToolTip.SetToolTip(this.InspectVersesLabel, "Inspect verses");
        this.InspectVersesLabel.Click += new System.EventHandler(this.InspectVersesLabel_Click);
        // 
        // HeaderLabel
        // 
        this.HeaderLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.HeaderLabel.BackColor = System.Drawing.Color.Transparent;
        this.HeaderLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.HeaderLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.HeaderLabel.Location = new System.Drawing.Point(4, -5);
        this.HeaderLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.HeaderLabel.Name = "HeaderLabel";
        this.HeaderLabel.Size = new System.Drawing.Size(749, 20);
        this.HeaderLabel.TabIndex = 1;
        this.HeaderLabel.Text = "Header Information";
        this.HeaderLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.HeaderLabel.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        // 
        // PictureBox
        // 
        this.PictureBox.BackColor = System.Drawing.Color.Black;
        this.PictureBox.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PictureBox.Image = null;
        this.PictureBox.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.High;
        this.PictureBox.Location = new System.Drawing.Point(1, 16);
        this.PictureBox.Margin = new System.Windows.Forms.Padding(4);
        this.PictureBox.Name = "PictureBox";
        this.PictureBox.Size = new System.Drawing.Size(763, 447);
        this.PictureBox.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;
        this.PictureBox.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighSpeed;
        this.PictureBox.TabIndex = 99;
        this.PictureBox.Visible = false;
        this.PictureBox.ZoomFactor = 1F;
        this.PictureBox.MouseHover += new System.EventHandler(this.PictureBox_MouseHover);
        this.PictureBox.MouseMove += new System.Windows.Forms.MouseEventHandler(this.PictureBox_MouseMove);
        // 
        // TabControl
        // 
        this.TabControl.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.TabControl.Controls.Add(this.TranslationTabPage);
        this.TabControl.Controls.Add(this.GrammarTabPage);
        this.TabControl.Controls.Add(this.RelatedWordsTabPage);
        this.TabControl.Controls.Add(this.SymmetryTabPage);
        this.TabControl.Controls.Add(this.ValuesSequenceTabPage);
        this.TabControl.Controls.Add(this.CVWLSequenceTabPage);
        this.TabControl.Controls.Add(this.DNASequenceTabPage);
        this.TabControl.Controls.Add(this.MathsTabPage);
        this.TabControl.Controls.Add(this.DistancesTabPage);
        this.TabControl.Controls.Add(this.UserTextTabPage);
        this.TabControl.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.TabControl.Location = new System.Drawing.Point(-3, -1);
        this.TabControl.Margin = new System.Windows.Forms.Padding(4);
        this.TabControl.Name = "TabControl";
        this.TabControl.SelectedIndex = 0;
        this.TabControl.ShowToolTips = true;
        this.TabControl.Size = new System.Drawing.Size(752, 241);
        this.TabControl.TabIndex = 102;
        this.TabControl.SelectedIndexChanged += new System.EventHandler(this.TabControl_SelectedIndexChanged);
        this.TabControl.Click += new System.EventHandler(this.TabControl_Click);
        this.TabControl.Enter += new System.EventHandler(this.TabControl_Enter);
        // 
        // TranslationTabPage
        // 
        this.TranslationTabPage.BackColor = System.Drawing.SystemColors.ControlLight;
        this.TranslationTabPage.Controls.Add(this.TranslationSplitContainer);
        this.TranslationTabPage.Location = new System.Drawing.Point(4, 26);
        this.TranslationTabPage.Margin = new System.Windows.Forms.Padding(4);
        this.TranslationTabPage.Name = "TranslationTabPage";
        this.TranslationTabPage.Padding = new System.Windows.Forms.Padding(4);
        this.TranslationTabPage.Size = new System.Drawing.Size(744, 211);
        this.TranslationTabPage.TabIndex = 190;
        this.TranslationTabPage.Text = "Translation";
        this.TranslationTabPage.ToolTipText = "Translations for current selection/verse\r\nترجمة الءاية أو الءايات المظللة";
        this.TranslationTabPage.UseVisualStyleBackColor = true;
        // 
        // TranslationSplitContainer
        // 
        this.TranslationSplitContainer.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.TranslationSplitContainer.Location = new System.Drawing.Point(-3, 1);
        this.TranslationSplitContainer.Margin = new System.Windows.Forms.Padding(4);
        this.TranslationSplitContainer.Name = "TranslationSplitContainer";
        // 
        // TranslationSplitContainer.Panel1
        // 
        this.TranslationSplitContainer.Panel1.Controls.Add(this.TranslationFontLabel);
        this.TranslationSplitContainer.Panel1.Controls.Add(this.EditSaveTranslationLabel);
        this.TranslationSplitContainer.Panel1.Controls.Add(this.TranslatorComboBox);
        this.TranslationSplitContainer.Panel1.Controls.Add(this.TranslationTextBox);
        // 
        // TranslationSplitContainer.Panel2
        // 
        this.TranslationSplitContainer.Panel2.Controls.Add(this.TranslatorsCheckedListBox);
        this.TranslationSplitContainer.Panel2.Controls.Add(this.TranslationsApplySettingsLabel);
        this.TranslationSplitContainer.Panel2.Controls.Add(this.TranslationsCancelSettingsLabel);
        this.TranslationSplitContainer.Panel2.Controls.Add(this.AllTranslatorsCheckBox);
        this.TranslationSplitContainer.Panel2.Controls.Add(this.TranslatorsComboBox);
        this.TranslationSplitContainer.Panel2.Controls.Add(this.TranslationsTextBox);
        this.TranslationSplitContainer.Size = new System.Drawing.Size(842, 213);
        this.TranslationSplitContainer.SplitterDistance = 442;
        this.TranslationSplitContainer.SplitterWidth = 5;
        this.TranslationSplitContainer.TabIndex = 0;
        this.TranslationSplitContainer.SplitterMoved += new System.Windows.Forms.SplitterEventHandler(this.TranslationSplitContainer_SplitterMoved);
        // 
        // TranslationFontLabel
        // 
        this.TranslationFontLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.TranslationFontLabel.BackColor = System.Drawing.SystemColors.Control;
        this.TranslationFontLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.TranslationFontLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, ((System.Drawing.FontStyle)((System.Drawing.FontStyle.Bold | System.Drawing.FontStyle.Italic))), System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.TranslationFontLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.TranslationFontLabel.Image = ((System.Drawing.Image)(resources.GetObject("TranslationFontLabel.Image")));
        this.TranslationFontLabel.Location = new System.Drawing.Point(421, 3);
        this.TranslationFontLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.TranslationFontLabel.Name = "TranslationFontLabel";
        this.TranslationFontLabel.Size = new System.Drawing.Size(19, 18);
        this.TranslationFontLabel.TabIndex = 103;
        this.TranslationFontLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.TranslationFontLabel, "Font");
        this.TranslationFontLabel.Click += new System.EventHandler(this.TranslationFontLabel_Click);
        // 
        // EditSaveTranslationLabel
        // 
        this.EditSaveTranslationLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.EditSaveTranslationLabel.BackColor = System.Drawing.SystemColors.Control;
        this.EditSaveTranslationLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.EditSaveTranslationLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.EditSaveTranslationLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.EditSaveTranslationLabel.Image = ((System.Drawing.Image)(resources.GetObject("EditSaveTranslationLabel.Image")));
        this.EditSaveTranslationLabel.Location = new System.Drawing.Point(421, 187);
        this.EditSaveTranslationLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.EditSaveTranslationLabel.Name = "EditSaveTranslationLabel";
        this.EditSaveTranslationLabel.Size = new System.Drawing.Size(21, 22);
        this.EditSaveTranslationLabel.TabIndex = 4;
        this.EditSaveTranslationLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.EditSaveTranslationLabel, "Edit");
        this.EditSaveTranslationLabel.Click += new System.EventHandler(this.EditSaveTranslationLabel_Click);
        // 
        // TranslatorComboBox
        // 
        this.TranslatorComboBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.TranslatorComboBox.BackColor = System.Drawing.SystemColors.Control;
        this.TranslatorComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.TranslatorComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.TranslatorComboBox.FormattingEnabled = true;
        this.TranslatorComboBox.Location = new System.Drawing.Point(175, 188);
        this.TranslatorComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.TranslatorComboBox.Name = "TranslatorComboBox";
        this.TranslatorComboBox.Size = new System.Drawing.Size(243, 23);
        this.TranslatorComboBox.TabIndex = 2;
        this.TranslatorComboBox.SelectedIndexChanged += new System.EventHandler(this.TranslatorComboBox_SelectedIndexChanged);
        // 
        // TranslationTextBox
        // 
        this.TranslationTextBox.AcceptsReturn = true;
        this.TranslationTextBox.AcceptsTab = true;
        this.TranslationTextBox.BackColor = System.Drawing.Color.LightGray;
        this.TranslationTextBox.Dock = System.Windows.Forms.DockStyle.Fill;
        this.TranslationTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F);
        this.TranslationTextBox.ForeColor = System.Drawing.Color.Navy;
        this.TranslationTextBox.HideSelection = false;
        this.TranslationTextBox.Location = new System.Drawing.Point(0, 0);
        this.TranslationTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.TranslationTextBox.Multiline = true;
        this.TranslationTextBox.Name = "TranslationTextBox";
        this.TranslationTextBox.ReadOnly = true;
        this.TranslationTextBox.ScrollBars = System.Windows.Forms.ScrollBars.Both;
        this.TranslationTextBox.Size = new System.Drawing.Size(442, 213);
        this.TranslationTextBox.TabIndex = 2;
        this.TranslationTextBox.WordWrap = false;
        this.TranslationTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.TextBox_KeyDown);
        this.TranslationTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.TranslationTextBox_KeyPress);
        // 
        // TranslatorsCheckedListBox
        // 
        this.TranslatorsCheckedListBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.TranslatorsCheckedListBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.TranslatorsCheckedListBox.CheckOnClick = true;
        this.TranslatorsCheckedListBox.FormattingEnabled = true;
        this.TranslatorsCheckedListBox.Location = new System.Drawing.Point(29, -3);
        this.TranslatorsCheckedListBox.Margin = new System.Windows.Forms.Padding(4);
        this.TranslatorsCheckedListBox.Name = "TranslatorsCheckedListBox";
        this.TranslatorsCheckedListBox.Size = new System.Drawing.Size(243, 220);
        this.TranslatorsCheckedListBox.TabIndex = 98;
        this.TranslatorsCheckedListBox.Visible = false;
        // 
        // TranslationsApplySettingsLabel
        // 
        this.TranslationsApplySettingsLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.TranslationsApplySettingsLabel.BackColor = System.Drawing.SystemColors.Control;
        this.TranslationsApplySettingsLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.TranslationsApplySettingsLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.TranslationsApplySettingsLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.TranslationsApplySettingsLabel.Image = ((System.Drawing.Image)(resources.GetObject("TranslationsApplySettingsLabel.Image")));
        this.TranslationsApplySettingsLabel.Location = new System.Drawing.Point(273, 188);
        this.TranslationsApplySettingsLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.TranslationsApplySettingsLabel.Name = "TranslationsApplySettingsLabel";
        this.TranslationsApplySettingsLabel.Size = new System.Drawing.Size(24, 22);
        this.TranslationsApplySettingsLabel.TabIndex = 5;
        this.TranslationsApplySettingsLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.TranslationsApplySettingsLabel, "Add/Remove translations");
        this.TranslationsApplySettingsLabel.Click += new System.EventHandler(this.TranslationsApplySettingsLabel_Click);
        // 
        // TranslationsCancelSettingsLabel
        // 
        this.TranslationsCancelSettingsLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.TranslationsCancelSettingsLabel.BackColor = System.Drawing.SystemColors.Control;
        this.TranslationsCancelSettingsLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.TranslationsCancelSettingsLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.TranslationsCancelSettingsLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.TranslationsCancelSettingsLabel.Image = ((System.Drawing.Image)(resources.GetObject("TranslationsCancelSettingsLabel.Image")));
        this.TranslationsCancelSettingsLabel.Location = new System.Drawing.Point(274, 169);
        this.TranslationsCancelSettingsLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.TranslationsCancelSettingsLabel.Name = "TranslationsCancelSettingsLabel";
        this.TranslationsCancelSettingsLabel.Size = new System.Drawing.Size(25, 22);
        this.TranslationsCancelSettingsLabel.TabIndex = 6;
        this.TranslationsCancelSettingsLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.TranslationsCancelSettingsLabel, "Cancel");
        this.TranslationsCancelSettingsLabel.Visible = false;
        this.TranslationsCancelSettingsLabel.Click += new System.EventHandler(this.TranslationsCancelSettingsLabel_Click);
        // 
        // AllTranslatorsCheckBox
        // 
        this.AllTranslatorsCheckBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.AllTranslatorsCheckBox.AutoSize = true;
        this.AllTranslatorsCheckBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.AllTranslatorsCheckBox.Location = new System.Drawing.Point(233, 191);
        this.AllTranslatorsCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AllTranslatorsCheckBox.Name = "AllTranslatorsCheckBox";
        this.AllTranslatorsCheckBox.Size = new System.Drawing.Size(18, 17);
        this.AllTranslatorsCheckBox.TabIndex = 3;
        this.ToolTip.SetToolTip(this.AllTranslatorsCheckBox, "All translators");
        this.AllTranslatorsCheckBox.UseVisualStyleBackColor = false;
        this.AllTranslatorsCheckBox.CheckedChanged += new System.EventHandler(this.AllTranslatorsCheckBox_CheckedChanged);
        // 
        // TranslatorsComboBox
        // 
        this.TranslatorsComboBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.TranslatorsComboBox.BackColor = System.Drawing.SystemColors.Control;
        this.TranslatorsComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.TranslatorsComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.TranslatorsComboBox.FormattingEnabled = true;
        this.TranslatorsComboBox.Location = new System.Drawing.Point(27, 188);
        this.TranslatorsComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.TranslatorsComboBox.Name = "TranslatorsComboBox";
        this.TranslatorsComboBox.Size = new System.Drawing.Size(243, 23);
        this.TranslatorsComboBox.TabIndex = 105;
        this.TranslatorsComboBox.SelectedIndexChanged += new System.EventHandler(this.TranslatorComboBox_SelectedIndexChanged);
        // 
        // TranslationsTextBox
        // 
        this.TranslationsTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.TranslationsTextBox.BackColor = System.Drawing.Color.LightGray;
        this.TranslationsTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F);
        this.TranslationsTextBox.ForeColor = System.Drawing.Color.Navy;
        this.TranslationsTextBox.HideSelection = false;
        this.TranslationsTextBox.Location = new System.Drawing.Point(0, 0);
        this.TranslationsTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.TranslationsTextBox.Multiline = true;
        this.TranslationsTextBox.Name = "TranslationsTextBox";
        this.TranslationsTextBox.ReadOnly = true;
        this.TranslationsTextBox.ScrollBars = System.Windows.Forms.ScrollBars.Both;
        this.TranslationsTextBox.Size = new System.Drawing.Size(295, 211);
        this.TranslationsTextBox.TabIndex = 106;
        this.TranslationsTextBox.WordWrap = false;
        this.TranslationsTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.TextBox_KeyDown);
        // 
        // GrammarTabPage
        // 
        this.GrammarTabPage.BackColor = System.Drawing.SystemColors.ControlLight;
        this.GrammarTabPage.Controls.Add(this.GrammarTextBox);
        this.GrammarTabPage.Location = new System.Drawing.Point(4, 26);
        this.GrammarTabPage.Margin = new System.Windows.Forms.Padding(4);
        this.GrammarTabPage.Name = "GrammarTabPage";
        this.GrammarTabPage.Size = new System.Drawing.Size(744, 211);
        this.GrammarTabPage.TabIndex = 193;
        this.GrammarTabPage.Text = " Grammar";
        this.GrammarTabPage.ToolTipText = "Grammar details of the current word in Arabic and English\r\nإعراب الكلمة بالعربي و" +
"الإنكليزي";
        this.GrammarTabPage.UseVisualStyleBackColor = true;
        // 
        // GrammarTextBox
        // 
        this.GrammarTextBox.BackColor = System.Drawing.Color.LightGray;
        this.GrammarTextBox.Dock = System.Windows.Forms.DockStyle.Fill;
        this.GrammarTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.GrammarTextBox.ForeColor = System.Drawing.Color.Navy;
        this.GrammarTextBox.HideSelection = false;
        this.GrammarTextBox.Location = new System.Drawing.Point(0, 0);
        this.GrammarTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.GrammarTextBox.Multiline = true;
        this.GrammarTextBox.Name = "GrammarTextBox";
        this.GrammarTextBox.ReadOnly = true;
        this.GrammarTextBox.ScrollBars = System.Windows.Forms.ScrollBars.Both;
        this.GrammarTextBox.Size = new System.Drawing.Size(744, 211);
        this.GrammarTextBox.TabIndex = 1;
        this.GrammarTextBox.Text = "Click a word to display its grammar information in Arabic and English";
        this.GrammarTextBox.WordWrap = false;
        this.GrammarTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.TextBox_KeyDown);
        // 
        // RelatedWordsTabPage
        // 
        this.RelatedWordsTabPage.BackColor = System.Drawing.SystemColors.ControlLight;
        this.RelatedWordsTabPage.Controls.Add(this.RelatedWordsButton);
        this.RelatedWordsTabPage.Controls.Add(this.RelatedWordsTextBox);
        this.RelatedWordsTabPage.Location = new System.Drawing.Point(4, 26);
        this.RelatedWordsTabPage.Margin = new System.Windows.Forms.Padding(4);
        this.RelatedWordsTabPage.Name = "RelatedWordsTabPage";
        this.RelatedWordsTabPage.Size = new System.Drawing.Size(744, 211);
        this.RelatedWordsTabPage.TabIndex = 192;
        this.RelatedWordsTabPage.Text = "Related Words";
        this.RelatedWordsTabPage.ToolTipText = "Related words from the same root as the current word\r\nالكلمات المشتقة من نفس جذر " +
"الكلمة الحالية";
        this.RelatedWordsTabPage.UseVisualStyleBackColor = true;
        // 
        // RelatedWordsButton
        // 
        this.RelatedWordsButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.RelatedWordsButton.BackColor = System.Drawing.SystemColors.Control;
        this.RelatedWordsButton.Cursor = System.Windows.Forms.Cursors.Hand;
        this.RelatedWordsButton.Enabled = false;
        this.RelatedWordsButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
        this.RelatedWordsButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.RelatedWordsButton.ForeColor = System.Drawing.SystemColors.ControlLight;
        this.RelatedWordsButton.Image = ((System.Drawing.Image)(resources.GetObject("RelatedWordsButton.Image")));
        this.RelatedWordsButton.Location = new System.Drawing.Point(719, 187);
        this.RelatedWordsButton.Margin = new System.Windows.Forms.Padding(4);
        this.RelatedWordsButton.Name = "RelatedWordsButton";
        this.RelatedWordsButton.Size = new System.Drawing.Size(24, 22);
        this.RelatedWordsButton.TabIndex = 2;
        this.ToolTip.SetToolTip(this.RelatedWordsButton, "Display all verses with related words");
        this.RelatedWordsButton.UseVisualStyleBackColor = false;
        this.RelatedWordsButton.Click += new System.EventHandler(this.RelatedWordsButton_Click);
        // 
        // RelatedWordsTextBox
        // 
        this.RelatedWordsTextBox.BackColor = System.Drawing.Color.LightGray;
        this.RelatedWordsTextBox.Dock = System.Windows.Forms.DockStyle.Fill;
        this.RelatedWordsTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.RelatedWordsTextBox.ForeColor = System.Drawing.Color.Navy;
        this.RelatedWordsTextBox.HideSelection = false;
        this.RelatedWordsTextBox.Location = new System.Drawing.Point(0, 0);
        this.RelatedWordsTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.RelatedWordsTextBox.Multiline = true;
        this.RelatedWordsTextBox.Name = "RelatedWordsTextBox";
        this.RelatedWordsTextBox.ReadOnly = true;
        this.RelatedWordsTextBox.ScrollBars = System.Windows.Forms.ScrollBars.Both;
        this.RelatedWordsTextBox.Size = new System.Drawing.Size(744, 211);
        this.RelatedWordsTextBox.TabIndex = 1;
        this.RelatedWordsTextBox.Text = "Click a word to display words from the same root and all verses.";
        this.RelatedWordsTextBox.WordWrap = false;
        this.RelatedWordsTextBox.TextChanged += new System.EventHandler(this.RelatedWordsTextBox_TextChanged);
        this.RelatedWordsTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.TextBox_KeyDown);
        // 
        // SymmetryTabPage
        // 
        this.SymmetryTabPage.BackColor = System.Drawing.SystemColors.ControlLight;
        this.SymmetryTabPage.Controls.Add(this.SymmetryIncludeBoundaryCasesCheckBox);
        this.SymmetryTabPage.Controls.Add(this.SymmetryTypeComboBox);
        this.SymmetryTabPage.Controls.Add(this.SymmetryInspectLabel);
        this.SymmetryTabPage.Controls.Add(this.SymmetryTextBox);
        this.SymmetryTabPage.Location = new System.Drawing.Point(4, 26);
        this.SymmetryTabPage.Margin = new System.Windows.Forms.Padding(4);
        this.SymmetryTabPage.Name = "SymmetryTabPage";
        this.SymmetryTabPage.Size = new System.Drawing.Size(744, 211);
        this.SymmetryTabPage.TabIndex = 201;
        this.SymmetryTabPage.Text = "Symmetry";
        this.SymmetryTabPage.ToolTipText = "Text symmetries starting from both ends [Dr Waleed S. Mohammed]\r\nتناظر النص من ال" +
"طرفين (د. وليد محمد)";
        this.SymmetryTabPage.UseVisualStyleBackColor = true;
        // 
        // SymmetryIncludeBoundaryCasesCheckBox
        // 
        this.SymmetryIncludeBoundaryCasesCheckBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.SymmetryIncludeBoundaryCasesCheckBox.AutoSize = true;
        this.SymmetryIncludeBoundaryCasesCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.SymmetryIncludeBoundaryCasesCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.SymmetryIncludeBoundaryCasesCheckBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.SymmetryIncludeBoundaryCasesCheckBox.Location = new System.Drawing.Point(454, 192);
        this.SymmetryIncludeBoundaryCasesCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.SymmetryIncludeBoundaryCasesCheckBox.Name = "SymmetryIncludeBoundaryCasesCheckBox";
        this.SymmetryIncludeBoundaryCasesCheckBox.Size = new System.Drawing.Size(18, 17);
        this.SymmetryIncludeBoundaryCasesCheckBox.TabIndex = 272;
        this.ToolTip.SetToolTip(this.SymmetryIncludeBoundaryCasesCheckBox, "Include boundary cases");
        this.SymmetryIncludeBoundaryCasesCheckBox.UseVisualStyleBackColor = false;
        this.SymmetryIncludeBoundaryCasesCheckBox.CheckedChanged += new System.EventHandler(this.SymmetryIncludeBoundaryCasesCheckBox_CheckedChanged);
        // 
        // SymmetryTypeComboBox
        // 
        this.SymmetryTypeComboBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.SymmetryTypeComboBox.BackColor = System.Drawing.SystemColors.Control;
        this.SymmetryTypeComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.SymmetryTypeComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.SymmetryTypeComboBox.FormattingEnabled = true;
        this.SymmetryTypeComboBox.Location = new System.Drawing.Point(478, 189);
        this.SymmetryTypeComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.SymmetryTypeComboBox.Name = "SymmetryTypeComboBox";
        this.SymmetryTypeComboBox.Size = new System.Drawing.Size(243, 23);
        this.SymmetryTypeComboBox.TabIndex = 8;
        this.SymmetryTypeComboBox.SelectedIndexChanged += new System.EventHandler(this.SymmetryTypeComboBox_SelectedIndexChanged);
        // 
        // SymmetryInspectLabel
        // 
        this.SymmetryInspectLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.SymmetryInspectLabel.BackColor = System.Drawing.SystemColors.Control;
        this.SymmetryInspectLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.SymmetryInspectLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.SymmetryInspectLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.SymmetryInspectLabel.Image = ((System.Drawing.Image)(resources.GetObject("SymmetryInspectLabel.Image")));
        this.SymmetryInspectLabel.Location = new System.Drawing.Point(721, 190);
        this.SymmetryInspectLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.SymmetryInspectLabel.Name = "SymmetryInspectLabel";
        this.SymmetryInspectLabel.Size = new System.Drawing.Size(24, 22);
        this.SymmetryInspectLabel.TabIndex = 9;
        this.ToolTip.SetToolTip(this.SymmetryInspectLabel, "Inspect");
        this.SymmetryInspectLabel.Click += new System.EventHandler(this.SymmetryInspectLabel_Click);
        // 
        // SymmetryTextBox
        // 
        this.SymmetryTextBox.BackColor = System.Drawing.Color.LightGray;
        this.SymmetryTextBox.Dock = System.Windows.Forms.DockStyle.Fill;
        this.SymmetryTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.SymmetryTextBox.ForeColor = System.Drawing.Color.Navy;
        this.SymmetryTextBox.HideSelection = false;
        this.SymmetryTextBox.Location = new System.Drawing.Point(0, 0);
        this.SymmetryTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.SymmetryTextBox.Multiline = true;
        this.SymmetryTextBox.Name = "SymmetryTextBox";
        this.SymmetryTextBox.ReadOnly = true;
        this.SymmetryTextBox.ScrollBars = System.Windows.Forms.ScrollBars.Both;
        this.SymmetryTextBox.Size = new System.Drawing.Size(744, 211);
        this.SymmetryTextBox.TabIndex = 7;
        this.SymmetryTextBox.Text = "Select text to display its front/back symmetry.";
        this.SymmetryTextBox.WordWrap = false;
        this.SymmetryTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.TextBox_KeyDown);
        // 
        // ValuesSequenceTabPage
        // 
        this.ValuesSequenceTabPage.BackColor = System.Drawing.SystemColors.ControlLight;
        this.ValuesSequenceTabPage.Controls.Add(this.ValuesSequenceInspectLabel);
        this.ValuesSequenceTabPage.Controls.Add(this.ValuesSequenceScopeComboBox);
        this.ValuesSequenceTabPage.Controls.Add(this.ValuesSequenceRadixNumericUpDown);
        this.ValuesSequenceTabPage.Controls.Add(this.ValuesSequenceRadixLabel);
        this.ValuesSequenceTabPage.Controls.Add(this.ValuesSequenceDirectionLabel);
        this.ValuesSequenceTabPage.Controls.Add(this.ValuesSequenceTextBox);
        this.ValuesSequenceTabPage.Location = new System.Drawing.Point(4, 26);
        this.ValuesSequenceTabPage.Margin = new System.Windows.Forms.Padding(4);
        this.ValuesSequenceTabPage.Name = "ValuesSequenceTabPage";
        this.ValuesSequenceTabPage.Size = new System.Drawing.Size(744, 211);
        this.ValuesSequenceTabPage.TabIndex = 198;
        this.ValuesSequenceTabPage.Text = "Values";
        this.ValuesSequenceTabPage.ToolTipText = "Values of letter/word/verse/chapter values in bases 2 to 36\r\nقيم الحروف والكلمات " +
"والءايات والسُوَر بالأنظمة الرقمية لأساسات 2 الى 36";
        this.ValuesSequenceTabPage.UseVisualStyleBackColor = true;
        // 
        // ValuesSequenceInspectLabel
        // 
        this.ValuesSequenceInspectLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.ValuesSequenceInspectLabel.BackColor = System.Drawing.SystemColors.Control;
        this.ValuesSequenceInspectLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ValuesSequenceInspectLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ValuesSequenceInspectLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.ValuesSequenceInspectLabel.Image = ((System.Drawing.Image)(resources.GetObject("ValuesSequenceInspectLabel.Image")));
        this.ValuesSequenceInspectLabel.Location = new System.Drawing.Point(721, 190);
        this.ValuesSequenceInspectLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ValuesSequenceInspectLabel.Name = "ValuesSequenceInspectLabel";
        this.ValuesSequenceInspectLabel.Size = new System.Drawing.Size(24, 22);
        this.ValuesSequenceInspectLabel.TabIndex = 4;
        this.ToolTip.SetToolTip(this.ValuesSequenceInspectLabel, "Inspect");
        this.ValuesSequenceInspectLabel.Click += new System.EventHandler(this.ValuesSequenceInspectLabel_Click);
        // 
        // ValuesSequenceScopeComboBox
        // 
        this.ValuesSequenceScopeComboBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.ValuesSequenceScopeComboBox.BackColor = System.Drawing.SystemColors.Control;
        this.ValuesSequenceScopeComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.ValuesSequenceScopeComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ValuesSequenceScopeComboBox.FormattingEnabled = true;
        this.ValuesSequenceScopeComboBox.Location = new System.Drawing.Point(478, 189);
        this.ValuesSequenceScopeComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.ValuesSequenceScopeComboBox.Name = "ValuesSequenceScopeComboBox";
        this.ValuesSequenceScopeComboBox.Size = new System.Drawing.Size(243, 23);
        this.ValuesSequenceScopeComboBox.TabIndex = 2;
        this.ValuesSequenceScopeComboBox.SelectedIndexChanged += new System.EventHandler(this.ValuesSequenceScopeComboBox_SelectedIndexChanged);
        // 
        // ValuesSequenceRadixNumericUpDown
        // 
        this.ValuesSequenceRadixNumericUpDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.ValuesSequenceRadixNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.ValuesSequenceRadixNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ValuesSequenceRadixNumericUpDown.Location = new System.Drawing.Point(424, 191);
        this.ValuesSequenceRadixNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.ValuesSequenceRadixNumericUpDown.Maximum = new decimal(new int[] {
            36,
            0,
            0,
            0});
        this.ValuesSequenceRadixNumericUpDown.Minimum = new decimal(new int[] {
            2,
            0,
            0,
            0});
        this.ValuesSequenceRadixNumericUpDown.Name = "ValuesSequenceRadixNumericUpDown";
        this.ValuesSequenceRadixNumericUpDown.Size = new System.Drawing.Size(52, 20);
        this.ValuesSequenceRadixNumericUpDown.TabIndex = 273;
        this.ValuesSequenceRadixNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ValuesSequenceRadixNumericUpDown.Value = new decimal(new int[] {
            2,
            0,
            0,
            0});
        this.ValuesSequenceRadixNumericUpDown.ValueChanged += new System.EventHandler(this.ValuesSequenceRadixNumericUpDown_ValueChanged);
        // 
        // ValuesSequenceRadixLabel
        // 
        this.ValuesSequenceRadixLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.ValuesSequenceRadixLabel.BackColor = System.Drawing.SystemColors.Control;
        this.ValuesSequenceRadixLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ValuesSequenceRadixLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.ValuesSequenceRadixLabel.Location = new System.Drawing.Point(338, 192);
        this.ValuesSequenceRadixLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ValuesSequenceRadixLabel.Name = "ValuesSequenceRadixLabel";
        this.ValuesSequenceRadixLabel.Size = new System.Drawing.Size(85, 15);
        this.ValuesSequenceRadixLabel.TabIndex = 272;
        this.ValuesSequenceRadixLabel.Text = "Base";
        this.ValuesSequenceRadixLabel.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
        // 
        // ValuesSequenceDirectionLabel
        // 
        this.ValuesSequenceDirectionLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.ValuesSequenceDirectionLabel.BackColor = System.Drawing.SystemColors.Control;
        this.ValuesSequenceDirectionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ValuesSequenceDirectionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ValuesSequenceDirectionLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.ValuesSequenceDirectionLabel.Image = ((System.Drawing.Image)(resources.GetObject("ValuesSequenceDirectionLabel.Image")));
        this.ValuesSequenceDirectionLabel.Location = new System.Drawing.Point(722, 2);
        this.ValuesSequenceDirectionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ValuesSequenceDirectionLabel.Name = "ValuesSequenceDirectionLabel";
        this.ValuesSequenceDirectionLabel.Size = new System.Drawing.Size(21, 22);
        this.ValuesSequenceDirectionLabel.TabIndex = 3;
        this.ValuesSequenceDirectionLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.ValuesSequenceDirectionLabel, "Value sequence direction");
        this.ValuesSequenceDirectionLabel.Click += new System.EventHandler(this.ValuesSequenceDirectionLabel_Click);
        // 
        // ValuesSequenceTextBox
        // 
        this.ValuesSequenceTextBox.BackColor = System.Drawing.Color.LightGray;
        this.ValuesSequenceTextBox.Dock = System.Windows.Forms.DockStyle.Fill;
        this.ValuesSequenceTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ValuesSequenceTextBox.ForeColor = System.Drawing.Color.Navy;
        this.ValuesSequenceTextBox.HideSelection = false;
        this.ValuesSequenceTextBox.Location = new System.Drawing.Point(0, 0);
        this.ValuesSequenceTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.ValuesSequenceTextBox.Multiline = true;
        this.ValuesSequenceTextBox.Name = "ValuesSequenceTextBox";
        this.ValuesSequenceTextBox.ReadOnly = true;
        this.ValuesSequenceTextBox.ScrollBars = System.Windows.Forms.ScrollBars.Both;
        this.ValuesSequenceTextBox.Size = new System.Drawing.Size(744, 211);
        this.ValuesSequenceTextBox.TabIndex = 1;
        this.ValuesSequenceTextBox.Text = "Select text to convert its letter/word/verse/chapter values into a number sequenc" +
"e in the specified base.";
        this.ValuesSequenceTextBox.WordWrap = false;
        this.ValuesSequenceTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.TextBox_KeyDown);
        // 
        // CVWLSequenceTabPage
        // 
        this.CVWLSequenceTabPage.BackColor = System.Drawing.SystemColors.ControlLight;
        this.CVWLSequenceTabPage.Controls.Add(this.CVWLSequenceShowFactorsCheckBox);
        this.CVWLSequenceTabPage.Controls.Add(this.CVWLSequenceTypeComboBox);
        this.CVWLSequenceTabPage.Controls.Add(this.CVWLSequenceInspectLabel);
        this.CVWLSequenceTabPage.Controls.Add(this.CVWLSequenceDirectionLabel);
        this.CVWLSequenceTabPage.Controls.Add(this.CVWLSequenceTextBox);
        this.CVWLSequenceTabPage.Location = new System.Drawing.Point(4, 26);
        this.CVWLSequenceTabPage.Margin = new System.Windows.Forms.Padding(4);
        this.CVWLSequenceTabPage.Name = "CVWLSequenceTabPage";
        this.CVWLSequenceTabPage.Size = new System.Drawing.Size(744, 211);
        this.CVWLSequenceTabPage.TabIndex = 200;
        this.CVWLSequenceTabPage.Text = "CVWL";
        this.CVWLSequenceTabPage.ToolTipText = "Concatenated chapter/verse/word/letter numbers and counts\r\nرصف أرقام وأعداد الحرو" +
"ف والكلمات والءايات والسُوَر";
        this.CVWLSequenceTabPage.UseVisualStyleBackColor = true;
        // 
        // CVWLSequenceShowFactorsCheckBox
        // 
        this.CVWLSequenceShowFactorsCheckBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.CVWLSequenceShowFactorsCheckBox.AutoSize = true;
        this.CVWLSequenceShowFactorsCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.CVWLSequenceShowFactorsCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.CVWLSequenceShowFactorsCheckBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.CVWLSequenceShowFactorsCheckBox.Location = new System.Drawing.Point(454, 192);
        this.CVWLSequenceShowFactorsCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.CVWLSequenceShowFactorsCheckBox.Name = "CVWLSequenceShowFactorsCheckBox";
        this.CVWLSequenceShowFactorsCheckBox.Size = new System.Drawing.Size(18, 17);
        this.CVWLSequenceShowFactorsCheckBox.TabIndex = 273;
        this.ToolTip.SetToolTip(this.CVWLSequenceShowFactorsCheckBox, "Include boundary cases");
        this.CVWLSequenceShowFactorsCheckBox.UseVisualStyleBackColor = false;
        this.CVWLSequenceShowFactorsCheckBox.CheckedChanged += new System.EventHandler(this.CVWLSequenceShowFactorsCheckBox_CheckedChanged);
        // 
        // CVWLSequenceTypeComboBox
        // 
        this.CVWLSequenceTypeComboBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.CVWLSequenceTypeComboBox.BackColor = System.Drawing.SystemColors.Control;
        this.CVWLSequenceTypeComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.CVWLSequenceTypeComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.CVWLSequenceTypeComboBox.FormattingEnabled = true;
        this.CVWLSequenceTypeComboBox.Location = new System.Drawing.Point(478, 189);
        this.CVWLSequenceTypeComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.CVWLSequenceTypeComboBox.Name = "CVWLSequenceTypeComboBox";
        this.CVWLSequenceTypeComboBox.Size = new System.Drawing.Size(243, 23);
        this.CVWLSequenceTypeComboBox.TabIndex = 5;
        this.CVWLSequenceTypeComboBox.SelectedIndexChanged += new System.EventHandler(this.CVWLSequenceTypeComboBox_SelectedIndexChanged);
        // 
        // CVWLSequenceInspectLabel
        // 
        this.CVWLSequenceInspectLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.CVWLSequenceInspectLabel.BackColor = System.Drawing.SystemColors.Control;
        this.CVWLSequenceInspectLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.CVWLSequenceInspectLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.CVWLSequenceInspectLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.CVWLSequenceInspectLabel.Image = ((System.Drawing.Image)(resources.GetObject("CVWLSequenceInspectLabel.Image")));
        this.CVWLSequenceInspectLabel.Location = new System.Drawing.Point(721, 190);
        this.CVWLSequenceInspectLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.CVWLSequenceInspectLabel.Name = "CVWLSequenceInspectLabel";
        this.CVWLSequenceInspectLabel.Size = new System.Drawing.Size(24, 22);
        this.CVWLSequenceInspectLabel.TabIndex = 6;
        this.ToolTip.SetToolTip(this.CVWLSequenceInspectLabel, "Inspect");
        this.CVWLSequenceInspectLabel.Click += new System.EventHandler(this.CVWLSequenceInspectLabel_Click);
        // 
        // CVWLSequenceDirectionLabel
        // 
        this.CVWLSequenceDirectionLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.CVWLSequenceDirectionLabel.BackColor = System.Drawing.SystemColors.Control;
        this.CVWLSequenceDirectionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.CVWLSequenceDirectionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.CVWLSequenceDirectionLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.CVWLSequenceDirectionLabel.Image = ((System.Drawing.Image)(resources.GetObject("CVWLSequenceDirectionLabel.Image")));
        this.CVWLSequenceDirectionLabel.Location = new System.Drawing.Point(722, 2);
        this.CVWLSequenceDirectionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.CVWLSequenceDirectionLabel.Name = "CVWLSequenceDirectionLabel";
        this.CVWLSequenceDirectionLabel.Size = new System.Drawing.Size(21, 22);
        this.CVWLSequenceDirectionLabel.TabIndex = 3;
        this.CVWLSequenceDirectionLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.CVWLSequenceDirectionLabel, "Numbers sequence direction");
        this.CVWLSequenceDirectionLabel.Click += new System.EventHandler(this.CVWLSequenceDirectionLabel_Click);
        // 
        // CVWLSequenceTextBox
        // 
        this.CVWLSequenceTextBox.BackColor = System.Drawing.Color.LightGray;
        this.CVWLSequenceTextBox.Dock = System.Windows.Forms.DockStyle.Fill;
        this.CVWLSequenceTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.CVWLSequenceTextBox.ForeColor = System.Drawing.Color.Navy;
        this.CVWLSequenceTextBox.HideSelection = false;
        this.CVWLSequenceTextBox.Location = new System.Drawing.Point(0, 0);
        this.CVWLSequenceTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.CVWLSequenceTextBox.Multiline = true;
        this.CVWLSequenceTextBox.Name = "CVWLSequenceTextBox";
        this.CVWLSequenceTextBox.ReadOnly = true;
        this.CVWLSequenceTextBox.ScrollBars = System.Windows.Forms.ScrollBars.Both;
        this.CVWLSequenceTextBox.Size = new System.Drawing.Size(744, 211);
        this.CVWLSequenceTextBox.TabIndex = 1;
        this.CVWLSequenceTextBox.Text = "Select text to display concatenated chapter/verse/word/letter numbers and counts." +
"";
        this.CVWLSequenceTextBox.WordWrap = false;
        this.CVWLSequenceTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.TextBox_KeyDown);
        // 
        // DNASequenceTabPage
        // 
        this.DNASequenceTabPage.BackColor = System.Drawing.SystemColors.ControlLight;
        this.DNASequenceTabPage.Controls.Add(this.DNASequenceDirectionLabel);
        this.DNASequenceTabPage.Controls.Add(this.DNASequenceSystemEditLabel);
        this.DNASequenceTabPage.Controls.Add(this.DNASequenceSystemComboBox);
        this.DNASequenceTabPage.Controls.Add(this.DNASequenceTextBox);
        this.DNASequenceTabPage.Location = new System.Drawing.Point(4, 26);
        this.DNASequenceTabPage.Margin = new System.Windows.Forms.Padding(4);
        this.DNASequenceTabPage.Name = "DNASequenceTabPage";
        this.DNASequenceTabPage.Size = new System.Drawing.Size(744, 211);
        this.DNASequenceTabPage.TabIndex = 195;
        this.DNASequenceTabPage.Text = "DNA";
        this.DNASequenceTabPage.ToolTipText = "Convert text into a DNA sequence to compare with the human genome [Belkacem Meghz" +
"ouchene]\r\n(حوّل النص المظلل الى سلسلة د ن ا للمقارنة مع سلسلة الإنسان (بوالقاسم " +
"مغزوكين";
        this.DNASequenceTabPage.UseVisualStyleBackColor = true;
        // 
        // DNASequenceDirectionLabel
        // 
        this.DNASequenceDirectionLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.DNASequenceDirectionLabel.BackColor = System.Drawing.SystemColors.Control;
        this.DNASequenceDirectionLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DNASequenceDirectionLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DNASequenceDirectionLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DNASequenceDirectionLabel.Image = ((System.Drawing.Image)(resources.GetObject("DNASequenceDirectionLabel.Image")));
        this.DNASequenceDirectionLabel.Location = new System.Drawing.Point(722, 2);
        this.DNASequenceDirectionLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DNASequenceDirectionLabel.Name = "DNASequenceDirectionLabel";
        this.DNASequenceDirectionLabel.Size = new System.Drawing.Size(21, 22);
        this.DNASequenceDirectionLabel.TabIndex = 3;
        this.DNASequenceDirectionLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.DNASequenceDirectionLabel, "DNA sequence direction");
        this.DNASequenceDirectionLabel.Click += new System.EventHandler(this.DNASequenceDirectionLabel_Click);
        // 
        // DNASequenceSystemEditLabel
        // 
        this.DNASequenceSystemEditLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.DNASequenceSystemEditLabel.BackColor = System.Drawing.SystemColors.Control;
        this.DNASequenceSystemEditLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DNASequenceSystemEditLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DNASequenceSystemEditLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DNASequenceSystemEditLabel.Image = ((System.Drawing.Image)(resources.GetObject("DNASequenceSystemEditLabel.Image")));
        this.DNASequenceSystemEditLabel.Location = new System.Drawing.Point(721, 190);
        this.DNASequenceSystemEditLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DNASequenceSystemEditLabel.Name = "DNASequenceSystemEditLabel";
        this.DNASequenceSystemEditLabel.Size = new System.Drawing.Size(24, 22);
        this.DNASequenceSystemEditLabel.TabIndex = 4;
        this.ToolTip.SetToolTip(this.DNASequenceSystemEditLabel, "Edit DNA sequence system");
        this.DNASequenceSystemEditLabel.Click += new System.EventHandler(this.DNASequenceSystemEditLabel_Click);
        // 
        // DNASequenceSystemComboBox
        // 
        this.DNASequenceSystemComboBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.DNASequenceSystemComboBox.BackColor = System.Drawing.SystemColors.Control;
        this.DNASequenceSystemComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.DNASequenceSystemComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DNASequenceSystemComboBox.FormattingEnabled = true;
        this.DNASequenceSystemComboBox.Location = new System.Drawing.Point(478, 189);
        this.DNASequenceSystemComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.DNASequenceSystemComboBox.Name = "DNASequenceSystemComboBox";
        this.DNASequenceSystemComboBox.Size = new System.Drawing.Size(243, 23);
        this.DNASequenceSystemComboBox.TabIndex = 2;
        this.DNASequenceSystemComboBox.SelectedIndexChanged += new System.EventHandler(this.DNASequenceSystemComboBox_SelectedIndexChanged);
        // 
        // DNASequenceTextBox
        // 
        this.DNASequenceTextBox.BackColor = System.Drawing.Color.LightGray;
        this.DNASequenceTextBox.Dock = System.Windows.Forms.DockStyle.Fill;
        this.DNASequenceTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DNASequenceTextBox.ForeColor = System.Drawing.Color.Navy;
        this.DNASequenceTextBox.HideSelection = false;
        this.DNASequenceTextBox.Location = new System.Drawing.Point(0, 0);
        this.DNASequenceTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DNASequenceTextBox.Multiline = true;
        this.DNASequenceTextBox.Name = "DNASequenceTextBox";
        this.DNASequenceTextBox.ReadOnly = true;
        this.DNASequenceTextBox.ScrollBars = System.Windows.Forms.ScrollBars.Both;
        this.DNASequenceTextBox.Size = new System.Drawing.Size(744, 211);
        this.DNASequenceTextBox.TabIndex = 1;
        this.DNASequenceTextBox.Text = "Select text to convert into a DNA sequence.";
        this.DNASequenceTextBox.WordWrap = false;
        this.DNASequenceTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.TextBox_KeyDown);
        // 
        // MathsTabPage
        // 
        this.MathsTabPage.BackColor = System.Drawing.SystemColors.ControlLight;
        this.MathsTabPage.Controls.Add(this.MathsPanel);
        this.MathsTabPage.Location = new System.Drawing.Point(4, 26);
        this.MathsTabPage.Margin = new System.Windows.Forms.Padding(4);
        this.MathsTabPage.Name = "MathsTabPage";
        this.MathsTabPage.Size = new System.Drawing.Size(744, 211);
        this.MathsTabPage.TabIndex = 197;
        this.MathsTabPage.Text = "C+V";
        this.MathsTabPage.ToolTipText = "Chapter +/- Verse calculations\r\nحسابات مجاميع وفروق الءايات والسُوَر";
        this.MathsTabPage.UseVisualStyleBackColor = true;
        // 
        // MathsPanel
        // 
        this.MathsPanel.BackColor = System.Drawing.Color.LightGray;
        this.MathsPanel.Controls.Add(this.MathsInterestingNumbersEditLabel);
        this.MathsPanel.Controls.Add(this.MathsUpdateDivisorCheckBox);
        this.MathsPanel.Controls.Add(this.MathsDivisorNumericUpDown);
        this.MathsPanel.Controls.Add(this.MathsDivisorLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesCDivideVDUSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCDivideVDUSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCDivideVCompositeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCDivideVPrimeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCDivideVEvenSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCDivideVOddSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCDivideVSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCDivideVSumLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesCDivideVCompositeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCDivideVPrimeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCDivideVEvenSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCDivideVOddSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCDivideVSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCDivideVLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesCMultiplyVDUSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMultiplyVDUSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMultiplyVCompositeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMultiplyVPrimeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMultiplyVEvenSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMultiplyVOddSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMultiplyVSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMultiplyVSumLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesCMultiplyVCompositeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCMultiplyVPrimeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCMultiplyVEvenSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCMultiplyVOddSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCMultiplyVSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCMultiplyVLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesCSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesSumInspectLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesCMinusVDUSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCPlusVDUSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesVDUSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCDUSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMinusVDUSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCPlusVDUSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersVDUSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCDUSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMinusVCompositeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCPlusVCompositeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersVCompositeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCCompositeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMinusVPrimeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCPlusVPrimeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersVPrimeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCPrimeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMinusVEvenSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCPlusVEvenSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersVEvenSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCEvenSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMinusVOddSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCPlusVOddSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersVOddSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCOddSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMinusVSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCMinusVSumLabel);
        this.MathsPanel.Controls.Add(this.MathsChaptersCPlusVSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersCPlusVSumLabel);
        this.MathsPanel.Controls.Add(this.MathsChaptersVSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsChaptersVSumLabel);
        this.MathsPanel.Controls.Add(this.MathsChaptersCSumLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesCMinusVCompositeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCPlusVCompositeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesVCompositeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCCompositeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCMinusVPrimeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCPlusVPrimeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesVPrimeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCPrimeSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCMinusVEvenSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCPlusVEvenSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesVEvenSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCEvenSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCMinusVOddSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCPlusVOddSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesVOddSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCOddSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCMinusVSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCMinusVLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesCPlusVSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesCPlusVLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesVSumTextBox);
        this.MathsPanel.Controls.Add(this.MathsVersesVLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesCLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesDUSumLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesCompositeSumLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesPrimeSumLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesEvenSumLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesOddSumLabel);
        this.MathsPanel.Controls.Add(this.MathsVersesSumLabel);
        this.MathsPanel.Controls.Add(this.MathsChaptersSumInspectLabel);
        this.MathsPanel.Controls.Add(this.MathsChaptersDUSumLabel);
        this.MathsPanel.Controls.Add(this.MathsChaptersSumLabel);
        this.MathsPanel.Controls.Add(this.MathsChaptersCompositeSumLabel);
        this.MathsPanel.Controls.Add(this.MathsChaptersPrimeSumLabel);
        this.MathsPanel.Controls.Add(this.MathsChaptersEvenSumLabel);
        this.MathsPanel.Controls.Add(this.MathsChaptersOddSumLabel);
        this.MathsPanel.Controls.Add(this.MathsChaptersCSumTextBox);
        this.MathsPanel.Dock = System.Windows.Forms.DockStyle.Fill;
        this.MathsPanel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsPanel.Location = new System.Drawing.Point(0, 0);
        this.MathsPanel.Margin = new System.Windows.Forms.Padding(4);
        this.MathsPanel.Name = "MathsPanel";
        this.MathsPanel.Size = new System.Drawing.Size(744, 211);
        this.MathsPanel.TabIndex = 0;
        // 
        // MathsInterestingNumbersEditLabel
        // 
        this.MathsInterestingNumbersEditLabel.BackColor = System.Drawing.SystemColors.Control;
        this.MathsInterestingNumbersEditLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.MathsInterestingNumbersEditLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsInterestingNumbersEditLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.MathsInterestingNumbersEditLabel.Image = ((System.Drawing.Image)(resources.GetObject("MathsInterestingNumbersEditLabel.Image")));
        this.MathsInterestingNumbersEditLabel.Location = new System.Drawing.Point(265, 176);
        this.MathsInterestingNumbersEditLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsInterestingNumbersEditLabel.Name = "MathsInterestingNumbersEditLabel";
        this.MathsInterestingNumbersEditLabel.Size = new System.Drawing.Size(19, 17);
        this.MathsInterestingNumbersEditLabel.TabIndex = 275;
        this.ToolTip.SetToolTip(this.MathsInterestingNumbersEditLabel, "Edit interesting numbers");
        this.MathsInterestingNumbersEditLabel.Click += new System.EventHandler(this.MathsInterestingNumbersEditLabel_Click);
        // 
        // MathsUpdateDivisorCheckBox
        // 
        this.MathsUpdateDivisorCheckBox.AutoSize = true;
        this.MathsUpdateDivisorCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.MathsUpdateDivisorCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsUpdateDivisorCheckBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.MathsUpdateDivisorCheckBox.Location = new System.Drawing.Point(245, 177);
        this.MathsUpdateDivisorCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsUpdateDivisorCheckBox.Name = "MathsUpdateDivisorCheckBox";
        this.MathsUpdateDivisorCheckBox.Size = new System.Drawing.Size(18, 17);
        this.MathsUpdateDivisorCheckBox.TabIndex = 274;
        this.ToolTip.SetToolTip(this.MathsUpdateDivisorCheckBox, "Update the global divisor");
        this.MathsUpdateDivisorCheckBox.UseVisualStyleBackColor = false;
        this.MathsUpdateDivisorCheckBox.CheckedChanged += new System.EventHandler(this.MathsUpdateDivisorCheckBox_CheckedChanged);
        // 
        // MathsDivisorNumericUpDown
        // 
        this.MathsDivisorNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.MathsDivisorNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsDivisorNumericUpDown.Location = new System.Drawing.Point(169, 175);
        this.MathsDivisorNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.MathsDivisorNumericUpDown.Maximum = new decimal(new int[] {
            9999999,
            0,
            0,
            0});
        this.MathsDivisorNumericUpDown.Minimum = new decimal(new int[] {
            1,
            0,
            0,
            0});
        this.MathsDivisorNumericUpDown.Name = "MathsDivisorNumericUpDown";
        this.MathsDivisorNumericUpDown.Size = new System.Drawing.Size(73, 20);
        this.MathsDivisorNumericUpDown.TabIndex = 273;
        this.MathsDivisorNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsDivisorNumericUpDown.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
        this.MathsDivisorNumericUpDown.ValueChanged += new System.EventHandler(this.MathsDivisorNumericUpDown_ValueChanged);
        // 
        // MathsDivisorLabel
        // 
        this.MathsDivisorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsDivisorLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.MathsDivisorLabel.Location = new System.Drawing.Point(5, 175);
        this.MathsDivisorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsDivisorLabel.Name = "MathsDivisorLabel";
        this.MathsDivisorLabel.Size = new System.Drawing.Size(171, 21);
        this.MathsDivisorLabel.TabIndex = 272;
        this.MathsDivisorLabel.Text = "Colorize numbers divisible by";
        this.MathsDivisorLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        // 
        // MathsVersesCDivideVDUSumTextBox
        // 
        this.MathsVersesCDivideVDUSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCDivideVDUSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCDivideVDUSumTextBox.Location = new System.Drawing.Point(879, 149);
        this.MathsVersesCDivideVDUSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCDivideVDUSumTextBox.Name = "MathsVersesCDivideVDUSumTextBox";
        this.MathsVersesCDivideVDUSumTextBox.ReadOnly = true;
        this.MathsVersesCDivideVDUSumTextBox.Size = new System.Drawing.Size(89, 23);
        this.MathsVersesCDivideVDUSumTextBox.TabIndex = 104;
        this.MathsVersesCDivideVDUSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCDivideVDUSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCDivideVDUSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCDivideVDUSumTextBox
        // 
        this.MathsChaptersCDivideVDUSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCDivideVDUSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCDivideVDUSumTextBox.Location = new System.Drawing.Point(412, 149);
        this.MathsChaptersCDivideVDUSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCDivideVDUSumTextBox.Name = "MathsChaptersCDivideVDUSumTextBox";
        this.MathsChaptersCDivideVDUSumTextBox.ReadOnly = true;
        this.MathsChaptersCDivideVDUSumTextBox.Size = new System.Drawing.Size(89, 23);
        this.MathsChaptersCDivideVDUSumTextBox.TabIndex = 98;
        this.MathsChaptersCDivideVDUSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCDivideVDUSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCDivideVDUSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCDivideVCompositeSumTextBox
        // 
        this.MathsChaptersCDivideVCompositeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCDivideVCompositeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCDivideVCompositeSumTextBox.Location = new System.Drawing.Point(337, 149);
        this.MathsChaptersCDivideVCompositeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCDivideVCompositeSumTextBox.Name = "MathsChaptersCDivideVCompositeSumTextBox";
        this.MathsChaptersCDivideVCompositeSumTextBox.ReadOnly = true;
        this.MathsChaptersCDivideVCompositeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCDivideVCompositeSumTextBox.TabIndex = 97;
        this.MathsChaptersCDivideVCompositeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCDivideVCompositeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCDivideVCompositeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCDivideVPrimeSumTextBox
        // 
        this.MathsChaptersCDivideVPrimeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCDivideVPrimeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCDivideVPrimeSumTextBox.Location = new System.Drawing.Point(265, 149);
        this.MathsChaptersCDivideVPrimeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCDivideVPrimeSumTextBox.Name = "MathsChaptersCDivideVPrimeSumTextBox";
        this.MathsChaptersCDivideVPrimeSumTextBox.ReadOnly = true;
        this.MathsChaptersCDivideVPrimeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCDivideVPrimeSumTextBox.TabIndex = 96;
        this.MathsChaptersCDivideVPrimeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCDivideVPrimeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCDivideVPrimeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCDivideVEvenSumTextBox
        // 
        this.MathsChaptersCDivideVEvenSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCDivideVEvenSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCDivideVEvenSumTextBox.Location = new System.Drawing.Point(193, 149);
        this.MathsChaptersCDivideVEvenSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCDivideVEvenSumTextBox.Name = "MathsChaptersCDivideVEvenSumTextBox";
        this.MathsChaptersCDivideVEvenSumTextBox.ReadOnly = true;
        this.MathsChaptersCDivideVEvenSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCDivideVEvenSumTextBox.TabIndex = 95;
        this.MathsChaptersCDivideVEvenSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCDivideVEvenSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCDivideVEvenSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCDivideVOddSumTextBox
        // 
        this.MathsChaptersCDivideVOddSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCDivideVOddSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCDivideVOddSumTextBox.Location = new System.Drawing.Point(121, 149);
        this.MathsChaptersCDivideVOddSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCDivideVOddSumTextBox.Name = "MathsChaptersCDivideVOddSumTextBox";
        this.MathsChaptersCDivideVOddSumTextBox.ReadOnly = true;
        this.MathsChaptersCDivideVOddSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCDivideVOddSumTextBox.TabIndex = 94;
        this.MathsChaptersCDivideVOddSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCDivideVOddSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCDivideVOddSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCDivideVSumTextBox
        // 
        this.MathsChaptersCDivideVSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCDivideVSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCDivideVSumTextBox.Location = new System.Drawing.Point(49, 149);
        this.MathsChaptersCDivideVSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCDivideVSumTextBox.Name = "MathsChaptersCDivideVSumTextBox";
        this.MathsChaptersCDivideVSumTextBox.ReadOnly = true;
        this.MathsChaptersCDivideVSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCDivideVSumTextBox.TabIndex = 93;
        this.MathsChaptersCDivideVSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCDivideVSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCDivideVSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCDivideVSumLabel
        // 
        this.MathsChaptersCDivideVSumLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.MathsChaptersCDivideVSumLabel.Location = new System.Drawing.Point(1, 150);
        this.MathsChaptersCDivideVSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsChaptersCDivideVSumLabel.Name = "MathsChaptersCDivideVSumLabel";
        this.MathsChaptersCDivideVSumLabel.Size = new System.Drawing.Size(45, 20);
        this.MathsChaptersCDivideVSumLabel.TabIndex = 91;
        this.MathsChaptersCDivideVSumLabel.Text = "C ÷ V";
        this.MathsChaptersCDivideVSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
        this.MathsChaptersCDivideVSumLabel.Click += new System.EventHandler(this.MathsChaptersCDivideVSumLabel_Click);
        // 
        // MathsVersesCDivideVCompositeSumTextBox
        // 
        this.MathsVersesCDivideVCompositeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCDivideVCompositeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCDivideVCompositeSumTextBox.Location = new System.Drawing.Point(804, 149);
        this.MathsVersesCDivideVCompositeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCDivideVCompositeSumTextBox.Name = "MathsVersesCDivideVCompositeSumTextBox";
        this.MathsVersesCDivideVCompositeSumTextBox.ReadOnly = true;
        this.MathsVersesCDivideVCompositeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCDivideVCompositeSumTextBox.TabIndex = 103;
        this.MathsVersesCDivideVCompositeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCDivideVCompositeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCDivideVCompositeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCDivideVPrimeSumTextBox
        // 
        this.MathsVersesCDivideVPrimeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCDivideVPrimeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCDivideVPrimeSumTextBox.Location = new System.Drawing.Point(731, 149);
        this.MathsVersesCDivideVPrimeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCDivideVPrimeSumTextBox.Name = "MathsVersesCDivideVPrimeSumTextBox";
        this.MathsVersesCDivideVPrimeSumTextBox.ReadOnly = true;
        this.MathsVersesCDivideVPrimeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCDivideVPrimeSumTextBox.TabIndex = 102;
        this.MathsVersesCDivideVPrimeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCDivideVPrimeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCDivideVPrimeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCDivideVEvenSumTextBox
        // 
        this.MathsVersesCDivideVEvenSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCDivideVEvenSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCDivideVEvenSumTextBox.Location = new System.Drawing.Point(657, 149);
        this.MathsVersesCDivideVEvenSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCDivideVEvenSumTextBox.Name = "MathsVersesCDivideVEvenSumTextBox";
        this.MathsVersesCDivideVEvenSumTextBox.ReadOnly = true;
        this.MathsVersesCDivideVEvenSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCDivideVEvenSumTextBox.TabIndex = 101;
        this.MathsVersesCDivideVEvenSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCDivideVEvenSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCDivideVEvenSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCDivideVOddSumTextBox
        // 
        this.MathsVersesCDivideVOddSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCDivideVOddSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCDivideVOddSumTextBox.Location = new System.Drawing.Point(584, 149);
        this.MathsVersesCDivideVOddSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCDivideVOddSumTextBox.Name = "MathsVersesCDivideVOddSumTextBox";
        this.MathsVersesCDivideVOddSumTextBox.ReadOnly = true;
        this.MathsVersesCDivideVOddSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCDivideVOddSumTextBox.TabIndex = 100;
        this.MathsVersesCDivideVOddSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCDivideVOddSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCDivideVOddSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCDivideVSumTextBox
        // 
        this.MathsVersesCDivideVSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCDivideVSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCDivideVSumTextBox.Location = new System.Drawing.Point(511, 149);
        this.MathsVersesCDivideVSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCDivideVSumTextBox.Name = "MathsVersesCDivideVSumTextBox";
        this.MathsVersesCDivideVSumTextBox.ReadOnly = true;
        this.MathsVersesCDivideVSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCDivideVSumTextBox.TabIndex = 99;
        this.MathsVersesCDivideVSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCDivideVSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCDivideVSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCDivideVLabel
        // 
        this.MathsVersesCDivideVLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCDivideVLabel.Location = new System.Drawing.Point(507, 150);
        this.MathsVersesCDivideVLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsVersesCDivideVLabel.Name = "MathsVersesCDivideVLabel";
        this.MathsVersesCDivideVLabel.Size = new System.Drawing.Size(73, 25);
        this.MathsVersesCDivideVLabel.TabIndex = 92;
        this.MathsVersesCDivideVLabel.Text = "C + V";
        this.MathsVersesCDivideVLabel.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
        this.MathsVersesCDivideVLabel.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCDivideVLabel.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCMultiplyVDUSumTextBox
        // 
        this.MathsVersesCMultiplyVDUSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCMultiplyVDUSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMultiplyVDUSumTextBox.Location = new System.Drawing.Point(879, 124);
        this.MathsVersesCMultiplyVDUSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCMultiplyVDUSumTextBox.Name = "MathsVersesCMultiplyVDUSumTextBox";
        this.MathsVersesCMultiplyVDUSumTextBox.ReadOnly = true;
        this.MathsVersesCMultiplyVDUSumTextBox.Size = new System.Drawing.Size(89, 23);
        this.MathsVersesCMultiplyVDUSumTextBox.TabIndex = 90;
        this.MathsVersesCMultiplyVDUSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCMultiplyVDUSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMultiplyVDUSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMultiplyVDUSumTextBox
        // 
        this.MathsChaptersCMultiplyVDUSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCMultiplyVDUSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCMultiplyVDUSumTextBox.Location = new System.Drawing.Point(412, 124);
        this.MathsChaptersCMultiplyVDUSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCMultiplyVDUSumTextBox.Name = "MathsChaptersCMultiplyVDUSumTextBox";
        this.MathsChaptersCMultiplyVDUSumTextBox.ReadOnly = true;
        this.MathsChaptersCMultiplyVDUSumTextBox.Size = new System.Drawing.Size(89, 23);
        this.MathsChaptersCMultiplyVDUSumTextBox.TabIndex = 84;
        this.MathsChaptersCMultiplyVDUSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCMultiplyVDUSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCMultiplyVDUSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMultiplyVCompositeSumTextBox
        // 
        this.MathsChaptersCMultiplyVCompositeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCMultiplyVCompositeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCMultiplyVCompositeSumTextBox.Location = new System.Drawing.Point(337, 124);
        this.MathsChaptersCMultiplyVCompositeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCMultiplyVCompositeSumTextBox.Name = "MathsChaptersCMultiplyVCompositeSumTextBox";
        this.MathsChaptersCMultiplyVCompositeSumTextBox.ReadOnly = true;
        this.MathsChaptersCMultiplyVCompositeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCMultiplyVCompositeSumTextBox.TabIndex = 83;
        this.MathsChaptersCMultiplyVCompositeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCMultiplyVCompositeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCMultiplyVCompositeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMultiplyVPrimeSumTextBox
        // 
        this.MathsChaptersCMultiplyVPrimeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCMultiplyVPrimeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCMultiplyVPrimeSumTextBox.Location = new System.Drawing.Point(265, 124);
        this.MathsChaptersCMultiplyVPrimeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCMultiplyVPrimeSumTextBox.Name = "MathsChaptersCMultiplyVPrimeSumTextBox";
        this.MathsChaptersCMultiplyVPrimeSumTextBox.ReadOnly = true;
        this.MathsChaptersCMultiplyVPrimeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCMultiplyVPrimeSumTextBox.TabIndex = 82;
        this.MathsChaptersCMultiplyVPrimeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCMultiplyVPrimeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCMultiplyVPrimeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMultiplyVEvenSumTextBox
        // 
        this.MathsChaptersCMultiplyVEvenSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCMultiplyVEvenSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCMultiplyVEvenSumTextBox.Location = new System.Drawing.Point(193, 124);
        this.MathsChaptersCMultiplyVEvenSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCMultiplyVEvenSumTextBox.Name = "MathsChaptersCMultiplyVEvenSumTextBox";
        this.MathsChaptersCMultiplyVEvenSumTextBox.ReadOnly = true;
        this.MathsChaptersCMultiplyVEvenSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCMultiplyVEvenSumTextBox.TabIndex = 81;
        this.MathsChaptersCMultiplyVEvenSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCMultiplyVEvenSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCMultiplyVEvenSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMultiplyVOddSumTextBox
        // 
        this.MathsChaptersCMultiplyVOddSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCMultiplyVOddSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCMultiplyVOddSumTextBox.Location = new System.Drawing.Point(121, 124);
        this.MathsChaptersCMultiplyVOddSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCMultiplyVOddSumTextBox.Name = "MathsChaptersCMultiplyVOddSumTextBox";
        this.MathsChaptersCMultiplyVOddSumTextBox.ReadOnly = true;
        this.MathsChaptersCMultiplyVOddSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCMultiplyVOddSumTextBox.TabIndex = 80;
        this.MathsChaptersCMultiplyVOddSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCMultiplyVOddSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCMultiplyVOddSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMultiplyVSumTextBox
        // 
        this.MathsChaptersCMultiplyVSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCMultiplyVSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCMultiplyVSumTextBox.Location = new System.Drawing.Point(49, 124);
        this.MathsChaptersCMultiplyVSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCMultiplyVSumTextBox.Name = "MathsChaptersCMultiplyVSumTextBox";
        this.MathsChaptersCMultiplyVSumTextBox.ReadOnly = true;
        this.MathsChaptersCMultiplyVSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCMultiplyVSumTextBox.TabIndex = 79;
        this.MathsChaptersCMultiplyVSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCMultiplyVSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCMultiplyVSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMultiplyVSumLabel
        // 
        this.MathsChaptersCMultiplyVSumLabel.Location = new System.Drawing.Point(1, 126);
        this.MathsChaptersCMultiplyVSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsChaptersCMultiplyVSumLabel.Name = "MathsChaptersCMultiplyVSumLabel";
        this.MathsChaptersCMultiplyVSumLabel.Size = new System.Drawing.Size(45, 20);
        this.MathsChaptersCMultiplyVSumLabel.TabIndex = 77;
        this.MathsChaptersCMultiplyVSumLabel.Text = "C × V";
        this.MathsChaptersCMultiplyVSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
        // 
        // MathsVersesCMultiplyVCompositeSumTextBox
        // 
        this.MathsVersesCMultiplyVCompositeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCMultiplyVCompositeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMultiplyVCompositeSumTextBox.Location = new System.Drawing.Point(804, 124);
        this.MathsVersesCMultiplyVCompositeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCMultiplyVCompositeSumTextBox.Name = "MathsVersesCMultiplyVCompositeSumTextBox";
        this.MathsVersesCMultiplyVCompositeSumTextBox.ReadOnly = true;
        this.MathsVersesCMultiplyVCompositeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCMultiplyVCompositeSumTextBox.TabIndex = 89;
        this.MathsVersesCMultiplyVCompositeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCMultiplyVCompositeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMultiplyVCompositeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCMultiplyVPrimeSumTextBox
        // 
        this.MathsVersesCMultiplyVPrimeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCMultiplyVPrimeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMultiplyVPrimeSumTextBox.Location = new System.Drawing.Point(731, 124);
        this.MathsVersesCMultiplyVPrimeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCMultiplyVPrimeSumTextBox.Name = "MathsVersesCMultiplyVPrimeSumTextBox";
        this.MathsVersesCMultiplyVPrimeSumTextBox.ReadOnly = true;
        this.MathsVersesCMultiplyVPrimeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCMultiplyVPrimeSumTextBox.TabIndex = 88;
        this.MathsVersesCMultiplyVPrimeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCMultiplyVPrimeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMultiplyVPrimeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCMultiplyVEvenSumTextBox
        // 
        this.MathsVersesCMultiplyVEvenSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCMultiplyVEvenSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMultiplyVEvenSumTextBox.Location = new System.Drawing.Point(657, 124);
        this.MathsVersesCMultiplyVEvenSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCMultiplyVEvenSumTextBox.Name = "MathsVersesCMultiplyVEvenSumTextBox";
        this.MathsVersesCMultiplyVEvenSumTextBox.ReadOnly = true;
        this.MathsVersesCMultiplyVEvenSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCMultiplyVEvenSumTextBox.TabIndex = 87;
        this.MathsVersesCMultiplyVEvenSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCMultiplyVEvenSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMultiplyVEvenSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCMultiplyVOddSumTextBox
        // 
        this.MathsVersesCMultiplyVOddSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCMultiplyVOddSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMultiplyVOddSumTextBox.Location = new System.Drawing.Point(584, 124);
        this.MathsVersesCMultiplyVOddSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCMultiplyVOddSumTextBox.Name = "MathsVersesCMultiplyVOddSumTextBox";
        this.MathsVersesCMultiplyVOddSumTextBox.ReadOnly = true;
        this.MathsVersesCMultiplyVOddSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCMultiplyVOddSumTextBox.TabIndex = 86;
        this.MathsVersesCMultiplyVOddSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCMultiplyVOddSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMultiplyVOddSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCMultiplyVSumTextBox
        // 
        this.MathsVersesCMultiplyVSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCMultiplyVSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMultiplyVSumTextBox.Location = new System.Drawing.Point(511, 124);
        this.MathsVersesCMultiplyVSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCMultiplyVSumTextBox.Name = "MathsVersesCMultiplyVSumTextBox";
        this.MathsVersesCMultiplyVSumTextBox.ReadOnly = true;
        this.MathsVersesCMultiplyVSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCMultiplyVSumTextBox.TabIndex = 85;
        this.MathsVersesCMultiplyVSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCMultiplyVSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMultiplyVSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCMultiplyVLabel
        // 
        this.MathsVersesCMultiplyVLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMultiplyVLabel.Location = new System.Drawing.Point(507, 126);
        this.MathsVersesCMultiplyVLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsVersesCMultiplyVLabel.Name = "MathsVersesCMultiplyVLabel";
        this.MathsVersesCMultiplyVLabel.Size = new System.Drawing.Size(73, 25);
        this.MathsVersesCMultiplyVLabel.TabIndex = 78;
        this.MathsVersesCMultiplyVLabel.Text = "C + V";
        this.MathsVersesCMultiplyVLabel.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
        this.MathsVersesCMultiplyVLabel.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMultiplyVLabel.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCSumTextBox
        // 
        this.MathsVersesCSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCSumTextBox.Location = new System.Drawing.Point(511, 26);
        this.MathsVersesCSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCSumTextBox.Name = "MathsVersesCSumTextBox";
        this.MathsVersesCSumTextBox.ReadOnly = true;
        this.MathsVersesCSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCSumTextBox.TabIndex = 41;
        this.MathsVersesCSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesSumInspectLabel
        // 
        this.MathsVersesSumInspectLabel.BackColor = System.Drawing.Color.Transparent;
        this.MathsVersesSumInspectLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.MathsVersesSumInspectLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesSumInspectLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.MathsVersesSumInspectLabel.Image = ((System.Drawing.Image)(resources.GetObject("MathsVersesSumInspectLabel.Image")));
        this.MathsVersesSumInspectLabel.Location = new System.Drawing.Point(492, 4);
        this.MathsVersesSumInspectLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsVersesSumInspectLabel.Name = "MathsVersesSumInspectLabel";
        this.MathsVersesSumInspectLabel.Size = new System.Drawing.Size(25, 23);
        this.MathsVersesSumInspectLabel.TabIndex = 71;
        this.ToolTip.SetToolTip(this.MathsVersesSumInspectLabel, "Inspect verse sums");
        this.MathsVersesSumInspectLabel.Click += new System.EventHandler(this.MathsVersesSumInspectLabel_Click);
        // 
        // MathsVersesCMinusVDUSumTextBox
        // 
        this.MathsVersesCMinusVDUSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCMinusVDUSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMinusVDUSumTextBox.Location = new System.Drawing.Point(879, 100);
        this.MathsVersesCMinusVDUSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCMinusVDUSumTextBox.Name = "MathsVersesCMinusVDUSumTextBox";
        this.MathsVersesCMinusVDUSumTextBox.ReadOnly = true;
        this.MathsVersesCMinusVDUSumTextBox.Size = new System.Drawing.Size(89, 23);
        this.MathsVersesCMinusVDUSumTextBox.TabIndex = 64;
        this.MathsVersesCMinusVDUSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCMinusVDUSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMinusVDUSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCPlusVDUSumTextBox
        // 
        this.MathsVersesCPlusVDUSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCPlusVDUSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCPlusVDUSumTextBox.Location = new System.Drawing.Point(879, 75);
        this.MathsVersesCPlusVDUSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCPlusVDUSumTextBox.Name = "MathsVersesCPlusVDUSumTextBox";
        this.MathsVersesCPlusVDUSumTextBox.ReadOnly = true;
        this.MathsVersesCPlusVDUSumTextBox.Size = new System.Drawing.Size(89, 23);
        this.MathsVersesCPlusVDUSumTextBox.TabIndex = 58;
        this.MathsVersesCPlusVDUSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCPlusVDUSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCPlusVDUSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesVDUSumTextBox
        // 
        this.MathsVersesVDUSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesVDUSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesVDUSumTextBox.Location = new System.Drawing.Point(879, 50);
        this.MathsVersesVDUSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesVDUSumTextBox.Name = "MathsVersesVDUSumTextBox";
        this.MathsVersesVDUSumTextBox.ReadOnly = true;
        this.MathsVersesVDUSumTextBox.Size = new System.Drawing.Size(89, 23);
        this.MathsVersesVDUSumTextBox.TabIndex = 52;
        this.MathsVersesVDUSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesVDUSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesVDUSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCDUSumTextBox
        // 
        this.MathsVersesCDUSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCDUSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCDUSumTextBox.Location = new System.Drawing.Point(879, 26);
        this.MathsVersesCDUSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCDUSumTextBox.Name = "MathsVersesCDUSumTextBox";
        this.MathsVersesCDUSumTextBox.ReadOnly = true;
        this.MathsVersesCDUSumTextBox.Size = new System.Drawing.Size(89, 23);
        this.MathsVersesCDUSumTextBox.TabIndex = 46;
        this.MathsVersesCDUSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCDUSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCDUSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMinusVDUSumTextBox
        // 
        this.MathsChaptersCMinusVDUSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCMinusVDUSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCMinusVDUSumTextBox.Location = new System.Drawing.Point(412, 100);
        this.MathsChaptersCMinusVDUSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCMinusVDUSumTextBox.Name = "MathsChaptersCMinusVDUSumTextBox";
        this.MathsChaptersCMinusVDUSumTextBox.ReadOnly = true;
        this.MathsChaptersCMinusVDUSumTextBox.Size = new System.Drawing.Size(89, 23);
        this.MathsChaptersCMinusVDUSumTextBox.TabIndex = 24;
        this.MathsChaptersCMinusVDUSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCMinusVDUSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCMinusVDUSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCPlusVDUSumTextBox
        // 
        this.MathsChaptersCPlusVDUSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCPlusVDUSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCPlusVDUSumTextBox.Location = new System.Drawing.Point(412, 75);
        this.MathsChaptersCPlusVDUSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCPlusVDUSumTextBox.Name = "MathsChaptersCPlusVDUSumTextBox";
        this.MathsChaptersCPlusVDUSumTextBox.ReadOnly = true;
        this.MathsChaptersCPlusVDUSumTextBox.Size = new System.Drawing.Size(89, 23);
        this.MathsChaptersCPlusVDUSumTextBox.TabIndex = 18;
        this.MathsChaptersCPlusVDUSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCPlusVDUSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCPlusVDUSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersVDUSumTextBox
        // 
        this.MathsChaptersVDUSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersVDUSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersVDUSumTextBox.Location = new System.Drawing.Point(412, 50);
        this.MathsChaptersVDUSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersVDUSumTextBox.Name = "MathsChaptersVDUSumTextBox";
        this.MathsChaptersVDUSumTextBox.ReadOnly = true;
        this.MathsChaptersVDUSumTextBox.Size = new System.Drawing.Size(89, 23);
        this.MathsChaptersVDUSumTextBox.TabIndex = 12;
        this.MathsChaptersVDUSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersVDUSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersVDUSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCDUSumTextBox
        // 
        this.MathsChaptersCDUSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCDUSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCDUSumTextBox.Location = new System.Drawing.Point(412, 26);
        this.MathsChaptersCDUSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCDUSumTextBox.Name = "MathsChaptersCDUSumTextBox";
        this.MathsChaptersCDUSumTextBox.ReadOnly = true;
        this.MathsChaptersCDUSumTextBox.Size = new System.Drawing.Size(89, 23);
        this.MathsChaptersCDUSumTextBox.TabIndex = 6;
        this.MathsChaptersCDUSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCDUSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCDUSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMinusVCompositeSumTextBox
        // 
        this.MathsChaptersCMinusVCompositeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCMinusVCompositeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCMinusVCompositeSumTextBox.Location = new System.Drawing.Point(337, 100);
        this.MathsChaptersCMinusVCompositeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCMinusVCompositeSumTextBox.Name = "MathsChaptersCMinusVCompositeSumTextBox";
        this.MathsChaptersCMinusVCompositeSumTextBox.ReadOnly = true;
        this.MathsChaptersCMinusVCompositeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCMinusVCompositeSumTextBox.TabIndex = 23;
        this.MathsChaptersCMinusVCompositeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCMinusVCompositeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCMinusVCompositeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCPlusVCompositeSumTextBox
        // 
        this.MathsChaptersCPlusVCompositeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCPlusVCompositeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCPlusVCompositeSumTextBox.Location = new System.Drawing.Point(337, 75);
        this.MathsChaptersCPlusVCompositeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCPlusVCompositeSumTextBox.Name = "MathsChaptersCPlusVCompositeSumTextBox";
        this.MathsChaptersCPlusVCompositeSumTextBox.ReadOnly = true;
        this.MathsChaptersCPlusVCompositeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCPlusVCompositeSumTextBox.TabIndex = 17;
        this.MathsChaptersCPlusVCompositeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCPlusVCompositeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCPlusVCompositeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersVCompositeSumTextBox
        // 
        this.MathsChaptersVCompositeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersVCompositeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersVCompositeSumTextBox.Location = new System.Drawing.Point(337, 50);
        this.MathsChaptersVCompositeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersVCompositeSumTextBox.Name = "MathsChaptersVCompositeSumTextBox";
        this.MathsChaptersVCompositeSumTextBox.ReadOnly = true;
        this.MathsChaptersVCompositeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersVCompositeSumTextBox.TabIndex = 11;
        this.MathsChaptersVCompositeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersVCompositeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersVCompositeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCCompositeSumTextBox
        // 
        this.MathsChaptersCCompositeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCCompositeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCCompositeSumTextBox.Location = new System.Drawing.Point(337, 26);
        this.MathsChaptersCCompositeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCCompositeSumTextBox.Name = "MathsChaptersCCompositeSumTextBox";
        this.MathsChaptersCCompositeSumTextBox.ReadOnly = true;
        this.MathsChaptersCCompositeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCCompositeSumTextBox.TabIndex = 5;
        this.MathsChaptersCCompositeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCCompositeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCCompositeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMinusVPrimeSumTextBox
        // 
        this.MathsChaptersCMinusVPrimeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCMinusVPrimeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCMinusVPrimeSumTextBox.Location = new System.Drawing.Point(265, 100);
        this.MathsChaptersCMinusVPrimeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCMinusVPrimeSumTextBox.Name = "MathsChaptersCMinusVPrimeSumTextBox";
        this.MathsChaptersCMinusVPrimeSumTextBox.ReadOnly = true;
        this.MathsChaptersCMinusVPrimeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCMinusVPrimeSumTextBox.TabIndex = 22;
        this.MathsChaptersCMinusVPrimeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCMinusVPrimeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCMinusVPrimeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCPlusVPrimeSumTextBox
        // 
        this.MathsChaptersCPlusVPrimeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCPlusVPrimeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCPlusVPrimeSumTextBox.Location = new System.Drawing.Point(265, 75);
        this.MathsChaptersCPlusVPrimeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCPlusVPrimeSumTextBox.Name = "MathsChaptersCPlusVPrimeSumTextBox";
        this.MathsChaptersCPlusVPrimeSumTextBox.ReadOnly = true;
        this.MathsChaptersCPlusVPrimeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCPlusVPrimeSumTextBox.TabIndex = 16;
        this.MathsChaptersCPlusVPrimeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCPlusVPrimeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCPlusVPrimeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersVPrimeSumTextBox
        // 
        this.MathsChaptersVPrimeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersVPrimeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersVPrimeSumTextBox.Location = new System.Drawing.Point(265, 50);
        this.MathsChaptersVPrimeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersVPrimeSumTextBox.Name = "MathsChaptersVPrimeSumTextBox";
        this.MathsChaptersVPrimeSumTextBox.ReadOnly = true;
        this.MathsChaptersVPrimeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersVPrimeSumTextBox.TabIndex = 10;
        this.MathsChaptersVPrimeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersVPrimeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersVPrimeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCPrimeSumTextBox
        // 
        this.MathsChaptersCPrimeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCPrimeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCPrimeSumTextBox.Location = new System.Drawing.Point(265, 26);
        this.MathsChaptersCPrimeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCPrimeSumTextBox.Name = "MathsChaptersCPrimeSumTextBox";
        this.MathsChaptersCPrimeSumTextBox.ReadOnly = true;
        this.MathsChaptersCPrimeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCPrimeSumTextBox.TabIndex = 4;
        this.MathsChaptersCPrimeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCPrimeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCPrimeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMinusVEvenSumTextBox
        // 
        this.MathsChaptersCMinusVEvenSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCMinusVEvenSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCMinusVEvenSumTextBox.Location = new System.Drawing.Point(193, 100);
        this.MathsChaptersCMinusVEvenSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCMinusVEvenSumTextBox.Name = "MathsChaptersCMinusVEvenSumTextBox";
        this.MathsChaptersCMinusVEvenSumTextBox.ReadOnly = true;
        this.MathsChaptersCMinusVEvenSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCMinusVEvenSumTextBox.TabIndex = 21;
        this.MathsChaptersCMinusVEvenSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCMinusVEvenSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCMinusVEvenSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCPlusVEvenSumTextBox
        // 
        this.MathsChaptersCPlusVEvenSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCPlusVEvenSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCPlusVEvenSumTextBox.Location = new System.Drawing.Point(193, 75);
        this.MathsChaptersCPlusVEvenSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCPlusVEvenSumTextBox.Name = "MathsChaptersCPlusVEvenSumTextBox";
        this.MathsChaptersCPlusVEvenSumTextBox.ReadOnly = true;
        this.MathsChaptersCPlusVEvenSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCPlusVEvenSumTextBox.TabIndex = 15;
        this.MathsChaptersCPlusVEvenSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCPlusVEvenSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCPlusVEvenSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersVEvenSumTextBox
        // 
        this.MathsChaptersVEvenSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersVEvenSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersVEvenSumTextBox.Location = new System.Drawing.Point(193, 50);
        this.MathsChaptersVEvenSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersVEvenSumTextBox.Name = "MathsChaptersVEvenSumTextBox";
        this.MathsChaptersVEvenSumTextBox.ReadOnly = true;
        this.MathsChaptersVEvenSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersVEvenSumTextBox.TabIndex = 9;
        this.MathsChaptersVEvenSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersVEvenSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersVEvenSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCEvenSumTextBox
        // 
        this.MathsChaptersCEvenSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCEvenSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCEvenSumTextBox.Location = new System.Drawing.Point(193, 26);
        this.MathsChaptersCEvenSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCEvenSumTextBox.Name = "MathsChaptersCEvenSumTextBox";
        this.MathsChaptersCEvenSumTextBox.ReadOnly = true;
        this.MathsChaptersCEvenSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCEvenSumTextBox.TabIndex = 3;
        this.MathsChaptersCEvenSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCEvenSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCEvenSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMinusVOddSumTextBox
        // 
        this.MathsChaptersCMinusVOddSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCMinusVOddSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCMinusVOddSumTextBox.Location = new System.Drawing.Point(121, 100);
        this.MathsChaptersCMinusVOddSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCMinusVOddSumTextBox.Name = "MathsChaptersCMinusVOddSumTextBox";
        this.MathsChaptersCMinusVOddSumTextBox.ReadOnly = true;
        this.MathsChaptersCMinusVOddSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCMinusVOddSumTextBox.TabIndex = 20;
        this.MathsChaptersCMinusVOddSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCMinusVOddSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCMinusVOddSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCPlusVOddSumTextBox
        // 
        this.MathsChaptersCPlusVOddSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCPlusVOddSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCPlusVOddSumTextBox.Location = new System.Drawing.Point(121, 75);
        this.MathsChaptersCPlusVOddSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCPlusVOddSumTextBox.Name = "MathsChaptersCPlusVOddSumTextBox";
        this.MathsChaptersCPlusVOddSumTextBox.ReadOnly = true;
        this.MathsChaptersCPlusVOddSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCPlusVOddSumTextBox.TabIndex = 14;
        this.MathsChaptersCPlusVOddSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCPlusVOddSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCPlusVOddSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersVOddSumTextBox
        // 
        this.MathsChaptersVOddSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersVOddSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersVOddSumTextBox.Location = new System.Drawing.Point(121, 50);
        this.MathsChaptersVOddSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersVOddSumTextBox.Name = "MathsChaptersVOddSumTextBox";
        this.MathsChaptersVOddSumTextBox.ReadOnly = true;
        this.MathsChaptersVOddSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersVOddSumTextBox.TabIndex = 8;
        this.MathsChaptersVOddSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersVOddSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersVOddSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCOddSumTextBox
        // 
        this.MathsChaptersCOddSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCOddSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCOddSumTextBox.Location = new System.Drawing.Point(121, 26);
        this.MathsChaptersCOddSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCOddSumTextBox.Name = "MathsChaptersCOddSumTextBox";
        this.MathsChaptersCOddSumTextBox.ReadOnly = true;
        this.MathsChaptersCOddSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCOddSumTextBox.TabIndex = 2;
        this.MathsChaptersCOddSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCOddSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCOddSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMinusVSumTextBox
        // 
        this.MathsChaptersCMinusVSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCMinusVSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCMinusVSumTextBox.Location = new System.Drawing.Point(49, 100);
        this.MathsChaptersCMinusVSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCMinusVSumTextBox.Name = "MathsChaptersCMinusVSumTextBox";
        this.MathsChaptersCMinusVSumTextBox.ReadOnly = true;
        this.MathsChaptersCMinusVSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCMinusVSumTextBox.TabIndex = 19;
        this.MathsChaptersCMinusVSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCMinusVSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCMinusVSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCMinusVSumLabel
        // 
        this.MathsChaptersCMinusVSumLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.MathsChaptersCMinusVSumLabel.Location = new System.Drawing.Point(1, 101);
        this.MathsChaptersCMinusVSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsChaptersCMinusVSumLabel.Name = "MathsChaptersCMinusVSumLabel";
        this.MathsChaptersCMinusVSumLabel.Size = new System.Drawing.Size(45, 20);
        this.MathsChaptersCMinusVSumLabel.TabIndex = 0;
        this.MathsChaptersCMinusVSumLabel.Text = "C -- V";
        this.MathsChaptersCMinusVSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
        this.MathsChaptersCMinusVSumLabel.Click += new System.EventHandler(this.MathsChaptersCMinusVSumLabel_Click);
        // 
        // MathsChaptersCPlusVSumTextBox
        // 
        this.MathsChaptersCPlusVSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCPlusVSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCPlusVSumTextBox.Location = new System.Drawing.Point(49, 75);
        this.MathsChaptersCPlusVSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCPlusVSumTextBox.Name = "MathsChaptersCPlusVSumTextBox";
        this.MathsChaptersCPlusVSumTextBox.ReadOnly = true;
        this.MathsChaptersCPlusVSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCPlusVSumTextBox.TabIndex = 13;
        this.MathsChaptersCPlusVSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCPlusVSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCPlusVSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersCPlusVSumLabel
        // 
        this.MathsChaptersCPlusVSumLabel.Location = new System.Drawing.Point(1, 76);
        this.MathsChaptersCPlusVSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsChaptersCPlusVSumLabel.Name = "MathsChaptersCPlusVSumLabel";
        this.MathsChaptersCPlusVSumLabel.Size = new System.Drawing.Size(45, 20);
        this.MathsChaptersCPlusVSumLabel.TabIndex = 0;
        this.MathsChaptersCPlusVSumLabel.Text = "C + V";
        this.MathsChaptersCPlusVSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
        // 
        // MathsChaptersVSumTextBox
        // 
        this.MathsChaptersVSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersVSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersVSumTextBox.Location = new System.Drawing.Point(49, 50);
        this.MathsChaptersVSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersVSumTextBox.Name = "MathsChaptersVSumTextBox";
        this.MathsChaptersVSumTextBox.ReadOnly = true;
        this.MathsChaptersVSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersVSumTextBox.TabIndex = 7;
        this.MathsChaptersVSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersVSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersVSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsChaptersVSumLabel
        // 
        this.MathsChaptersVSumLabel.Location = new System.Drawing.Point(1, 52);
        this.MathsChaptersVSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsChaptersVSumLabel.Name = "MathsChaptersVSumLabel";
        this.MathsChaptersVSumLabel.Size = new System.Drawing.Size(45, 20);
        this.MathsChaptersVSumLabel.TabIndex = 0;
        this.MathsChaptersVSumLabel.Text = "V";
        this.MathsChaptersVSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
        // 
        // MathsChaptersCSumLabel
        // 
        this.MathsChaptersCSumLabel.Location = new System.Drawing.Point(1, 27);
        this.MathsChaptersCSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsChaptersCSumLabel.Name = "MathsChaptersCSumLabel";
        this.MathsChaptersCSumLabel.Size = new System.Drawing.Size(45, 20);
        this.MathsChaptersCSumLabel.TabIndex = 0;
        this.MathsChaptersCSumLabel.Text = "C";
        this.MathsChaptersCSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
        // 
        // MathsVersesCMinusVCompositeSumTextBox
        // 
        this.MathsVersesCMinusVCompositeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCMinusVCompositeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMinusVCompositeSumTextBox.Location = new System.Drawing.Point(804, 100);
        this.MathsVersesCMinusVCompositeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCMinusVCompositeSumTextBox.Name = "MathsVersesCMinusVCompositeSumTextBox";
        this.MathsVersesCMinusVCompositeSumTextBox.ReadOnly = true;
        this.MathsVersesCMinusVCompositeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCMinusVCompositeSumTextBox.TabIndex = 63;
        this.MathsVersesCMinusVCompositeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCMinusVCompositeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMinusVCompositeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCPlusVCompositeSumTextBox
        // 
        this.MathsVersesCPlusVCompositeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCPlusVCompositeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCPlusVCompositeSumTextBox.Location = new System.Drawing.Point(804, 75);
        this.MathsVersesCPlusVCompositeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCPlusVCompositeSumTextBox.Name = "MathsVersesCPlusVCompositeSumTextBox";
        this.MathsVersesCPlusVCompositeSumTextBox.ReadOnly = true;
        this.MathsVersesCPlusVCompositeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCPlusVCompositeSumTextBox.TabIndex = 57;
        this.MathsVersesCPlusVCompositeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCPlusVCompositeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCPlusVCompositeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesVCompositeSumTextBox
        // 
        this.MathsVersesVCompositeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesVCompositeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesVCompositeSumTextBox.Location = new System.Drawing.Point(804, 50);
        this.MathsVersesVCompositeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesVCompositeSumTextBox.Name = "MathsVersesVCompositeSumTextBox";
        this.MathsVersesVCompositeSumTextBox.ReadOnly = true;
        this.MathsVersesVCompositeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesVCompositeSumTextBox.TabIndex = 51;
        this.MathsVersesVCompositeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesVCompositeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesVCompositeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCCompositeSumTextBox
        // 
        this.MathsVersesCCompositeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCCompositeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCCompositeSumTextBox.Location = new System.Drawing.Point(804, 26);
        this.MathsVersesCCompositeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCCompositeSumTextBox.Name = "MathsVersesCCompositeSumTextBox";
        this.MathsVersesCCompositeSumTextBox.ReadOnly = true;
        this.MathsVersesCCompositeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCCompositeSumTextBox.TabIndex = 45;
        this.MathsVersesCCompositeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCCompositeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCCompositeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCMinusVPrimeSumTextBox
        // 
        this.MathsVersesCMinusVPrimeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCMinusVPrimeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMinusVPrimeSumTextBox.Location = new System.Drawing.Point(731, 100);
        this.MathsVersesCMinusVPrimeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCMinusVPrimeSumTextBox.Name = "MathsVersesCMinusVPrimeSumTextBox";
        this.MathsVersesCMinusVPrimeSumTextBox.ReadOnly = true;
        this.MathsVersesCMinusVPrimeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCMinusVPrimeSumTextBox.TabIndex = 62;
        this.MathsVersesCMinusVPrimeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCMinusVPrimeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMinusVPrimeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCPlusVPrimeSumTextBox
        // 
        this.MathsVersesCPlusVPrimeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCPlusVPrimeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCPlusVPrimeSumTextBox.Location = new System.Drawing.Point(731, 75);
        this.MathsVersesCPlusVPrimeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCPlusVPrimeSumTextBox.Name = "MathsVersesCPlusVPrimeSumTextBox";
        this.MathsVersesCPlusVPrimeSumTextBox.ReadOnly = true;
        this.MathsVersesCPlusVPrimeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCPlusVPrimeSumTextBox.TabIndex = 56;
        this.MathsVersesCPlusVPrimeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCPlusVPrimeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCPlusVPrimeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesVPrimeSumTextBox
        // 
        this.MathsVersesVPrimeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesVPrimeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesVPrimeSumTextBox.Location = new System.Drawing.Point(731, 50);
        this.MathsVersesVPrimeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesVPrimeSumTextBox.Name = "MathsVersesVPrimeSumTextBox";
        this.MathsVersesVPrimeSumTextBox.ReadOnly = true;
        this.MathsVersesVPrimeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesVPrimeSumTextBox.TabIndex = 50;
        this.MathsVersesVPrimeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesVPrimeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesVPrimeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCPrimeSumTextBox
        // 
        this.MathsVersesCPrimeSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCPrimeSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCPrimeSumTextBox.Location = new System.Drawing.Point(731, 26);
        this.MathsVersesCPrimeSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCPrimeSumTextBox.Name = "MathsVersesCPrimeSumTextBox";
        this.MathsVersesCPrimeSumTextBox.ReadOnly = true;
        this.MathsVersesCPrimeSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCPrimeSumTextBox.TabIndex = 44;
        this.MathsVersesCPrimeSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCPrimeSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCPrimeSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCMinusVEvenSumTextBox
        // 
        this.MathsVersesCMinusVEvenSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCMinusVEvenSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMinusVEvenSumTextBox.Location = new System.Drawing.Point(657, 100);
        this.MathsVersesCMinusVEvenSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCMinusVEvenSumTextBox.Name = "MathsVersesCMinusVEvenSumTextBox";
        this.MathsVersesCMinusVEvenSumTextBox.ReadOnly = true;
        this.MathsVersesCMinusVEvenSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCMinusVEvenSumTextBox.TabIndex = 61;
        this.MathsVersesCMinusVEvenSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCMinusVEvenSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMinusVEvenSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCPlusVEvenSumTextBox
        // 
        this.MathsVersesCPlusVEvenSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCPlusVEvenSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCPlusVEvenSumTextBox.Location = new System.Drawing.Point(657, 75);
        this.MathsVersesCPlusVEvenSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCPlusVEvenSumTextBox.Name = "MathsVersesCPlusVEvenSumTextBox";
        this.MathsVersesCPlusVEvenSumTextBox.ReadOnly = true;
        this.MathsVersesCPlusVEvenSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCPlusVEvenSumTextBox.TabIndex = 55;
        this.MathsVersesCPlusVEvenSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCPlusVEvenSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCPlusVEvenSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesVEvenSumTextBox
        // 
        this.MathsVersesVEvenSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesVEvenSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesVEvenSumTextBox.Location = new System.Drawing.Point(657, 50);
        this.MathsVersesVEvenSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesVEvenSumTextBox.Name = "MathsVersesVEvenSumTextBox";
        this.MathsVersesVEvenSumTextBox.ReadOnly = true;
        this.MathsVersesVEvenSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesVEvenSumTextBox.TabIndex = 49;
        this.MathsVersesVEvenSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesVEvenSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesVEvenSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCEvenSumTextBox
        // 
        this.MathsVersesCEvenSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCEvenSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCEvenSumTextBox.Location = new System.Drawing.Point(657, 26);
        this.MathsVersesCEvenSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCEvenSumTextBox.Name = "MathsVersesCEvenSumTextBox";
        this.MathsVersesCEvenSumTextBox.ReadOnly = true;
        this.MathsVersesCEvenSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCEvenSumTextBox.TabIndex = 43;
        this.MathsVersesCEvenSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCEvenSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCEvenSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCMinusVOddSumTextBox
        // 
        this.MathsVersesCMinusVOddSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCMinusVOddSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMinusVOddSumTextBox.Location = new System.Drawing.Point(584, 100);
        this.MathsVersesCMinusVOddSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCMinusVOddSumTextBox.Name = "MathsVersesCMinusVOddSumTextBox";
        this.MathsVersesCMinusVOddSumTextBox.ReadOnly = true;
        this.MathsVersesCMinusVOddSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCMinusVOddSumTextBox.TabIndex = 60;
        this.MathsVersesCMinusVOddSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCMinusVOddSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMinusVOddSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCPlusVOddSumTextBox
        // 
        this.MathsVersesCPlusVOddSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCPlusVOddSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCPlusVOddSumTextBox.Location = new System.Drawing.Point(584, 75);
        this.MathsVersesCPlusVOddSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCPlusVOddSumTextBox.Name = "MathsVersesCPlusVOddSumTextBox";
        this.MathsVersesCPlusVOddSumTextBox.ReadOnly = true;
        this.MathsVersesCPlusVOddSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCPlusVOddSumTextBox.TabIndex = 54;
        this.MathsVersesCPlusVOddSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCPlusVOddSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCPlusVOddSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesVOddSumTextBox
        // 
        this.MathsVersesVOddSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesVOddSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesVOddSumTextBox.Location = new System.Drawing.Point(584, 50);
        this.MathsVersesVOddSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesVOddSumTextBox.Name = "MathsVersesVOddSumTextBox";
        this.MathsVersesVOddSumTextBox.ReadOnly = true;
        this.MathsVersesVOddSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesVOddSumTextBox.TabIndex = 48;
        this.MathsVersesVOddSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesVOddSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesVOddSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCOddSumTextBox
        // 
        this.MathsVersesCOddSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCOddSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCOddSumTextBox.Location = new System.Drawing.Point(584, 26);
        this.MathsVersesCOddSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCOddSumTextBox.Name = "MathsVersesCOddSumTextBox";
        this.MathsVersesCOddSumTextBox.ReadOnly = true;
        this.MathsVersesCOddSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCOddSumTextBox.TabIndex = 42;
        this.MathsVersesCOddSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCOddSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCOddSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCMinusVSumTextBox
        // 
        this.MathsVersesCMinusVSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCMinusVSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMinusVSumTextBox.Location = new System.Drawing.Point(511, 100);
        this.MathsVersesCMinusVSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCMinusVSumTextBox.Name = "MathsVersesCMinusVSumTextBox";
        this.MathsVersesCMinusVSumTextBox.ReadOnly = true;
        this.MathsVersesCMinusVSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCMinusVSumTextBox.TabIndex = 59;
        this.MathsVersesCMinusVSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCMinusVSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMinusVSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCMinusVLabel
        // 
        this.MathsVersesCMinusVLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCMinusVLabel.Location = new System.Drawing.Point(507, 101);
        this.MathsVersesCMinusVLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsVersesCMinusVLabel.Name = "MathsVersesCMinusVLabel";
        this.MathsVersesCMinusVLabel.Size = new System.Drawing.Size(73, 25);
        this.MathsVersesCMinusVLabel.TabIndex = 0;
        this.MathsVersesCMinusVLabel.Text = "C -  V";
        this.MathsVersesCMinusVLabel.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
        this.MathsVersesCMinusVLabel.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCMinusVLabel.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCPlusVSumTextBox
        // 
        this.MathsVersesCPlusVSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesCPlusVSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCPlusVSumTextBox.Location = new System.Drawing.Point(511, 75);
        this.MathsVersesCPlusVSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesCPlusVSumTextBox.Name = "MathsVersesCPlusVSumTextBox";
        this.MathsVersesCPlusVSumTextBox.ReadOnly = true;
        this.MathsVersesCPlusVSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesCPlusVSumTextBox.TabIndex = 53;
        this.MathsVersesCPlusVSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesCPlusVSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCPlusVSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCPlusVLabel
        // 
        this.MathsVersesCPlusVLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCPlusVLabel.Location = new System.Drawing.Point(507, 76);
        this.MathsVersesCPlusVLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsVersesCPlusVLabel.Name = "MathsVersesCPlusVLabel";
        this.MathsVersesCPlusVLabel.Size = new System.Drawing.Size(73, 25);
        this.MathsVersesCPlusVLabel.TabIndex = 0;
        this.MathsVersesCPlusVLabel.Text = "C + V";
        this.MathsVersesCPlusVLabel.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
        this.MathsVersesCPlusVLabel.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCPlusVLabel.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesVSumTextBox
        // 
        this.MathsVersesVSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsVersesVSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesVSumTextBox.Location = new System.Drawing.Point(511, 50);
        this.MathsVersesVSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsVersesVSumTextBox.Name = "MathsVersesVSumTextBox";
        this.MathsVersesVSumTextBox.ReadOnly = true;
        this.MathsVersesVSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsVersesVSumTextBox.TabIndex = 47;
        this.MathsVersesVSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsVersesVSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesVSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesVLabel
        // 
        this.MathsVersesVLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesVLabel.Location = new System.Drawing.Point(507, 52);
        this.MathsVersesVLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsVersesVLabel.Name = "MathsVersesVLabel";
        this.MathsVersesVLabel.Size = new System.Drawing.Size(73, 25);
        this.MathsVersesVLabel.TabIndex = 0;
        this.MathsVersesVLabel.Text = "Number";
        this.MathsVersesVLabel.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
        this.MathsVersesVLabel.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesVLabel.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesCLabel
        // 
        this.MathsVersesCLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsVersesCLabel.Location = new System.Drawing.Point(508, 27);
        this.MathsVersesCLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsVersesCLabel.Name = "MathsVersesCLabel";
        this.MathsVersesCLabel.Size = new System.Drawing.Size(73, 25);
        this.MathsVersesCLabel.TabIndex = 0;
        this.MathsVersesCLabel.Text = "Chapter";
        this.MathsVersesCLabel.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
        this.MathsVersesCLabel.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsVersesCLabel.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // MathsVersesDUSumLabel
        // 
        this.MathsVersesDUSumLabel.ForeColor = System.Drawing.Color.DimGray;
        this.MathsVersesDUSumLabel.Location = new System.Drawing.Point(879, 5);
        this.MathsVersesDUSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsVersesDUSumLabel.Name = "MathsVersesDUSumLabel";
        this.MathsVersesDUSumLabel.Size = new System.Drawing.Size(121, 20);
        this.MathsVersesDUSumLabel.TabIndex = 76;
        this.MathsVersesDUSumLabel.Text = "D ÷ U";
        this.MathsVersesDUSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.ToolTip.SetToolTip(this.MathsVersesDUSumLabel, "Duplicate sums / Unique sums");
        // 
        // MathsVersesCompositeSumLabel
        // 
        this.MathsVersesCompositeSumLabel.ForeColor = System.Drawing.Color.DimGray;
        this.MathsVersesCompositeSumLabel.Location = new System.Drawing.Point(803, 5);
        this.MathsVersesCompositeSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsVersesCompositeSumLabel.Name = "MathsVersesCompositeSumLabel";
        this.MathsVersesCompositeSumLabel.Size = new System.Drawing.Size(79, 20);
        this.MathsVersesCompositeSumLabel.TabIndex = 0;
        this.MathsVersesCompositeSumLabel.Text = "Composite";
        this.MathsVersesCompositeSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        // 
        // MathsVersesPrimeSumLabel
        // 
        this.MathsVersesPrimeSumLabel.ForeColor = System.Drawing.Color.DimGray;
        this.MathsVersesPrimeSumLabel.Location = new System.Drawing.Point(731, 5);
        this.MathsVersesPrimeSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsVersesPrimeSumLabel.Name = "MathsVersesPrimeSumLabel";
        this.MathsVersesPrimeSumLabel.Size = new System.Drawing.Size(73, 20);
        this.MathsVersesPrimeSumLabel.TabIndex = 0;
        this.MathsVersesPrimeSumLabel.Text = "Prime";
        this.MathsVersesPrimeSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        // 
        // MathsVersesEvenSumLabel
        // 
        this.MathsVersesEvenSumLabel.ForeColor = System.Drawing.Color.DimGray;
        this.MathsVersesEvenSumLabel.Location = new System.Drawing.Point(657, 5);
        this.MathsVersesEvenSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsVersesEvenSumLabel.Name = "MathsVersesEvenSumLabel";
        this.MathsVersesEvenSumLabel.Size = new System.Drawing.Size(73, 20);
        this.MathsVersesEvenSumLabel.TabIndex = 0;
        this.MathsVersesEvenSumLabel.Text = "Even";
        this.MathsVersesEvenSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        // 
        // MathsVersesOddSumLabel
        // 
        this.MathsVersesOddSumLabel.ForeColor = System.Drawing.Color.DimGray;
        this.MathsVersesOddSumLabel.Location = new System.Drawing.Point(584, 5);
        this.MathsVersesOddSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsVersesOddSumLabel.Name = "MathsVersesOddSumLabel";
        this.MathsVersesOddSumLabel.Size = new System.Drawing.Size(73, 20);
        this.MathsVersesOddSumLabel.TabIndex = 0;
        this.MathsVersesOddSumLabel.Text = "Odd";
        this.MathsVersesOddSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        // 
        // MathsVersesSumLabel
        // 
        this.MathsVersesSumLabel.Location = new System.Drawing.Point(519, 5);
        this.MathsVersesSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsVersesSumLabel.Name = "MathsVersesSumLabel";
        this.MathsVersesSumLabel.Size = new System.Drawing.Size(65, 20);
        this.MathsVersesSumLabel.TabIndex = 0;
        this.MathsVersesSumLabel.Text = "Sum";
        this.MathsVersesSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        // 
        // MathsChaptersSumInspectLabel
        // 
        this.MathsChaptersSumInspectLabel.BackColor = System.Drawing.Color.Transparent;
        this.MathsChaptersSumInspectLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.MathsChaptersSumInspectLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersSumInspectLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.MathsChaptersSumInspectLabel.Image = ((System.Drawing.Image)(resources.GetObject("MathsChaptersSumInspectLabel.Image")));
        this.MathsChaptersSumInspectLabel.Location = new System.Drawing.Point(25, 4);
        this.MathsChaptersSumInspectLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsChaptersSumInspectLabel.Name = "MathsChaptersSumInspectLabel";
        this.MathsChaptersSumInspectLabel.Size = new System.Drawing.Size(25, 23);
        this.MathsChaptersSumInspectLabel.TabIndex = 31;
        this.ToolTip.SetToolTip(this.MathsChaptersSumInspectLabel, "Inspect chapter sums");
        this.MathsChaptersSumInspectLabel.Click += new System.EventHandler(this.MathsChaptersSumInspectLabel_Click);
        // 
        // MathsChaptersDUSumLabel
        // 
        this.MathsChaptersDUSumLabel.ForeColor = System.Drawing.Color.DimGray;
        this.MathsChaptersDUSumLabel.Location = new System.Drawing.Point(412, 5);
        this.MathsChaptersDUSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsChaptersDUSumLabel.Name = "MathsChaptersDUSumLabel";
        this.MathsChaptersDUSumLabel.Size = new System.Drawing.Size(121, 20);
        this.MathsChaptersDUSumLabel.TabIndex = 0;
        this.MathsChaptersDUSumLabel.Text = "D ÷ U";
        this.MathsChaptersDUSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.ToolTip.SetToolTip(this.MathsChaptersDUSumLabel, "Duplicate sums / Unique sums");
        // 
        // MathsChaptersSumLabel
        // 
        this.MathsChaptersSumLabel.Location = new System.Drawing.Point(53, 5);
        this.MathsChaptersSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsChaptersSumLabel.Name = "MathsChaptersSumLabel";
        this.MathsChaptersSumLabel.Size = new System.Drawing.Size(64, 20);
        this.MathsChaptersSumLabel.TabIndex = 0;
        this.MathsChaptersSumLabel.Text = "Sum";
        this.MathsChaptersSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        // 
        // MathsChaptersCompositeSumLabel
        // 
        this.MathsChaptersCompositeSumLabel.ForeColor = System.Drawing.Color.DimGray;
        this.MathsChaptersCompositeSumLabel.Location = new System.Drawing.Point(337, 5);
        this.MathsChaptersCompositeSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsChaptersCompositeSumLabel.Name = "MathsChaptersCompositeSumLabel";
        this.MathsChaptersCompositeSumLabel.Size = new System.Drawing.Size(75, 20);
        this.MathsChaptersCompositeSumLabel.TabIndex = 0;
        this.MathsChaptersCompositeSumLabel.Text = "Composite";
        this.MathsChaptersCompositeSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        // 
        // MathsChaptersPrimeSumLabel
        // 
        this.MathsChaptersPrimeSumLabel.ForeColor = System.Drawing.Color.DimGray;
        this.MathsChaptersPrimeSumLabel.Location = new System.Drawing.Point(268, 5);
        this.MathsChaptersPrimeSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsChaptersPrimeSumLabel.Name = "MathsChaptersPrimeSumLabel";
        this.MathsChaptersPrimeSumLabel.Size = new System.Drawing.Size(56, 20);
        this.MathsChaptersPrimeSumLabel.TabIndex = 0;
        this.MathsChaptersPrimeSumLabel.Text = "Prime";
        this.MathsChaptersPrimeSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        // 
        // MathsChaptersEvenSumLabel
        // 
        this.MathsChaptersEvenSumLabel.ForeColor = System.Drawing.Color.DimGray;
        this.MathsChaptersEvenSumLabel.Location = new System.Drawing.Point(196, 5);
        this.MathsChaptersEvenSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsChaptersEvenSumLabel.Name = "MathsChaptersEvenSumLabel";
        this.MathsChaptersEvenSumLabel.Size = new System.Drawing.Size(56, 20);
        this.MathsChaptersEvenSumLabel.TabIndex = 0;
        this.MathsChaptersEvenSumLabel.Text = "Even";
        this.MathsChaptersEvenSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        // 
        // MathsChaptersOddSumLabel
        // 
        this.MathsChaptersOddSumLabel.ForeColor = System.Drawing.Color.DimGray;
        this.MathsChaptersOddSumLabel.Location = new System.Drawing.Point(124, 5);
        this.MathsChaptersOddSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.MathsChaptersOddSumLabel.Name = "MathsChaptersOddSumLabel";
        this.MathsChaptersOddSumLabel.Size = new System.Drawing.Size(56, 20);
        this.MathsChaptersOddSumLabel.TabIndex = 0;
        this.MathsChaptersOddSumLabel.Text = "Odd";
        this.MathsChaptersOddSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        // 
        // MathsChaptersCSumTextBox
        // 
        this.MathsChaptersCSumTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.MathsChaptersCSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.MathsChaptersCSumTextBox.Location = new System.Drawing.Point(49, 26);
        this.MathsChaptersCSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.MathsChaptersCSumTextBox.Name = "MathsChaptersCSumTextBox";
        this.MathsChaptersCSumTextBox.ReadOnly = true;
        this.MathsChaptersCSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.MathsChaptersCSumTextBox.TabIndex = 1;
        this.MathsChaptersCSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.MathsChaptersCSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.MathsChaptersCSumTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesTabPage
        // 
        this.DistancesTabPage.BackColor = System.Drawing.SystemColors.ControlLight;
        this.DistancesTabPage.Controls.Add(this.DistancesPanel);
        this.DistancesTabPage.Location = new System.Drawing.Point(4, 26);
        this.DistancesTabPage.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesTabPage.Name = "DistancesTabPage";
        this.DistancesTabPage.Size = new System.Drawing.Size(744, 211);
        this.DistancesTabPage.TabIndex = 199;
        this.DistancesTabPage.Text = "Distances";
        this.DistancesTabPage.ToolTipText = "Distances to the start and end of Book, current chapter/verse/word\r\nالمسافات الى " +
"بداية ونهاية الكتاب";
        this.DistancesTabPage.UseVisualStyleBackColor = true;
        // 
        // DistancesPanel
        // 
        this.DistancesPanel.BackColor = System.Drawing.Color.LightGray;
        this.DistancesPanel.Controls.Add(this.DistancesInterestingNumbersEditLabel);
        this.DistancesPanel.Controls.Add(this.DistancesUpdateDivisorCheckBox);
        this.DistancesPanel.Controls.Add(this.DistancesDivisorNumericUpDown);
        this.DistancesPanel.Controls.Add(this.DistancesDivisorLabel);
        this.DistancesPanel.Controls.Add(this.DistancesRunningWordNumberScopeLabel);
        this.DistancesPanel.Controls.Add(this.DistancesRunningVerseNumberScopeLabel);
        this.DistancesPanel.Controls.Add(this.DistancesWordBeforeWithinVerseRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordDifferenceWithinVerseRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordAfterWithinVerseRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordWithinVerseRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordBeforeWithinChapterRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordDifferenceWithinChapterRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordAfterWithinChapterRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordWithinChapterRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseBeforeWithinChapterRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseDifferenceWithinChapterRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseAfterWithinChapterRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseWithinChapterRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordBeforeWithinBookRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordDifferenceWithinBookRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordAfterWithinBookRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordWithinBookRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseBeforeWithinBookRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseDifferenceWithinBookRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseAfterWithinBookRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseWithinBookRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesChapterBeforeWithinBookRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesChapterDifferenceWithinBookRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesChapterAfterWithinBookRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesChapterWithinBookRunningTotalTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordBeforeWithinVerseTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordDifferenceWithinVerseTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordAfterWithinVerseTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordWithinVerseTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordBeforeWithinChapterTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordDifferenceWithinChapterTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordAfterWithinChapterTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordWithinChapterTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseBeforeWithinChapterTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseDifferenceWithinChapterTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseAfterWithinChapterTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseWithinChapterTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordBeforeWithinBookTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordDifferenceWithinBookTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordAfterWithinBookTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordWithinBookTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesWordLabel);
        this.DistancesPanel.Controls.Add(this.DistancesVerseBeforeWithinBookTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseDifferenceWithinBookTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseAfterWithinBookTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseWithinBookTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesVerseLabel);
        this.DistancesPanel.Controls.Add(this.DistancesChapterBeforeWithinBookTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesChapterDifferenceWithinBookTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesChapterAfterWithinBookTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesChapterWithinBookTextBox);
        this.DistancesPanel.Controls.Add(this.DistancesChapterLabel);
        this.DistancesPanel.Controls.Add(this.DistancesRunningTotalLabel);
        this.DistancesPanel.Controls.Add(this.DistancesWithinVerseRunningTotalLabel);
        this.DistancesPanel.Controls.Add(this.DistancesWithinChapterRunningTotalLabel);
        this.DistancesPanel.Controls.Add(this.DistancesWithinBookRunningTotalLabel);
        this.DistancesPanel.Controls.Add(this.DistancesWithinVerseLabel);
        this.DistancesPanel.Controls.Add(this.DistancesWithinChapterLabel);
        this.DistancesPanel.Controls.Add(this.DistancesWithinBookLabel);
        this.DistancesPanel.Dock = System.Windows.Forms.DockStyle.Fill;
        this.DistancesPanel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesPanel.Location = new System.Drawing.Point(0, 0);
        this.DistancesPanel.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesPanel.Name = "DistancesPanel";
        this.DistancesPanel.Size = new System.Drawing.Size(744, 211);
        this.DistancesPanel.TabIndex = 1;
        // 
        // DistancesInterestingNumbersEditLabel
        // 
        this.DistancesInterestingNumbersEditLabel.BackColor = System.Drawing.SystemColors.Control;
        this.DistancesInterestingNumbersEditLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DistancesInterestingNumbersEditLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesInterestingNumbersEditLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesInterestingNumbersEditLabel.Image = ((System.Drawing.Image)(resources.GetObject("DistancesInterestingNumbersEditLabel.Image")));
        this.DistancesInterestingNumbersEditLabel.Location = new System.Drawing.Point(265, 176);
        this.DistancesInterestingNumbersEditLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesInterestingNumbersEditLabel.Name = "DistancesInterestingNumbersEditLabel";
        this.DistancesInterestingNumbersEditLabel.Size = new System.Drawing.Size(19, 17);
        this.DistancesInterestingNumbersEditLabel.TabIndex = 272;
        this.ToolTip.SetToolTip(this.DistancesInterestingNumbersEditLabel, "Edit interesting numbers");
        this.DistancesInterestingNumbersEditLabel.Click += new System.EventHandler(this.DistancesInterestingNumbersEditLabel_Click);
        // 
        // DistancesUpdateDivisorCheckBox
        // 
        this.DistancesUpdateDivisorCheckBox.AutoSize = true;
        this.DistancesUpdateDivisorCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.DistancesUpdateDivisorCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesUpdateDivisorCheckBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesUpdateDivisorCheckBox.Location = new System.Drawing.Point(245, 177);
        this.DistancesUpdateDivisorCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesUpdateDivisorCheckBox.Name = "DistancesUpdateDivisorCheckBox";
        this.DistancesUpdateDivisorCheckBox.Size = new System.Drawing.Size(18, 17);
        this.DistancesUpdateDivisorCheckBox.TabIndex = 271;
        this.ToolTip.SetToolTip(this.DistancesUpdateDivisorCheckBox, "Update the global divisor");
        this.DistancesUpdateDivisorCheckBox.UseVisualStyleBackColor = false;
        this.DistancesUpdateDivisorCheckBox.CheckedChanged += new System.EventHandler(this.DistancesUpdateDivisorCheckBox_CheckedChanged);
        // 
        // DistancesDivisorNumericUpDown
        // 
        this.DistancesDivisorNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesDivisorNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesDivisorNumericUpDown.Location = new System.Drawing.Point(169, 175);
        this.DistancesDivisorNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesDivisorNumericUpDown.Maximum = new decimal(new int[] {
            9999999,
            0,
            0,
            0});
        this.DistancesDivisorNumericUpDown.Minimum = new decimal(new int[] {
            1,
            0,
            0,
            0});
        this.DistancesDivisorNumericUpDown.Name = "DistancesDivisorNumericUpDown";
        this.DistancesDivisorNumericUpDown.Size = new System.Drawing.Size(73, 20);
        this.DistancesDivisorNumericUpDown.TabIndex = 99;
        this.DistancesDivisorNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesDivisorNumericUpDown.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
        this.DistancesDivisorNumericUpDown.ValueChanged += new System.EventHandler(this.DistancesDivisorNumericUpDown_ValueChanged);
        this.DistancesDivisorNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        // 
        // DistancesDivisorLabel
        // 
        this.DistancesDivisorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesDivisorLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesDivisorLabel.Location = new System.Drawing.Point(5, 175);
        this.DistancesDivisorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesDivisorLabel.Name = "DistancesDivisorLabel";
        this.DistancesDivisorLabel.Size = new System.Drawing.Size(171, 21);
        this.DistancesDivisorLabel.TabIndex = 0;
        this.DistancesDivisorLabel.Text = "Colorize numbers divisible by";
        this.DistancesDivisorLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        // 
        // DistancesRunningWordNumberScopeLabel
        // 
        this.DistancesRunningWordNumberScopeLabel.BackColor = System.Drawing.Color.DarkGray;
        this.DistancesRunningWordNumberScopeLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DistancesRunningWordNumberScopeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesRunningWordNumberScopeLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesRunningWordNumberScopeLabel.Location = new System.Drawing.Point(640, 176);
        this.DistancesRunningWordNumberScopeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesRunningWordNumberScopeLabel.Name = "DistancesRunningWordNumberScopeLabel";
        this.DistancesRunningWordNumberScopeLabel.Size = new System.Drawing.Size(436, 18);
        this.DistancesRunningWordNumberScopeLabel.TabIndex = 270;
        this.DistancesRunningWordNumberScopeLabel.Text = "Word numbers in verses";
        this.DistancesRunningWordNumberScopeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.DistancesRunningWordNumberScopeLabel.Click += new System.EventHandler(this.DistancesRunningWordNumberScopeLabel_Click);
        this.DistancesRunningWordNumberScopeLabel.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesRunningVerseNumberScopeLabel
        // 
        this.DistancesRunningVerseNumberScopeLabel.BackColor = System.Drawing.Color.DarkGray;
        this.DistancesRunningVerseNumberScopeLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DistancesRunningVerseNumberScopeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesRunningVerseNumberScopeLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesRunningVerseNumberScopeLabel.Location = new System.Drawing.Point(288, 153);
        this.DistancesRunningVerseNumberScopeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesRunningVerseNumberScopeLabel.Name = "DistancesRunningVerseNumberScopeLabel";
        this.DistancesRunningVerseNumberScopeLabel.Size = new System.Drawing.Size(345, 18);
        this.DistancesRunningVerseNumberScopeLabel.TabIndex = 269;
        this.DistancesRunningVerseNumberScopeLabel.Text = "Verse numbers in chapters";
        this.DistancesRunningVerseNumberScopeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.DistancesRunningVerseNumberScopeLabel.Click += new System.EventHandler(this.DistancesRunningVerseNumberScopeLabel_Click);
        // 
        // DistancesWordBeforeWithinVerseRunningTotalTextBox
        // 
        this.DistancesWordBeforeWithinVerseRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordBeforeWithinVerseRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordBeforeWithinVerseRunningTotalTextBox.Location = new System.Drawing.Point(640, 150);
        this.DistancesWordBeforeWithinVerseRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordBeforeWithinVerseRunningTotalTextBox.Name = "DistancesWordBeforeWithinVerseRunningTotalTextBox";
        this.DistancesWordBeforeWithinVerseRunningTotalTextBox.ReadOnly = true;
        this.DistancesWordBeforeWithinVerseRunningTotalTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordBeforeWithinVerseRunningTotalTextBox.TabIndex = 71;
        this.DistancesWordBeforeWithinVerseRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordBeforeWithinVerseRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordBeforeWithinVerseRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordDifferenceWithinVerseRunningTotalTextBox
        // 
        this.DistancesWordDifferenceWithinVerseRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordDifferenceWithinVerseRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordDifferenceWithinVerseRunningTotalTextBox.Location = new System.Drawing.Point(959, 150);
        this.DistancesWordDifferenceWithinVerseRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordDifferenceWithinVerseRunningTotalTextBox.Name = "DistancesWordDifferenceWithinVerseRunningTotalTextBox";
        this.DistancesWordDifferenceWithinVerseRunningTotalTextBox.ReadOnly = true;
        this.DistancesWordDifferenceWithinVerseRunningTotalTextBox.Size = new System.Drawing.Size(116, 23);
        this.DistancesWordDifferenceWithinVerseRunningTotalTextBox.TabIndex = 74;
        this.DistancesWordDifferenceWithinVerseRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordDifferenceWithinVerseRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordDifferenceWithinVerseRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordAfterWithinVerseRunningTotalTextBox
        // 
        this.DistancesWordAfterWithinVerseRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordAfterWithinVerseRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordAfterWithinVerseRunningTotalTextBox.Location = new System.Drawing.Point(851, 150);
        this.DistancesWordAfterWithinVerseRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordAfterWithinVerseRunningTotalTextBox.Name = "DistancesWordAfterWithinVerseRunningTotalTextBox";
        this.DistancesWordAfterWithinVerseRunningTotalTextBox.ReadOnly = true;
        this.DistancesWordAfterWithinVerseRunningTotalTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordAfterWithinVerseRunningTotalTextBox.TabIndex = 73;
        this.DistancesWordAfterWithinVerseRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordAfterWithinVerseRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordAfterWithinVerseRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordWithinVerseRunningTotalTextBox
        // 
        this.DistancesWordWithinVerseRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordWithinVerseRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordWithinVerseRunningTotalTextBox.Location = new System.Drawing.Point(745, 150);
        this.DistancesWordWithinVerseRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordWithinVerseRunningTotalTextBox.Name = "DistancesWordWithinVerseRunningTotalTextBox";
        this.DistancesWordWithinVerseRunningTotalTextBox.ReadOnly = true;
        this.DistancesWordWithinVerseRunningTotalTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordWithinVerseRunningTotalTextBox.TabIndex = 72;
        this.DistancesWordWithinVerseRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordWithinVerseRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordWithinVerseRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordBeforeWithinChapterRunningTotalTextBox
        // 
        this.DistancesWordBeforeWithinChapterRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordBeforeWithinChapterRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordBeforeWithinChapterRunningTotalTextBox.Location = new System.Drawing.Point(640, 127);
        this.DistancesWordBeforeWithinChapterRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordBeforeWithinChapterRunningTotalTextBox.Name = "DistancesWordBeforeWithinChapterRunningTotalTextBox";
        this.DistancesWordBeforeWithinChapterRunningTotalTextBox.ReadOnly = true;
        this.DistancesWordBeforeWithinChapterRunningTotalTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordBeforeWithinChapterRunningTotalTextBox.TabIndex = 67;
        this.DistancesWordBeforeWithinChapterRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordBeforeWithinChapterRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordBeforeWithinChapterRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordDifferenceWithinChapterRunningTotalTextBox
        // 
        this.DistancesWordDifferenceWithinChapterRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordDifferenceWithinChapterRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordDifferenceWithinChapterRunningTotalTextBox.Location = new System.Drawing.Point(959, 127);
        this.DistancesWordDifferenceWithinChapterRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordDifferenceWithinChapterRunningTotalTextBox.Name = "DistancesWordDifferenceWithinChapterRunningTotalTextBox";
        this.DistancesWordDifferenceWithinChapterRunningTotalTextBox.ReadOnly = true;
        this.DistancesWordDifferenceWithinChapterRunningTotalTextBox.Size = new System.Drawing.Size(116, 23);
        this.DistancesWordDifferenceWithinChapterRunningTotalTextBox.TabIndex = 70;
        this.DistancesWordDifferenceWithinChapterRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordDifferenceWithinChapterRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordDifferenceWithinChapterRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordAfterWithinChapterRunningTotalTextBox
        // 
        this.DistancesWordAfterWithinChapterRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordAfterWithinChapterRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordAfterWithinChapterRunningTotalTextBox.Location = new System.Drawing.Point(851, 127);
        this.DistancesWordAfterWithinChapterRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordAfterWithinChapterRunningTotalTextBox.Name = "DistancesWordAfterWithinChapterRunningTotalTextBox";
        this.DistancesWordAfterWithinChapterRunningTotalTextBox.ReadOnly = true;
        this.DistancesWordAfterWithinChapterRunningTotalTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordAfterWithinChapterRunningTotalTextBox.TabIndex = 69;
        this.DistancesWordAfterWithinChapterRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordAfterWithinChapterRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordAfterWithinChapterRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordWithinChapterRunningTotalTextBox
        // 
        this.DistancesWordWithinChapterRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordWithinChapterRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordWithinChapterRunningTotalTextBox.Location = new System.Drawing.Point(745, 127);
        this.DistancesWordWithinChapterRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordWithinChapterRunningTotalTextBox.Name = "DistancesWordWithinChapterRunningTotalTextBox";
        this.DistancesWordWithinChapterRunningTotalTextBox.ReadOnly = true;
        this.DistancesWordWithinChapterRunningTotalTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordWithinChapterRunningTotalTextBox.TabIndex = 68;
        this.DistancesWordWithinChapterRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordWithinChapterRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordWithinChapterRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseBeforeWithinChapterRunningTotalTextBox
        // 
        this.DistancesVerseBeforeWithinChapterRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseBeforeWithinChapterRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseBeforeWithinChapterRunningTotalTextBox.Location = new System.Drawing.Point(288, 127);
        this.DistancesVerseBeforeWithinChapterRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseBeforeWithinChapterRunningTotalTextBox.Name = "DistancesVerseBeforeWithinChapterRunningTotalTextBox";
        this.DistancesVerseBeforeWithinChapterRunningTotalTextBox.ReadOnly = true;
        this.DistancesVerseBeforeWithinChapterRunningTotalTextBox.Size = new System.Drawing.Size(84, 23);
        this.DistancesVerseBeforeWithinChapterRunningTotalTextBox.TabIndex = 59;
        this.DistancesVerseBeforeWithinChapterRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseBeforeWithinChapterRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseBeforeWithinChapterRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseDifferenceWithinChapterRunningTotalTextBox
        // 
        this.DistancesVerseDifferenceWithinChapterRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseDifferenceWithinChapterRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseDifferenceWithinChapterRunningTotalTextBox.Location = new System.Drawing.Point(543, 127);
        this.DistancesVerseDifferenceWithinChapterRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseDifferenceWithinChapterRunningTotalTextBox.Name = "DistancesVerseDifferenceWithinChapterRunningTotalTextBox";
        this.DistancesVerseDifferenceWithinChapterRunningTotalTextBox.ReadOnly = true;
        this.DistancesVerseDifferenceWithinChapterRunningTotalTextBox.Size = new System.Drawing.Size(89, 23);
        this.DistancesVerseDifferenceWithinChapterRunningTotalTextBox.TabIndex = 62;
        this.DistancesVerseDifferenceWithinChapterRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseDifferenceWithinChapterRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseDifferenceWithinChapterRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseAfterWithinChapterRunningTotalTextBox
        // 
        this.DistancesVerseAfterWithinChapterRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseAfterWithinChapterRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseAfterWithinChapterRunningTotalTextBox.Location = new System.Drawing.Point(456, 127);
        this.DistancesVerseAfterWithinChapterRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseAfterWithinChapterRunningTotalTextBox.Name = "DistancesVerseAfterWithinChapterRunningTotalTextBox";
        this.DistancesVerseAfterWithinChapterRunningTotalTextBox.ReadOnly = true;
        this.DistancesVerseAfterWithinChapterRunningTotalTextBox.Size = new System.Drawing.Size(84, 23);
        this.DistancesVerseAfterWithinChapterRunningTotalTextBox.TabIndex = 61;
        this.DistancesVerseAfterWithinChapterRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseAfterWithinChapterRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseAfterWithinChapterRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseWithinChapterRunningTotalTextBox
        // 
        this.DistancesVerseWithinChapterRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseWithinChapterRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseWithinChapterRunningTotalTextBox.Location = new System.Drawing.Point(372, 127);
        this.DistancesVerseWithinChapterRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseWithinChapterRunningTotalTextBox.Name = "DistancesVerseWithinChapterRunningTotalTextBox";
        this.DistancesVerseWithinChapterRunningTotalTextBox.ReadOnly = true;
        this.DistancesVerseWithinChapterRunningTotalTextBox.Size = new System.Drawing.Size(84, 23);
        this.DistancesVerseWithinChapterRunningTotalTextBox.TabIndex = 60;
        this.DistancesVerseWithinChapterRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseWithinChapterRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseWithinChapterRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordBeforeWithinBookRunningTotalTextBox
        // 
        this.DistancesWordBeforeWithinBookRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordBeforeWithinBookRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordBeforeWithinBookRunningTotalTextBox.Location = new System.Drawing.Point(640, 103);
        this.DistancesWordBeforeWithinBookRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordBeforeWithinBookRunningTotalTextBox.Name = "DistancesWordBeforeWithinBookRunningTotalTextBox";
        this.DistancesWordBeforeWithinBookRunningTotalTextBox.ReadOnly = true;
        this.DistancesWordBeforeWithinBookRunningTotalTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordBeforeWithinBookRunningTotalTextBox.TabIndex = 63;
        this.DistancesWordBeforeWithinBookRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordBeforeWithinBookRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordBeforeWithinBookRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordDifferenceWithinBookRunningTotalTextBox
        // 
        this.DistancesWordDifferenceWithinBookRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordDifferenceWithinBookRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordDifferenceWithinBookRunningTotalTextBox.Location = new System.Drawing.Point(959, 103);
        this.DistancesWordDifferenceWithinBookRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordDifferenceWithinBookRunningTotalTextBox.Name = "DistancesWordDifferenceWithinBookRunningTotalTextBox";
        this.DistancesWordDifferenceWithinBookRunningTotalTextBox.ReadOnly = true;
        this.DistancesWordDifferenceWithinBookRunningTotalTextBox.Size = new System.Drawing.Size(116, 23);
        this.DistancesWordDifferenceWithinBookRunningTotalTextBox.TabIndex = 66;
        this.DistancesWordDifferenceWithinBookRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordDifferenceWithinBookRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordDifferenceWithinBookRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordAfterWithinBookRunningTotalTextBox
        // 
        this.DistancesWordAfterWithinBookRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordAfterWithinBookRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordAfterWithinBookRunningTotalTextBox.Location = new System.Drawing.Point(851, 103);
        this.DistancesWordAfterWithinBookRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordAfterWithinBookRunningTotalTextBox.Name = "DistancesWordAfterWithinBookRunningTotalTextBox";
        this.DistancesWordAfterWithinBookRunningTotalTextBox.ReadOnly = true;
        this.DistancesWordAfterWithinBookRunningTotalTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordAfterWithinBookRunningTotalTextBox.TabIndex = 65;
        this.DistancesWordAfterWithinBookRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordAfterWithinBookRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordAfterWithinBookRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordWithinBookRunningTotalTextBox
        // 
        this.DistancesWordWithinBookRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordWithinBookRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordWithinBookRunningTotalTextBox.Location = new System.Drawing.Point(745, 103);
        this.DistancesWordWithinBookRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordWithinBookRunningTotalTextBox.Name = "DistancesWordWithinBookRunningTotalTextBox";
        this.DistancesWordWithinBookRunningTotalTextBox.ReadOnly = true;
        this.DistancesWordWithinBookRunningTotalTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordWithinBookRunningTotalTextBox.TabIndex = 64;
        this.DistancesWordWithinBookRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordWithinBookRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordWithinBookRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseBeforeWithinBookRunningTotalTextBox
        // 
        this.DistancesVerseBeforeWithinBookRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseBeforeWithinBookRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseBeforeWithinBookRunningTotalTextBox.Location = new System.Drawing.Point(288, 103);
        this.DistancesVerseBeforeWithinBookRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseBeforeWithinBookRunningTotalTextBox.Name = "DistancesVerseBeforeWithinBookRunningTotalTextBox";
        this.DistancesVerseBeforeWithinBookRunningTotalTextBox.ReadOnly = true;
        this.DistancesVerseBeforeWithinBookRunningTotalTextBox.Size = new System.Drawing.Size(84, 23);
        this.DistancesVerseBeforeWithinBookRunningTotalTextBox.TabIndex = 55;
        this.DistancesVerseBeforeWithinBookRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseBeforeWithinBookRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseBeforeWithinBookRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseDifferenceWithinBookRunningTotalTextBox
        // 
        this.DistancesVerseDifferenceWithinBookRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseDifferenceWithinBookRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseDifferenceWithinBookRunningTotalTextBox.Location = new System.Drawing.Point(543, 103);
        this.DistancesVerseDifferenceWithinBookRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseDifferenceWithinBookRunningTotalTextBox.Name = "DistancesVerseDifferenceWithinBookRunningTotalTextBox";
        this.DistancesVerseDifferenceWithinBookRunningTotalTextBox.ReadOnly = true;
        this.DistancesVerseDifferenceWithinBookRunningTotalTextBox.Size = new System.Drawing.Size(89, 23);
        this.DistancesVerseDifferenceWithinBookRunningTotalTextBox.TabIndex = 58;
        this.DistancesVerseDifferenceWithinBookRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseDifferenceWithinBookRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseDifferenceWithinBookRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseAfterWithinBookRunningTotalTextBox
        // 
        this.DistancesVerseAfterWithinBookRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseAfterWithinBookRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseAfterWithinBookRunningTotalTextBox.Location = new System.Drawing.Point(456, 103);
        this.DistancesVerseAfterWithinBookRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseAfterWithinBookRunningTotalTextBox.Name = "DistancesVerseAfterWithinBookRunningTotalTextBox";
        this.DistancesVerseAfterWithinBookRunningTotalTextBox.ReadOnly = true;
        this.DistancesVerseAfterWithinBookRunningTotalTextBox.Size = new System.Drawing.Size(84, 23);
        this.DistancesVerseAfterWithinBookRunningTotalTextBox.TabIndex = 57;
        this.DistancesVerseAfterWithinBookRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseAfterWithinBookRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseAfterWithinBookRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseWithinBookRunningTotalTextBox
        // 
        this.DistancesVerseWithinBookRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseWithinBookRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseWithinBookRunningTotalTextBox.Location = new System.Drawing.Point(372, 103);
        this.DistancesVerseWithinBookRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseWithinBookRunningTotalTextBox.Name = "DistancesVerseWithinBookRunningTotalTextBox";
        this.DistancesVerseWithinBookRunningTotalTextBox.ReadOnly = true;
        this.DistancesVerseWithinBookRunningTotalTextBox.Size = new System.Drawing.Size(84, 23);
        this.DistancesVerseWithinBookRunningTotalTextBox.TabIndex = 56;
        this.DistancesVerseWithinBookRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseWithinBookRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseWithinBookRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesChapterBeforeWithinBookRunningTotalTextBox
        // 
        this.DistancesChapterBeforeWithinBookRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesChapterBeforeWithinBookRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesChapterBeforeWithinBookRunningTotalTextBox.Location = new System.Drawing.Point(56, 103);
        this.DistancesChapterBeforeWithinBookRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesChapterBeforeWithinBookRunningTotalTextBox.Name = "DistancesChapterBeforeWithinBookRunningTotalTextBox";
        this.DistancesChapterBeforeWithinBookRunningTotalTextBox.ReadOnly = true;
        this.DistancesChapterBeforeWithinBookRunningTotalTextBox.Size = new System.Drawing.Size(52, 23);
        this.DistancesChapterBeforeWithinBookRunningTotalTextBox.TabIndex = 51;
        this.DistancesChapterBeforeWithinBookRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesChapterBeforeWithinBookRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesChapterBeforeWithinBookRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesChapterDifferenceWithinBookRunningTotalTextBox
        // 
        this.DistancesChapterDifferenceWithinBookRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesChapterDifferenceWithinBookRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesChapterDifferenceWithinBookRunningTotalTextBox.Location = new System.Drawing.Point(215, 103);
        this.DistancesChapterDifferenceWithinBookRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesChapterDifferenceWithinBookRunningTotalTextBox.Name = "DistancesChapterDifferenceWithinBookRunningTotalTextBox";
        this.DistancesChapterDifferenceWithinBookRunningTotalTextBox.ReadOnly = true;
        this.DistancesChapterDifferenceWithinBookRunningTotalTextBox.Size = new System.Drawing.Size(65, 23);
        this.DistancesChapterDifferenceWithinBookRunningTotalTextBox.TabIndex = 54;
        this.DistancesChapterDifferenceWithinBookRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesChapterDifferenceWithinBookRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesChapterDifferenceWithinBookRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesChapterAfterWithinBookRunningTotalTextBox
        // 
        this.DistancesChapterAfterWithinBookRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesChapterAfterWithinBookRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesChapterAfterWithinBookRunningTotalTextBox.Location = new System.Drawing.Point(160, 103);
        this.DistancesChapterAfterWithinBookRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesChapterAfterWithinBookRunningTotalTextBox.Name = "DistancesChapterAfterWithinBookRunningTotalTextBox";
        this.DistancesChapterAfterWithinBookRunningTotalTextBox.ReadOnly = true;
        this.DistancesChapterAfterWithinBookRunningTotalTextBox.Size = new System.Drawing.Size(52, 23);
        this.DistancesChapterAfterWithinBookRunningTotalTextBox.TabIndex = 53;
        this.DistancesChapterAfterWithinBookRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesChapterAfterWithinBookRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesChapterAfterWithinBookRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesChapterWithinBookRunningTotalTextBox
        // 
        this.DistancesChapterWithinBookRunningTotalTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesChapterWithinBookRunningTotalTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesChapterWithinBookRunningTotalTextBox.Location = new System.Drawing.Point(108, 103);
        this.DistancesChapterWithinBookRunningTotalTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesChapterWithinBookRunningTotalTextBox.Name = "DistancesChapterWithinBookRunningTotalTextBox";
        this.DistancesChapterWithinBookRunningTotalTextBox.ReadOnly = true;
        this.DistancesChapterWithinBookRunningTotalTextBox.Size = new System.Drawing.Size(52, 23);
        this.DistancesChapterWithinBookRunningTotalTextBox.TabIndex = 52;
        this.DistancesChapterWithinBookRunningTotalTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesChapterWithinBookRunningTotalTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesChapterWithinBookRunningTotalTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordBeforeWithinVerseTextBox
        // 
        this.DistancesWordBeforeWithinVerseTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordBeforeWithinVerseTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordBeforeWithinVerseTextBox.Location = new System.Drawing.Point(640, 73);
        this.DistancesWordBeforeWithinVerseTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordBeforeWithinVerseTextBox.Name = "DistancesWordBeforeWithinVerseTextBox";
        this.DistancesWordBeforeWithinVerseTextBox.ReadOnly = true;
        this.DistancesWordBeforeWithinVerseTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordBeforeWithinVerseTextBox.TabIndex = 21;
        this.DistancesWordBeforeWithinVerseTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordBeforeWithinVerseTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordBeforeWithinVerseTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordDifferenceWithinVerseTextBox
        // 
        this.DistancesWordDifferenceWithinVerseTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordDifferenceWithinVerseTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordDifferenceWithinVerseTextBox.Location = new System.Drawing.Point(959, 73);
        this.DistancesWordDifferenceWithinVerseTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordDifferenceWithinVerseTextBox.Name = "DistancesWordDifferenceWithinVerseTextBox";
        this.DistancesWordDifferenceWithinVerseTextBox.ReadOnly = true;
        this.DistancesWordDifferenceWithinVerseTextBox.Size = new System.Drawing.Size(116, 23);
        this.DistancesWordDifferenceWithinVerseTextBox.TabIndex = 24;
        this.DistancesWordDifferenceWithinVerseTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordDifferenceWithinVerseTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordDifferenceWithinVerseTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordAfterWithinVerseTextBox
        // 
        this.DistancesWordAfterWithinVerseTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordAfterWithinVerseTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordAfterWithinVerseTextBox.Location = new System.Drawing.Point(851, 73);
        this.DistancesWordAfterWithinVerseTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordAfterWithinVerseTextBox.Name = "DistancesWordAfterWithinVerseTextBox";
        this.DistancesWordAfterWithinVerseTextBox.ReadOnly = true;
        this.DistancesWordAfterWithinVerseTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordAfterWithinVerseTextBox.TabIndex = 23;
        this.DistancesWordAfterWithinVerseTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordAfterWithinVerseTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordAfterWithinVerseTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordWithinVerseTextBox
        // 
        this.DistancesWordWithinVerseTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordWithinVerseTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordWithinVerseTextBox.Location = new System.Drawing.Point(745, 73);
        this.DistancesWordWithinVerseTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordWithinVerseTextBox.Name = "DistancesWordWithinVerseTextBox";
        this.DistancesWordWithinVerseTextBox.ReadOnly = true;
        this.DistancesWordWithinVerseTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordWithinVerseTextBox.TabIndex = 22;
        this.DistancesWordWithinVerseTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordWithinVerseTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordWithinVerseTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordBeforeWithinChapterTextBox
        // 
        this.DistancesWordBeforeWithinChapterTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordBeforeWithinChapterTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordBeforeWithinChapterTextBox.Location = new System.Drawing.Point(640, 49);
        this.DistancesWordBeforeWithinChapterTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordBeforeWithinChapterTextBox.Name = "DistancesWordBeforeWithinChapterTextBox";
        this.DistancesWordBeforeWithinChapterTextBox.ReadOnly = true;
        this.DistancesWordBeforeWithinChapterTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordBeforeWithinChapterTextBox.TabIndex = 17;
        this.DistancesWordBeforeWithinChapterTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordBeforeWithinChapterTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordBeforeWithinChapterTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordDifferenceWithinChapterTextBox
        // 
        this.DistancesWordDifferenceWithinChapterTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordDifferenceWithinChapterTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordDifferenceWithinChapterTextBox.Location = new System.Drawing.Point(959, 49);
        this.DistancesWordDifferenceWithinChapterTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordDifferenceWithinChapterTextBox.Name = "DistancesWordDifferenceWithinChapterTextBox";
        this.DistancesWordDifferenceWithinChapterTextBox.ReadOnly = true;
        this.DistancesWordDifferenceWithinChapterTextBox.Size = new System.Drawing.Size(116, 23);
        this.DistancesWordDifferenceWithinChapterTextBox.TabIndex = 20;
        this.DistancesWordDifferenceWithinChapterTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordDifferenceWithinChapterTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordDifferenceWithinChapterTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordAfterWithinChapterTextBox
        // 
        this.DistancesWordAfterWithinChapterTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordAfterWithinChapterTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordAfterWithinChapterTextBox.Location = new System.Drawing.Point(851, 49);
        this.DistancesWordAfterWithinChapterTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordAfterWithinChapterTextBox.Name = "DistancesWordAfterWithinChapterTextBox";
        this.DistancesWordAfterWithinChapterTextBox.ReadOnly = true;
        this.DistancesWordAfterWithinChapterTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordAfterWithinChapterTextBox.TabIndex = 19;
        this.DistancesWordAfterWithinChapterTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordAfterWithinChapterTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordAfterWithinChapterTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordWithinChapterTextBox
        // 
        this.DistancesWordWithinChapterTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordWithinChapterTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordWithinChapterTextBox.Location = new System.Drawing.Point(745, 49);
        this.DistancesWordWithinChapterTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordWithinChapterTextBox.Name = "DistancesWordWithinChapterTextBox";
        this.DistancesWordWithinChapterTextBox.ReadOnly = true;
        this.DistancesWordWithinChapterTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordWithinChapterTextBox.TabIndex = 18;
        this.DistancesWordWithinChapterTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordWithinChapterTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordWithinChapterTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseBeforeWithinChapterTextBox
        // 
        this.DistancesVerseBeforeWithinChapterTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseBeforeWithinChapterTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseBeforeWithinChapterTextBox.Location = new System.Drawing.Point(288, 49);
        this.DistancesVerseBeforeWithinChapterTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseBeforeWithinChapterTextBox.Name = "DistancesVerseBeforeWithinChapterTextBox";
        this.DistancesVerseBeforeWithinChapterTextBox.ReadOnly = true;
        this.DistancesVerseBeforeWithinChapterTextBox.Size = new System.Drawing.Size(84, 23);
        this.DistancesVerseBeforeWithinChapterTextBox.TabIndex = 9;
        this.DistancesVerseBeforeWithinChapterTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseBeforeWithinChapterTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseBeforeWithinChapterTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseDifferenceWithinChapterTextBox
        // 
        this.DistancesVerseDifferenceWithinChapterTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseDifferenceWithinChapterTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseDifferenceWithinChapterTextBox.Location = new System.Drawing.Point(543, 49);
        this.DistancesVerseDifferenceWithinChapterTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseDifferenceWithinChapterTextBox.Name = "DistancesVerseDifferenceWithinChapterTextBox";
        this.DistancesVerseDifferenceWithinChapterTextBox.ReadOnly = true;
        this.DistancesVerseDifferenceWithinChapterTextBox.Size = new System.Drawing.Size(89, 23);
        this.DistancesVerseDifferenceWithinChapterTextBox.TabIndex = 12;
        this.DistancesVerseDifferenceWithinChapterTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseDifferenceWithinChapterTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseDifferenceWithinChapterTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseAfterWithinChapterTextBox
        // 
        this.DistancesVerseAfterWithinChapterTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseAfterWithinChapterTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseAfterWithinChapterTextBox.Location = new System.Drawing.Point(456, 49);
        this.DistancesVerseAfterWithinChapterTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseAfterWithinChapterTextBox.Name = "DistancesVerseAfterWithinChapterTextBox";
        this.DistancesVerseAfterWithinChapterTextBox.ReadOnly = true;
        this.DistancesVerseAfterWithinChapterTextBox.Size = new System.Drawing.Size(84, 23);
        this.DistancesVerseAfterWithinChapterTextBox.TabIndex = 11;
        this.DistancesVerseAfterWithinChapterTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseAfterWithinChapterTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseAfterWithinChapterTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseWithinChapterTextBox
        // 
        this.DistancesVerseWithinChapterTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseWithinChapterTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseWithinChapterTextBox.Location = new System.Drawing.Point(372, 49);
        this.DistancesVerseWithinChapterTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseWithinChapterTextBox.Name = "DistancesVerseWithinChapterTextBox";
        this.DistancesVerseWithinChapterTextBox.ReadOnly = true;
        this.DistancesVerseWithinChapterTextBox.Size = new System.Drawing.Size(84, 23);
        this.DistancesVerseWithinChapterTextBox.TabIndex = 10;
        this.DistancesVerseWithinChapterTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseWithinChapterTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseWithinChapterTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordBeforeWithinBookTextBox
        // 
        this.DistancesWordBeforeWithinBookTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordBeforeWithinBookTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordBeforeWithinBookTextBox.Location = new System.Drawing.Point(640, 26);
        this.DistancesWordBeforeWithinBookTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordBeforeWithinBookTextBox.Name = "DistancesWordBeforeWithinBookTextBox";
        this.DistancesWordBeforeWithinBookTextBox.ReadOnly = true;
        this.DistancesWordBeforeWithinBookTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordBeforeWithinBookTextBox.TabIndex = 13;
        this.DistancesWordBeforeWithinBookTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordBeforeWithinBookTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordBeforeWithinBookTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordDifferenceWithinBookTextBox
        // 
        this.DistancesWordDifferenceWithinBookTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordDifferenceWithinBookTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordDifferenceWithinBookTextBox.Location = new System.Drawing.Point(959, 26);
        this.DistancesWordDifferenceWithinBookTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordDifferenceWithinBookTextBox.Name = "DistancesWordDifferenceWithinBookTextBox";
        this.DistancesWordDifferenceWithinBookTextBox.ReadOnly = true;
        this.DistancesWordDifferenceWithinBookTextBox.Size = new System.Drawing.Size(116, 23);
        this.DistancesWordDifferenceWithinBookTextBox.TabIndex = 16;
        this.DistancesWordDifferenceWithinBookTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordDifferenceWithinBookTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordDifferenceWithinBookTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordAfterWithinBookTextBox
        // 
        this.DistancesWordAfterWithinBookTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordAfterWithinBookTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordAfterWithinBookTextBox.Location = new System.Drawing.Point(851, 26);
        this.DistancesWordAfterWithinBookTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordAfterWithinBookTextBox.Name = "DistancesWordAfterWithinBookTextBox";
        this.DistancesWordAfterWithinBookTextBox.ReadOnly = true;
        this.DistancesWordAfterWithinBookTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordAfterWithinBookTextBox.TabIndex = 15;
        this.DistancesWordAfterWithinBookTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordAfterWithinBookTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordAfterWithinBookTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordWithinBookTextBox
        // 
        this.DistancesWordWithinBookTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesWordWithinBookTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordWithinBookTextBox.Location = new System.Drawing.Point(745, 26);
        this.DistancesWordWithinBookTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesWordWithinBookTextBox.Name = "DistancesWordWithinBookTextBox";
        this.DistancesWordWithinBookTextBox.ReadOnly = true;
        this.DistancesWordWithinBookTextBox.Size = new System.Drawing.Size(105, 23);
        this.DistancesWordWithinBookTextBox.TabIndex = 14;
        this.DistancesWordWithinBookTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesWordWithinBookTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesWordWithinBookTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesWordLabel
        // 
        this.DistancesWordLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWordLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesWordLabel.Location = new System.Drawing.Point(637, 5);
        this.DistancesWordLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesWordLabel.Name = "DistancesWordLabel";
        this.DistancesWordLabel.Size = new System.Drawing.Size(437, 20);
        this.DistancesWordLabel.TabIndex = 0;
        this.DistancesWordLabel.Text = "|<-----                          Words                           ----->|         " +
"     Δ";
        this.DistancesWordLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        // 
        // DistancesVerseBeforeWithinBookTextBox
        // 
        this.DistancesVerseBeforeWithinBookTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseBeforeWithinBookTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseBeforeWithinBookTextBox.Location = new System.Drawing.Point(288, 26);
        this.DistancesVerseBeforeWithinBookTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseBeforeWithinBookTextBox.Name = "DistancesVerseBeforeWithinBookTextBox";
        this.DistancesVerseBeforeWithinBookTextBox.ReadOnly = true;
        this.DistancesVerseBeforeWithinBookTextBox.Size = new System.Drawing.Size(84, 23);
        this.DistancesVerseBeforeWithinBookTextBox.TabIndex = 5;
        this.DistancesVerseBeforeWithinBookTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseBeforeWithinBookTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseBeforeWithinBookTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseDifferenceWithinBookTextBox
        // 
        this.DistancesVerseDifferenceWithinBookTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseDifferenceWithinBookTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseDifferenceWithinBookTextBox.Location = new System.Drawing.Point(543, 26);
        this.DistancesVerseDifferenceWithinBookTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseDifferenceWithinBookTextBox.Name = "DistancesVerseDifferenceWithinBookTextBox";
        this.DistancesVerseDifferenceWithinBookTextBox.ReadOnly = true;
        this.DistancesVerseDifferenceWithinBookTextBox.Size = new System.Drawing.Size(89, 23);
        this.DistancesVerseDifferenceWithinBookTextBox.TabIndex = 8;
        this.DistancesVerseDifferenceWithinBookTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseDifferenceWithinBookTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseDifferenceWithinBookTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseAfterWithinBookTextBox
        // 
        this.DistancesVerseAfterWithinBookTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseAfterWithinBookTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseAfterWithinBookTextBox.Location = new System.Drawing.Point(456, 26);
        this.DistancesVerseAfterWithinBookTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseAfterWithinBookTextBox.Name = "DistancesVerseAfterWithinBookTextBox";
        this.DistancesVerseAfterWithinBookTextBox.ReadOnly = true;
        this.DistancesVerseAfterWithinBookTextBox.Size = new System.Drawing.Size(84, 23);
        this.DistancesVerseAfterWithinBookTextBox.TabIndex = 7;
        this.DistancesVerseAfterWithinBookTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseAfterWithinBookTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseAfterWithinBookTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseWithinBookTextBox
        // 
        this.DistancesVerseWithinBookTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesVerseWithinBookTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseWithinBookTextBox.Location = new System.Drawing.Point(372, 26);
        this.DistancesVerseWithinBookTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesVerseWithinBookTextBox.Name = "DistancesVerseWithinBookTextBox";
        this.DistancesVerseWithinBookTextBox.ReadOnly = true;
        this.DistancesVerseWithinBookTextBox.Size = new System.Drawing.Size(84, 23);
        this.DistancesVerseWithinBookTextBox.TabIndex = 6;
        this.DistancesVerseWithinBookTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesVerseWithinBookTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesVerseWithinBookTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesVerseLabel
        // 
        this.DistancesVerseLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesVerseLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesVerseLabel.Location = new System.Drawing.Point(285, 4);
        this.DistancesVerseLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesVerseLabel.Name = "DistancesVerseLabel";
        this.DistancesVerseLabel.Size = new System.Drawing.Size(348, 20);
        this.DistancesVerseLabel.TabIndex = 0;
        this.DistancesVerseLabel.Text = "|<-----                   Verses                  ----->|           Δ";
        this.DistancesVerseLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        // 
        // DistancesChapterBeforeWithinBookTextBox
        // 
        this.DistancesChapterBeforeWithinBookTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesChapterBeforeWithinBookTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesChapterBeforeWithinBookTextBox.Location = new System.Drawing.Point(56, 26);
        this.DistancesChapterBeforeWithinBookTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesChapterBeforeWithinBookTextBox.Name = "DistancesChapterBeforeWithinBookTextBox";
        this.DistancesChapterBeforeWithinBookTextBox.ReadOnly = true;
        this.DistancesChapterBeforeWithinBookTextBox.Size = new System.Drawing.Size(52, 23);
        this.DistancesChapterBeforeWithinBookTextBox.TabIndex = 1;
        this.DistancesChapterBeforeWithinBookTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesChapterBeforeWithinBookTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesChapterBeforeWithinBookTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesChapterDifferenceWithinBookTextBox
        // 
        this.DistancesChapterDifferenceWithinBookTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesChapterDifferenceWithinBookTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesChapterDifferenceWithinBookTextBox.Location = new System.Drawing.Point(215, 26);
        this.DistancesChapterDifferenceWithinBookTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesChapterDifferenceWithinBookTextBox.Name = "DistancesChapterDifferenceWithinBookTextBox";
        this.DistancesChapterDifferenceWithinBookTextBox.ReadOnly = true;
        this.DistancesChapterDifferenceWithinBookTextBox.Size = new System.Drawing.Size(65, 23);
        this.DistancesChapterDifferenceWithinBookTextBox.TabIndex = 4;
        this.DistancesChapterDifferenceWithinBookTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesChapterDifferenceWithinBookTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesChapterDifferenceWithinBookTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesChapterAfterWithinBookTextBox
        // 
        this.DistancesChapterAfterWithinBookTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesChapterAfterWithinBookTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesChapterAfterWithinBookTextBox.Location = new System.Drawing.Point(160, 26);
        this.DistancesChapterAfterWithinBookTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesChapterAfterWithinBookTextBox.Name = "DistancesChapterAfterWithinBookTextBox";
        this.DistancesChapterAfterWithinBookTextBox.ReadOnly = true;
        this.DistancesChapterAfterWithinBookTextBox.Size = new System.Drawing.Size(52, 23);
        this.DistancesChapterAfterWithinBookTextBox.TabIndex = 3;
        this.DistancesChapterAfterWithinBookTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesChapterAfterWithinBookTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesChapterAfterWithinBookTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesChapterWithinBookTextBox
        // 
        this.DistancesChapterWithinBookTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.DistancesChapterWithinBookTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesChapterWithinBookTextBox.Location = new System.Drawing.Point(108, 26);
        this.DistancesChapterWithinBookTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DistancesChapterWithinBookTextBox.Name = "DistancesChapterWithinBookTextBox";
        this.DistancesChapterWithinBookTextBox.ReadOnly = true;
        this.DistancesChapterWithinBookTextBox.Size = new System.Drawing.Size(52, 23);
        this.DistancesChapterWithinBookTextBox.TabIndex = 2;
        this.DistancesChapterWithinBookTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DistancesChapterWithinBookTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DistancesChapterWithinBookTextBox.MouseHover += new System.EventHandler(this.Control_MouseHover);
        // 
        // DistancesChapterLabel
        // 
        this.DistancesChapterLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesChapterLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesChapterLabel.Location = new System.Drawing.Point(55, 4);
        this.DistancesChapterLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesChapterLabel.Name = "DistancesChapterLabel";
        this.DistancesChapterLabel.Size = new System.Drawing.Size(227, 20);
        this.DistancesChapterLabel.TabIndex = 0;
        this.DistancesChapterLabel.Text = "|<-----     Chapters     ----->|       Δ";
        this.DistancesChapterLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        // 
        // DistancesRunningTotalLabel
        // 
        this.DistancesRunningTotalLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 7.5F, System.Drawing.FontStyle.Italic, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesRunningTotalLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesRunningTotalLabel.Location = new System.Drawing.Point(160, 84);
        this.DistancesRunningTotalLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesRunningTotalLabel.Name = "DistancesRunningTotalLabel";
        this.DistancesRunningTotalLabel.Size = new System.Drawing.Size(471, 20);
        this.DistancesRunningTotalLabel.TabIndex = 0;
        this.DistancesRunningTotalLabel.Text = "r   u   n   n   i   n   g       t   o   t   a   l   s      .  .  .";
        this.DistancesRunningTotalLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        // 
        // DistancesWithinVerseRunningTotalLabel
        // 
        this.DistancesWithinVerseRunningTotalLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWithinVerseRunningTotalLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesWithinVerseRunningTotalLabel.Location = new System.Drawing.Point(5, 155);
        this.DistancesWithinVerseRunningTotalLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesWithinVerseRunningTotalLabel.Name = "DistancesWithinVerseRunningTotalLabel";
        this.DistancesWithinVerseRunningTotalLabel.Size = new System.Drawing.Size(60, 16);
        this.DistancesWithinVerseRunningTotalLabel.TabIndex = 274;
        this.DistancesWithinVerseRunningTotalLabel.Text = "in verse";
        this.DistancesWithinVerseRunningTotalLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        // 
        // DistancesWithinChapterRunningTotalLabel
        // 
        this.DistancesWithinChapterRunningTotalLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWithinChapterRunningTotalLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesWithinChapterRunningTotalLabel.Location = new System.Drawing.Point(5, 133);
        this.DistancesWithinChapterRunningTotalLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesWithinChapterRunningTotalLabel.Name = "DistancesWithinChapterRunningTotalLabel";
        this.DistancesWithinChapterRunningTotalLabel.Size = new System.Drawing.Size(60, 16);
        this.DistancesWithinChapterRunningTotalLabel.TabIndex = 275;
        this.DistancesWithinChapterRunningTotalLabel.Text = "in chapter";
        this.DistancesWithinChapterRunningTotalLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        // 
        // DistancesWithinBookRunningTotalLabel
        // 
        this.DistancesWithinBookRunningTotalLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWithinBookRunningTotalLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesWithinBookRunningTotalLabel.Location = new System.Drawing.Point(5, 108);
        this.DistancesWithinBookRunningTotalLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesWithinBookRunningTotalLabel.Name = "DistancesWithinBookRunningTotalLabel";
        this.DistancesWithinBookRunningTotalLabel.Size = new System.Drawing.Size(60, 16);
        this.DistancesWithinBookRunningTotalLabel.TabIndex = 276;
        this.DistancesWithinBookRunningTotalLabel.Text = "in Book";
        this.DistancesWithinBookRunningTotalLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        // 
        // DistancesWithinVerseLabel
        // 
        this.DistancesWithinVerseLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWithinVerseLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesWithinVerseLabel.Location = new System.Drawing.Point(5, 78);
        this.DistancesWithinVerseLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesWithinVerseLabel.Name = "DistancesWithinVerseLabel";
        this.DistancesWithinVerseLabel.Size = new System.Drawing.Size(60, 16);
        this.DistancesWithinVerseLabel.TabIndex = 277;
        this.DistancesWithinVerseLabel.Text = "in verse";
        this.DistancesWithinVerseLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        // 
        // DistancesWithinChapterLabel
        // 
        this.DistancesWithinChapterLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWithinChapterLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesWithinChapterLabel.Location = new System.Drawing.Point(5, 55);
        this.DistancesWithinChapterLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesWithinChapterLabel.Name = "DistancesWithinChapterLabel";
        this.DistancesWithinChapterLabel.Size = new System.Drawing.Size(60, 16);
        this.DistancesWithinChapterLabel.TabIndex = 278;
        this.DistancesWithinChapterLabel.Text = "in chapter";
        this.DistancesWithinChapterLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        // 
        // DistancesWithinBookLabel
        // 
        this.DistancesWithinBookLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DistancesWithinBookLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DistancesWithinBookLabel.Location = new System.Drawing.Point(5, 31);
        this.DistancesWithinBookLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DistancesWithinBookLabel.Name = "DistancesWithinBookLabel";
        this.DistancesWithinBookLabel.Size = new System.Drawing.Size(60, 16);
        this.DistancesWithinBookLabel.TabIndex = 279;
        this.DistancesWithinBookLabel.Text = "in Book";
        this.DistancesWithinBookLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        // 
        // UserTextTabPage
        // 
        this.UserTextTabPage.BackColor = System.Drawing.SystemColors.ControlLight;
        this.UserTextTabPage.Controls.Add(this.UserText8SaveLabel);
        this.UserTextTabPage.Controls.Add(this.UserText7SaveLabel);
        this.UserTextTabPage.Controls.Add(this.UserText6SaveLabel);
        this.UserTextTabPage.Controls.Add(this.UserText5SaveLabel);
        this.UserTextTabPage.Controls.Add(this.UserText4SaveLabel);
        this.UserTextTabPage.Controls.Add(this.UserText3SaveLabel);
        this.UserTextTabPage.Controls.Add(this.UserText2SaveLabel);
        this.UserTextTabPage.Controls.Add(this.UserText1SaveLabel);
        this.UserTextTabPage.Controls.Add(this.UserTextInspectLabel);
        this.UserTextTabPage.Controls.Add(this.UserTextValueButton);
        this.UserTextTabPage.Controls.Add(this.UserTextValueNumericUpDown);
        this.UserTextTabPage.Controls.Add(this.UserTextValueLabel);
        this.UserTextTabPage.Controls.Add(this.UserTextTextBox);
        this.UserTextTabPage.Controls.Add(this.UserText8LoadLabel);
        this.UserTextTabPage.Controls.Add(this.UserText7LoadLabel);
        this.UserTextTabPage.Controls.Add(this.UserText6LoadLabel);
        this.UserTextTabPage.Controls.Add(this.UserText5LoadLabel);
        this.UserTextTabPage.Controls.Add(this.UserText4LoadLabel);
        this.UserTextTabPage.Controls.Add(this.UserText3LoadLabel);
        this.UserTextTabPage.Controls.Add(this.UserText2LoadLabel);
        this.UserTextTabPage.Controls.Add(this.UserText1LoadLabel);
        this.UserTextTabPage.Location = new System.Drawing.Point(4, 26);
        this.UserTextTabPage.Margin = new System.Windows.Forms.Padding(4);
        this.UserTextTabPage.Name = "UserTextTabPage";
        this.UserTextTabPage.Size = new System.Drawing.Size(744, 211);
        this.UserTextTabPage.TabIndex = 194;
        this.UserTextTabPage.Text = " User Text ";
        this.UserTextTabPage.ToolTipText = "Calculate the value of any given text or find all words with a given value\r\nحساب " +
"القيمة لنص معين أو إيجاد الكلمات ذوات قيمة معينة";
        // 
        // UserText8SaveLabel
        // 
        this.UserText8SaveLabel.BackColor = System.Drawing.Color.DarkGreen;
        this.UserText8SaveLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText8SaveLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText8SaveLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.UserText8SaveLabel.Location = new System.Drawing.Point(19, 140);
        this.UserText8SaveLabel.Name = "UserText8SaveLabel";
        this.UserText8SaveLabel.Size = new System.Drawing.Size(11, 19);
        this.UserText8SaveLabel.TabIndex = 127;
        this.UserText8SaveLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText8SaveLabel, "Save");
        this.UserText8SaveLabel.Click += new System.EventHandler(this.UserTextSaveLabel_Click);
        // 
        // UserText7SaveLabel
        // 
        this.UserText7SaveLabel.BackColor = System.Drawing.Color.DarkGreen;
        this.UserText7SaveLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText7SaveLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText7SaveLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.UserText7SaveLabel.Location = new System.Drawing.Point(19, 120);
        this.UserText7SaveLabel.Name = "UserText7SaveLabel";
        this.UserText7SaveLabel.Size = new System.Drawing.Size(11, 19);
        this.UserText7SaveLabel.TabIndex = 126;
        this.UserText7SaveLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText7SaveLabel, "Save");
        this.UserText7SaveLabel.Click += new System.EventHandler(this.UserTextSaveLabel_Click);
        // 
        // UserText6SaveLabel
        // 
        this.UserText6SaveLabel.BackColor = System.Drawing.Color.DarkGreen;
        this.UserText6SaveLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText6SaveLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText6SaveLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.UserText6SaveLabel.Location = new System.Drawing.Point(19, 100);
        this.UserText6SaveLabel.Name = "UserText6SaveLabel";
        this.UserText6SaveLabel.Size = new System.Drawing.Size(11, 19);
        this.UserText6SaveLabel.TabIndex = 125;
        this.UserText6SaveLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText6SaveLabel, "Save");
        this.UserText6SaveLabel.Click += new System.EventHandler(this.UserTextSaveLabel_Click);
        // 
        // UserText5SaveLabel
        // 
        this.UserText5SaveLabel.BackColor = System.Drawing.Color.DarkGreen;
        this.UserText5SaveLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText5SaveLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText5SaveLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.UserText5SaveLabel.Location = new System.Drawing.Point(19, 80);
        this.UserText5SaveLabel.Name = "UserText5SaveLabel";
        this.UserText5SaveLabel.Size = new System.Drawing.Size(11, 19);
        this.UserText5SaveLabel.TabIndex = 124;
        this.UserText5SaveLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText5SaveLabel, "Save");
        this.UserText5SaveLabel.Click += new System.EventHandler(this.UserTextSaveLabel_Click);
        // 
        // UserText4SaveLabel
        // 
        this.UserText4SaveLabel.BackColor = System.Drawing.Color.DarkGreen;
        this.UserText4SaveLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText4SaveLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText4SaveLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.UserText4SaveLabel.Location = new System.Drawing.Point(19, 60);
        this.UserText4SaveLabel.Name = "UserText4SaveLabel";
        this.UserText4SaveLabel.Size = new System.Drawing.Size(11, 19);
        this.UserText4SaveLabel.TabIndex = 123;
        this.UserText4SaveLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText4SaveLabel, "Save");
        this.UserText4SaveLabel.Click += new System.EventHandler(this.UserTextSaveLabel_Click);
        // 
        // UserText3SaveLabel
        // 
        this.UserText3SaveLabel.BackColor = System.Drawing.Color.DarkGreen;
        this.UserText3SaveLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText3SaveLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText3SaveLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.UserText3SaveLabel.Location = new System.Drawing.Point(19, 40);
        this.UserText3SaveLabel.Name = "UserText3SaveLabel";
        this.UserText3SaveLabel.Size = new System.Drawing.Size(11, 19);
        this.UserText3SaveLabel.TabIndex = 122;
        this.UserText3SaveLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText3SaveLabel, "Save");
        this.UserText3SaveLabel.Click += new System.EventHandler(this.UserTextSaveLabel_Click);
        // 
        // UserText2SaveLabel
        // 
        this.UserText2SaveLabel.BackColor = System.Drawing.Color.DarkGreen;
        this.UserText2SaveLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText2SaveLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText2SaveLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.UserText2SaveLabel.Location = new System.Drawing.Point(19, 20);
        this.UserText2SaveLabel.Name = "UserText2SaveLabel";
        this.UserText2SaveLabel.Size = new System.Drawing.Size(11, 19);
        this.UserText2SaveLabel.TabIndex = 121;
        this.UserText2SaveLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText2SaveLabel, "Save");
        this.UserText2SaveLabel.Click += new System.EventHandler(this.UserTextSaveLabel_Click);
        // 
        // UserText1SaveLabel
        // 
        this.UserText1SaveLabel.BackColor = System.Drawing.Color.DarkGreen;
        this.UserText1SaveLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText1SaveLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.UserText1SaveLabel.Location = new System.Drawing.Point(19, 0);
        this.UserText1SaveLabel.Name = "UserText1SaveLabel";
        this.UserText1SaveLabel.Size = new System.Drawing.Size(11, 19);
        this.UserText1SaveLabel.TabIndex = 120;
        this.UserText1SaveLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.UserText1SaveLabel.Click += new System.EventHandler(this.UserTextSaveLabel_Click);
        // 
        // UserTextInspectLabel
        // 
        this.UserTextInspectLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.UserTextInspectLabel.BackColor = System.Drawing.SystemColors.Control;
        this.UserTextInspectLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserTextInspectLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserTextInspectLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.UserTextInspectLabel.Image = ((System.Drawing.Image)(resources.GetObject("UserTextInspectLabel.Image")));
        this.UserTextInspectLabel.Location = new System.Drawing.Point(723, 190);
        this.UserTextInspectLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.UserTextInspectLabel.Name = "UserTextInspectLabel";
        this.UserTextInspectLabel.Size = new System.Drawing.Size(24, 22);
        this.UserTextInspectLabel.TabIndex = 119;
        this.ToolTip.SetToolTip(this.UserTextInspectLabel, "Inspect");
        this.UserTextInspectLabel.Click += new System.EventHandler(this.UserTextInspectLabel_Click);
        // 
        // UserTextValueButton
        // 
        this.UserTextValueButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.UserTextValueButton.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserTextValueButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserTextValueButton.ForeColor = System.Drawing.Color.RoyalBlue;
        this.UserTextValueButton.Location = new System.Drawing.Point(647, 188);
        this.UserTextValueButton.Margin = new System.Windows.Forms.Padding(4);
        this.UserTextValueButton.Name = "UserTextValueButton";
        this.UserTextValueButton.Size = new System.Drawing.Size(76, 24);
        this.UserTextValueButton.TabIndex = 7;
        this.UserTextValueButton.Text = "Find";
        this.UserTextValueButton.UseVisualStyleBackColor = true;
        this.UserTextValueButton.Click += new System.EventHandler(this.UserTextValueButton_Click);
        // 
        // UserTextValueNumericUpDown
        // 
        this.UserTextValueNumericUpDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.UserTextValueNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.UserTextValueNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserTextValueNumericUpDown.Location = new System.Drawing.Point(570, 189);
        this.UserTextValueNumericUpDown.Margin = new System.Windows.Forms.Padding(4);
        this.UserTextValueNumericUpDown.Maximum = new decimal(new int[] {
            -727379969,
            232,
            0,
            0});
        this.UserTextValueNumericUpDown.Name = "UserTextValueNumericUpDown";
        this.UserTextValueNumericUpDown.Size = new System.Drawing.Size(75, 23);
        this.UserTextValueNumericUpDown.TabIndex = 6;
        this.UserTextValueNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ToolTip.SetToolTip(this.UserTextValueNumericUpDown, "Value");
        this.UserTextValueNumericUpDown.ValueChanged += new System.EventHandler(this.UserTextValueNumericUpDown_ValueChanged);
        this.UserTextValueNumericUpDown.KeyDown += new System.Windows.Forms.KeyEventHandler(this.UserTextValueNumericUpDown_KeyDown);
        // 
        // UserTextValueLabel
        // 
        this.UserTextValueLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.UserTextValueLabel.BackColor = System.Drawing.SystemColors.ControlLight;
        this.UserTextValueLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserTextValueLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.UserTextValueLabel.Location = new System.Drawing.Point(490, 193);
        this.UserTextValueLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.UserTextValueLabel.Name = "UserTextValueLabel";
        this.UserTextValueLabel.Size = new System.Drawing.Size(85, 15);
        this.UserTextValueLabel.TabIndex = 5;
        this.UserTextValueLabel.Text = "Find By Value";
        this.UserTextValueLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        // 
        // UserTextTextBox
        // 
        this.UserTextTextBox.AcceptsReturn = true;
        this.UserTextTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.UserTextTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.UserTextTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserTextTextBox.ForeColor = System.Drawing.Color.Blue;
        this.UserTextTextBox.HideSelection = false;
        this.UserTextTextBox.Location = new System.Drawing.Point(29, 0);
        this.UserTextTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.UserTextTextBox.MaxLength = 999999999;
        this.UserTextTextBox.Multiline = true;
        this.UserTextTextBox.Name = "UserTextTextBox";
        this.UserTextTextBox.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
        this.UserTextTextBox.ScrollBars = System.Windows.Forms.ScrollBars.Both;
        this.UserTextTextBox.Size = new System.Drawing.Size(715, 210);
        this.UserTextTextBox.TabIndex = 1;
        this.UserTextTextBox.WordWrap = false;
        this.UserTextTextBox.TextChanged += new System.EventHandler(this.UserTextTextBox_TextChanged);
        this.UserTextTextBox.Enter += new System.EventHandler(this.UserTextTextBox_Enter);
        this.UserTextTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.TextBox_KeyDown);
        this.UserTextTextBox.KeyUp += new System.Windows.Forms.KeyEventHandler(this.UserTextTextBox_KeyUp);
        this.UserTextTextBox.Leave += new System.EventHandler(this.UserTextTextBox_Leave);
        this.UserTextTextBox.MouseDown += new System.Windows.Forms.MouseEventHandler(this.UserTextTextBox_MouseDown);
        this.UserTextTextBox.MouseMove += new System.Windows.Forms.MouseEventHandler(this.UserTextTextBox_MouseMove);
        this.UserTextTextBox.MouseUp += new System.Windows.Forms.MouseEventHandler(this.UserTextTextBox_MouseUp);
        // 
        // UserText8LoadLabel
        // 
        this.UserText8LoadLabel.BackColor = System.Drawing.Color.Black;
        this.UserText8LoadLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText8LoadLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText8LoadLabel.ForeColor = System.Drawing.Color.Lime;
        this.UserText8LoadLabel.Location = new System.Drawing.Point(0, 140);
        this.UserText8LoadLabel.Name = "UserText8LoadLabel";
        this.UserText8LoadLabel.Size = new System.Drawing.Size(19, 19);
        this.UserText8LoadLabel.TabIndex = 118;
        this.UserText8LoadLabel.Text = "8";
        this.UserText8LoadLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText8LoadLabel, "Load");
        this.UserText8LoadLabel.Click += new System.EventHandler(this.UserTextLoadLabel_Click);
        // 
        // UserText7LoadLabel
        // 
        this.UserText7LoadLabel.BackColor = System.Drawing.Color.Black;
        this.UserText7LoadLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText7LoadLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText7LoadLabel.ForeColor = System.Drawing.Color.Lime;
        this.UserText7LoadLabel.Location = new System.Drawing.Point(0, 120);
        this.UserText7LoadLabel.Name = "UserText7LoadLabel";
        this.UserText7LoadLabel.Size = new System.Drawing.Size(19, 19);
        this.UserText7LoadLabel.TabIndex = 117;
        this.UserText7LoadLabel.Text = "7";
        this.UserText7LoadLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText7LoadLabel, "Load");
        this.UserText7LoadLabel.Click += new System.EventHandler(this.UserTextLoadLabel_Click);
        // 
        // UserText6LoadLabel
        // 
        this.UserText6LoadLabel.BackColor = System.Drawing.Color.Black;
        this.UserText6LoadLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText6LoadLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText6LoadLabel.ForeColor = System.Drawing.Color.Lime;
        this.UserText6LoadLabel.Location = new System.Drawing.Point(0, 100);
        this.UserText6LoadLabel.Name = "UserText6LoadLabel";
        this.UserText6LoadLabel.Size = new System.Drawing.Size(19, 19);
        this.UserText6LoadLabel.TabIndex = 116;
        this.UserText6LoadLabel.Text = "6";
        this.UserText6LoadLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText6LoadLabel, "Load");
        this.UserText6LoadLabel.Click += new System.EventHandler(this.UserTextLoadLabel_Click);
        // 
        // UserText5LoadLabel
        // 
        this.UserText5LoadLabel.BackColor = System.Drawing.Color.Black;
        this.UserText5LoadLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText5LoadLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText5LoadLabel.ForeColor = System.Drawing.Color.Lime;
        this.UserText5LoadLabel.Location = new System.Drawing.Point(0, 80);
        this.UserText5LoadLabel.Name = "UserText5LoadLabel";
        this.UserText5LoadLabel.Size = new System.Drawing.Size(19, 19);
        this.UserText5LoadLabel.TabIndex = 115;
        this.UserText5LoadLabel.Text = "5";
        this.UserText5LoadLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText5LoadLabel, "Load");
        this.UserText5LoadLabel.Click += new System.EventHandler(this.UserTextLoadLabel_Click);
        // 
        // UserText4LoadLabel
        // 
        this.UserText4LoadLabel.BackColor = System.Drawing.Color.Black;
        this.UserText4LoadLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText4LoadLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText4LoadLabel.ForeColor = System.Drawing.Color.Lime;
        this.UserText4LoadLabel.Location = new System.Drawing.Point(0, 60);
        this.UserText4LoadLabel.Name = "UserText4LoadLabel";
        this.UserText4LoadLabel.Size = new System.Drawing.Size(19, 19);
        this.UserText4LoadLabel.TabIndex = 114;
        this.UserText4LoadLabel.Text = "4";
        this.UserText4LoadLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText4LoadLabel, "Load");
        this.UserText4LoadLabel.Click += new System.EventHandler(this.UserTextLoadLabel_Click);
        // 
        // UserText3LoadLabel
        // 
        this.UserText3LoadLabel.BackColor = System.Drawing.Color.Black;
        this.UserText3LoadLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText3LoadLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText3LoadLabel.ForeColor = System.Drawing.Color.Lime;
        this.UserText3LoadLabel.Location = new System.Drawing.Point(0, 40);
        this.UserText3LoadLabel.Name = "UserText3LoadLabel";
        this.UserText3LoadLabel.Size = new System.Drawing.Size(19, 19);
        this.UserText3LoadLabel.TabIndex = 113;
        this.UserText3LoadLabel.Text = "3";
        this.UserText3LoadLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText3LoadLabel, "Load");
        this.UserText3LoadLabel.Click += new System.EventHandler(this.UserTextLoadLabel_Click);
        // 
        // UserText2LoadLabel
        // 
        this.UserText2LoadLabel.BackColor = System.Drawing.Color.Black;
        this.UserText2LoadLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText2LoadLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText2LoadLabel.ForeColor = System.Drawing.Color.Lime;
        this.UserText2LoadLabel.Location = new System.Drawing.Point(0, 20);
        this.UserText2LoadLabel.Name = "UserText2LoadLabel";
        this.UserText2LoadLabel.Size = new System.Drawing.Size(19, 19);
        this.UserText2LoadLabel.TabIndex = 112;
        this.UserText2LoadLabel.Text = "2";
        this.UserText2LoadLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText2LoadLabel, "Load");
        this.UserText2LoadLabel.Click += new System.EventHandler(this.UserTextLoadLabel_Click);
        // 
        // UserText1LoadLabel
        // 
        this.UserText1LoadLabel.BackColor = System.Drawing.Color.Black;
        this.UserText1LoadLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.UserText1LoadLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.UserText1LoadLabel.ForeColor = System.Drawing.Color.Lime;
        this.UserText1LoadLabel.Location = new System.Drawing.Point(0, 0);
        this.UserText1LoadLabel.Name = "UserText1LoadLabel";
        this.UserText1LoadLabel.Size = new System.Drawing.Size(19, 19);
        this.UserText1LoadLabel.TabIndex = 111;
        this.UserText1LoadLabel.Text = "1";
        this.UserText1LoadLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.UserText1LoadLabel, "Load");
        this.UserText1LoadLabel.Click += new System.EventHandler(this.UserTextLoadLabel_Click);
        // 
        // TanzilLabel
        // 
        this.TanzilLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.TanzilLabel.BackColor = System.Drawing.Color.Pink;
        this.TanzilLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.TanzilLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.TanzilLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.TanzilLabel.Location = new System.Drawing.Point(42, 21);
        this.TanzilLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.TanzilLabel.Name = "TanzilLabel";
        this.TanzilLabel.Size = new System.Drawing.Size(5, 8);
        this.TanzilLabel.TabIndex = 153;
        this.TanzilLabel.Tag = "http://tanzil.net/";
        this.TanzilLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.ToolTip.SetToolTip(this.TanzilLabel, "©2008 Tanzil Quran Text");
        this.TanzilLabel.Click += new System.EventHandler(this.LinkLabel_Click);
        this.TanzilLabel.Enter += new System.EventHandler(this.FindByTextControls_Enter);
        // 
        // EmlaaeiTextLabel
        // 
        this.EmlaaeiTextLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.EmlaaeiTextLabel.BackColor = System.Drawing.SystemColors.Control;
        this.EmlaaeiTextLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.EmlaaeiTextLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.EmlaaeiTextLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.EmlaaeiTextLabel.Image = ((System.Drawing.Image)(resources.GetObject("EmlaaeiTextLabel.Image")));
        this.EmlaaeiTextLabel.Location = new System.Drawing.Point(224, 24);
        this.EmlaaeiTextLabel.Name = "EmlaaeiTextLabel";
        this.EmlaaeiTextLabel.Size = new System.Drawing.Size(16, 17);
        this.EmlaaeiTextLabel.TabIndex = 70;
        this.EmlaaeiTextLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.EmlaaeiTextLabel.Click += new System.EventHandler(this.EmlaaeiTextLabel_Click);
        // 
        // FindByFrequencySumNumericUpDown
        // 
        this.FindByFrequencySumNumericUpDown.BackColor = System.Drawing.SystemColors.Window;
        this.FindByFrequencySumNumericUpDown.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencySumNumericUpDown.ForeColor = System.Drawing.SystemColors.WindowText;
        this.FindByFrequencySumNumericUpDown.Location = new System.Drawing.Point(93, 45);
        this.FindByFrequencySumNumericUpDown.Margin = new System.Windows.Forms.Padding(0);
        this.FindByFrequencySumNumericUpDown.Maximum = new decimal(new int[] {
            9999999,
            0,
            0,
            0});
        this.FindByFrequencySumNumericUpDown.Name = "FindByFrequencySumNumericUpDown";
        this.FindByFrequencySumNumericUpDown.Size = new System.Drawing.Size(104, 23);
        this.FindByFrequencySumNumericUpDown.TabIndex = 9;
        this.FindByFrequencySumNumericUpDown.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ToolTip.SetToolTip(this.FindByFrequencySumNumericUpDown, "Letter frequency sum");
        this.FindByFrequencySumNumericUpDown.ValueChanged += new System.EventHandler(this.FindByFrequencySumNumericUpDown_ValueChanged);
        this.FindByFrequencySumNumericUpDown.EnabledChanged += new System.EventHandler(this.FindByFrequencyControl_EnabledChanged);
        this.FindByFrequencySumNumericUpDown.Click += new System.EventHandler(this.NumericUpDown_Enter);
        this.FindByFrequencySumNumericUpDown.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        this.FindByFrequencySumNumericUpDown.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        this.FindByFrequencySumNumericUpDown.Leave += new System.EventHandler(this.FindByFrequencySumNumericUpDown_Leave);
        // 
        // StatisticsGroupBox
        // 
        this.StatisticsGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.StatisticsGroupBox.Controls.Add(this.TanzilLabel);
        this.StatisticsGroupBox.Controls.Add(this.EmlaaeiTextLabel);
        this.StatisticsGroupBox.Controls.Add(this.ValueNavigatorPanel);
        this.StatisticsGroupBox.Controls.Add(this.ShaddaAsLetterCheckBox);
        this.StatisticsGroupBox.Controls.Add(this.WawAsWordCheckBox);
        this.StatisticsGroupBox.Controls.Add(this.WithBismAllahCheckBox);
        this.StatisticsGroupBox.Controls.Add(this.DivisorValueUpLabel);
        this.StatisticsGroupBox.Controls.Add(this.DivisorValueDownLabel);
        this.StatisticsGroupBox.Controls.Add(this.ChapterNumberSumTextBox);
        this.StatisticsGroupBox.Controls.Add(this.DecimalChaptersTextBox);
        this.StatisticsGroupBox.Controls.Add(this.ChaptersTextBox);
        this.StatisticsGroupBox.Controls.Add(this.ChaptersLabel);
        this.StatisticsGroupBox.Controls.Add(this.LetterFrequencyPanel);
        this.StatisticsGroupBox.Controls.Add(this.LetterNumberSumTextBox);
        this.StatisticsGroupBox.Controls.Add(this.WordNumberSumTextBox);
        this.StatisticsGroupBox.Controls.Add(this.VerseNumberSumTextBox);
        this.StatisticsGroupBox.Controls.Add(this.DecimalLettersTextBox);
        this.StatisticsGroupBox.Controls.Add(this.DecimalWordsTextBox);
        this.StatisticsGroupBox.Controls.Add(this.DecimalVersesTextBox);
        this.StatisticsGroupBox.Controls.Add(this.RadixValueUpLabel);
        this.StatisticsGroupBox.Controls.Add(this.RadixValueDownLabel);
        this.StatisticsGroupBox.Controls.Add(this.RadixLabel);
        this.StatisticsGroupBox.Controls.Add(this.ValuePanel);
        this.StatisticsGroupBox.Controls.Add(this.VersesTextBox);
        this.StatisticsGroupBox.Controls.Add(this.LettersTextBox);
        this.StatisticsGroupBox.Controls.Add(this.WordsTextBox);
        this.StatisticsGroupBox.Controls.Add(this.VersesLabel);
        this.StatisticsGroupBox.Controls.Add(this.WordsLabel);
        this.StatisticsGroupBox.Controls.Add(this.LettersLabel);
        this.StatisticsGroupBox.Controls.Add(this.TextModeComboBox);
        this.StatisticsGroupBox.Controls.Add(this.DivisorLabel);
        this.StatisticsGroupBox.Controls.Add(this.DivisorValueLabel);
        this.StatisticsGroupBox.Controls.Add(this.RadixValueLabel);
        this.StatisticsGroupBox.Controls.Add(this.TotalChapterCountsCheckBox);
        this.StatisticsGroupBox.Controls.Add(this.TextModeLabel);
        this.StatisticsGroupBox.Cursor = System.Windows.Forms.Cursors.Default;
        this.StatisticsGroupBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.StatisticsGroupBox.Location = new System.Drawing.Point(0, 47);
        this.StatisticsGroupBox.Margin = new System.Windows.Forms.Padding(4);
        this.StatisticsGroupBox.Name = "StatisticsGroupBox";
        this.StatisticsGroupBox.Padding = new System.Windows.Forms.Padding(4);
        this.StatisticsGroupBox.Size = new System.Drawing.Size(251, 684);
        this.StatisticsGroupBox.TabIndex = 4;
        this.StatisticsGroupBox.TabStop = false;
        this.StatisticsGroupBox.Text = "Statistics                                     ";
        // 
        // ValueNavigatorPanel
        // 
        this.ValueNavigatorPanel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.ValueNavigatorPanel.BackColor = System.Drawing.Color.Transparent;
        this.ValueNavigatorPanel.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
        this.ValueNavigatorPanel.Controls.Add(this.VerseByVerseNumberLabel);
        this.ValueNavigatorPanel.Controls.Add(this.VerseByWordNumberLabel);
        this.ValueNavigatorPanel.Controls.Add(this.UndoValueNavigationLabel);
        this.ValueNavigatorPanel.Controls.Add(this.VerseByLetterNumberLabel);
        this.ValueNavigatorPanel.Controls.Add(this.RedoValueNavigationLabel);
        this.ValueNavigatorPanel.Controls.Add(this.ValueNavigatorLinkLabel);
        this.ValueNavigatorPanel.Location = new System.Drawing.Point(5, 490);
        this.ValueNavigatorPanel.Margin = new System.Windows.Forms.Padding(4);
        this.ValueNavigatorPanel.Name = "ValueNavigatorPanel";
        this.ValueNavigatorPanel.Size = new System.Drawing.Size(239, 28);
        this.ValueNavigatorPanel.TabIndex = 225;
        // 
        // ValueNavigatorLinkLabel
        // 
        this.ValueNavigatorLinkLabel.BackColor = System.Drawing.Color.RoyalBlue;
        this.ValueNavigatorLinkLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ValueNavigatorLinkLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ValueNavigatorLinkLabel.ForeColor = System.Drawing.SystemColors.Info;
        this.ValueNavigatorLinkLabel.Location = new System.Drawing.Point(232, 0);
        this.ValueNavigatorLinkLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ValueNavigatorLinkLabel.Name = "ValueNavigatorLinkLabel";
        this.ValueNavigatorLinkLabel.Size = new System.Drawing.Size(8, 5);
        this.ValueNavigatorLinkLabel.TabIndex = 0;
        this.ValueNavigatorLinkLabel.Tag = "http://quran-2012.ir";
        this.ToolTip.SetToolTip(this.ValueNavigatorLinkLabel, "©2009 Aminreza Ebrahimi Saba");
        this.ValueNavigatorLinkLabel.Click += new System.EventHandler(this.LinkLabel_Click);
        this.ValueNavigatorLinkLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // ShaddaAsLetterCheckBox
        // 
        this.ShaddaAsLetterCheckBox.AutoSize = true;
        this.ShaddaAsLetterCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.ShaddaAsLetterCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ShaddaAsLetterCheckBox.ForeColor = System.Drawing.Color.Black;
        this.ShaddaAsLetterCheckBox.Location = new System.Drawing.Point(184, 46);
        this.ShaddaAsLetterCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.ShaddaAsLetterCheckBox.Name = "ShaddaAsLetterCheckBox";
        this.ShaddaAsLetterCheckBox.Size = new System.Drawing.Size(66, 17);
        this.ShaddaAsLetterCheckBox.TabIndex = 6;
        this.ShaddaAsLetterCheckBox.Tag = "";
        this.ShaddaAsLetterCheckBox.Text = "Shadda";
        this.ToolTip.SetToolTip(this.ShaddaAsLetterCheckBox, "Shadda as letter  شدّة كحرف");
        this.ShaddaAsLetterCheckBox.UseVisualStyleBackColor = false;
        this.ShaddaAsLetterCheckBox.CheckedChanged += new System.EventHandler(this.ShaddaAsLetterCheckBox_CheckedChanged);
        this.ShaddaAsLetterCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // WawAsWordCheckBox
        // 
        this.WawAsWordCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.WawAsWordCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.WawAsWordCheckBox.ForeColor = System.Drawing.Color.Black;
        this.WawAsWordCheckBox.Location = new System.Drawing.Point(125, 45);
        this.WawAsWordCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.WawAsWordCheckBox.Name = "WawAsWordCheckBox";
        this.WawAsWordCheckBox.Size = new System.Drawing.Size(75, 20);
        this.WawAsWordCheckBox.TabIndex = 5;
        this.WawAsWordCheckBox.Tag = "";
        this.WawAsWordCheckBox.Text = "Waw";
        this.ToolTip.SetToolTip(this.WawAsWordCheckBox, "Waw as word  واو ككلمة");
        this.WawAsWordCheckBox.UseVisualStyleBackColor = false;
        this.WawAsWordCheckBox.CheckedChanged += new System.EventHandler(this.WawAsWordCheckBox_CheckedChanged);
        this.WawAsWordCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // WithBismAllahCheckBox
        // 
        this.WithBismAllahCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.WithBismAllahCheckBox.Checked = true;
        this.WithBismAllahCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
        this.WithBismAllahCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.WithBismAllahCheckBox.ForeColor = System.Drawing.Color.Black;
        this.WithBismAllahCheckBox.Location = new System.Drawing.Point(61, 45);
        this.WithBismAllahCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.WithBismAllahCheckBox.Name = "WithBismAllahCheckBox";
        this.WithBismAllahCheckBox.Size = new System.Drawing.Size(75, 20);
        this.WithBismAllahCheckBox.TabIndex = 4;
        this.WithBismAllahCheckBox.Tag = "";
        this.WithBismAllahCheckBox.Text = "Bism";
        this.ToolTip.SetToolTip(this.WithBismAllahCheckBox, "With 112 bismAllah  مع 112 بسم الله الرحمن الرحيم");
        this.WithBismAllahCheckBox.UseVisualStyleBackColor = false;
        this.WithBismAllahCheckBox.CheckedChanged += new System.EventHandler(this.WithBismAllahCheckBox_CheckedChanged);
        this.WithBismAllahCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // DivisorValueUpLabel
        // 
        this.DivisorValueUpLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.DivisorValueUpLabel.BackColor = System.Drawing.Color.Black;
        this.DivisorValueUpLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DivisorValueUpLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DivisorValueUpLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204)))), ((int)(((byte)(255)))), ((int)(((byte)(204)))));
        this.DivisorValueUpLabel.Location = new System.Drawing.Point(233, -1);
        this.DivisorValueUpLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DivisorValueUpLabel.Name = "DivisorValueUpLabel";
        this.DivisorValueUpLabel.Size = new System.Drawing.Size(13, 17);
        this.DivisorValueUpLabel.TabIndex = 249;
        this.DivisorValueUpLabel.Text = ">";
        this.DivisorValueUpLabel.TextAlign = System.Drawing.ContentAlignment.TopCenter;
        this.DivisorValueUpLabel.MouseDown += new System.Windows.Forms.MouseEventHandler(this.DivisorValueUpLabel_MouseDown);
        // 
        // DivisorValueDownLabel
        // 
        this.DivisorValueDownLabel.BackColor = System.Drawing.Color.Black;
        this.DivisorValueDownLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DivisorValueDownLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DivisorValueDownLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204)))), ((int)(((byte)(255)))), ((int)(((byte)(204)))));
        this.DivisorValueDownLabel.Location = new System.Drawing.Point(181, -1);
        this.DivisorValueDownLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DivisorValueDownLabel.Name = "DivisorValueDownLabel";
        this.DivisorValueDownLabel.Size = new System.Drawing.Size(13, 17);
        this.DivisorValueDownLabel.TabIndex = 248;
        this.DivisorValueDownLabel.Text = "<";
        this.DivisorValueDownLabel.TextAlign = System.Drawing.ContentAlignment.TopCenter;
        this.DivisorValueDownLabel.MouseDown += new System.Windows.Forms.MouseEventHandler(this.DivisorValueDownLabel_MouseDown);
        // 
        // ChapterNumberSumTextBox
        // 
        this.ChapterNumberSumTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.ChapterNumberSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChapterNumberSumTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.ChapterNumberSumTextBox.Location = new System.Drawing.Point(77, 65);
        this.ChapterNumberSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.ChapterNumberSumTextBox.Name = "ChapterNumberSumTextBox";
        this.ChapterNumberSumTextBox.ReadOnly = true;
        this.ChapterNumberSumTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.ChapterNumberSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.ChapterNumberSumTextBox.TabIndex = 9;
        this.ChapterNumberSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.ChapterNumberSumTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.ChapterNumberSumTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // DecimalChaptersTextBox
        // 
        this.DecimalChaptersTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.DecimalChaptersTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DecimalChaptersTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DecimalChaptersTextBox.Location = new System.Drawing.Point(7, 65);
        this.DecimalChaptersTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DecimalChaptersTextBox.Name = "DecimalChaptersTextBox";
        this.DecimalChaptersTextBox.ReadOnly = true;
        this.DecimalChaptersTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.DecimalChaptersTextBox.Size = new System.Drawing.Size(72, 23);
        this.DecimalChaptersTextBox.TabIndex = 8;
        this.DecimalChaptersTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DecimalChaptersTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.DecimalChaptersTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // ChaptersTextBox
        // 
        this.ChaptersTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.ChaptersTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.ChaptersTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChaptersTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.ChaptersTextBox.Location = new System.Drawing.Point(148, 65);
        this.ChaptersTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.ChaptersTextBox.Name = "ChaptersTextBox";
        this.ChaptersTextBox.ReadOnly = true;
        this.ChaptersTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.ChaptersTextBox.Size = new System.Drawing.Size(95, 23);
        this.ChaptersTextBox.TabIndex = 10;
        this.ChaptersTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
        this.ChaptersTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.ChaptersTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.ChaptersTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // ChaptersLabel
        // 
        this.ChaptersLabel.BackColor = System.Drawing.Color.Transparent;
        this.ChaptersLabel.Cursor = System.Windows.Forms.Cursors.Default;
        this.ChaptersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ChaptersLabel.Location = new System.Drawing.Point(4, 68);
        this.ChaptersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ChaptersLabel.Name = "ChaptersLabel";
        this.ChaptersLabel.Size = new System.Drawing.Size(84, 20);
        this.ChaptersLabel.TabIndex = 244;
        this.ChaptersLabel.Text = "Chapters";
        // 
        // LetterFrequencyPanel
        // 
        this.LetterFrequencyPanel.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.LetterFrequencyPanel.BackColor = System.Drawing.Color.LightSteelBlue;
        this.LetterFrequencyPanel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.LetterFrequencyPanel.Controls.Add(this.LetterFrequencyWithDiacriticsCheckBox);
        this.LetterFrequencyPanel.Controls.Add(this.LetterFrequencyDistanceSumSumLabel);
        this.LetterFrequencyPanel.Controls.Add(this.FindByFrequencyTotalLabel);
        this.LetterFrequencyPanel.Controls.Add(this.LetterFrequencyPositionSumSumLabel);
        this.LetterFrequencyPanel.Controls.Add(this.LetterFrequencySumLabel);
        this.LetterFrequencyPanel.Controls.Add(this.LetterFrequencyCountLabel);
        this.LetterFrequencyPanel.Controls.Add(this.LetterFrequencyInspectLabel);
        this.LetterFrequencyPanel.Controls.Add(this.LetterFrequencyListView);
        this.LetterFrequencyPanel.Controls.Add(this.FindByFrequncyPanel);
        this.LetterFrequencyPanel.Location = new System.Drawing.Point(5, 517);
        this.LetterFrequencyPanel.Margin = new System.Windows.Forms.Padding(4);
        this.LetterFrequencyPanel.Name = "LetterFrequencyPanel";
        this.LetterFrequencyPanel.Size = new System.Drawing.Size(239, 168);
        this.LetterFrequencyPanel.TabIndex = 240;
        this.LetterFrequencyPanel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // LetterFrequencyWithDiacriticsCheckBox
        // 
        this.LetterFrequencyWithDiacriticsCheckBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
        this.LetterFrequencyWithDiacriticsCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.LetterFrequencyWithDiacriticsCheckBox.CheckAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.LetterFrequencyWithDiacriticsCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.LetterFrequencyWithDiacriticsCheckBox.ForeColor = System.Drawing.Color.Navy;
        this.LetterFrequencyWithDiacriticsCheckBox.Location = new System.Drawing.Point(220, 147);
        this.LetterFrequencyWithDiacriticsCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.LetterFrequencyWithDiacriticsCheckBox.Name = "LetterFrequencyWithDiacriticsCheckBox";
        this.LetterFrequencyWithDiacriticsCheckBox.Size = new System.Drawing.Size(12, 12);
        this.LetterFrequencyWithDiacriticsCheckBox.TabIndex = 19;
        this.ToolTip.SetToolTip(this.LetterFrequencyWithDiacriticsCheckBox, "with diacritics  مع الحركات");
        this.LetterFrequencyWithDiacriticsCheckBox.UseVisualStyleBackColor = false;
        this.LetterFrequencyWithDiacriticsCheckBox.CheckedChanged += new System.EventHandler(this.LetterFrequencyWithDiacriticsCheckBox_CheckedChanged);
        // 
        // LetterFrequencyDistanceSumSumLabel
        // 
        this.LetterFrequencyDistanceSumSumLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.LetterFrequencyDistanceSumSumLabel.BackColor = System.Drawing.Color.Transparent;
        this.LetterFrequencyDistanceSumSumLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.LetterFrequencyDistanceSumSumLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.LetterFrequencyDistanceSumSumLabel.Location = new System.Drawing.Point(160, 143);
        this.LetterFrequencyDistanceSumSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.LetterFrequencyDistanceSumSumLabel.Name = "LetterFrequencyDistanceSumSumLabel";
        this.LetterFrequencyDistanceSumSumLabel.Size = new System.Drawing.Size(43, 19);
        this.LetterFrequencyDistanceSumSumLabel.TabIndex = 17;
        this.LetterFrequencyDistanceSumSumLabel.Text = "0";
        this.LetterFrequencyDistanceSumSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.LetterFrequencyDistanceSumSumLabel.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.LetterFrequencyDistanceSumSumLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // FindByFrequencyTotalLabel
        // 
        this.FindByFrequencyTotalLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.FindByFrequencyTotalLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByFrequencyTotalLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencyTotalLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.FindByFrequencyTotalLabel.Location = new System.Drawing.Point(0, 142);
        this.FindByFrequencyTotalLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByFrequencyTotalLabel.Name = "FindByFrequencyTotalLabel";
        this.FindByFrequencyTotalLabel.Size = new System.Drawing.Size(20, 19);
        this.FindByFrequencyTotalLabel.TabIndex = 0;
        this.FindByFrequencyTotalLabel.Text = "∑";
        this.FindByFrequencyTotalLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByFrequencyTotalLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // LetterFrequencyPositionSumSumLabel
        // 
        this.LetterFrequencyPositionSumSumLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.LetterFrequencyPositionSumSumLabel.BackColor = System.Drawing.Color.Transparent;
        this.LetterFrequencyPositionSumSumLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.LetterFrequencyPositionSumSumLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.LetterFrequencyPositionSumSumLabel.Location = new System.Drawing.Point(111, 143);
        this.LetterFrequencyPositionSumSumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.LetterFrequencyPositionSumSumLabel.Name = "LetterFrequencyPositionSumSumLabel";
        this.LetterFrequencyPositionSumSumLabel.Size = new System.Drawing.Size(46, 19);
        this.LetterFrequencyPositionSumSumLabel.TabIndex = 16;
        this.LetterFrequencyPositionSumSumLabel.Text = "0";
        this.LetterFrequencyPositionSumSumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.LetterFrequencyPositionSumSumLabel.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.LetterFrequencyPositionSumSumLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // LetterFrequencySumLabel
        // 
        this.LetterFrequencySumLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.LetterFrequencySumLabel.BackColor = System.Drawing.Color.Transparent;
        this.LetterFrequencySumLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.LetterFrequencySumLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.LetterFrequencySumLabel.Location = new System.Drawing.Point(61, 141);
        this.LetterFrequencySumLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.LetterFrequencySumLabel.Name = "LetterFrequencySumLabel";
        this.LetterFrequencySumLabel.Size = new System.Drawing.Size(53, 22);
        this.LetterFrequencySumLabel.TabIndex = 15;
        this.LetterFrequencySumLabel.Text = "0";
        this.LetterFrequencySumLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.LetterFrequencySumLabel, "Letter frequency sum");
        this.LetterFrequencySumLabel.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.LetterFrequencySumLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // LetterFrequencyCountLabel
        // 
        this.LetterFrequencyCountLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.LetterFrequencyCountLabel.BackColor = System.Drawing.Color.Transparent;
        this.LetterFrequencyCountLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.LetterFrequencyCountLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.LetterFrequencyCountLabel.Location = new System.Drawing.Point(28, 141);
        this.LetterFrequencyCountLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.LetterFrequencyCountLabel.Name = "LetterFrequencyCountLabel";
        this.LetterFrequencyCountLabel.Size = new System.Drawing.Size(30, 22);
        this.LetterFrequencyCountLabel.TabIndex = 14;
        this.LetterFrequencyCountLabel.Text = "0";
        this.LetterFrequencyCountLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.LetterFrequencyCountLabel, "Letters");
        this.LetterFrequencyCountLabel.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.LetterFrequencyCountLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // LetterFrequencyInspectLabel
        // 
        this.LetterFrequencyInspectLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.LetterFrequencyInspectLabel.BackColor = System.Drawing.Color.Transparent;
        this.LetterFrequencyInspectLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.LetterFrequencyInspectLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.LetterFrequencyInspectLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.LetterFrequencyInspectLabel.Image = ((System.Drawing.Image)(resources.GetObject("LetterFrequencyInspectLabel.Image")));
        this.LetterFrequencyInspectLabel.Location = new System.Drawing.Point(203, 141);
        this.LetterFrequencyInspectLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.LetterFrequencyInspectLabel.Name = "LetterFrequencyInspectLabel";
        this.LetterFrequencyInspectLabel.Size = new System.Drawing.Size(21, 22);
        this.LetterFrequencyInspectLabel.TabIndex = 18;
        this.ToolTip.SetToolTip(this.LetterFrequencyInspectLabel, "Inspect letter frequencies\r\nCtrl+Click for verbose mode");
        this.LetterFrequencyInspectLabel.Click += new System.EventHandler(this.LetterFrequencyInspectLabel_Click);
        this.LetterFrequencyInspectLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // LetterFrequencyListView
        // 
        this.LetterFrequencyListView.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.LetterFrequencyListView.BackColor = System.Drawing.Color.LightSteelBlue;
        this.LetterFrequencyListView.Columns.AddRange(new System.Windows.Forms.ColumnHeader[] {
            this.LetterOrderColumnHeader,
            this.LetterCharacterColumnHeader,
            this.LetterFrequencyColumnHeader,
            this.LetterPositionSumColumnHeader,
            this.LetterDistanceSumColumnHeader});
        this.LetterFrequencyListView.Cursor = System.Windows.Forms.Cursors.Hand;
        this.LetterFrequencyListView.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.LetterFrequencyListView.FullRowSelect = true;
        this.LetterFrequencyListView.GridLines = true;
        this.LetterFrequencyListView.HideSelection = false;
        this.LetterFrequencyListView.Location = new System.Drawing.Point(0, 68);
        this.LetterFrequencyListView.Margin = new System.Windows.Forms.Padding(4);
        this.LetterFrequencyListView.Name = "LetterFrequencyListView";
        this.LetterFrequencyListView.Size = new System.Drawing.Size(232, 73);
        this.LetterFrequencyListView.TabIndex = 11;
        this.LetterFrequencyListView.UseCompatibleStateImageBehavior = false;
        this.LetterFrequencyListView.View = System.Windows.Forms.View.Details;
        this.LetterFrequencyListView.ColumnClick += new System.Windows.Forms.ColumnClickEventHandler(this.LetterFrequencyListView_ColumnClick);
        this.LetterFrequencyListView.SelectedIndexChanged += new System.EventHandler(this.LetterFrequencyListView_SelectedIndexChanged);
        this.LetterFrequencyListView.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // LetterOrderColumnHeader
        // 
        this.LetterOrderColumnHeader.Text = "#";
        this.LetterOrderColumnHeader.Width = 24;
        // 
        // LetterCharacterColumnHeader
        // 
        this.LetterCharacterColumnHeader.Text = "L";
        this.LetterCharacterColumnHeader.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.LetterCharacterColumnHeader.Width = 32;
        // 
        // LetterFrequencyColumnHeader
        // 
        this.LetterFrequencyColumnHeader.Text = "Freq";
        this.LetterFrequencyColumnHeader.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.LetterFrequencyColumnHeader.Width = 50;
        // 
        // LetterPositionSumColumnHeader
        // 
        this.LetterPositionSumColumnHeader.Text = "∑Pos";
        this.LetterPositionSumColumnHeader.Width = 48;
        // 
        // LetterDistanceSumColumnHeader
        // 
        this.LetterDistanceSumColumnHeader.Text = "∑Δ";
        this.LetterDistanceSumColumnHeader.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.LetterDistanceSumColumnHeader.Width = 48;
        // 
        // FindByFrequncyPanel
        // 
        this.FindByFrequncyPanel.BackColor = System.Drawing.Color.LightSteelBlue;
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencyLinkLabel);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencyPhraseCheckBox);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencySumComparisonOperatorLabel);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencySumNumberTypeLabel);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencySumNumericUpDown);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencySumLabel);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencyPhraseTextBox);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencyButton);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencyLabel);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencyResultTypeWordsLabel);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencyResultTypeSentencesLabel);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencyResultTypeVersesLabel);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencyResultTypeChaptersLabel);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencySearchTypeDuplicateLettersLabel);
        this.FindByFrequncyPanel.Controls.Add(this.FindByFrequencySearchTypeUniqueLettersLabel);
        this.FindByFrequncyPanel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.FindByFrequncyPanel.Location = new System.Drawing.Point(0, -1);
        this.FindByFrequncyPanel.Margin = new System.Windows.Forms.Padding(4);
        this.FindByFrequncyPanel.Name = "FindByFrequncyPanel";
        this.FindByFrequncyPanel.Size = new System.Drawing.Size(236, 117);
        this.FindByFrequncyPanel.TabIndex = 244;
        // 
        // FindByFrequencyLinkLabel
        // 
        this.FindByFrequencyLinkLabel.BackColor = System.Drawing.Color.CornflowerBlue;
        this.FindByFrequencyLinkLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByFrequencyLinkLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencyLinkLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByFrequencyLinkLabel.Location = new System.Drawing.Point(221, 5);
        this.FindByFrequencyLinkLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByFrequencyLinkLabel.Name = "FindByFrequencyLinkLabel";
        this.FindByFrequencyLinkLabel.Size = new System.Drawing.Size(8, 5);
        this.FindByFrequencyLinkLabel.TabIndex = 110;
        this.FindByFrequencyLinkLabel.Tag = "http://www.facebook.com/hadyalthahaby";
        this.FindByFrequencyLinkLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.ToolTip.SetToolTip(this.FindByFrequencyLinkLabel, "©2005 Hadi Al-Thehabi");
        this.FindByFrequencyLinkLabel.Visible = false;
        this.FindByFrequencyLinkLabel.Click += new System.EventHandler(this.LinkLabel_Click);
        // 
        // FindByFrequencyPhraseCheckBox
        // 
        this.FindByFrequencyPhraseCheckBox.AutoSize = true;
        this.FindByFrequencyPhraseCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.FindByFrequencyPhraseCheckBox.CheckAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByFrequencyPhraseCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencyPhraseCheckBox.ForeColor = System.Drawing.Color.Black;
        this.FindByFrequencyPhraseCheckBox.Location = new System.Drawing.Point(141, 6);
        this.FindByFrequencyPhraseCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.FindByFrequencyPhraseCheckBox.Name = "FindByFrequencyPhraseCheckBox";
        this.FindByFrequencyPhraseCheckBox.Size = new System.Drawing.Size(18, 17);
        this.FindByFrequencyPhraseCheckBox.TabIndex = 109;
        this.ToolTip.SetToolTip(this.FindByFrequencyPhraseCheckBox, "Phrase Letter Frequency");
        this.FindByFrequencyPhraseCheckBox.UseVisualStyleBackColor = false;
        this.FindByFrequencyPhraseCheckBox.CheckedChanged += new System.EventHandler(this.FindByFrequencyPhraseCheckBox_CheckedChanged);
        this.FindByFrequencyPhraseCheckBox.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // FindByFrequencySumComparisonOperatorLabel
        // 
        this.FindByFrequencySumComparisonOperatorLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByFrequencySumComparisonOperatorLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByFrequencySumComparisonOperatorLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByFrequencySumComparisonOperatorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencySumComparisonOperatorLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByFrequencySumComparisonOperatorLabel.Location = new System.Drawing.Point(69, 45);
        this.FindByFrequencySumComparisonOperatorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByFrequencySumComparisonOperatorLabel.Name = "FindByFrequencySumComparisonOperatorLabel";
        this.FindByFrequencySumComparisonOperatorLabel.Size = new System.Drawing.Size(24, 22);
        this.FindByFrequencySumComparisonOperatorLabel.TabIndex = 8;
        this.FindByFrequencySumComparisonOperatorLabel.Text = "=";
        this.FindByFrequencySumComparisonOperatorLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.FindByFrequencySumComparisonOperatorLabel, "equals to");
        this.FindByFrequencySumComparisonOperatorLabel.EnabledChanged += new System.EventHandler(this.FindByFrequencyControl_EnabledChanged);
        this.FindByFrequencySumComparisonOperatorLabel.Click += new System.EventHandler(this.FindByFrequencyComparisonOperatorLabel_Click);
        this.FindByFrequencySumComparisonOperatorLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // FindByFrequencySumNumberTypeLabel
        // 
        this.FindByFrequencySumNumberTypeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.FindByFrequencySumNumberTypeLabel.BackColor = System.Drawing.SystemColors.Window;
        this.FindByFrequencySumNumberTypeLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
        this.FindByFrequencySumNumberTypeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencySumNumberTypeLabel.ForeColor = System.Drawing.Color.Black;
        this.FindByFrequencySumNumberTypeLabel.Location = new System.Drawing.Point(196, 45);
        this.FindByFrequencySumNumberTypeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByFrequencySumNumberTypeLabel.Name = "FindByFrequencySumNumberTypeLabel";
        this.FindByFrequencySumNumberTypeLabel.Size = new System.Drawing.Size(36, 22);
        this.FindByFrequencySumNumberTypeLabel.TabIndex = 10;
        this.FindByFrequencySumNumberTypeLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByFrequencySumNumberTypeLabel.EnabledChanged += new System.EventHandler(this.FindByFrequencyControl_EnabledChanged);
        this.FindByFrequencySumNumberTypeLabel.Click += new System.EventHandler(this.FindByFrequencyNumberTypeLabel_Click);
        this.FindByFrequencySumNumberTypeLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // FindByFrequencyPhraseTextBox
        // 
        this.FindByFrequencyPhraseTextBox.AcceptsReturn = true;
        this.FindByFrequencyPhraseTextBox.BackColor = System.Drawing.Color.LavenderBlush;
        this.FindByFrequencyPhraseTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencyPhraseTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.FindByFrequencyPhraseTextBox.HideSelection = false;
        this.FindByFrequencyPhraseTextBox.Location = new System.Drawing.Point(3, 60);
        this.FindByFrequencyPhraseTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.FindByFrequencyPhraseTextBox.MaxLength = 9999999;
        this.FindByFrequencyPhraseTextBox.Multiline = true;
        this.FindByFrequencyPhraseTextBox.Name = "FindByFrequencyPhraseTextBox";
        this.FindByFrequencyPhraseTextBox.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
        this.FindByFrequencyPhraseTextBox.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
        this.FindByFrequencyPhraseTextBox.Size = new System.Drawing.Size(229, 27);
        this.FindByFrequencyPhraseTextBox.TabIndex = 7;
        this.FindByFrequencyPhraseTextBox.WordWrap = false;
        this.FindByFrequencyPhraseTextBox.TextChanged += new System.EventHandler(this.FindByFrequencyPhraseTextBox_TextChanged);
        this.FindByFrequencyPhraseTextBox.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        this.FindByFrequencyPhraseTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.TextBox_KeyDown);
        this.FindByFrequencyPhraseTextBox.KeyUp += new System.Windows.Forms.KeyEventHandler(this.FindByFrequencyPhraseTextBox_KeyUp);
        this.FindByFrequencyPhraseTextBox.MouseMove += new System.Windows.Forms.MouseEventHandler(this.FindByFrequencyPhraseTextBox_MouseMove);
        this.FindByFrequencyPhraseTextBox.MouseUp += new System.Windows.Forms.MouseEventHandler(this.FindByFrequencyPhraseTextBox_MouseUp);
        // 
        // FindByFrequencyButton
        // 
        this.FindByFrequencyButton.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByFrequencyButton.Enabled = false;
        this.FindByFrequencyButton.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencyButton.ForeColor = System.Drawing.Color.RoyalBlue;
        this.FindByFrequencyButton.Location = new System.Drawing.Point(164, 1);
        this.FindByFrequencyButton.Margin = new System.Windows.Forms.Padding(4);
        this.FindByFrequencyButton.Name = "FindByFrequencyButton";
        this.FindByFrequencyButton.Size = new System.Drawing.Size(69, 25);
        this.FindByFrequencyButton.TabIndex = 11;
        this.FindByFrequencyButton.Text = "Find";
        this.FindByFrequencyButton.UseVisualStyleBackColor = true;
        this.FindByFrequencyButton.EnabledChanged += new System.EventHandler(this.FindByFrequencyButton_EnabledChanged);
        this.FindByFrequencyButton.Click += new System.EventHandler(this.FindByFrequencyButton_Click);
        this.FindByFrequencyButton.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // FindByFrequencyLabel
        // 
        this.FindByFrequencyLabel.BackColor = System.Drawing.Color.Transparent;
        this.FindByFrequencyLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencyLabel.ForeColor = System.Drawing.Color.Navy;
        this.FindByFrequencyLabel.Location = new System.Drawing.Point(1, 5);
        this.FindByFrequencyLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByFrequencyLabel.Name = "FindByFrequencyLabel";
        this.FindByFrequencyLabel.Size = new System.Drawing.Size(237, 16);
        this.FindByFrequencyLabel.TabIndex = 0;
        this.FindByFrequencyLabel.Text = "Letter Frequency";
        this.FindByFrequencyLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // FindByFrequencyResultTypeWordsLabel
        // 
        this.FindByFrequencyResultTypeWordsLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByFrequencyResultTypeWordsLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByFrequencyResultTypeWordsLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencyResultTypeWordsLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByFrequencyResultTypeWordsLabel.Location = new System.Drawing.Point(3, 26);
        this.FindByFrequencyResultTypeWordsLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByFrequencyResultTypeWordsLabel.Name = "FindByFrequencyResultTypeWordsLabel";
        this.FindByFrequencyResultTypeWordsLabel.Size = new System.Drawing.Size(48, 17);
        this.FindByFrequencyResultTypeWordsLabel.TabIndex = 1;
        this.FindByFrequencyResultTypeWordsLabel.Text = "W";
        this.FindByFrequencyResultTypeWordsLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByFrequencyResultTypeWordsLabel.Click += new System.EventHandler(this.FindByFrequencyResultTypeWordsLabel_Click);
        this.FindByFrequencyResultTypeWordsLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // FindByFrequencyResultTypeSentencesLabel
        // 
        this.FindByFrequencyResultTypeSentencesLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByFrequencyResultTypeSentencesLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByFrequencyResultTypeSentencesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencyResultTypeSentencesLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByFrequencyResultTypeSentencesLabel.Location = new System.Drawing.Point(52, 26);
        this.FindByFrequencyResultTypeSentencesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByFrequencyResultTypeSentencesLabel.Name = "FindByFrequencyResultTypeSentencesLabel";
        this.FindByFrequencyResultTypeSentencesLabel.Size = new System.Drawing.Size(69, 17);
        this.FindByFrequencyResultTypeSentencesLabel.TabIndex = 2;
        this.FindByFrequencyResultTypeSentencesLabel.Text = "S";
        this.FindByFrequencyResultTypeSentencesLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByFrequencyResultTypeSentencesLabel.Click += new System.EventHandler(this.FindByFrequencyResultTypeSentencesLabel_Click);
        this.FindByFrequencyResultTypeSentencesLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // FindByFrequencyResultTypeVersesLabel
        // 
        this.FindByFrequencyResultTypeVersesLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByFrequencyResultTypeVersesLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByFrequencyResultTypeVersesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencyResultTypeVersesLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByFrequencyResultTypeVersesLabel.Location = new System.Drawing.Point(123, 26);
        this.FindByFrequencyResultTypeVersesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByFrequencyResultTypeVersesLabel.Name = "FindByFrequencyResultTypeVersesLabel";
        this.FindByFrequencyResultTypeVersesLabel.Size = new System.Drawing.Size(49, 17);
        this.FindByFrequencyResultTypeVersesLabel.TabIndex = 3;
        this.FindByFrequencyResultTypeVersesLabel.Text = "V";
        this.FindByFrequencyResultTypeVersesLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByFrequencyResultTypeVersesLabel.Click += new System.EventHandler(this.FindByFrequencyResultTypeVersesLabel_Click);
        this.FindByFrequencyResultTypeVersesLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // FindByFrequencyResultTypeChaptersLabel
        // 
        this.FindByFrequencyResultTypeChaptersLabel.BackColor = System.Drawing.Color.DarkGray;
        this.FindByFrequencyResultTypeChaptersLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByFrequencyResultTypeChaptersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencyResultTypeChaptersLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByFrequencyResultTypeChaptersLabel.Location = new System.Drawing.Point(173, 26);
        this.FindByFrequencyResultTypeChaptersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByFrequencyResultTypeChaptersLabel.Name = "FindByFrequencyResultTypeChaptersLabel";
        this.FindByFrequencyResultTypeChaptersLabel.Size = new System.Drawing.Size(59, 17);
        this.FindByFrequencyResultTypeChaptersLabel.TabIndex = 4;
        this.FindByFrequencyResultTypeChaptersLabel.Text = "C";
        this.FindByFrequencyResultTypeChaptersLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByFrequencyResultTypeChaptersLabel.Click += new System.EventHandler(this.FindByFrequencyResultTypeChaptersLabel_Click);
        this.FindByFrequencyResultTypeChaptersLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // FindByFrequencySearchTypeUniqueLettersLabel
        // 
        this.FindByFrequencySearchTypeUniqueLettersLabel.BackColor = System.Drawing.Color.LightGray;
        this.FindByFrequencySearchTypeUniqueLettersLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.FindByFrequencySearchTypeUniqueLettersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.FindByFrequencySearchTypeUniqueLettersLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.FindByFrequencySearchTypeUniqueLettersLabel.Location = new System.Drawing.Point(105, 44);
        this.FindByFrequencySearchTypeUniqueLettersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.FindByFrequencySearchTypeUniqueLettersLabel.Name = "FindByFrequencySearchTypeUniqueLettersLabel";
        this.FindByFrequencySearchTypeUniqueLettersLabel.Size = new System.Drawing.Size(127, 17);
        this.FindByFrequencySearchTypeUniqueLettersLabel.TabIndex = 6;
        this.FindByFrequencySearchTypeUniqueLettersLabel.Text = "NO DUPLICATES";
        this.FindByFrequencySearchTypeUniqueLettersLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.FindByFrequencySearchTypeUniqueLettersLabel.Click += new System.EventHandler(this.FindByFrequencySearchTypeUniqueLettersLabel_Click);
        this.FindByFrequencySearchTypeUniqueLettersLabel.Enter += new System.EventHandler(this.FindByFrequencyControls_Enter);
        // 
        // LetterNumberSumTextBox
        // 
        this.LetterNumberSumTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.LetterNumberSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.LetterNumberSumTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.LetterNumberSumTextBox.Location = new System.Drawing.Point(77, 137);
        this.LetterNumberSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.LetterNumberSumTextBox.Name = "LetterNumberSumTextBox";
        this.LetterNumberSumTextBox.ReadOnly = true;
        this.LetterNumberSumTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.LetterNumberSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.LetterNumberSumTextBox.TabIndex = 18;
        this.LetterNumberSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.LetterNumberSumTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.LetterNumberSumTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // WordNumberSumTextBox
        // 
        this.WordNumberSumTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.WordNumberSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.WordNumberSumTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.WordNumberSumTextBox.Location = new System.Drawing.Point(77, 113);
        this.WordNumberSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.WordNumberSumTextBox.Name = "WordNumberSumTextBox";
        this.WordNumberSumTextBox.ReadOnly = true;
        this.WordNumberSumTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.WordNumberSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.WordNumberSumTextBox.TabIndex = 15;
        this.WordNumberSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.WordNumberSumTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.WordNumberSumTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // VerseNumberSumTextBox
        // 
        this.VerseNumberSumTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.VerseNumberSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.VerseNumberSumTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.VerseNumberSumTextBox.Location = new System.Drawing.Point(77, 89);
        this.VerseNumberSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.VerseNumberSumTextBox.Name = "VerseNumberSumTextBox";
        this.VerseNumberSumTextBox.ReadOnly = true;
        this.VerseNumberSumTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.VerseNumberSumTextBox.Size = new System.Drawing.Size(72, 23);
        this.VerseNumberSumTextBox.TabIndex = 12;
        this.VerseNumberSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.VerseNumberSumTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.VerseNumberSumTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // DecimalLettersTextBox
        // 
        this.DecimalLettersTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.DecimalLettersTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.DecimalLettersTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DecimalLettersTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DecimalLettersTextBox.Location = new System.Drawing.Point(7, 137);
        this.DecimalLettersTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DecimalLettersTextBox.Name = "DecimalLettersTextBox";
        this.DecimalLettersTextBox.ReadOnly = true;
        this.DecimalLettersTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.DecimalLettersTextBox.Size = new System.Drawing.Size(72, 23);
        this.DecimalLettersTextBox.TabIndex = 17;
        this.DecimalLettersTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DecimalLettersTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.DecimalLettersTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // DecimalWordsTextBox
        // 
        this.DecimalWordsTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.DecimalWordsTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DecimalWordsTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DecimalWordsTextBox.Location = new System.Drawing.Point(7, 113);
        this.DecimalWordsTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DecimalWordsTextBox.Name = "DecimalWordsTextBox";
        this.DecimalWordsTextBox.ReadOnly = true;
        this.DecimalWordsTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.DecimalWordsTextBox.Size = new System.Drawing.Size(72, 23);
        this.DecimalWordsTextBox.TabIndex = 14;
        this.DecimalWordsTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DecimalWordsTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.DecimalWordsTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // DecimalVersesTextBox
        // 
        this.DecimalVersesTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.DecimalVersesTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DecimalVersesTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DecimalVersesTextBox.Location = new System.Drawing.Point(7, 89);
        this.DecimalVersesTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DecimalVersesTextBox.Name = "DecimalVersesTextBox";
        this.DecimalVersesTextBox.ReadOnly = true;
        this.DecimalVersesTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.DecimalVersesTextBox.Size = new System.Drawing.Size(72, 23);
        this.DecimalVersesTextBox.TabIndex = 11;
        this.DecimalVersesTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DecimalVersesTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.DecimalVersesTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // RadixValueUpLabel
        // 
        this.RadixValueUpLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.RadixValueUpLabel.BackColor = System.Drawing.SystemColors.WindowText;
        this.RadixValueUpLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.RadixValueUpLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.RadixValueUpLabel.ForeColor = System.Drawing.Color.LightSteelBlue;
        this.RadixValueUpLabel.Location = new System.Drawing.Point(143, -1);
        this.RadixValueUpLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.RadixValueUpLabel.Name = "RadixValueUpLabel";
        this.RadixValueUpLabel.Size = new System.Drawing.Size(13, 17);
        this.RadixValueUpLabel.TabIndex = 2;
        this.RadixValueUpLabel.Text = ">";
        this.RadixValueUpLabel.TextAlign = System.Drawing.ContentAlignment.TopCenter;
        this.RadixValueUpLabel.Click += new System.EventHandler(this.RadixValueUpLabel_Click);
        // 
        // RadixValueDownLabel
        // 
        this.RadixValueDownLabel.BackColor = System.Drawing.SystemColors.WindowText;
        this.RadixValueDownLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.RadixValueDownLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.RadixValueDownLabel.ForeColor = System.Drawing.Color.LightSteelBlue;
        this.RadixValueDownLabel.Location = new System.Drawing.Point(108, -1);
        this.RadixValueDownLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.RadixValueDownLabel.Name = "RadixValueDownLabel";
        this.RadixValueDownLabel.Size = new System.Drawing.Size(13, 17);
        this.RadixValueDownLabel.TabIndex = 1;
        this.RadixValueDownLabel.Text = "<";
        this.RadixValueDownLabel.TextAlign = System.Drawing.ContentAlignment.TopCenter;
        this.RadixValueDownLabel.Click += new System.EventHandler(this.RadixValueDownLabel_Click);
        // 
        // RadixLabel
        // 
        this.RadixLabel.AutoSize = true;
        this.RadixLabel.BackColor = System.Drawing.Color.Transparent;
        this.RadixLabel.Cursor = System.Windows.Forms.Cursors.Default;
        this.RadixLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.RadixLabel.ForeColor = System.Drawing.Color.Black;
        this.RadixLabel.Location = new System.Drawing.Point(91, 0);
        this.RadixLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.RadixLabel.Name = "RadixLabel";
        this.RadixLabel.Size = new System.Drawing.Size(16, 17);
        this.RadixLabel.TabIndex = 184;
        this.RadixLabel.Text = "b";
        this.ToolTip.SetToolTip(this.RadixLabel, "Number system base");
        // 
        // ValuePanel
        // 
        this.ValuePanel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.ValuePanel.Controls.Add(this.Nth4nPlus1NumberTextBox);
        this.ValuePanel.Controls.Add(this.PrimalogyARLabel);
        this.ValuePanel.Controls.Add(this.PrimalogyLabel);
        this.ValuePanel.Controls.Add(this.SumOfDivisorsTextBox);
        this.ValuePanel.Controls.Add(this.SquareDiffTextBox);
        this.ValuePanel.Controls.Add(this.SquareSumTextBox);
        this.ValuePanel.Controls.Add(this.ValueInspectLabel);
        this.ValuePanel.Controls.Add(this.NthNonAdditiveNumberTextBox);
        this.ValuePanel.Controls.Add(this.DisplayAbundantNumbersLabel);
        this.ValuePanel.Controls.Add(this.DisplayPerfectNumbersLabel);
        this.ValuePanel.Controls.Add(this.DisplayDeficientNumbersLabel);
        this.ValuePanel.Controls.Add(this.DecimalValueTextBox);
        this.ValuePanel.Controls.Add(this.ValueTextBox);
        this.ValuePanel.Controls.Add(this.EditNumerologySystemLabel);
        this.ValuePanel.Controls.Add(this.NumberKindIndexTextBox);
        this.ValuePanel.Controls.Add(this.SumOfProperDivisorsTextBox);
        this.ValuePanel.Controls.Add(this.PCIndexChainPanel);
        this.ValuePanel.Controls.Add(this.AddToChapterCNumberCheckBox);
        this.ValuePanel.Controls.Add(this.AddToVerseCDistanceCheckBox);
        this.ValuePanel.Controls.Add(this.AddToVerseCNumberCheckBox);
        this.ValuePanel.Controls.Add(this.AddToWordCDistanceCheckBox);
        this.ValuePanel.Controls.Add(this.AddToWordCNumberCheckBox);
        this.ValuePanel.Controls.Add(this.AddToVerseVDistanceCheckBox);
        this.ValuePanel.Controls.Add(this.NumerologySystemComboBox);
        this.ValuePanel.Controls.Add(this.AddToVerseVNumberCheckBox);
        this.ValuePanel.Controls.Add(this.AddToWordVDistanceCheckBox);
        this.ValuePanel.Controls.Add(this.AddToWordWDistanceCheckBox);
        this.ValuePanel.Controls.Add(this.AddToWordVNumberCheckBox);
        this.ValuePanel.Controls.Add(this.AddToWordWNumberCheckBox);
        this.ValuePanel.Controls.Add(this.DigitalRootTextBox);
        this.ValuePanel.Controls.Add(this.DigitSumTextBox);
        this.ValuePanel.Controls.Add(this.NthAdditiveNumberTextBox);
        this.ValuePanel.Controls.Add(this.NthNumberTextBox);
        this.ValuePanel.Controls.Add(this.AddToLetterCDistanceCheckBox);
        this.ValuePanel.Controls.Add(this.AddToLetterCNumberCheckBox);
        this.ValuePanel.Controls.Add(this.AddToLetterVDistanceCheckBox);
        this.ValuePanel.Controls.Add(this.AddToLetterWDistanceCheckBox);
        this.ValuePanel.Controls.Add(this.AddToLetterLDistanceCheckBox);
        this.ValuePanel.Controls.Add(this.AddToLetterVNumberCheckBox);
        this.ValuePanel.Controls.Add(this.AddToLetterWNumberCheckBox);
        this.ValuePanel.Controls.Add(this.AddToLetterLNumberCheckBox);
        this.ValuePanel.Controls.Add(this.AddPositionsAndDistancesToValueLabel);
        this.ValuePanel.Controls.Add(this.PrimeFactorsTextBox);
        this.ValuePanel.Controls.Add(this.ValueLabel);
        this.ValuePanel.Controls.Add(this.AddDistancesWithinChaptersCheckBox);
        this.ValuePanel.Controls.Add(this.AddDistancesToNextCheckBox);
        this.ValuePanel.Controls.Add(this.AddDistancesToPreviousCheckBox);
        this.ValuePanel.Controls.Add(this.AddPositionsCheckBox);
        this.ValuePanel.Location = new System.Drawing.Point(5, 161);
        this.ValuePanel.Margin = new System.Windows.Forms.Padding(4);
        this.ValuePanel.Name = "ValuePanel";
        this.ValuePanel.Size = new System.Drawing.Size(241, 327);
        this.ValuePanel.TabIndex = 5;
        // 
        // Nth4nPlus1NumberTextBox
        // 
        this.Nth4nPlus1NumberTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.Nth4nPlus1NumberTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.Nth4nPlus1NumberTextBox.ForeColor = System.Drawing.SystemColors.ControlDarkDark;
        this.Nth4nPlus1NumberTextBox.Location = new System.Drawing.Point(178, 69);
        this.Nth4nPlus1NumberTextBox.Name = "Nth4nPlus1NumberTextBox";
        this.Nth4nPlus1NumberTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.Nth4nPlus1NumberTextBox.Size = new System.Drawing.Size(59, 23);
        this.Nth4nPlus1NumberTextBox.TabIndex = 24;
        this.Nth4nPlus1NumberTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ToolTip.SetToolTip(this.Nth4nPlus1NumberTextBox, "4n+1 index");
        this.Nth4nPlus1NumberTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.Nth4nPlus1NumberTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.Nth4nPlus1NumberTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.Nth4nPlus1NumberTextBox_KeyDown);
        this.Nth4nPlus1NumberTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // SumOfDivisorsTextBox
        // 
        this.SumOfDivisorsTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.SumOfDivisorsTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.SumOfDivisorsTextBox.ForeColor = System.Drawing.SystemColors.ControlDarkDark;
        this.SumOfDivisorsTextBox.Location = new System.Drawing.Point(129, 138);
        this.SumOfDivisorsTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.SumOfDivisorsTextBox.Name = "SumOfDivisorsTextBox";
        this.SumOfDivisorsTextBox.ReadOnly = true;
        this.SumOfDivisorsTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.SumOfDivisorsTextBox.Size = new System.Drawing.Size(60, 23);
        this.SumOfDivisorsTextBox.TabIndex = 31;
        this.SumOfDivisorsTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ToolTip.SetToolTip(this.SumOfDivisorsTextBox, "Sum of divisors");
        this.SumOfDivisorsTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.SumOfDivisorsTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.SumOfDivisorsTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // SquareDiffTextBox
        // 
        this.SquareDiffTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.SquareDiffTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.SquareDiffTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.SquareDiffTextBox.ForeColor = System.Drawing.SystemColors.ControlDarkDark;
        this.SquareDiffTextBox.Location = new System.Drawing.Point(1, 92);
        this.SquareDiffTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.SquareDiffTextBox.Name = "SquareDiffTextBox";
        this.SquareDiffTextBox.ReadOnly = true;
        this.SquareDiffTextBox.Size = new System.Drawing.Size(236, 23);
        this.SquareDiffTextBox.TabIndex = 25;
        this.SquareDiffTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.SquareDiffTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.SquareDiffTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // SquareSumTextBox
        // 
        this.SquareSumTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.SquareSumTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.SquareSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.SquareSumTextBox.ForeColor = System.Drawing.SystemColors.ControlDarkDark;
        this.SquareSumTextBox.Location = new System.Drawing.Point(1, 69);
        this.SquareSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.SquareSumTextBox.Name = "SquareSumTextBox";
        this.SquareSumTextBox.ReadOnly = true;
        this.SquareSumTextBox.Size = new System.Drawing.Size(176, 23);
        this.SquareSumTextBox.TabIndex = 23;
        this.SquareSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.SquareSumTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.SquareSumTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // ValueInspectLabel
        // 
        this.ValueInspectLabel.BackColor = System.Drawing.SystemColors.Window;
        this.ValueInspectLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ValueInspectLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ValueInspectLabel.ForeColor = System.Drawing.Color.DimGray;
        this.ValueInspectLabel.Image = ((System.Drawing.Image)(resources.GetObject("ValueInspectLabel.Image")));
        this.ValueInspectLabel.Location = new System.Drawing.Point(75, 25);
        this.ValueInspectLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ValueInspectLabel.Name = "ValueInspectLabel";
        this.ValueInspectLabel.Size = new System.Drawing.Size(21, 20);
        this.ValueInspectLabel.TabIndex = 251;
        this.ToolTip.SetToolTip(this.ValueInspectLabel, "Inspect value calculations");
        this.ValueInspectLabel.Click += new System.EventHandler(this.ValueInspectLabel_Click);
        this.ValueInspectLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // NthNonAdditiveNumberTextBox
        // 
        this.NthNonAdditiveNumberTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.NthNonAdditiveNumberTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.NthNonAdditiveNumberTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.NthNonAdditiveNumberTextBox.Location = new System.Drawing.Point(158, 114);
        this.NthNonAdditiveNumberTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.NthNonAdditiveNumberTextBox.Name = "NthNonAdditiveNumberTextBox";
        this.NthNonAdditiveNumberTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.NthNonAdditiveNumberTextBox.Size = new System.Drawing.Size(79, 23);
        this.NthNonAdditiveNumberTextBox.TabIndex = 28;
        this.NthNonAdditiveNumberTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.NthNonAdditiveNumberTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.NthNonAdditiveNumberTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.NthNonAdditiveNumberTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NthNonAdditiveNumberTextBox_KeyDown);
        this.NthNonAdditiveNumberTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // DisplayAbundantNumbersLabel
        // 
        this.DisplayAbundantNumbersLabel.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(192)))), ((int)(((byte)(255)))));
        this.DisplayAbundantNumbersLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DisplayAbundantNumbersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DisplayAbundantNumbersLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.DisplayAbundantNumbersLabel.Location = new System.Drawing.Point(3, 153);
        this.DisplayAbundantNumbersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DisplayAbundantNumbersLabel.Name = "DisplayAbundantNumbersLabel";
        this.DisplayAbundantNumbersLabel.Size = new System.Drawing.Size(7, 7);
        this.DisplayAbundantNumbersLabel.TabIndex = 30;
        this.DisplayAbundantNumbersLabel.Tag = "";
        this.DisplayAbundantNumbersLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.ToolTip.SetToolTip(this.DisplayAbundantNumbersLabel, "Display abundant numbers");
        this.DisplayAbundantNumbersLabel.Click += new System.EventHandler(this.DisplayAbundantNumbersLabel_Click);
        // 
        // DisplayPerfectNumbersLabel
        // 
        this.DisplayPerfectNumbersLabel.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(128)))), ((int)(((byte)(255)))));
        this.DisplayPerfectNumbersLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DisplayPerfectNumbersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DisplayPerfectNumbersLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.DisplayPerfectNumbersLabel.Location = new System.Drawing.Point(3, 146);
        this.DisplayPerfectNumbersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DisplayPerfectNumbersLabel.Name = "DisplayPerfectNumbersLabel";
        this.DisplayPerfectNumbersLabel.Size = new System.Drawing.Size(7, 7);
        this.DisplayPerfectNumbersLabel.TabIndex = 29;
        this.DisplayPerfectNumbersLabel.Tag = "";
        this.DisplayPerfectNumbersLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.ToolTip.SetToolTip(this.DisplayPerfectNumbersLabel, "Display perfect numbers");
        this.DisplayPerfectNumbersLabel.Click += new System.EventHandler(this.DisplayPerfectNumbersLabel_Click);
        // 
        // DisplayDeficientNumbersLabel
        // 
        this.DisplayDeficientNumbersLabel.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(240)))), ((int)(((byte)(255)))));
        this.DisplayDeficientNumbersLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DisplayDeficientNumbersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DisplayDeficientNumbersLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.DisplayDeficientNumbersLabel.Location = new System.Drawing.Point(3, 139);
        this.DisplayDeficientNumbersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DisplayDeficientNumbersLabel.Name = "DisplayDeficientNumbersLabel";
        this.DisplayDeficientNumbersLabel.Size = new System.Drawing.Size(7, 7);
        this.DisplayDeficientNumbersLabel.TabIndex = 255;
        this.DisplayDeficientNumbersLabel.Tag = "";
        this.DisplayDeficientNumbersLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.ToolTip.SetToolTip(this.DisplayDeficientNumbersLabel, "Display deficient numbers");
        this.DisplayDeficientNumbersLabel.Click += new System.EventHandler(this.DisplayDeficientNumbersLabel_Click);
        // 
        // DecimalValueTextBox
        // 
        this.DecimalValueTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.DecimalValueTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DecimalValueTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DecimalValueTextBox.Location = new System.Drawing.Point(1, 23);
        this.DecimalValueTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DecimalValueTextBox.Name = "DecimalValueTextBox";
        this.DecimalValueTextBox.ReadOnly = true;
        this.DecimalValueTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.DecimalValueTextBox.Size = new System.Drawing.Size(72, 23);
        this.DecimalValueTextBox.TabIndex = 20;
        this.DecimalValueTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DecimalValueTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.DecimalValueTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // EditNumerologySystemLabel
        // 
        this.EditNumerologySystemLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.EditNumerologySystemLabel.BackColor = System.Drawing.SystemColors.Control;
        this.EditNumerologySystemLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.EditNumerologySystemLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.EditNumerologySystemLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.EditNumerologySystemLabel.Image = ((System.Drawing.Image)(resources.GetObject("EditNumerologySystemLabel.Image")));
        this.EditNumerologySystemLabel.Location = new System.Drawing.Point(215, 1);
        this.EditNumerologySystemLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.EditNumerologySystemLabel.Name = "EditNumerologySystemLabel";
        this.EditNumerologySystemLabel.Size = new System.Drawing.Size(21, 20);
        this.EditNumerologySystemLabel.TabIndex = 254;
        this.EditNumerologySystemLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.ToolTip.SetToolTip(this.EditNumerologySystemLabel, "Edit letter valuation system");
        this.EditNumerologySystemLabel.Click += new System.EventHandler(this.EditNumerologySystemLabel_Click);
        this.EditNumerologySystemLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // NumberKindIndexTextBox
        // 
        this.NumberKindIndexTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.NumberKindIndexTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.NumberKindIndexTextBox.ForeColor = System.Drawing.SystemColors.ControlDarkDark;
        this.NumberKindIndexTextBox.Location = new System.Drawing.Point(9, 138);
        this.NumberKindIndexTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.NumberKindIndexTextBox.Name = "NumberKindIndexTextBox";
        this.NumberKindIndexTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.NumberKindIndexTextBox.Size = new System.Drawing.Size(60, 23);
        this.NumberKindIndexTextBox.TabIndex = 29;
        this.NumberKindIndexTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ToolTip.SetToolTip(this.NumberKindIndexTextBox, "Deficient number index");
        this.NumberKindIndexTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.NumberKindIndexTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.NumberKindIndexTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NumberKindIndexTextBox_KeyDown);
        this.NumberKindIndexTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // SumOfProperDivisorsTextBox
        // 
        this.SumOfProperDivisorsTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.SumOfProperDivisorsTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.SumOfProperDivisorsTextBox.ForeColor = System.Drawing.SystemColors.ControlDarkDark;
        this.SumOfProperDivisorsTextBox.Location = new System.Drawing.Point(69, 138);
        this.SumOfProperDivisorsTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.SumOfProperDivisorsTextBox.Name = "SumOfProperDivisorsTextBox";
        this.SumOfProperDivisorsTextBox.ReadOnly = true;
        this.SumOfProperDivisorsTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.SumOfProperDivisorsTextBox.Size = new System.Drawing.Size(60, 23);
        this.SumOfProperDivisorsTextBox.TabIndex = 30;
        this.SumOfProperDivisorsTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.ToolTip.SetToolTip(this.SumOfProperDivisorsTextBox, "Sum of proper divisors");
        this.SumOfProperDivisorsTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.SumOfProperDivisorsTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.SumOfProperDivisorsTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // PCIndexChainPanel
        // 
        this.PCIndexChainPanel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.PCIndexChainPanel.BackColor = System.Drawing.Color.LightSteelBlue;
        this.PCIndexChainPanel.Controls.Add(this.PCIndexChainLabel);
        this.PCIndexChainPanel.Controls.Add(this.IndexChainLengthTextBox);
        this.PCIndexChainPanel.Controls.Add(this.CPIndexChainL2RTextBox);
        this.PCIndexChainPanel.Controls.Add(this.PCIndexChainR2LTextBox);
        this.PCIndexChainPanel.Controls.Add(this.CPIndexChainR2LTextBox);
        this.PCIndexChainPanel.Controls.Add(this.PCIndexChainL2RTextBox);
        this.PCIndexChainPanel.Location = new System.Drawing.Point(3, 162);
        this.PCIndexChainPanel.Margin = new System.Windows.Forms.Padding(4);
        this.PCIndexChainPanel.Name = "PCIndexChainPanel";
        this.PCIndexChainPanel.Size = new System.Drawing.Size(240, 28);
        this.PCIndexChainPanel.TabIndex = 229;
        // 
        // PCIndexChainLabel
        // 
        this.PCIndexChainLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.PCIndexChainLabel.BackColor = System.Drawing.Color.Pink;
        this.PCIndexChainLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PCIndexChainLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PCIndexChainLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.PCIndexChainLabel.Location = new System.Drawing.Point(231, 1);
        this.PCIndexChainLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PCIndexChainLabel.Name = "PCIndexChainLabel";
        this.PCIndexChainLabel.Size = new System.Drawing.Size(5, 5);
        this.PCIndexChainLabel.TabIndex = 155;
        this.PCIndexChainLabel.Tag = "http://eng.bu.ac.th/bucroccs/index.php/research/14-people-detail/19-dr-waleed-s-m" +
"ohammed";
        this.PCIndexChainLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.ToolTip.SetToolTip(this.PCIndexChainLabel, "©2016 Dr Waleed S. Mohammed");
        this.PCIndexChainLabel.Click += new System.EventHandler(this.LinkLabel_Click);
        // 
        // IndexChainLengthTextBox
        // 
        this.IndexChainLengthTextBox.BackColor = System.Drawing.Color.Lavender;
        this.IndexChainLengthTextBox.Cursor = System.Windows.Forms.Cursors.Hand;
        this.IndexChainLengthTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.IndexChainLengthTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.IndexChainLengthTextBox.Location = new System.Drawing.Point(211, 0);
        this.IndexChainLengthTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.IndexChainLengthTextBox.Name = "IndexChainLengthTextBox";
        this.IndexChainLengthTextBox.ReadOnly = true;
        this.IndexChainLengthTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.IndexChainLengthTextBox.Size = new System.Drawing.Size(25, 23);
        this.IndexChainLengthTextBox.TabIndex = 38;
        this.IndexChainLengthTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.IndexChainLengthTextBox.Click += new System.EventHandler(this.IndexChainLengthTextBox_Click);
        this.IndexChainLengthTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.IndexChainLengthTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // CPIndexChainL2RTextBox
        // 
        this.CPIndexChainL2RTextBox.BackColor = System.Drawing.Color.Lavender;
        this.CPIndexChainL2RTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.CPIndexChainL2RTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.CPIndexChainL2RTextBox.Location = new System.Drawing.Point(106, 0);
        this.CPIndexChainL2RTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.CPIndexChainL2RTextBox.Name = "CPIndexChainL2RTextBox";
        this.CPIndexChainL2RTextBox.ReadOnly = true;
        this.CPIndexChainL2RTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.CPIndexChainL2RTextBox.Size = new System.Drawing.Size(52, 23);
        this.CPIndexChainL2RTextBox.TabIndex = 36;
        this.CPIndexChainL2RTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.CPIndexChainL2RTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.CPIndexChainL2RTextBox.TextChanged += new System.EventHandler(this.CPIndexChainL2RTextBox_TextChanged);
        this.CPIndexChainL2RTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.CPIndexChainL2RTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // PCIndexChainR2LTextBox
        // 
        this.PCIndexChainR2LTextBox.BackColor = System.Drawing.Color.Lavender;
        this.PCIndexChainR2LTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PCIndexChainR2LTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.PCIndexChainR2LTextBox.Location = new System.Drawing.Point(53, 0);
        this.PCIndexChainR2LTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.PCIndexChainR2LTextBox.Name = "PCIndexChainR2LTextBox";
        this.PCIndexChainR2LTextBox.ReadOnly = true;
        this.PCIndexChainR2LTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.PCIndexChainR2LTextBox.Size = new System.Drawing.Size(52, 23);
        this.PCIndexChainR2LTextBox.TabIndex = 35;
        this.PCIndexChainR2LTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.PCIndexChainR2LTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.PCIndexChainR2LTextBox.TextChanged += new System.EventHandler(this.PCIndexChainR2LTextBox_TextChanged);
        this.PCIndexChainR2LTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.PCIndexChainR2LTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // CPIndexChainR2LTextBox
        // 
        this.CPIndexChainR2LTextBox.BackColor = System.Drawing.Color.Lavender;
        this.CPIndexChainR2LTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.CPIndexChainR2LTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.CPIndexChainR2LTextBox.Location = new System.Drawing.Point(159, 0);
        this.CPIndexChainR2LTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.CPIndexChainR2LTextBox.Name = "CPIndexChainR2LTextBox";
        this.CPIndexChainR2LTextBox.ReadOnly = true;
        this.CPIndexChainR2LTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.CPIndexChainR2LTextBox.Size = new System.Drawing.Size(52, 23);
        this.CPIndexChainR2LTextBox.TabIndex = 37;
        this.CPIndexChainR2LTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.CPIndexChainR2LTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.CPIndexChainR2LTextBox.TextChanged += new System.EventHandler(this.CPIndexChainR2LTextBox_TextChanged);
        this.CPIndexChainR2LTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.CPIndexChainR2LTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // PCIndexChainL2RTextBox
        // 
        this.PCIndexChainL2RTextBox.BackColor = System.Drawing.Color.Lavender;
        this.PCIndexChainL2RTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PCIndexChainL2RTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.PCIndexChainL2RTextBox.Location = new System.Drawing.Point(0, 0);
        this.PCIndexChainL2RTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.PCIndexChainL2RTextBox.Name = "PCIndexChainL2RTextBox";
        this.PCIndexChainL2RTextBox.ReadOnly = true;
        this.PCIndexChainL2RTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.PCIndexChainL2RTextBox.Size = new System.Drawing.Size(52, 23);
        this.PCIndexChainL2RTextBox.TabIndex = 34;
        this.PCIndexChainL2RTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.PCIndexChainL2RTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.PCIndexChainL2RTextBox.TextChanged += new System.EventHandler(this.PCIndexChainL2RTextBox_TextChanged);
        this.PCIndexChainL2RTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.PCIndexChainL2RTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // AddToChapterCNumberCheckBox
        // 
        this.AddToChapterCNumberCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToChapterCNumberCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToChapterCNumberCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToChapterCNumberCheckBox.Location = new System.Drawing.Point(185, 305);
        this.AddToChapterCNumberCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToChapterCNumberCheckBox.Name = "AddToChapterCNumberCheckBox";
        this.AddToChapterCNumberCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToChapterCNumberCheckBox.TabIndex = 138;
        this.AddToChapterCNumberCheckBox.Text = "C";
        this.AddToChapterCNumberCheckBox.UseVisualStyleBackColor = false;
        this.AddToChapterCNumberCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToChapterCNumberCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToChapterCNumberCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToVerseCDistanceCheckBox
        // 
        this.AddToVerseCDistanceCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToVerseCDistanceCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToVerseCDistanceCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToVerseCDistanceCheckBox.Location = new System.Drawing.Point(185, 287);
        this.AddToVerseCDistanceCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToVerseCDistanceCheckBox.Name = "AddToVerseCDistanceCheckBox";
        this.AddToVerseCDistanceCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToVerseCDistanceCheckBox.TabIndex = 137;
        this.AddToVerseCDistanceCheckBox.Text = "∆C";
        this.AddToVerseCDistanceCheckBox.UseVisualStyleBackColor = false;
        this.AddToVerseCDistanceCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToVerseCDistanceCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToVerseCDistanceCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToVerseCDistanceCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToVerseCNumberCheckBox
        // 
        this.AddToVerseCNumberCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToVerseCNumberCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToVerseCNumberCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToVerseCNumberCheckBox.Location = new System.Drawing.Point(185, 271);
        this.AddToVerseCNumberCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToVerseCNumberCheckBox.Name = "AddToVerseCNumberCheckBox";
        this.AddToVerseCNumberCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToVerseCNumberCheckBox.TabIndex = 135;
        this.AddToVerseCNumberCheckBox.Text = "C";
        this.AddToVerseCNumberCheckBox.UseVisualStyleBackColor = false;
        this.AddToVerseCNumberCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToVerseCNumberCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToVerseCNumberCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToVerseCNumberCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToWordCDistanceCheckBox
        // 
        this.AddToWordCDistanceCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToWordCDistanceCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToWordCDistanceCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToWordCDistanceCheckBox.Location = new System.Drawing.Point(185, 255);
        this.AddToWordCDistanceCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToWordCDistanceCheckBox.Name = "AddToWordCDistanceCheckBox";
        this.AddToWordCDistanceCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToWordCDistanceCheckBox.TabIndex = 133;
        this.AddToWordCDistanceCheckBox.Text = "∆C";
        this.AddToWordCDistanceCheckBox.UseVisualStyleBackColor = false;
        this.AddToWordCDistanceCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToWordCDistanceCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToWordCDistanceCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToWordCDistanceCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToWordCNumberCheckBox
        // 
        this.AddToWordCNumberCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToWordCNumberCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToWordCNumberCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToWordCNumberCheckBox.Location = new System.Drawing.Point(185, 239);
        this.AddToWordCNumberCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToWordCNumberCheckBox.Name = "AddToWordCNumberCheckBox";
        this.AddToWordCNumberCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToWordCNumberCheckBox.TabIndex = 130;
        this.AddToWordCNumberCheckBox.Text = "C";
        this.AddToWordCNumberCheckBox.UseVisualStyleBackColor = false;
        this.AddToWordCNumberCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToWordCNumberCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToWordCNumberCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToWordCNumberCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToVerseVDistanceCheckBox
        // 
        this.AddToVerseVDistanceCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToVerseVDistanceCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToVerseVDistanceCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToVerseVDistanceCheckBox.Location = new System.Drawing.Point(127, 287);
        this.AddToVerseVDistanceCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToVerseVDistanceCheckBox.Name = "AddToVerseVDistanceCheckBox";
        this.AddToVerseVDistanceCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToVerseVDistanceCheckBox.TabIndex = 136;
        this.AddToVerseVDistanceCheckBox.Text = "∆V";
        this.AddToVerseVDistanceCheckBox.UseVisualStyleBackColor = false;
        this.AddToVerseVDistanceCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToVerseVDistanceCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToVerseVDistanceCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToVerseVDistanceCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // NumerologySystemComboBox
        // 
        this.NumerologySystemComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.NumerologySystemComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.NumerologySystemComboBox.FormattingEnabled = true;
        this.NumerologySystemComboBox.IntegralHeight = false;
        this.NumerologySystemComboBox.Location = new System.Drawing.Point(8, 0);
        this.NumerologySystemComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.NumerologySystemComboBox.Name = "NumerologySystemComboBox";
        this.NumerologySystemComboBox.Size = new System.Drawing.Size(231, 23);
        this.NumerologySystemComboBox.TabIndex = 7;
        this.NumerologySystemComboBox.DropDown += new System.EventHandler(this.NumerologySystemComboBox_DropDown);
        this.NumerologySystemComboBox.SelectedIndexChanged += new System.EventHandler(this.NumerologySystemComboBox_SelectedIndexChanged);
        this.NumerologySystemComboBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToVerseVNumberCheckBox
        // 
        this.AddToVerseVNumberCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToVerseVNumberCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToVerseVNumberCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToVerseVNumberCheckBox.Location = new System.Drawing.Point(127, 271);
        this.AddToVerseVNumberCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToVerseVNumberCheckBox.Name = "AddToVerseVNumberCheckBox";
        this.AddToVerseVNumberCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToVerseVNumberCheckBox.TabIndex = 134;
        this.AddToVerseVNumberCheckBox.Text = "V";
        this.AddToVerseVNumberCheckBox.UseVisualStyleBackColor = false;
        this.AddToVerseVNumberCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToVerseVNumberCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToVerseVNumberCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToVerseVNumberCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToWordVDistanceCheckBox
        // 
        this.AddToWordVDistanceCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToWordVDistanceCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToWordVDistanceCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToWordVDistanceCheckBox.Location = new System.Drawing.Point(127, 255);
        this.AddToWordVDistanceCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToWordVDistanceCheckBox.Name = "AddToWordVDistanceCheckBox";
        this.AddToWordVDistanceCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToWordVDistanceCheckBox.TabIndex = 132;
        this.AddToWordVDistanceCheckBox.Text = "∆V";
        this.AddToWordVDistanceCheckBox.UseVisualStyleBackColor = false;
        this.AddToWordVDistanceCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToWordVDistanceCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToWordVDistanceCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToWordVDistanceCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToWordWDistanceCheckBox
        // 
        this.AddToWordWDistanceCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToWordWDistanceCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToWordWDistanceCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToWordWDistanceCheckBox.Location = new System.Drawing.Point(68, 255);
        this.AddToWordWDistanceCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToWordWDistanceCheckBox.Name = "AddToWordWDistanceCheckBox";
        this.AddToWordWDistanceCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToWordWDistanceCheckBox.TabIndex = 131;
        this.AddToWordWDistanceCheckBox.Text = "∆W";
        this.AddToWordWDistanceCheckBox.UseVisualStyleBackColor = false;
        this.AddToWordWDistanceCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToWordWDistanceCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToWordWDistanceCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToWordWDistanceCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToWordVNumberCheckBox
        // 
        this.AddToWordVNumberCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToWordVNumberCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToWordVNumberCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToWordVNumberCheckBox.Location = new System.Drawing.Point(127, 239);
        this.AddToWordVNumberCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToWordVNumberCheckBox.Name = "AddToWordVNumberCheckBox";
        this.AddToWordVNumberCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToWordVNumberCheckBox.TabIndex = 129;
        this.AddToWordVNumberCheckBox.Text = "V";
        this.AddToWordVNumberCheckBox.UseVisualStyleBackColor = false;
        this.AddToWordVNumberCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToWordVNumberCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToWordVNumberCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToWordVNumberCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToWordWNumberCheckBox
        // 
        this.AddToWordWNumberCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToWordWNumberCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToWordWNumberCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToWordWNumberCheckBox.Location = new System.Drawing.Point(68, 239);
        this.AddToWordWNumberCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToWordWNumberCheckBox.Name = "AddToWordWNumberCheckBox";
        this.AddToWordWNumberCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToWordWNumberCheckBox.TabIndex = 128;
        this.AddToWordWNumberCheckBox.Text = "W";
        this.AddToWordWNumberCheckBox.UseVisualStyleBackColor = false;
        this.AddToWordWNumberCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToWordWNumberCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToWordWNumberCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToWordWNumberCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // DigitalRootTextBox
        // 
        this.DigitalRootTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.DigitalRootTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.DigitalRootTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DigitalRootTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DigitalRootTextBox.Location = new System.Drawing.Point(218, 138);
        this.DigitalRootTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DigitalRootTextBox.Name = "DigitalRootTextBox";
        this.DigitalRootTextBox.ReadOnly = true;
        this.DigitalRootTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.DigitalRootTextBox.Size = new System.Drawing.Size(20, 23);
        this.DigitalRootTextBox.TabIndex = 33;
        this.DigitalRootTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DigitalRootTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DigitalRootTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.DigitalRootTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // DigitSumTextBox
        // 
        this.DigitSumTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.DigitSumTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.DigitSumTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DigitSumTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.DigitSumTextBox.Location = new System.Drawing.Point(189, 138);
        this.DigitSumTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.DigitSumTextBox.Name = "DigitSumTextBox";
        this.DigitSumTextBox.ReadOnly = true;
        this.DigitSumTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.DigitSumTextBox.Size = new System.Drawing.Size(29, 23);
        this.DigitSumTextBox.TabIndex = 32;
        this.DigitSumTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.DigitSumTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.DigitSumTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.DigitSumTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // NthAdditiveNumberTextBox
        // 
        this.NthAdditiveNumberTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.NthAdditiveNumberTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.NthAdditiveNumberTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.NthAdditiveNumberTextBox.Location = new System.Drawing.Point(79, 114);
        this.NthAdditiveNumberTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.NthAdditiveNumberTextBox.Name = "NthAdditiveNumberTextBox";
        this.NthAdditiveNumberTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.NthAdditiveNumberTextBox.Size = new System.Drawing.Size(80, 23);
        this.NthAdditiveNumberTextBox.TabIndex = 27;
        this.NthAdditiveNumberTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.NthAdditiveNumberTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.NthAdditiveNumberTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.NthAdditiveNumberTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NthAdditiveNumberTextBox_KeyDown);
        this.NthAdditiveNumberTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // NthNumberTextBox
        // 
        this.NthNumberTextBox.BackColor = System.Drawing.SystemColors.Window;
        this.NthNumberTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.NthNumberTextBox.Location = new System.Drawing.Point(1, 114);
        this.NthNumberTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.NthNumberTextBox.Name = "NthNumberTextBox";
        this.NthNumberTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.NthNumberTextBox.Size = new System.Drawing.Size(79, 23);
        this.NthNumberTextBox.TabIndex = 26;
        this.NthNumberTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;
        this.NthNumberTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.NthNumberTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.NthNumberTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.NthNumberTextBox_KeyDown);
        this.NthNumberTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // AddToLetterCDistanceCheckBox
        // 
        this.AddToLetterCDistanceCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToLetterCDistanceCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToLetterCDistanceCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToLetterCDistanceCheckBox.Location = new System.Drawing.Point(185, 222);
        this.AddToLetterCDistanceCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToLetterCDistanceCheckBox.Name = "AddToLetterCDistanceCheckBox";
        this.AddToLetterCDistanceCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToLetterCDistanceCheckBox.TabIndex = 127;
        this.AddToLetterCDistanceCheckBox.Text = "∆C";
        this.AddToLetterCDistanceCheckBox.UseVisualStyleBackColor = false;
        this.AddToLetterCDistanceCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterCDistanceCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterCDistanceCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToLetterCDistanceCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToLetterCNumberCheckBox
        // 
        this.AddToLetterCNumberCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToLetterCNumberCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToLetterCNumberCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToLetterCNumberCheckBox.Location = new System.Drawing.Point(185, 206);
        this.AddToLetterCNumberCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToLetterCNumberCheckBox.Name = "AddToLetterCNumberCheckBox";
        this.AddToLetterCNumberCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToLetterCNumberCheckBox.TabIndex = 123;
        this.AddToLetterCNumberCheckBox.Text = "C";
        this.AddToLetterCNumberCheckBox.UseVisualStyleBackColor = false;
        this.AddToLetterCNumberCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterCNumberCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterCNumberCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToLetterCNumberCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToLetterVDistanceCheckBox
        // 
        this.AddToLetterVDistanceCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToLetterVDistanceCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToLetterVDistanceCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToLetterVDistanceCheckBox.Location = new System.Drawing.Point(127, 222);
        this.AddToLetterVDistanceCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToLetterVDistanceCheckBox.Name = "AddToLetterVDistanceCheckBox";
        this.AddToLetterVDistanceCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToLetterVDistanceCheckBox.TabIndex = 126;
        this.AddToLetterVDistanceCheckBox.Text = "∆V";
        this.AddToLetterVDistanceCheckBox.UseVisualStyleBackColor = false;
        this.AddToLetterVDistanceCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterVDistanceCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterVDistanceCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToLetterVDistanceCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToLetterWDistanceCheckBox
        // 
        this.AddToLetterWDistanceCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToLetterWDistanceCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToLetterWDistanceCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToLetterWDistanceCheckBox.Location = new System.Drawing.Point(68, 222);
        this.AddToLetterWDistanceCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToLetterWDistanceCheckBox.Name = "AddToLetterWDistanceCheckBox";
        this.AddToLetterWDistanceCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToLetterWDistanceCheckBox.TabIndex = 125;
        this.AddToLetterWDistanceCheckBox.Text = "∆W";
        this.AddToLetterWDistanceCheckBox.UseVisualStyleBackColor = false;
        this.AddToLetterWDistanceCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterWDistanceCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterWDistanceCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToLetterWDistanceCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToLetterLDistanceCheckBox
        // 
        this.AddToLetterLDistanceCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToLetterLDistanceCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToLetterLDistanceCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToLetterLDistanceCheckBox.Location = new System.Drawing.Point(9, 222);
        this.AddToLetterLDistanceCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToLetterLDistanceCheckBox.Name = "AddToLetterLDistanceCheckBox";
        this.AddToLetterLDistanceCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToLetterLDistanceCheckBox.TabIndex = 124;
        this.AddToLetterLDistanceCheckBox.Text = "∆L";
        this.AddToLetterLDistanceCheckBox.UseVisualStyleBackColor = false;
        this.AddToLetterLDistanceCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterLDistanceCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterLDistanceCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToLetterLDistanceCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToLetterVNumberCheckBox
        // 
        this.AddToLetterVNumberCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToLetterVNumberCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToLetterVNumberCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToLetterVNumberCheckBox.Location = new System.Drawing.Point(127, 206);
        this.AddToLetterVNumberCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToLetterVNumberCheckBox.Name = "AddToLetterVNumberCheckBox";
        this.AddToLetterVNumberCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToLetterVNumberCheckBox.TabIndex = 122;
        this.AddToLetterVNumberCheckBox.Text = "V";
        this.AddToLetterVNumberCheckBox.UseVisualStyleBackColor = false;
        this.AddToLetterVNumberCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterVNumberCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterVNumberCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToLetterVNumberCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToLetterWNumberCheckBox
        // 
        this.AddToLetterWNumberCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToLetterWNumberCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToLetterWNumberCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToLetterWNumberCheckBox.Location = new System.Drawing.Point(68, 206);
        this.AddToLetterWNumberCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToLetterWNumberCheckBox.Name = "AddToLetterWNumberCheckBox";
        this.AddToLetterWNumberCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToLetterWNumberCheckBox.TabIndex = 121;
        this.AddToLetterWNumberCheckBox.Text = "W";
        this.AddToLetterWNumberCheckBox.UseVisualStyleBackColor = false;
        this.AddToLetterWNumberCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterWNumberCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterWNumberCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToLetterWNumberCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddToLetterLNumberCheckBox
        // 
        this.AddToLetterLNumberCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddToLetterLNumberCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddToLetterLNumberCheckBox.ForeColor = System.Drawing.Color.Black;
        this.AddToLetterLNumberCheckBox.Location = new System.Drawing.Point(9, 206);
        this.AddToLetterLNumberCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.AddToLetterLNumberCheckBox.Name = "AddToLetterLNumberCheckBox";
        this.AddToLetterLNumberCheckBox.Size = new System.Drawing.Size(56, 21);
        this.AddToLetterLNumberCheckBox.TabIndex = 120;
        this.AddToLetterLNumberCheckBox.Text = "L";
        this.AddToLetterLNumberCheckBox.UseVisualStyleBackColor = false;
        this.AddToLetterLNumberCheckBox.CheckedChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterLNumberCheckBox.EnabledChanged += new System.EventHandler(this.AddToControlCheckBox_CheckedChanged);
        this.AddToLetterLNumberCheckBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddToLetterLNumberCheckBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // AddPositionsAndDistancesToValueLabel
        // 
        this.AddPositionsAndDistancesToValueLabel.AutoSize = true;
        this.AddPositionsAndDistancesToValueLabel.BackColor = System.Drawing.Color.Transparent;
        this.AddPositionsAndDistancesToValueLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddPositionsAndDistancesToValueLabel.ForeColor = System.Drawing.Color.Black;
        this.AddPositionsAndDistancesToValueLabel.Location = new System.Drawing.Point(1, 187);
        this.AddPositionsAndDistancesToValueLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.AddPositionsAndDistancesToValueLabel.Name = "AddPositionsAndDistancesToValueLabel";
        this.AddPositionsAndDistancesToValueLabel.Size = new System.Drawing.Size(239, 17);
        this.AddPositionsAndDistancesToValueLabel.TabIndex = 0;
        this.AddPositionsAndDistancesToValueLabel.Text = "Add positions and distances to value";
        this.AddPositionsAndDistancesToValueLabel.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.AddPositionsAndDistancesToValueLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // PrimeFactorsTextBox
        // 
        this.PrimeFactorsTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.PrimeFactorsTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.PrimeFactorsTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PrimeFactorsTextBox.ForeColor = System.Drawing.SystemColors.ControlDarkDark;
        this.PrimeFactorsTextBox.Location = new System.Drawing.Point(1, 46);
        this.PrimeFactorsTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.PrimeFactorsTextBox.Name = "PrimeFactorsTextBox";
        this.PrimeFactorsTextBox.ReadOnly = true;
        this.PrimeFactorsTextBox.Size = new System.Drawing.Size(236, 23);
        this.PrimeFactorsTextBox.TabIndex = 22;
        this.PrimeFactorsTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.PrimeFactorsTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.PrimeFactorsTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // ValueLabel
        // 
        this.ValueLabel.BackColor = System.Drawing.Color.Transparent;
        this.ValueLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.ValueLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ValueLabel.Location = new System.Drawing.Point(-1, 25);
        this.ValueLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.ValueLabel.Name = "ValueLabel";
        this.ValueLabel.Size = new System.Drawing.Size(116, 18);
        this.ValueLabel.TabIndex = 103;
        this.ValueLabel.Text = "Value";
        this.ValueLabel.Click += new System.EventHandler(this.ValueLabel_Click);
        // 
        // AddDistancesWithinChaptersCheckBox
        // 
        this.AddDistancesWithinChaptersCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddDistancesWithinChaptersCheckBox.Checked = true;
        this.AddDistancesWithinChaptersCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
        this.AddDistancesWithinChaptersCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddDistancesWithinChaptersCheckBox.ForeColor = System.Drawing.Color.Maroon;
        this.AddDistancesWithinChaptersCheckBox.Location = new System.Drawing.Point(9, 306);
        this.AddDistancesWithinChaptersCheckBox.Name = "AddDistancesWithinChaptersCheckBox";
        this.AddDistancesWithinChaptersCheckBox.Size = new System.Drawing.Size(172, 18);
        this.AddDistancesWithinChaptersCheckBox.TabIndex = 143;
        this.AddDistancesWithinChaptersCheckBox.Text = "∆ in chapters";
        this.AddDistancesWithinChaptersCheckBox.UseVisualStyleBackColor = false;
        this.AddDistancesWithinChaptersCheckBox.CheckedChanged += new System.EventHandler(this.AddDistancesWithinChaptersCheckBox_CheckedChanged);
        // 
        // AddDistancesToNextCheckBox
        // 
        this.AddDistancesToNextCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddDistancesToNextCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddDistancesToNextCheckBox.ForeColor = System.Drawing.Color.Maroon;
        this.AddDistancesToNextCheckBox.Location = new System.Drawing.Point(9, 290);
        this.AddDistancesToNextCheckBox.Name = "AddDistancesToNextCheckBox";
        this.AddDistancesToNextCheckBox.Size = new System.Drawing.Size(172, 16);
        this.AddDistancesToNextCheckBox.TabIndex = 142;
        this.AddDistancesToNextCheckBox.Text = "∆→";
        this.AddDistancesToNextCheckBox.UseVisualStyleBackColor = false;
        this.AddDistancesToNextCheckBox.CheckedChanged += new System.EventHandler(this.AddDistancesToNextCheckBox_CheckedChanged);
        // 
        // AddDistancesToPreviousCheckBox
        // 
        this.AddDistancesToPreviousCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddDistancesToPreviousCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddDistancesToPreviousCheckBox.ForeColor = System.Drawing.Color.Maroon;
        this.AddDistancesToPreviousCheckBox.Location = new System.Drawing.Point(9, 274);
        this.AddDistancesToPreviousCheckBox.Name = "AddDistancesToPreviousCheckBox";
        this.AddDistancesToPreviousCheckBox.Size = new System.Drawing.Size(172, 16);
        this.AddDistancesToPreviousCheckBox.TabIndex = 141;
        this.AddDistancesToPreviousCheckBox.Text = "∆←";
        this.AddDistancesToPreviousCheckBox.UseVisualStyleBackColor = false;
        this.AddDistancesToPreviousCheckBox.CheckedChanged += new System.EventHandler(this.AddDistancesToPreviousCheckBox_CheckedChanged);
        // 
        // AddPositionsCheckBox
        // 
        this.AddPositionsCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.AddPositionsCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.AddPositionsCheckBox.ForeColor = System.Drawing.Color.Maroon;
        this.AddPositionsCheckBox.Location = new System.Drawing.Point(9, 258);
        this.AddPositionsCheckBox.Name = "AddPositionsCheckBox";
        this.AddPositionsCheckBox.Size = new System.Drawing.Size(172, 16);
        this.AddPositionsCheckBox.TabIndex = 140;
        this.AddPositionsCheckBox.Text = "Pos";
        this.AddPositionsCheckBox.UseVisualStyleBackColor = false;
        this.AddPositionsCheckBox.CheckedChanged += new System.EventHandler(this.AddPositionsCheckBox_CheckedChanged);
        // 
        // VersesTextBox
        // 
        this.VersesTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.VersesTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.VersesTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.VersesTextBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.VersesTextBox.Location = new System.Drawing.Point(148, 89);
        this.VersesTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.VersesTextBox.Name = "VersesTextBox";
        this.VersesTextBox.ReadOnly = true;
        this.VersesTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.VersesTextBox.Size = new System.Drawing.Size(95, 23);
        this.VersesTextBox.TabIndex = 13;
        this.VersesTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
        this.VersesTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.VersesTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.VersesTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // LettersTextBox
        // 
        this.LettersTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.LettersTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.LettersTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.LettersTextBox.Location = new System.Drawing.Point(148, 137);
        this.LettersTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.LettersTextBox.Name = "LettersTextBox";
        this.LettersTextBox.ReadOnly = true;
        this.LettersTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.LettersTextBox.Size = new System.Drawing.Size(95, 23);
        this.LettersTextBox.TabIndex = 19;
        this.LettersTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
        this.LettersTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.LettersTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.LettersTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // WordsTextBox
        // 
        this.WordsTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.WordsTextBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.WordsTextBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.WordsTextBox.Location = new System.Drawing.Point(148, 113);
        this.WordsTextBox.Margin = new System.Windows.Forms.Padding(4);
        this.WordsTextBox.Name = "WordsTextBox";
        this.WordsTextBox.ReadOnly = true;
        this.WordsTextBox.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.WordsTextBox.Size = new System.Drawing.Size(95, 23);
        this.WordsTextBox.TabIndex = 16;
        this.WordsTextBox.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
        this.WordsTextBox.Click += new System.EventHandler(this.TextBoxLabelControls_CtrlClick);
        this.WordsTextBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        this.WordsTextBox.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.FixMicrosoft);
        // 
        // VersesLabel
        // 
        this.VersesLabel.BackColor = System.Drawing.Color.Transparent;
        this.VersesLabel.Cursor = System.Windows.Forms.Cursors.Default;
        this.VersesLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.VersesLabel.Location = new System.Drawing.Point(4, 92);
        this.VersesLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.VersesLabel.Name = "VersesLabel";
        this.VersesLabel.Size = new System.Drawing.Size(84, 20);
        this.VersesLabel.TabIndex = 115;
        this.VersesLabel.Text = "Verses";
        // 
        // WordsLabel
        // 
        this.WordsLabel.BackColor = System.Drawing.Color.Transparent;
        this.WordsLabel.Cursor = System.Windows.Forms.Cursors.Default;
        this.WordsLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.WordsLabel.Location = new System.Drawing.Point(4, 116);
        this.WordsLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.WordsLabel.Name = "WordsLabel";
        this.WordsLabel.Size = new System.Drawing.Size(84, 20);
        this.WordsLabel.TabIndex = 100;
        this.WordsLabel.Text = "Words";
        // 
        // LettersLabel
        // 
        this.LettersLabel.BackColor = System.Drawing.Color.Transparent;
        this.LettersLabel.Cursor = System.Windows.Forms.Cursors.Default;
        this.LettersLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.LettersLabel.Location = new System.Drawing.Point(4, 140);
        this.LettersLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.LettersLabel.Name = "LettersLabel";
        this.LettersLabel.Size = new System.Drawing.Size(84, 20);
        this.LettersLabel.TabIndex = 101;
        this.LettersLabel.Text = "Letters";
        // 
        // TextModeComboBox
        // 
        this.TextModeComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.TextModeComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.TextModeComboBox.FormattingEnabled = true;
        this.TextModeComboBox.IntegralHeight = false;
        this.TextModeComboBox.Location = new System.Drawing.Point(61, 20);
        this.TextModeComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.TextModeComboBox.Name = "TextModeComboBox";
        this.TextModeComboBox.Size = new System.Drawing.Size(183, 23);
        this.TextModeComboBox.TabIndex = 3;
        this.TextModeComboBox.DropDown += new System.EventHandler(this.TextModeComboBox_DropDown);
        this.TextModeComboBox.SelectedIndexChanged += new System.EventHandler(this.TextModeComboBox_SelectedIndexChanged);
        this.TextModeComboBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // DivisorLabel
        // 
        this.DivisorLabel.BackColor = System.Drawing.Color.Transparent;
        this.DivisorLabel.Cursor = System.Windows.Forms.Cursors.Default;
        this.DivisorLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DivisorLabel.ForeColor = System.Drawing.Color.Black;
        this.DivisorLabel.Location = new System.Drawing.Point(164, 0);
        this.DivisorLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DivisorLabel.Name = "DivisorLabel";
        this.DivisorLabel.Size = new System.Drawing.Size(23, 17);
        this.DivisorLabel.TabIndex = 250;
        this.DivisorLabel.Text = "÷";
        this.ToolTip.SetToolTip(this.DivisorLabel, "Divisibility colorizer");
        // 
        // DivisorValueLabel
        // 
        this.DivisorValueLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.DivisorValueLabel.BackColor = System.Drawing.Color.Black;
        this.DivisorValueLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.DivisorValueLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.DivisorValueLabel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(204)))), ((int)(((byte)(255)))), ((int)(((byte)(204)))));
        this.DivisorValueLabel.Location = new System.Drawing.Point(191, 0);
        this.DivisorValueLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.DivisorValueLabel.Name = "DivisorValueLabel";
        this.DivisorValueLabel.Size = new System.Drawing.Size(48, 16);
        this.DivisorValueLabel.TabIndex = 247;
        this.DivisorValueLabel.Text = "19";
        this.DivisorValueLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.DivisorValueLabel.TextChanged += new System.EventHandler(this.DivisorValueLabel_TextChanged);
        this.DivisorValueLabel.Click += new System.EventHandler(this.DivisorValueLabel_Click);
        // 
        // RadixValueLabel
        // 
        this.RadixValueLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.RadixValueLabel.BackColor = System.Drawing.Color.Black;
        this.RadixValueLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.RadixValueLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.RadixValueLabel.ForeColor = System.Drawing.Color.LightSteelBlue;
        this.RadixValueLabel.Location = new System.Drawing.Point(117, 0);
        this.RadixValueLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.RadixValueLabel.Name = "RadixValueLabel";
        this.RadixValueLabel.Size = new System.Drawing.Size(29, 16);
        this.RadixValueLabel.TabIndex = 0;
        this.RadixValueLabel.Text = "10";
        this.RadixValueLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
        this.RadixValueLabel.TextChanged += new System.EventHandler(this.RadixValueLabel_TextChanged);
        this.RadixValueLabel.Click += new System.EventHandler(this.RadixValueLabel_Click);
        // 
        // TotalChapterCountsCheckBox
        // 
        this.TotalChapterCountsCheckBox.AutoSize = true;
        this.TotalChapterCountsCheckBox.BackColor = System.Drawing.Color.Transparent;
        this.TotalChapterCountsCheckBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.TotalChapterCountsCheckBox.ForeColor = System.Drawing.SystemColors.WindowText;
        this.TotalChapterCountsCheckBox.Location = new System.Drawing.Point(7, 46);
        this.TotalChapterCountsCheckBox.Margin = new System.Windows.Forms.Padding(4);
        this.TotalChapterCountsCheckBox.Name = "TotalChapterCountsCheckBox";
        this.TotalChapterCountsCheckBox.Size = new System.Drawing.Size(38, 17);
        this.TotalChapterCountsCheckBox.TabIndex = 71;
        this.TotalChapterCountsCheckBox.Text = "∑";
        this.ToolTip.SetToolTip(this.TotalChapterCountsCheckBox, "Display total chapter counts");
        this.TotalChapterCountsCheckBox.UseVisualStyleBackColor = false;
        this.TotalChapterCountsCheckBox.CheckedChanged += new System.EventHandler(this.TotalChapterCountsCheckBox_CheckedChanged);
        // 
        // TextModeLabel
        // 
        this.TextModeLabel.BackColor = System.Drawing.Color.Transparent;
        this.TextModeLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.TextModeLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.TextModeLabel.Location = new System.Drawing.Point(4, 22);
        this.TextModeLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.TextModeLabel.Name = "TextModeLabel";
        this.TextModeLabel.Size = new System.Drawing.Size(84, 20);
        this.TextModeLabel.TabIndex = 0;
        this.TextModeLabel.Tag = "http://tanzil.net";
        this.TextModeLabel.Text = "Text";
        this.ToolTip.SetToolTip(this.TextModeLabel, "©2008 Tanzil Quran Text");
        this.TextModeLabel.Click += new System.EventHandler(this.LinkLabel_Click);
        // 
        // RecitationsCheckedListBox
        // 
        this.RecitationsCheckedListBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Left)));
        this.RecitationsCheckedListBox.BackColor = System.Drawing.SystemColors.ControlLight;
        this.RecitationsCheckedListBox.CheckOnClick = true;
        this.RecitationsCheckedListBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.RecitationsCheckedListBox.FormattingEnabled = true;
        this.RecitationsCheckedListBox.Location = new System.Drawing.Point(4, 20);
        this.RecitationsCheckedListBox.Margin = new System.Windows.Forms.Padding(4);
        this.RecitationsCheckedListBox.Name = "RecitationsCheckedListBox";
        this.RecitationsCheckedListBox.Size = new System.Drawing.Size(239, 256);
        this.RecitationsCheckedListBox.TabIndex = 92;
        this.RecitationsCheckedListBox.SelectedIndexChanged += new System.EventHandler(this.RecitationsCheckedListBox_SelectedIndexChanged);
        this.RecitationsCheckedListBox.MouseUp += new System.Windows.Forms.MouseEventHandler(this.RecitationsCheckedListBox_MouseUp);
        // 
        // StatisticsSplitContainer
        // 
        this.StatisticsSplitContainer.Dock = System.Windows.Forms.DockStyle.Right;
        this.StatisticsSplitContainer.Location = new System.Drawing.Point(1119, 10);
        this.StatisticsSplitContainer.Margin = new System.Windows.Forms.Padding(4);
        this.StatisticsSplitContainer.Name = "StatisticsSplitContainer";
        this.StatisticsSplitContainer.Orientation = System.Windows.Forms.Orientation.Horizontal;
        // 
        // StatisticsSplitContainer.Panel1
        // 
        this.StatisticsSplitContainer.Panel1.Controls.Add(this.RecitationGroupBox);
        this.StatisticsSplitContainer.Panel1.Controls.Add(this.StatisticsGroupBox);
        this.StatisticsSplitContainer.Panel1.Controls.Add(this.RecitationsDownloadGroupBox);
        this.StatisticsSplitContainer.Panel1.RightToLeft = System.Windows.Forms.RightToLeft.No;
        // 
        // StatisticsSplitContainer.Panel2
        // 
        this.StatisticsSplitContainer.Panel2.RightToLeft = System.Windows.Forms.RightToLeft.No;
        this.StatisticsSplitContainer.Panel2Collapsed = true;
        this.StatisticsSplitContainer.Panel2MinSize = 0;
        this.StatisticsSplitContainer.Size = new System.Drawing.Size(251, 735);
        this.StatisticsSplitContainer.SplitterDistance = 572;
        this.StatisticsSplitContainer.SplitterWidth = 5;
        this.StatisticsSplitContainer.TabIndex = 30;
        this.StatisticsSplitContainer.TabStop = false;
        // 
        // RecitationGroupBox
        // 
        this.RecitationGroupBox.BackColor = System.Drawing.SystemColors.WindowText;
        this.RecitationGroupBox.Controls.Add(this.PlayerPreviousLabel);
        this.RecitationGroupBox.Controls.Add(this.PlayerRepeatCounterLabel);
        this.RecitationGroupBox.Controls.Add(this.PlayerRepeatAllCounterLabel);
        this.RecitationGroupBox.Controls.Add(this.PlayerStopLabel);
        this.RecitationGroupBox.Controls.Add(this.PlayerPlayLabel);
        this.RecitationGroupBox.Controls.Add(this.PlayerNextLabel);
        this.RecitationGroupBox.Controls.Add(this.PlayerRepeatLabel);
        this.RecitationGroupBox.Controls.Add(this.PlayerRepeatAllLabel);
        this.RecitationGroupBox.Controls.Add(this.RecitationsApplySettingsLabel);
        this.RecitationGroupBox.Controls.Add(this.RecitationsCancelSettingsLabel);
        this.RecitationGroupBox.Controls.Add(this.PlayerVolumeTrackBar);
        this.RecitationGroupBox.Controls.Add(this.EveryAyahLabel);
        this.RecitationGroupBox.Controls.Add(this.ReciterComboBox);
        this.RecitationGroupBox.Controls.Add(this.PlayerVerseSilenceGapTrackBar);
        this.RecitationGroupBox.Controls.Add(this.PlayerMuteLabel);
        this.RecitationGroupBox.Controls.Add(this.PlayerSelectionSilenceGapTrackBar);
        this.RecitationGroupBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.RecitationGroupBox.ForeColor = System.Drawing.Color.Pink;
        this.RecitationGroupBox.Location = new System.Drawing.Point(1, -2);
        this.RecitationGroupBox.Margin = new System.Windows.Forms.Padding(4);
        this.RecitationGroupBox.Name = "RecitationGroupBox";
        this.RecitationGroupBox.Padding = new System.Windows.Forms.Padding(4);
        this.RecitationGroupBox.Size = new System.Drawing.Size(251, 47);
        this.RecitationGroupBox.TabIndex = 240;
        this.RecitationGroupBox.TabStop = false;
        this.RecitationGroupBox.Text = "Mishary Rashid Al-Afasy";
        this.RecitationGroupBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // PlayerPreviousLabel
        // 
        this.PlayerPreviousLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.PlayerPreviousLabel.BackColor = System.Drawing.SystemColors.ButtonHighlight;
        this.PlayerPreviousLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PlayerPreviousLabel.Enabled = false;
        this.PlayerPreviousLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PlayerPreviousLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.PlayerPreviousLabel.Image = ((System.Drawing.Image)(resources.GetObject("PlayerPreviousLabel.Image")));
        this.PlayerPreviousLabel.Location = new System.Drawing.Point(36, 15);
        this.PlayerPreviousLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PlayerPreviousLabel.Name = "PlayerPreviousLabel";
        this.PlayerPreviousLabel.Size = new System.Drawing.Size(28, 23);
        this.PlayerPreviousLabel.TabIndex = 82;
        this.PlayerPreviousLabel.Click += new System.EventHandler(this.PlayerPreviousLabel_Click);
        this.PlayerPreviousLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // PlayerRepeatCounterLabel
        // 
        this.PlayerRepeatCounterLabel.BackColor = System.Drawing.Color.Pink;
        this.PlayerRepeatCounterLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PlayerRepeatCounterLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PlayerRepeatCounterLabel.ForeColor = System.Drawing.Color.Black;
        this.PlayerRepeatCounterLabel.Location = new System.Drawing.Point(132, 15);
        this.PlayerRepeatCounterLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PlayerRepeatCounterLabel.Name = "PlayerRepeatCounterLabel";
        this.PlayerRepeatCounterLabel.Size = new System.Drawing.Size(27, 10);
        this.PlayerRepeatCounterLabel.TabIndex = 86;
        this.PlayerRepeatCounterLabel.Text = "1 / *";
        this.PlayerRepeatCounterLabel.TextAlign = System.Drawing.ContentAlignment.TopCenter;
        this.PlayerRepeatCounterLabel.Visible = false;
        this.PlayerRepeatCounterLabel.Click += new System.EventHandler(this.PlayerRepeatCounterLabel_Click);
        this.PlayerRepeatCounterLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // PlayerRepeatAllCounterLabel
        // 
        this.PlayerRepeatAllCounterLabel.BackColor = System.Drawing.Color.Pink;
        this.PlayerRepeatAllCounterLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PlayerRepeatAllCounterLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PlayerRepeatAllCounterLabel.ForeColor = System.Drawing.Color.Black;
        this.PlayerRepeatAllCounterLabel.Location = new System.Drawing.Point(159, 15);
        this.PlayerRepeatAllCounterLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PlayerRepeatAllCounterLabel.Name = "PlayerRepeatAllCounterLabel";
        this.PlayerRepeatAllCounterLabel.Size = new System.Drawing.Size(27, 10);
        this.PlayerRepeatAllCounterLabel.TabIndex = 88;
        this.PlayerRepeatAllCounterLabel.Text = "1 / *";
        this.PlayerRepeatAllCounterLabel.TextAlign = System.Drawing.ContentAlignment.TopCenter;
        this.PlayerRepeatAllCounterLabel.Visible = false;
        this.PlayerRepeatAllCounterLabel.Click += new System.EventHandler(this.PlayerRepeatAllCounterLabel_Click);
        this.PlayerRepeatAllCounterLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // PlayerStopLabel
        // 
        this.PlayerStopLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.PlayerStopLabel.BackColor = System.Drawing.SystemColors.ButtonHighlight;
        this.PlayerStopLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PlayerStopLabel.Enabled = false;
        this.PlayerStopLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 7F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PlayerStopLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.PlayerStopLabel.Image = ((System.Drawing.Image)(resources.GetObject("PlayerStopLabel.Image")));
        this.PlayerStopLabel.Location = new System.Drawing.Point(8, 15);
        this.PlayerStopLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PlayerStopLabel.Name = "PlayerStopLabel";
        this.PlayerStopLabel.Size = new System.Drawing.Size(28, 23);
        this.PlayerStopLabel.TabIndex = 81;
        this.PlayerStopLabel.Click += new System.EventHandler(this.PlayerStopLabel_Click);
        this.PlayerStopLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // PlayerPlayLabel
        // 
        this.PlayerPlayLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.PlayerPlayLabel.BackColor = System.Drawing.SystemColors.ButtonHighlight;
        this.PlayerPlayLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PlayerPlayLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PlayerPlayLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.PlayerPlayLabel.Image = ((System.Drawing.Image)(resources.GetObject("PlayerPlayLabel.Image")));
        this.PlayerPlayLabel.Location = new System.Drawing.Point(64, 15);
        this.PlayerPlayLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PlayerPlayLabel.Name = "PlayerPlayLabel";
        this.PlayerPlayLabel.Size = new System.Drawing.Size(41, 23);
        this.PlayerPlayLabel.TabIndex = 83;
        this.PlayerPlayLabel.Click += new System.EventHandler(this.PlayerPlayLabel_Click);
        this.PlayerPlayLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // PlayerNextLabel
        // 
        this.PlayerNextLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.PlayerNextLabel.BackColor = System.Drawing.SystemColors.ButtonHighlight;
        this.PlayerNextLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PlayerNextLabel.Enabled = false;
        this.PlayerNextLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PlayerNextLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.PlayerNextLabel.Image = ((System.Drawing.Image)(resources.GetObject("PlayerNextLabel.Image")));
        this.PlayerNextLabel.Location = new System.Drawing.Point(105, 15);
        this.PlayerNextLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PlayerNextLabel.Name = "PlayerNextLabel";
        this.PlayerNextLabel.Size = new System.Drawing.Size(28, 23);
        this.PlayerNextLabel.TabIndex = 84;
        this.PlayerNextLabel.Click += new System.EventHandler(this.PlayerNextLabel_Click);
        this.PlayerNextLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // PlayerRepeatLabel
        // 
        this.PlayerRepeatLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.PlayerRepeatLabel.BackColor = System.Drawing.SystemColors.ButtonHighlight;
        this.PlayerRepeatLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PlayerRepeatLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PlayerRepeatLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.PlayerRepeatLabel.Image = ((System.Drawing.Image)(resources.GetObject("PlayerRepeatLabel.Image")));
        this.PlayerRepeatLabel.Location = new System.Drawing.Point(132, 15);
        this.PlayerRepeatLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PlayerRepeatLabel.Name = "PlayerRepeatLabel";
        this.PlayerRepeatLabel.Size = new System.Drawing.Size(27, 23);
        this.PlayerRepeatLabel.TabIndex = 85;
        this.PlayerRepeatLabel.Click += new System.EventHandler(this.PlayerRepeatLabel_Click);
        this.PlayerRepeatLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // PlayerRepeatAllLabel
        // 
        this.PlayerRepeatAllLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.PlayerRepeatAllLabel.BackColor = System.Drawing.SystemColors.ButtonHighlight;
        this.PlayerRepeatAllLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PlayerRepeatAllLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PlayerRepeatAllLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.PlayerRepeatAllLabel.Image = ((System.Drawing.Image)(resources.GetObject("PlayerRepeatAllLabel.Image")));
        this.PlayerRepeatAllLabel.Location = new System.Drawing.Point(159, 15);
        this.PlayerRepeatAllLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PlayerRepeatAllLabel.Name = "PlayerRepeatAllLabel";
        this.PlayerRepeatAllLabel.Size = new System.Drawing.Size(27, 23);
        this.PlayerRepeatAllLabel.TabIndex = 87;
        this.PlayerRepeatAllLabel.Click += new System.EventHandler(this.PlayerRepeatAllLabel_Click);
        this.PlayerRepeatAllLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // RecitationsApplySettingsLabel
        // 
        this.RecitationsApplySettingsLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.RecitationsApplySettingsLabel.BackColor = System.Drawing.SystemColors.ButtonHighlight;
        this.RecitationsApplySettingsLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.RecitationsApplySettingsLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.RecitationsApplySettingsLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.RecitationsApplySettingsLabel.Image = ((System.Drawing.Image)(resources.GetObject("RecitationsApplySettingsLabel.Image")));
        this.RecitationsApplySettingsLabel.Location = new System.Drawing.Point(185, 15);
        this.RecitationsApplySettingsLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.RecitationsApplySettingsLabel.Name = "RecitationsApplySettingsLabel";
        this.RecitationsApplySettingsLabel.Size = new System.Drawing.Size(24, 23);
        this.RecitationsApplySettingsLabel.TabIndex = 89;
        this.ToolTip.SetToolTip(this.RecitationsApplySettingsLabel, "Add/Remove recitations");
        this.RecitationsApplySettingsLabel.Click += new System.EventHandler(this.RecitationsApplySettingsLabel_Click);
        this.RecitationsApplySettingsLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // RecitationsCancelSettingsLabel
        // 
        this.RecitationsCancelSettingsLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.RecitationsCancelSettingsLabel.BackColor = System.Drawing.SystemColors.ButtonHighlight;
        this.RecitationsCancelSettingsLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.RecitationsCancelSettingsLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.RecitationsCancelSettingsLabel.ForeColor = System.Drawing.SystemColors.WindowText;
        this.RecitationsCancelSettingsLabel.Image = ((System.Drawing.Image)(resources.GetObject("RecitationsCancelSettingsLabel.Image")));
        this.RecitationsCancelSettingsLabel.Location = new System.Drawing.Point(209, 15);
        this.RecitationsCancelSettingsLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.RecitationsCancelSettingsLabel.Name = "RecitationsCancelSettingsLabel";
        this.RecitationsCancelSettingsLabel.Size = new System.Drawing.Size(24, 23);
        this.RecitationsCancelSettingsLabel.TabIndex = 90;
        this.ToolTip.SetToolTip(this.RecitationsCancelSettingsLabel, "Cancel");
        this.RecitationsCancelSettingsLabel.Visible = false;
        this.RecitationsCancelSettingsLabel.Click += new System.EventHandler(this.RecitationsCancelSettingsLabel_Click);
        this.RecitationsCancelSettingsLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // PlayerVolumeTrackBar
        // 
        this.PlayerVolumeTrackBar.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.PlayerVolumeTrackBar.AutoSize = false;
        this.PlayerVolumeTrackBar.BackColor = System.Drawing.SystemColors.WindowText;
        this.PlayerVolumeTrackBar.LargeChange = 10;
        this.PlayerVolumeTrackBar.Location = new System.Drawing.Point(233, -1);
        this.PlayerVolumeTrackBar.Margin = new System.Windows.Forms.Padding(4);
        this.PlayerVolumeTrackBar.Maximum = 100;
        this.PlayerVolumeTrackBar.Name = "PlayerVolumeTrackBar";
        this.PlayerVolumeTrackBar.Orientation = System.Windows.Forms.Orientation.Vertical;
        this.PlayerVolumeTrackBar.Size = new System.Drawing.Size(19, 52);
        this.PlayerVolumeTrackBar.TabIndex = 94;
        this.PlayerVolumeTrackBar.TickFrequency = 10;
        this.PlayerVolumeTrackBar.TickStyle = System.Windows.Forms.TickStyle.None;
        this.PlayerVolumeTrackBar.Value = 100;
        this.PlayerVolumeTrackBar.Scroll += new System.EventHandler(this.PlayerVolumeTrackBar_Scroll);
        this.PlayerVolumeTrackBar.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // EveryAyahLabel
        // 
        this.EveryAyahLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.EveryAyahLabel.BackColor = System.Drawing.Color.Pink;
        this.EveryAyahLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.EveryAyahLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.EveryAyahLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.EveryAyahLabel.Location = new System.Drawing.Point(225, 5);
        this.EveryAyahLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.EveryAyahLabel.Name = "EveryAyahLabel";
        this.EveryAyahLabel.Size = new System.Drawing.Size(8, 5);
        this.EveryAyahLabel.TabIndex = 91;
        this.EveryAyahLabel.Tag = "http://everyayah.com";
        this.EveryAyahLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
        this.ToolTip.SetToolTip(this.EveryAyahLabel, "©2009 Quran Audio Server");
        this.EveryAyahLabel.Click += new System.EventHandler(this.LinkLabel_Click);
        this.EveryAyahLabel.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // ReciterComboBox
        // 
        this.ReciterComboBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
        this.ReciterComboBox.BackColor = System.Drawing.SystemColors.Control;
        this.ReciterComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
        this.ReciterComboBox.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.ReciterComboBox.FormattingEnabled = true;
        this.ReciterComboBox.Location = new System.Drawing.Point(8, 14);
        this.ReciterComboBox.Margin = new System.Windows.Forms.Padding(4);
        this.ReciterComboBox.Name = "ReciterComboBox";
        this.ReciterComboBox.Size = new System.Drawing.Size(225, 25);
        this.ReciterComboBox.TabIndex = 91;
        this.ToolTip.SetToolTip(this.ReciterComboBox, "Choose Reciter");
        this.ReciterComboBox.SelectedIndexChanged += new System.EventHandler(this.ReciterComboBox_SelectedIndexChanged);
        this.ReciterComboBox.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // PlayerVerseSilenceGapTrackBar
        // 
        this.PlayerVerseSilenceGapTrackBar.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.PlayerVerseSilenceGapTrackBar.AutoSize = false;
        this.PlayerVerseSilenceGapTrackBar.BackColor = System.Drawing.SystemColors.WindowText;
        this.PlayerVerseSilenceGapTrackBar.Location = new System.Drawing.Point(1, 34);
        this.PlayerVerseSilenceGapTrackBar.Margin = new System.Windows.Forms.Padding(4);
        this.PlayerVerseSilenceGapTrackBar.Maximum = 20;
        this.PlayerVerseSilenceGapTrackBar.Name = "PlayerVerseSilenceGapTrackBar";
        this.PlayerVerseSilenceGapTrackBar.Size = new System.Drawing.Size(125, 17);
        this.PlayerVerseSilenceGapTrackBar.SmallChange = 5;
        this.PlayerVerseSilenceGapTrackBar.TabIndex = 92;
        this.PlayerVerseSilenceGapTrackBar.TickStyle = System.Windows.Forms.TickStyle.None;
        this.PlayerVerseSilenceGapTrackBar.Scroll += new System.EventHandler(this.PlayerVerseSilenceGapTrackBar_Scroll);
        this.PlayerVerseSilenceGapTrackBar.Enter += new System.EventHandler(this.StatisticsControls_Enter);
        // 
        // PlayerMuteLabel
        // 
        this.PlayerMuteLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
        this.PlayerMuteLabel.BackColor = System.Drawing.SystemColors.ButtonHighlight;
        this.PlayerMuteLabel.Cursor = System.Windows.Forms.Cursors.Hand;
        this.PlayerMuteLabel.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        this.PlayerMuteLabel.ForeColor = System.Drawing.SystemColors.Window;
        this.PlayerMuteLabel.Image = ((System.Drawing.Image)(resources.GetObject("PlayerMuteLabel.Image")));
        this.PlayerMuteLabel.Location = new System.Drawing.Point(156, 15);
        this.PlayerMuteLabel.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
        this.PlayerMuteLabel.Name = "PlayerMuteLabel";
        this.PlayerMuteLabel.Size = new System.Drawing.Size(31, 23);
        this.PlayerMuteLabel.TabIndex = 85;
        // 
        // PlayerSelectionSilenceGapTrackBar
        // 
        this.PlayerSelectionSilenceGapTrackBar.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.PlayerSelectionSilenceGapTrackBar.AutoSize = false;
        this.PlayerSelectionSilenceGapTrackBar.BackColor = System.Drawing.SystemColors.WindowText;
        this.PlayerSelectionSilenceGapTrackBar.LargeChange = 1;
        this.PlayerSelectionSilenceGapTrackBar.Location = new System.Drawing.Point(120, 34);
        this.PlayerSelectionSilenceGapTrackBar.Margin = new System.Windows.Forms.Padding(4);
        this.PlayerSelectionSilenceGapTrackBar.Name = "PlayerSelectionSilenceGapTrackBar";
        this.PlayerSelectionSilenceGapTrackBar.Size = new System.Drawing.Size(120, 17);
        this.PlayerSelectionSilenceGapTrackBar.TabIndex = 93;
        this.PlayerSelectionSilenceGapTrackBar.TickStyle = System.Windows.Forms.TickStyle.None;
        this.PlayerSelectionSilenceGapTrackBar.Scroll += new System.EventHandler(this.PlayerSelectionSilenceGapTrackBar_Scroll);
        // 
        // RecitationsDownloadGroupBox
        // 
        this.RecitationsDownloadGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
        | System.Windows.Forms.AnchorStyles.Right)));
        this.RecitationsDownloadGroupBox.Controls.Add(this.RecitationsCheckedListBox);
        this.RecitationsDownloadGroupBox.Location = new System.Drawing.Point(5, 47);
        this.RecitationsDownloadGroupBox.Margin = new System.Windows.Forms.Padding(4);
        this.RecitationsDownloadGroupBox.Name = "RecitationsDownloadGroupBox";
        this.RecitationsDownloadGroupBox.Padding = new System.Windows.Forms.Padding(4);
        this.RecitationsDownloadGroupBox.Size = new System.Drawing.Size(240, 415);
        this.RecitationsDownloadGroupBox.TabIndex = 31;
        this.RecitationsDownloadGroupBox.TabStop = false;
        this.RecitationsDownloadGroupBox.Text = "Recitatation Full CD/DVD";
        this.RecitationsDownloadGroupBox.Visible = false;
        // 
        // ToolTip
        // 
        this.ToolTip.AutoPopDelay = 23000;
        this.ToolTip.InitialDelay = 100;
        this.ToolTip.ReshowDelay = 100;
        // 
        // NotifyIcon
        // 
        this.NotifyIcon.ContextMenuStrip = this.NotifyIconContextMenuStrip;
        this.NotifyIcon.Icon = ((System.Drawing.Icon)(resources.GetObject("NotifyIcon.Icon")));
        this.NotifyIcon.Text = "QuranCode";
        this.NotifyIcon.MouseClick += new System.Windows.Forms.MouseEventHandler(this.NotifyIcon_MouseClick);
        this.NotifyIcon.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.NotifyIcon_MouseDoubleClick);
        // 
        // NotifyIconContextMenuStrip
        // 
        this.NotifyIconContextMenuStrip.ImageScalingSize = new System.Drawing.Size(20, 20);
        this.NotifyIconContextMenuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.AboutToolStripMenuItem,
            this.ExitToolStripMenuItem});
        this.NotifyIconContextMenuStrip.Name = "NotifyIconContextMenuStrip";
        this.NotifyIconContextMenuStrip.Size = new System.Drawing.Size(120, 52);
        // 
        // AboutToolStripMenuItem
        // 
        this.AboutToolStripMenuItem.Name = "AboutToolStripMenuItem";
        this.AboutToolStripMenuItem.Size = new System.Drawing.Size(119, 24);
        this.AboutToolStripMenuItem.Text = "About";
        this.AboutToolStripMenuItem.Click += new System.EventHandler(this.AboutToolStripMenuItem_Click);
        // 
        // ExitToolStripMenuItem
        // 
        this.ExitToolStripMenuItem.Name = "ExitToolStripMenuItem";
        this.ExitToolStripMenuItem.Size = new System.Drawing.Size(119, 24);
        this.ExitToolStripMenuItem.Text = "Exit";
        this.ExitToolStripMenuItem.Click += new System.EventHandler(this.ExitToolStripMenuItem_Click);
        // 
        // FontDialog
        // 
        this.FontDialog.Apply += new System.EventHandler(this.FontDialog_Apply);
        // 
        // LetterFrequencyContextMenuStrip
        // 
        this.LetterFrequencyContextMenuStrip.ImageScalingSize = new System.Drawing.Size(20, 20);
        this.LetterFrequencyContextMenuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.PositionsToolStripMenuItem,
            this.DistancesToolStripMenuItem});
        this.LetterFrequencyContextMenuStrip.Name = "LetterFrequencyContextMenuStrip";
        this.LetterFrequencyContextMenuStrip.Size = new System.Drawing.Size(142, 52);
        this.LetterFrequencyContextMenuStrip.DoubleClick += new System.EventHandler(this.LetterFrequencyListView_DoubleClick);
        // 
        // PositionsToolStripMenuItem
        // 
        this.PositionsToolStripMenuItem.Name = "PositionsToolStripMenuItem";
        this.PositionsToolStripMenuItem.Size = new System.Drawing.Size(141, 24);
        this.PositionsToolStripMenuItem.Text = "&Positions";
        this.PositionsToolStripMenuItem.Click += new System.EventHandler(this.PositionsToolStripMenuItem_Click);
        // 
        // DistancesToolStripMenuItem
        // 
        this.DistancesToolStripMenuItem.Name = "DistancesToolStripMenuItem";
        this.DistancesToolStripMenuItem.Size = new System.Drawing.Size(141, 24);
        this.DistancesToolStripMenuItem.Text = "&Distances";
        this.DistancesToolStripMenuItem.Click += new System.EventHandler(this.DistancesToolStripMenuItem_Click);
        // 
        // MainForm
        // 
        this.AcceptButton = this.FindByTextButton;
        this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
        this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
        this.BackColor = System.Drawing.Color.LightSteelBlue;
        this.BackgroundImageLayout = System.Windows.Forms.ImageLayout.None;
        this.ClientSize = new System.Drawing.Size(1370, 745);
        this.Controls.Add(this.StatusPanel);
        this.Controls.Add(this.StatisticsSplitContainer);
        this.Controls.Add(this.MainSplitContainer);
        this.Controls.Add(this.ToolbarPanel);
        this.DoubleBuffered = true;
        this.ForeColor = System.Drawing.Color.Black;
        this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
        this.KeyPreview = true;
        this.Margin = new System.Windows.Forms.Padding(4);
        this.Name = "MainForm";
        this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
        this.Text = "QuranCode";
        this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.MainForm_FormClosing);
        this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.MainForm_FormClosed);
        this.Load += new System.EventHandler(this.MainForm_Load);
        this.Shown += new System.EventHandler(this.MainForm_Shown);
        this.KeyDown += new System.Windows.Forms.KeyEventHandler(this.MainForm_KeyDown);
        this.Resize += new System.EventHandler(this.MainForm_Resize);
        this.StatusPanel.ResumeLayout(false);
        this.ChapterSortPanel.ResumeLayout(false);
        this.DrawingsPanel.ResumeLayout(false);
        this.BookmarkPanel.ResumeLayout(false);
        this.BookmarkPanel.PerformLayout();
        this.ResearchPanel.ResumeLayout(false);
        this.ResearchPanel.PerformLayout();
        this.BrowseGroupBox.ResumeLayout(false);
        this.ToolbarPanel.ResumeLayout(false);
        this.MainSplitContainer.Panel1.ResumeLayout(false);
        this.MainSplitContainer.Panel2.ResumeLayout(false);
        ((System.ComponentModel.ISupportInitialize)(this.MainSplitContainer)).EndInit();
        this.MainSplitContainer.ResumeLayout(false);
        this.SearchGroupBox.ResumeLayout(false);
        this.FindByNumbersPanel.ResumeLayout(false);
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersValueDigitalRootNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersValueDigitSumNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersChaptersNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersNumberNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersUniqueLettersNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersVersesNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersValueNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersLettersNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByNumbersWordsNumericUpDown)).EndInit();
        this.FindBySimilarityPanel.ResumeLayout(false);
        ((System.ComponentModel.ISupportInitialize)(this.FindBySimilarityPercentageTrackBar)).EndInit();
        this.FindByTextPanel.ResumeLayout(false);
        this.FindByTextPanel.PerformLayout();
        this.TextLocationWithinChapterPanel.ResumeLayout(false);
        this.TextLocationInWordPanel.ResumeLayout(false);
        this.TextLocationWithinVersePanel.ResumeLayout(false);
        this.KeyboardPanel.ResumeLayout(false);
        this.KeyboardPanel.PerformLayout();
        ((System.ComponentModel.ISupportInitialize)(this.FindByTextMultiplicityNumericUpDown)).EndInit();
        this.PositionsGroupBox.ResumeLayout(false);
        this.PositionsGroupBox.PerformLayout();
        ((System.ComponentModel.ISupportInitialize)(this.LetterNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.WordNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.VerseNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.BowingNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.QuarterNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.HalfNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.GroupNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.PartNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.StationNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.PageNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.ChapterLetterNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.ChapterWordNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.ChapterVerseNumericUpDown)).EndInit();
        this.ChapterGroupBox.ResumeLayout(false);
        this.ChapterGroupBox.PerformLayout();
        this.WordsListBoxContextMenuStrip.ResumeLayout(false);
        this.ClientSplitContainer.Panel1.ResumeLayout(false);
        this.ClientSplitContainer.Panel2.ResumeLayout(false);
        ((System.ComponentModel.ISupportInitialize)(this.ClientSplitContainer)).EndInit();
        this.ClientSplitContainer.ResumeLayout(false);
        this.HeaderPanel.ResumeLayout(false);
        this.TabControl.ResumeLayout(false);
        this.TranslationTabPage.ResumeLayout(false);
        this.TranslationSplitContainer.Panel1.ResumeLayout(false);
        this.TranslationSplitContainer.Panel1.PerformLayout();
        this.TranslationSplitContainer.Panel2.ResumeLayout(false);
        this.TranslationSplitContainer.Panel2.PerformLayout();
        ((System.ComponentModel.ISupportInitialize)(this.TranslationSplitContainer)).EndInit();
        this.TranslationSplitContainer.ResumeLayout(false);
        this.GrammarTabPage.ResumeLayout(false);
        this.GrammarTabPage.PerformLayout();
        this.RelatedWordsTabPage.ResumeLayout(false);
        this.RelatedWordsTabPage.PerformLayout();
        this.SymmetryTabPage.ResumeLayout(false);
        this.SymmetryTabPage.PerformLayout();
        this.ValuesSequenceTabPage.ResumeLayout(false);
        this.ValuesSequenceTabPage.PerformLayout();
        ((System.ComponentModel.ISupportInitialize)(this.ValuesSequenceRadixNumericUpDown)).EndInit();
        this.CVWLSequenceTabPage.ResumeLayout(false);
        this.CVWLSequenceTabPage.PerformLayout();
        this.DNASequenceTabPage.ResumeLayout(false);
        this.DNASequenceTabPage.PerformLayout();
        this.MathsTabPage.ResumeLayout(false);
        this.MathsPanel.ResumeLayout(false);
        this.MathsPanel.PerformLayout();
        ((System.ComponentModel.ISupportInitialize)(this.MathsDivisorNumericUpDown)).EndInit();
        this.DistancesTabPage.ResumeLayout(false);
        this.DistancesPanel.ResumeLayout(false);
        this.DistancesPanel.PerformLayout();
        ((System.ComponentModel.ISupportInitialize)(this.DistancesDivisorNumericUpDown)).EndInit();
        this.UserTextTabPage.ResumeLayout(false);
        this.UserTextTabPage.PerformLayout();
        ((System.ComponentModel.ISupportInitialize)(this.UserTextValueNumericUpDown)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.FindByFrequencySumNumericUpDown)).EndInit();
        this.StatisticsGroupBox.ResumeLayout(false);
        this.StatisticsGroupBox.PerformLayout();
        this.ValueNavigatorPanel.ResumeLayout(false);
        this.LetterFrequencyPanel.ResumeLayout(false);
        this.FindByFrequncyPanel.ResumeLayout(false);
        this.FindByFrequncyPanel.PerformLayout();
        this.ValuePanel.ResumeLayout(false);
        this.ValuePanel.PerformLayout();
        this.PCIndexChainPanel.ResumeLayout(false);
        this.PCIndexChainPanel.PerformLayout();
        this.StatisticsSplitContainer.Panel1.ResumeLayout(false);
        ((System.ComponentModel.ISupportInitialize)(this.StatisticsSplitContainer)).EndInit();
        this.StatisticsSplitContainer.ResumeLayout(false);
        this.RecitationGroupBox.ResumeLayout(false);
        ((System.ComponentModel.ISupportInitialize)(this.PlayerVolumeTrackBar)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.PlayerVerseSilenceGapTrackBar)).EndInit();
        ((System.ComponentModel.ISupportInitialize)(this.PlayerSelectionSilenceGapTrackBar)).EndInit();
        this.RecitationsDownloadGroupBox.ResumeLayout(false);
        this.NotifyIconContextMenuStrip.ResumeLayout(false);
        this.LetterFrequencyContextMenuStrip.ResumeLayout(false);
        this.ResumeLayout(false);
    }

    private void ShowToolTipsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        ToolTip.Active = ShowToolTipsCheckBox.Checked;
    }
    private void MainForm_Load(object sender, EventArgs e)
    {
        bool splash_screen_done = false;
        try
        {
            SplashForm splash_form = new SplashForm();
            if (splash_form != null)
            {
                ThreadPool.QueueUserWorkItem(delegate
                {
                    using (splash_form)
                    {
                        splash_form.Show();
                        while (!splash_screen_done)
                        {
                            Application.DoEvents();
                        }
                        splash_form.Close();
                    }
                }, null);

                splash_form.Version += " - " + Globals.SHORT_VERSION;

                splash_form.Information = "Loading grammar information ...";
                splash_form.Progress = 10;
                Thread.Sleep(100);

                string numerology_system_name = LoadNumerologySystemName();
                m_client = new Client(numerology_system_name);
                if (m_client != null)
                {
                    m_client.Subscribe(this, Subject.LanguageSystem);
                    m_client.Subscribe(this, Subject.SimplificationSystem);
                    m_client.Subscribe(this, Subject.NumerologySystem);
                    m_client.Subscribe(this, Subject.DNASequenceSystem);
                    m_client.Subscribe(this, Subject.InterestingNumbers);

                    if (m_client.NumerologySystem != null)
                    {
                        LoadApplicationFolders();

                        splash_form.Information = "Loading research methods ...";
                        LoadResearchMethods();
                        splash_form.Progress = 20;
                        Thread.Sleep(100);

                        LoadEmlaaeiBismWawShaddaOptions();
                        splash_form.Information = "Building book ...";
                        string text_mode = m_client.NumerologySystem.TextMode;
                        m_client.BuildSimplifiedBook(text_mode, m_with_bism_Allah, m_waw_as_word, m_shadda_as_letter, m_emlaaei_text);
                        EnableFindByTextControls();
                        splash_form.Progress = 40;
                        Thread.Sleep(100);

                        if (m_client.Book != null)
                        {
                            UpdateNumericMinMax();

                            splash_form.Information = "Loading translation info ...";
                            PopulateTranslatorsCheckedListBox();
                            PopulateTranslatorComboBox();
                            PopulateTranslatorsComboBox();
                            splash_form.Progress = 50;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading recitation info ...";
                            PopulateRecitationsCheckedListBox();
                            PopulateReciterComboBox();
                            splash_form.Progress = 60;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading chapter names ...";
                            PopulateChapterComboBox();
                            PopulateChaptersListBox();
                            PopulateChapterSelectionComboBox();
                            splash_form.Progress = 63;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading sequence systems ...";
                            PopulateSymmetryTypeComboBox();
                            PopulateCVWLSequenceTypeComboBox();
                            PopulateValuesSequenceScopeComboBox();
                            PopulateDNASequenceSystemComboBox();
                            splash_form.Progress = 65;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading user settings ...";
                            LoadApplicationSettings();
                            splash_form.Progress = 70;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading numerology systems ...";
                            PopulateTextModeComboBox();
                            splash_form.Information = "Updating numerology systems ...";
                            UpdateNumerologySystemComboBoxs();
                            splash_form.Progress = 80;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading bookmarks and notes ...";
                            m_client.LoadBookmarks();
                            UpdateBookmarkButtons();
                            splash_form.Progress = 90;
                            Thread.Sleep(100);

                            if (Globals.EDITION == Edition.Standard)
                            {
                                splash_form.Information = "Loading user history ...";
                                splash_form.Information = "Generating numbers ...";
                            }
                            else
                            {
                                splash_form.Information = "Generating big numbers ...";
                            }
                            m_client.LoadHistoryItems();
                            UpdateBrowseHistoryButtons();
                            splash_form.Progress = 95;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading help messages ...";
                            if (m_client.HelpMessages != null)
                            {
                                if (m_client.HelpMessages.Count > 0)
                                {
                                    HelpMessageLabel.Text = m_client.HelpMessages[0];
                                }
                            }
                            splash_form.Progress = 98;
                            Thread.Sleep(100);

                            if (ReciterComboBox.SelectedItem != null)
                            {
                                RecitationGroupBox.Text = ReciterComboBox.SelectedItem.ToString() + "                                 ";
                            }
                            ToolTip.SetToolTip(PlayerVolumeTrackBar, (m_audio_volume / (1000 / PlayerVolumeTrackBar.Maximum)).ToString() + "%");

                            PopulateChapterSortComboBox();

                            // must be before DisplaySelection for Verse.IncludeNumber to take effect
                            ApplyWordWrapSettings();

                            // prepare before Shown
                            this.ClientSplitContainer.SplitterDistance = m_information_box_top;
                            this.TabControl.SelectedIndex = m_information_page_index;
                            this.TranslationSplitContainer.SplitterDistance = m_translation_box_width;
                            SymmetryIncludeBoundaryCasesCheckBox.Checked = m_symmetry_include_boundary_cases;

                            m_player_looping = !m_player_looping;
                            PlayerRepeatLabel_Click(null, null);
                            m_player_looping_all = !m_player_looping_all;
                            PlayerRepeatAllLabel_Click(null, null);

                            UpdateTextModeOptions();

                            splash_form.Information = "Building prime/composite indexes ...";

                            // refresh chapter sort method/order/pin_chapter1
                            m_client.Book.SortChapters(m_chapter_sort_method, m_chapter_sort_order, m_pin_chapter1);
                            UpdateChapterSortControls();

                            if (m_client.Selection == null)
                            {
                                m_client.Selection = new Selection(m_client.Book, SelectionScope.Chapter, new List<int>() { 0 });
                            }
                            if (m_client.Selection != null)
                            {
                                if ((Chapter.SortMethod == ChapterSortMethod.ByCompilation) && (Chapter.SortOrder == ChapterSortOrder.Ascending))
                                {
                                    DisplaySelection(false);
                                }
                                else
                                {
                                    DisplaySortedChapters();
                                }
                                splash_form.Progress = 100;
                                Thread.Sleep(100);
                            }
                            UpdateSearchScope();

                            if (
                                 (m_text_display_mode == TextDisplayMode.None) ||
                                 (m_text_display_mode == TextDisplayMode.TranslationOnly)
                               )
                            {
                                // fill MainTextBox.Text with anything,
                                // don't leave empty to allow live statistics
                                MainTextBox.Text = "Fast Mode";
                                MainTextBox.Refresh();

                                GenerateSentencesLabel.Visible = false;
                                DuplicateLettersCheckBox.Visible = false;
                                GenerateSentencesLabel.Refresh();
                                DuplicateLettersCheckBox.Refresh();
                            }
                        }

                        DisplayDeficientNumbersLabel.BackColor = Numbers.NUMBER_KIND_COLORS[0];
                        DisplayPerfectNumbersLabel.BackColor = Numbers.NUMBER_KIND_COLORS[1];
                        DisplayAbundantNumbersLabel.BackColor = Numbers.NUMBER_KIND_COLORS[2];

                        if (text_mode == "Original")
                        {
                            ApplyFont(m_quran_font);
                            FontLabel.Enabled = true;
                        }
                        else
                        {
                            ApplyFont("Courier New", 12.0F);
                            FontLabel.Enabled = false;
                        }

                        this.Activate(); // bring to foreground
                    }
                }
            }
        }
        catch (Exception ex)
        {
            while (ex != null)
            {
                //Console.WriteLine(ex.Message);
                MessageBox.Show(ex.Message, Application.ProductName);
                ex = ex.InnerException;
            }
        }
        finally
        {
            splash_screen_done = true;
            Thread.Sleep(100);  // prevent race-condition to allow splashform.Close()
        }
    }
    private void MainForm_Shown(object sender, EventArgs e)
    {
        VersionLabel.Text = " " + Globals.SHORT_VERSION;

        // setup C V W L start for distance caluclations
        MainTextBox.AlignToStart();
        Verse verse = GetCurrentVerse();
        if (verse != null)
        {
            if (verse.Chapter != null)
            {
                m_clicked_chapter_number = verse.Chapter.SortedNumber;
            }

            m_clicked_verse_number = verse.Number;

            if (verse.Words.Count > 0)
            {
                Word word = verse.Words[0];
                if (word != null)
                {
                    m_clicked_word_number = word.Number;
                    if (word.Letters.Count > 0)
                    {
                        Letter letter = word.Letters[0];
                        if (letter != null)
                        {
                            m_clicked_letter_number = letter.Number;
                        }
                    }
                }
            }
        }

        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                StringBuilder str = new StringBuilder();
                foreach (char c in m_client.NumerologySystem.Keys)
                {
                    str.AppendLine(c.ToString() + "\t" + m_client.NumerologySystem[c].ToString());
                }
                ToolTip.SetToolTip(EditNumerologySystemLabel, str.ToString());
            }
        }

        NotifyIcon.Visible = true;

        // start user at chapter list box
        ChaptersListBox.Focus();
    }
    private void MainForm_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            if (WordsListBox.Focused)
            {
                WordsListBox_DoubleClick(null, null);
                e.Handled = true;
            }
            else
            {
                e.Handled = false;
            }
        }
        if (e.KeyCode == Keys.Tab)
        {
            e.Handled = false;
        }
        else if (e.KeyCode == Keys.Escape)
        {
            HandleEscapeKeyPress(null, null);
        }
        else if (e.Control && (e.KeyCode == Keys.Down)) // Redo
        {
            RedoGotoVerse();
        }
        else if (e.Control && (e.KeyCode == Keys.Up)) // Undo
        {
            UndoGotoVerse();
        }
        else if (e.Control && (e.KeyCode == Keys.A)) // SelectAll chapters
        {
            if (ChaptersListBox.Focused)
            {
                for (int i = 0; i < 3; i++) ChaptersListBox.SelectedIndexChanged -= new EventHandler(ChaptersListBox_SelectedIndexChanged);
                for (int i = 0; i < ChaptersListBox.Items.Count - 1; i++)
                {
                    ChaptersListBox.SelectedIndices.Add(i);
                }
                ChaptersListBox.SelectedIndexChanged += new EventHandler(ChaptersListBox_SelectedIndexChanged);
                ChaptersListBox.SelectedIndices.Add(ChaptersListBox.Items.Count - 1);
            }
            else if (WordsListBox.Focused)
            {
                for (int i = 0; i < 3; i++) WordsListBox.SelectedIndexChanged -= new EventHandler(WordsListBox_SelectedIndexChanged);
                for (int i = 0; i < WordsListBox.Items.Count - 1; i++)
                {
                    WordsListBox.SelectedIndices.Add(i);
                }
                WordsListBox.SelectedIndexChanged += new EventHandler(WordsListBox_SelectedIndexChanged);
                WordsListBox.SelectedIndices.Add(WordsListBox.Items.Count - 1);
            }
            else
            {
                e.Handled = false;
            }
        }
        else
        {
            if (!e.Alt && !e.Control && !e.Shift)
            {
                if ((e.KeyCode == Keys.Back) || (e.KeyCode == Keys.BrowserBack))
                {
                    if (m_active_textbox != null)
                    {
                        if (
                            ((m_active_textbox.Focused) && (m_translation_readonly)) ||
                            (BrowseHistoryBackwardButton.Focused) ||
                            (BrowseHistoryForwardButton.Focused) ||
                            (BrowseHistoryCounterLabel.Focused)
                           )
                        {
                            BrowseHistoryBackwardButton_Click(null, null);
                            e.Handled = true; // stop annoying beep
                        }
                    }
                }
                else if ((e.KeyCode == Keys.BrowserForward))
                {
                    if (m_active_textbox != null)
                    {
                        if (
                            ((m_active_textbox.Focused) && (m_translation_readonly)) ||
                            (BrowseHistoryBackwardButton.Focused) ||
                            (BrowseHistoryForwardButton.Focused) ||
                            (BrowseHistoryCounterLabel.Focused)
                           )
                        {
                            BrowseHistoryForwardButton_Click(null, null);
                            e.Handled = true; // stop annoying beep
                        }
                    }
                }
                else if (e.KeyCode == Keys.F1)
                {
                    HelpMessageLabel.Visible = true;
                }
                else if (e.KeyCode == Keys.F2)
                {
                    HelpMessageLabel.Visible = false;
                }
                else if (e.KeyCode == Keys.F3)
                {
                    if (m_found_verses_displayed)
                    {
                        SelectNextFindMatch();
                    }
                    else
                    {
                        BookmarkForwardButton_Click(null, null);
                    }
                }
                else if (e.KeyCode == Keys.F4)
                {
                    if (m_active_textbox != null)
                    {
                        if (m_active_textbox.Focused)
                        {
                            DoFindRelatedWords(m_active_textbox);
                        }
                    }
                }
                else if (e.KeyCode == Keys.F5)
                {
                    if (m_active_textbox != null)
                    {
                        if (m_active_textbox.Focused)
                        {
                            DoFindRelatedVerses(m_active_textbox);
                        }
                    }
                }
                else if (e.KeyCode == Keys.F6)
                {
                    if (m_active_textbox != null)
                    {
                        if (m_active_textbox.Focused)
                        {
                            DoFindSameText(m_active_textbox);
                        }
                    }
                }
                else if (e.KeyCode == Keys.F7)
                {
                    if (m_active_textbox != null)
                    {
                        if (m_active_textbox.Focused)
                        {
                            DoFindSameHarakat(m_active_textbox);
                        }
                    }
                }
                else if (e.KeyCode == Keys.F8)
                {
                    if (m_active_textbox != null)
                    {
                        if (m_active_textbox.Focused)
                        {
                            DoFindSameVerses(m_active_textbox);
                        }
                    }
                }
                else if (e.KeyCode == Keys.F9)
                {
                    if (m_active_textbox != null)
                    {
                        if (m_active_textbox.Focused)
                        {
                            DoFindSameValue(m_active_textbox);
                        }
                    }
                }
                else if (e.KeyCode == Keys.F10)
                {
                }
                else if (e.KeyCode == Keys.F11)
                {
                    ToggleWordWrap();
                }
                else if (e.KeyCode == Keys.F12)
                {
                    if (this.WindowState != FormWindowState.Maximized)
                    {
                        this.WindowState = FormWindowState.Maximized;
                        this.FormBorderStyle = FormBorderStyle.None;
                    }
                    else
                    {
                        this.WindowState = FormWindowState.Normal;
                        this.FormBorderStyle = FormBorderStyle.Sizable;
                    }
                }
                else
                {
                    // let editor process key
                }
            }
            else if (!e.Alt && !e.Control && e.Shift)
            {
                if ((e.KeyCode == Keys.Back) || (e.KeyCode == Keys.BrowserBack))
                {
                    if (m_active_textbox != null)
                    {
                        if (
                            ((m_active_textbox.Focused) && (m_translation_readonly)) ||
                            (BrowseHistoryBackwardButton.Focused) ||
                            (BrowseHistoryForwardButton.Focused) ||
                            (BrowseHistoryCounterLabel.Focused)
                           )
                        {
                            BrowseHistoryForwardButton_Click(null, null);
                            e.Handled = true; // stop annoying beep
                        }
                    }
                }
                else if ((e.KeyCode == Keys.BrowserForward))
                {
                    if (m_active_textbox != null)
                    {
                        if (
                            ((m_active_textbox.Focused) && (m_translation_readonly)) ||
                            (BrowseHistoryBackwardButton.Focused) ||
                            (BrowseHistoryForwardButton.Focused) ||
                            (BrowseHistoryCounterLabel.Focused)
                           )
                        {
                            BrowseHistoryBackwardButton_Click(null, null);
                            e.Handled = true; // stop annoying beep
                        }
                    }
                }
                else if (e.KeyCode == Keys.F1)
                {
                }
                else if (e.KeyCode == Keys.F2)
                {
                }
                else if (e.KeyCode == Keys.F3)
                {
                    if (m_found_verses_displayed)
                    {
                        SelectPreviousFindMatch();
                    }
                    else
                    {
                        BookmarkBackwardButton_Click(null, null);
                    }
                }
                else if (e.KeyCode == Keys.F4)
                {
                }
                else if (e.KeyCode == Keys.F5)
                {
                    if (m_active_textbox != null)
                    {
                        if (m_active_textbox.Focused)
                        {
                            DoFindSimilarVerses(m_active_textbox);
                        }
                    }
                }
                else if (e.KeyCode == Keys.F6)
                {
                }
                else if (e.KeyCode == Keys.F7)
                {
                }
                else if (e.KeyCode == Keys.F8)
                {
                }
                else if (e.KeyCode == Keys.F9)
                {
                }
                else if (e.KeyCode == Keys.F10)
                {
                }
                else if (e.KeyCode == Keys.F11)
                {
                }
                else if (e.KeyCode == Keys.F12)
                {
                }
                else
                {
                    // let editor process key
                }
            }
        }
    }
    private void MainForm_Resize(object sender, EventArgs e)
    {
        if (this.WindowState != FormWindowState.Minimized)
        {
            m_maximized_before_minimized = this.WindowState == FormWindowState.Maximized;
        }

        if (PictureBox.Visible)
        {
            RedrawImage();
        }
        else
        {
            if (m_player != null)
            {
                if (m_player.Closed)
                {
                    Verse verse = GetCurrentVerse();
                    if (verse != null)
                    {
                        if (m_active_textbox != null)
                        {
                            int start = m_active_textbox.SelectionStart;
                            int length = m_active_textbox.SelectionLength;
                            m_active_textbox.AlignToLineStart();
                            m_active_textbox.Select(start, length);
                        }
                    }
                }
            }
        }
    }
    private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
    {
        //// prevent user from closing from the X close button
        //if (e.CloseReason == CloseReason.UserClosing)
        //{
        //    e.Cancel = true;
        //    this.Visible = false;
        //}
    }
    private void MainForm_FormClosed(object sender, FormClosedEventArgs e)
    {
        CloseApplication();
    }
    private void CloseApplication()
    {
        try
        {
            // save current note (if any)
            BookmarkTextBox_Leave(null, null);

            if (m_client != null)
            {
                // save bookmarks of all texts of current client
                m_client.SaveBookmarks();

                // save user history
                m_client.SaveHistoryItems();
            }

            // save application options
            SaveApplicationOptions();

            PlayerStopLabel_Click(null, null);

            // remove icon from tray
            if (NotifyIcon != null)
            {
                NotifyIcon.Visible = false;
                NotifyIcon.Dispose();
            }

            if (DivisorUpTimer != null)
            {
                DivisorUpTimer.Dispose();
            }
            if (DivisorDownTimer != null)
            {
                DivisorDownTimer.Dispose();
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
    }
    private bool m_maximized_before_minimized = false;
    private void NotifyIcon_MouseClick(object sender, MouseEventArgs e)
    {
        if (e.Button == MouseButtons.Left)
        {
            if (this.Visible == true)
            {
                this.Visible = false;
            }
            else
            {
                this.Visible = true;
                if (this.WindowState == FormWindowState.Minimized)
                {
                    if (m_maximized_before_minimized)
                    {
                        this.WindowState = FormWindowState.Maximized;
                    }
                    else
                    {
                        this.WindowState = FormWindowState.Normal;
                    }
                }
                this.Activate();    // bring to foreground
            }
        }
    }
    private void NotifyIcon_MouseDoubleClick(object sender, MouseEventArgs e)
    {
        this.Visible = false;
        //VersionLabel_Click(null, null); //??? runtime error
    }
    private void AboutToolStripMenuItem_Click(object sender, EventArgs e)
    {
        VersionLabel_Click(null, null);
    }
    private void ExitToolStripMenuItem_Click(object sender, EventArgs e)
    {
        CloseApplication();
        Application.Exit();
        System.Environment.Exit(0);
    }
    private void HandleEscapeKeyPress(object sender, KeyEventArgs e)
    {
        if (NumerologySystemComboBox.DroppedDown)
        {
            NumerologySystemComboBox.DroppedDown = false;
        }
        else if (ResearchMethodsComboBox.DroppedDown)
        {
            ResearchMethodsComboBox.DroppedDown = false;
        }
        else if (ChapterSortComboBox.DroppedDown)
        {
            ChapterSortComboBox.DroppedDown = false;
        }
        else if (TranslatorComboBox.DroppedDown)
        {
            TranslatorComboBox.DroppedDown = false;
        }
        else if (ReciterComboBox.DroppedDown)
        {
            ReciterComboBox.DroppedDown = false;
        }
        else if (BookmarkTextBox.Focused)
        {
            BookmarkTextBox.Text = null;
        }
        else if (TranslatorsCheckedListBox.Visible)
        {
            TranslationsCancelSettingsLabel_Click(null, null);
        }
        else if (RecitationsDownloadGroupBox.Visible)
        {
            RecitationsCancelSettingsLabel_Click(null, null);
        }
        else if ((TranslationTextBox.Focused) || (TranslationsTextBox.Focused))
        {
            DisplayTranslations(new List<Verse>(m_translated_verses));
        }
        else if (!m_translation_readonly)
        {
            EditSaveTranslationLabel_Click(null, null);
        }
        else if (PictureBox.Visible)
        {
            HidePictureBox();
        }
        else if ((LetterFrequencyListView.Focused) && (LetterFrequencyListView.SelectedIndices.Count > 0))
        {
            LetterFrequencyListView.SelectedIndices.Clear();
        }
        else
        {
            if (m_found_verses_displayed)
            {
                if (ChaptersListBox.SelectedIndices.Count > 0)
                {
                    DisplaySearchResults();
                }
                else
                {
                    SwitchActiveTextBox();
                }
            }
            else
            {
                SwitchActiveTextBox();
            }
        }
    }
    private void EscapeButton_Click(object sender, EventArgs e)
    {
        HandleEscapeKeyPress(null, null);
    }
    private void DisplaySearchResults()
    {
        // must clear to go back to main results not main text
        ChaptersListBox.SelectedIndices.Clear();

        int pos = m_find_result_header.IndexOf(" of ");
        if (pos > -1)
        {
            m_find_result_header = m_find_result_header.Substring(pos + 4);
        }

        m_client.FilterChapters = null;
        ClearFindMatches(); // clear m_find_matches for F3 to work correctly in filtered result
        if (m_search_type == SearchType.Numbers)
        {
            switch (m_numbers_result_type)
            {
                case NumbersResultType.Letters:
                case NumbersResultType.Words:
                case NumbersResultType.WordRanges:
                case NumbersResultType.Verses:
                    DisplayFoundVerses(false, false);
                    break;
                case NumbersResultType.VerseRanges:
                    DisplayFoundVerseRanges(false, false);
                    break;
                case NumbersResultType.Chapters:
                    DisplayFoundChapters(false, false);
                    break;
                case NumbersResultType.ChapterRanges:
                    DisplayFoundChapterRanges(false, false);
                    break;
                default:
                    DisplayFoundVerses(false, false);
                    break;
            }
        }
        else
        {
            DisplayFoundVerses(false, false);
        }

        //SearchResultTextBox.Focus();
        //SearchResultTextBox.Refresh();
    }
    private void SwitchActiveTextBox()
    {
        if (m_active_textbox != null)
        {
            if (m_found_verses_displayed)
            {
                SwitchToMainTextBox();
            }
            else
            {
                SwitchToSearchResultTextBox();
            }

            PlayerStopLabel_Click(null, null);


            // this code has been moved out of SelectionChanged and brought to MouseClick and KeyUp
            // to keep all verse translations visible until the user clicks a verse then show one verse translation
            if (m_active_textbox.SelectionLength > 0)
            {
                // selected text is processed by CalculateAndDisplayCounts 

                DisplayWordFrequencies();

                GenerateSentencesLabel.Visible = (Globals.EDITION == Edition.Ultimate);
                DuplicateLettersCheckBox.Visible = (Globals.EDITION == Edition.Ultimate);
                GenerateSentencesLabel.Refresh();
                DuplicateLettersCheckBox.Refresh();
            }
            else
            {
                Verse verse = GetCurrentVerse();
                if (verse != null)
                {
                    DisplayTranslations(verse);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();
                }
                else
                {
                    TranslationTextBox.WordWrap = m_active_textbox.WordWrap;
                    TranslationTextBox.Text = null;
                    TranslationTextBox.Refresh();

                    TranslationsTextBox.WordWrap = m_active_textbox.WordWrap;
                    TranslationsTextBox.Text = null;
                    TranslationsTextBox.Refresh();

                    m_translation_readonly = true;
                    UpdateTranslationReadOnly();
                    EditSaveTranslationLabel.Enabled = false;
                }

                ToolTip.SetToolTip(InspectChaptersLabel, L[l]["Inspect chapters"]);
                WordsListBoxLabel.Visible = false;
                WordsListBox.Visible = false;
                WordsListBox.SendToBack();

                GenerateSentencesLabel.Visible = false;
                DuplicateLettersCheckBox.Visible = false;
                GenerateSentencesLabel.Refresh();
                DuplicateLettersCheckBox.Refresh();
            }

            UpdateHeaderLabel();

            //m_active_textbox.Focus(); // keep focus in NumericUpDown search options
            MainTextBox_SelectionChanged(m_active_textbox, null);
        }
    }
    private void UpdateNumericMinMax()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                PageNumericUpDown.Minimum = 1;
                PageNumericUpDown.Maximum = m_client.Book.Pages.Count;
                StationNumericUpDown.Minimum = 1;
                StationNumericUpDown.Maximum = m_client.Book.Stations.Count;
                PartNumericUpDown.Minimum = 1;
                PartNumericUpDown.Maximum = m_client.Book.Parts.Count;
                GroupNumericUpDown.Minimum = 1;
                GroupNumericUpDown.Maximum = m_client.Book.Groups.Count;
                HalfNumericUpDown.Minimum = 1;
                HalfNumericUpDown.Maximum = m_client.Book.Halfs.Count;
                QuarterNumericUpDown.Minimum = 1;
                QuarterNumericUpDown.Maximum = m_client.Book.Quarters.Count;
                BowingNumericUpDown.Minimum = 1;
                BowingNumericUpDown.Maximum = m_client.Book.Bowings.Count;
                PageNumericUpDown.Minimum = 1;
                PageNumericUpDown.Maximum = m_client.Book.Pages.Count;
                VerseNumericUpDown.Minimum = 1;
                VerseNumericUpDown.Maximum = m_client.Book.Verses.Count;
            }
        }
    }
    // speed up by only showing text when needed
    private enum TextDisplayMode { None, QuranOnly, TranslationOnly, Both };
    TextDisplayMode m_text_display_mode = TextDisplayMode.Both;
    private void ClientSplitContainer_Resize(object sender, EventArgs e)
    {
        if (this.ClientSplitContainer.Width < 40)
        {
            m_text_display_mode = TextDisplayMode.None;
        }
        else // find out what it should be from SplitterDistance
        {
            ClientSplitContainer_SplitterMoved(null, null);
        }
    }
    private void ClientSplitContainer_SplitterMoved(object sender, SplitterEventArgs e)
    {
        if (this.ClientSplitContainer.Width > 0)
        {
            m_information_box_top = this.ClientSplitContainer.SplitterDistance;
            if (m_information_box_top <= 40)
            {
                m_text_display_mode = TextDisplayMode.TranslationOnly;
            }
            else if (m_information_box_top > (ClientSplitContainer.Height - 40))
            {
                m_text_display_mode = TextDisplayMode.QuranOnly;
            }
            else
            {
                m_text_display_mode = TextDisplayMode.Both;
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Initialization
    ///////////////////////////////////////////////////////////////////////////////
    private void LoadApplicationFolders()
    {
        if (File.Exists(m_ini_filename))
        {
            try
            {
                using (StreamReader reader = File.OpenText(m_ini_filename))
                {
                    while (!reader.EndOfStream)
                    {
                        string line = reader.ReadLine();
                        if (!String.IsNullOrEmpty(line))
                        {
                            string[] parts = line.Split('=');
                            if (parts.Length >= 2)
                            {
                                switch (parts[0])
                                {
                                    // [Folders]
                                    case "LanguagesFolder":
                                        {
                                            Globals.LANGUAGES_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "NumbersFolder":
                                        {
                                            Globals.NUMBERS_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "FontsFolder":
                                        {
                                            Globals.FONTS_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "ImagesFolder":
                                        {
                                            Globals.IMAGES_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "DataFolder":
                                        {
                                            Globals.DATA_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "AudioFolder":
                                        {
                                            Globals.AUDIO_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "TranslationsFolder":
                                        {
                                            Globals.TRANSLATIONS_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "RulesFolder":
                                        {
                                            Globals.RULES_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "ValuesFolder":
                                        {
                                            Globals.VALUES_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "StatisticsFolder":
                                        {
                                            Globals.STATISTICS_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "ResearchFolder":
                                        {
                                            Globals.RESEARCH_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "DrawingsFolder":
                                        {
                                            Globals.DRAWINGS_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "BookmarksFolder":
                                        {
                                            Globals.BOOKMARKS_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "HistoryFolder":
                                        {
                                            Globals.HISTORY_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "HelpFolder":
                                        {
                                            Globals.HELP_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                }
                            }
                        }
                    }
                }
            }
            catch
            {
                // continue with next INI entry
            }
        }
    }
    private string LoadNumerologySystemName()
    {
        if (File.Exists(m_ini_filename))
        {
            using (StreamReader reader = File.OpenText(m_ini_filename))
            {
                while (!reader.EndOfStream)
                {
                    string line = reader.ReadLine();
                    if (!String.IsNullOrEmpty(line))
                    {
                        string[] parts = line.Split('=');
                        if (parts.Length >= 2)
                        {
                            if (parts[0] == "NumerologySystem")
                            {
                                try
                                {
                                    return parts[1].Trim();
                                }
                                catch
                                {
                                    return NumerologySystem.DEFAULT_NAME;
                                }
                            }
                        }
                    }
                }
            }
        }
        return NumerologySystem.DEFAULT_NAME;
    }
    private string LoadEmlaaeiBismWawShaddaOptions()
    {
        if (File.Exists(m_ini_filename))
        {
            using (StreamReader reader = File.OpenText(m_ini_filename))
            {
                while (!reader.EndOfStream)
                {
                    string line = reader.ReadLine();
                    if (!String.IsNullOrEmpty(line))
                    {
                        string[] parts = line.Split('=');
                        if (parts.Length >= 2)
                        {
                            switch (parts[0])
                            {
                                case "EmlaaeiText":
                                    {
                                        try
                                        {
                                            m_emlaaei_text = bool.Parse(parts[1].Trim());
                                        }
                                        catch
                                        {
                                            m_emlaaei_text = false;
                                        }
                                    }
                                    break;
                                case "WithBismAllah":
                                    {
                                        try
                                        {
                                            m_with_bism_Allah = bool.Parse(parts[1].Trim());
                                        }
                                        catch
                                        {
                                            m_with_bism_Allah = true;
                                        }
                                    }
                                    break;
                                case "WawAsWord":
                                    {
                                        try
                                        {
                                            m_waw_as_word = bool.Parse(parts[1].Trim());
                                        }
                                        catch
                                        {
                                            m_waw_as_word = false;
                                        }
                                    }
                                    break;
                                case "ShaddaAsLetter":
                                    {
                                        try
                                        {
                                            m_shadda_as_letter = bool.Parse(parts[1].Trim());
                                        }
                                        catch
                                        {
                                            m_shadda_as_letter = false;
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                }
            }
        }
        return NumerologySystem.DEFAULT_NAME;
    }
    private void LoadApplicationSettings()
    {
        try
        {
            // must be after the populates...
            LoadApplicationOptions();

            RadixValueLabel.Text = m_radix.ToString();
            DivisorValueLabel.Text = m_divisor.ToString();

            ApplyTranslationFontAndColor();

            // WARNING: updates size BUT loses the font face in right-to-left RichTextBox
            //SetFontSize(m_font_size);
            // so use ZoomFactor instead
            MainTextBox.ZoomFactor = m_text_zoom_factor;
            SearchResultTextBox.ZoomFactor = m_text_zoom_factor;

            PlayerVolumeTrackBar.Value = m_audio_volume / (1000 / PlayerVolumeTrackBar.Maximum);
            PlayerVerseSilenceGapTrackBar.Value = (int)(m_silence_between_verses * (PlayerVerseSilenceGapTrackBar.Maximum / 2));
            PlayerSelectionSilenceGapTrackBar.Value = m_silence_between_selections;

            UpdateFindByNumbersResultType();
            UpdateDistancesOptions();

            EnableDisableAddToCheckBoxes();
        }
        catch (Exception ex)
        {
            while (ex != null)
            {
                //Console.WriteLine(ex.Message);
                MessageBox.Show(ex.Message, Application.ProductName);
                ex = ex.InnerException;
            }
        }
    }
    private void LoadApplicationOptions()
    {
        try
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (File.Exists(m_ini_filename))
                    {
                        // Selection.Scope and Selection.Indexes are immutable/readonly so create a new Selection to replace m_client.Selection 
                        SelectionScope selection_scope = SelectionScope.Book;
                        List<int> selection_indexes = new List<int>();

                        using (StreamReader reader = File.OpenText(m_ini_filename))
                        {
                            while (!reader.EndOfStream)
                            {
                                string line = reader.ReadLine();
                                if (!String.IsNullOrEmpty(line))
                                {
                                    if (line.StartsWith("#")) continue;

                                    string[] parts = line.Split('=');
                                    if (parts.Length >= 2)
                                    {
                                        switch (parts[0])
                                        {
                                            // [Window]
                                            case "Top":
                                                {
                                                    try
                                                    {
                                                        this.Top = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        this.Top = 100;
                                                    }
                                                }
                                                break;
                                            case "Left":
                                                {
                                                    try
                                                    {
                                                        this.Left = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        this.Left = 100;
                                                    }
                                                }
                                                break;
                                            case "Width":
                                                {
                                                    try
                                                    {
                                                        this.Width = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        this.Width = DEFAULT_WINDOW_WIDTH;
                                                    }
                                                }
                                                break;
                                            case "Height":
                                                {
                                                    try
                                                    {
                                                        this.Height = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        this.Height = DEFAULT_WINDOW_HEIGHT;
                                                    }
                                                }
                                                break;
                                            case "DrawingWidth":
                                                {
                                                    try
                                                    {
                                                        Drawing.WIDTH = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        // use default Drawing.WIDTH
                                                    }
                                                }
                                                break;
                                            case "DrawingHeight":
                                                {
                                                    try
                                                    {
                                                        Drawing.HEIGHT = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        // use default Drawing.HEIGHT
                                                    }
                                                }
                                                break;
                                            case "Language":
                                                {
                                                    int index = int.Parse(parts[1].Trim());
                                                    if ((index >= 0) && (index < this.LanguageComboBox.Items.Count))
                                                    {
                                                        this.LanguageComboBox.SelectedIndex = index;
                                                    }
                                                    else if (this.LanguageComboBox.Items.Contains(DEFAULT_LANGUAGE))
                                                    {
                                                        this.LanguageComboBox.SelectedItem = DEFAULT_LANGUAGE;
                                                    }
                                                    else
                                                    {
                                                        this.LanguageComboBox.SelectedIndex = 0;
                                                    }
                                                }
                                                break;
                                            case "InformationBoxTop":
                                                {
                                                    try
                                                    {
                                                        m_information_box_top = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_information_box_top = DEFAULT_INFORMATION_BOX_TOP;
                                                    }
                                                }
                                                break;
                                            case "InformationPageIndex":
                                                {
                                                    try
                                                    {
                                                        m_information_page_index = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_information_page_index = 0;
                                                    }
                                                }
                                                break;
                                            case "TranslationBoxWidth":
                                                {
                                                    try
                                                    {
                                                        m_translation_box_width = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_translation_box_width = DEFAULT_TRANSLATION_BOX_WIDTH;
                                                    }
                                                }
                                                break;
                                            case "Translator":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.TranslatorComboBox.Items.Count))
                                                        {
                                                            this.TranslatorComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        string item = m_client.Book.TranslationInfos[Client.DEFAULT_TRANSLATION].Name;
                                                        if (this.TranslatorComboBox.Items.Contains(item))
                                                        {
                                                            this.TranslatorComboBox.SelectedItem = item;
                                                        }
                                                        else
                                                        {
                                                            this.TranslatorComboBox.SelectedIndex = -1;
                                                        }
                                                    }
                                                }
                                                break;
                                            case "Translators":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.TranslatorsComboBox.Items.Count))
                                                        {
                                                            this.TranslatorsComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        string item = m_client.Book.TranslationInfos[Client.DEFAULT_EMLAAEI_TEXT].Name;
                                                        if (this.TranslatorsComboBox.Items.Contains(item))
                                                        {
                                                            this.TranslatorsComboBox.SelectedItem = item;
                                                        }
                                                        else
                                                        {
                                                            this.TranslatorsComboBox.SelectedIndex = -1;
                                                        }
                                                    }
                                                }
                                                break;
                                            case "ShowToolTip":
                                                {
                                                    try
                                                    {
                                                        ShowToolTipsCheckBox.Checked = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        ShowToolTipsCheckBox.Checked = true;
                                                    }
                                                }
                                                break;
                                            case "ShowAllTranslations":
                                                {
                                                    try
                                                    {
                                                        m_show_all_translations = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_show_all_translations = true;
                                                    }
                                                    AllTranslatorsCheckBox.Checked = m_show_all_translations;
                                                }
                                                break;
                                            case "SymmetryType":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.SymmetryTypeComboBox.Items.Count))
                                                        {
                                                            this.SymmetryTypeComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        this.SymmetryTypeComboBox.SelectedIndex = -1;
                                                    }
                                                }
                                                break;
                                            case "SymmetryIncludeBoundaryCases":
                                                {
                                                    try
                                                    {
                                                        m_symmetry_include_boundary_cases = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_symmetry_include_boundary_cases = false;
                                                    }
                                                }
                                                break;
                                            case "CVWLSequenceType":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.CVWLSequenceTypeComboBox.Items.Count))
                                                        {
                                                            this.CVWLSequenceTypeComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        this.CVWLSequenceTypeComboBox.SelectedIndex = -1;
                                                    }
                                                }
                                                break;
                                            case "CVWLSequenceDirection":
                                                {
                                                    try
                                                    {
                                                        m_cvwl_sequence_right_to_left = !bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_cvwl_sequence_right_to_left = false;
                                                    }
                                                    CVWLSequenceDirectionLabel_Click(null, null);
                                                }
                                                break;
                                            case "CVWLSequenceShowFactors":
                                                {
                                                    try
                                                    {
                                                        m_cvwl_sequence_show_factors = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_cvwl_sequence_show_factors = false;
                                                    }
                                                    CVWLSequenceShowFactorsCheckBox.Checked = m_cvwl_sequence_show_factors;
                                                }
                                                break;
                                            case "ValuesSequenceRadix":
                                                {
                                                    try
                                                    {
                                                        m_values_sequence_radix = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_values_sequence_radix = DEFAULT_RADIX;
                                                    }
                                                    ValuesSequenceRadixNumericUpDown.Value = m_values_sequence_radix;
                                                }
                                                break;
                                            case "ValuesSequenceScope":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.ValuesSequenceScopeComboBox.Items.Count))
                                                        {
                                                            this.ValuesSequenceScopeComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        this.ValuesSequenceScopeComboBox.SelectedIndex = -1;
                                                    }
                                                }
                                                break;
                                            case "ValuesSequenceDirection":
                                                {
                                                    try
                                                    {
                                                        m_values_sequence_right_to_left = !bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_values_sequence_right_to_left = false;
                                                    }
                                                    ValuesSequenceDirectionLabel_Click(null, null);
                                                }
                                                break;
                                            case "DNASequenceSystem":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.DNASequenceSystemComboBox.Items.Count))
                                                        {
                                                            this.DNASequenceSystemComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        string item = DNASequenceSystem.DEFAULT_NAME;
                                                        if (this.DNASequenceSystemComboBox.Items.Contains(item))
                                                        {
                                                            this.DNASequenceSystemComboBox.SelectedItem = item;
                                                        }
                                                        else
                                                        {
                                                            this.DNASequenceSystemComboBox.SelectedIndex = -1;
                                                        }
                                                    }
                                                }
                                                break;
                                            case "DNASequenceDirection":
                                                {
                                                    try
                                                    {
                                                        m_dna_sequence_right_to_left = !bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_dna_sequence_right_to_left = false;
                                                    }
                                                    DNASequenceDirectionLabel_Click(null, null);
                                                }
                                                break;
                                            // [Numbers]
                                            case "Radix":
                                                {
                                                    try
                                                    {
                                                        m_radix = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_radix = DEFAULT_RADIX;
                                                    }
                                                    RadixValueLabel.Text = m_radix.ToString();
                                                }
                                                break;
                                            case "GlobalDivisor":
                                                {
                                                    try
                                                    {
                                                        m_divisor = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_divisor = DEFAULT_DIVISOR;
                                                    }
                                                    DivisorValueLabel.Text = m_divisor.ToString();
                                                }
                                                break;
                                            case "TotalChapterCounts":
                                                {
                                                    try
                                                    {
                                                        m_total_chapter_counts = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_total_chapter_counts = false;
                                                    }
                                                    TotalChapterCountsCheckBox.Checked = m_total_chapter_counts;
                                                }
                                                break;
                                            case "NumerologySystem":
                                                {
                                                    // m_client.NumerologySystem.Name
                                                    // was read by LoadNumerologySystemName()
                                                    // continue with other m_client.NumerologySystem.Xxx
                                                    if (m_client.NumerologySystem != null)
                                                    {
                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterLNumber = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterWNumber = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterVNumber = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterCNumber = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterLDistance = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterWDistance = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterVDistance = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterCDistance = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToWordWNumber = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToWordVNumber = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToWordCNumber = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToWordWDistance = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToWordVDistance = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToWordCDistance = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToVerseVNumber = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToVerseCNumber = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToVerseVDistance = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToVerseCDistance = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToChapterCNumber = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddPositions = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddDistancesToPrevious = bool.Parse(parts[1].Trim());
                                                            AddDistancesToPreviousCheckBox.Checked = m_client.NumerologySystem.AddDistancesToPrevious;
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddDistancesToNext = bool.Parse(parts[1].Trim());
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddDistancesWithinChapters = bool.Parse(parts[1].Trim());
                                                            if (m_client.Book != null)
                                                            {
                                                                m_client.Book.SetupDistances(m_client.NumerologySystem.AddDistancesWithinChapters);
                                                            }
                                                        }

                                                        // must be called here
                                                        UpdateNumerologySystemControls();

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_show_add_controls = bool.Parse(parts[1].Trim());
                                                        }
                                                        if (!m_show_add_controls)
                                                        {
                                                            m_show_add_controls = !m_show_add_controls;
                                                            ValueLabel_Click(null, null);
                                                        }
                                                    }
                                                }
                                                break;
                                            case "MathsDivisor":
                                                {
                                                    try
                                                    {
                                                        m_maths_divisor = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_maths_divisor = DEFAULT_DIVISOR;
                                                    }
                                                    MathsDivisorNumericUpDown.Value = m_maths_divisor;
                                                }
                                                break;
                                            case "MathsUpdateGlobalDivisor":
                                                {
                                                    try
                                                    {
                                                        m_maths_update_global_divisor = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_maths_update_global_divisor = false;
                                                    }
                                                    MathsUpdateDivisorCheckBox.Checked = m_maths_update_global_divisor;
                                                }
                                                break;
                                            case "WordNumberScope":
                                                {
                                                    try
                                                    {
                                                        m_word_number_scope = (NumberScope)Enum.Parse(typeof(NumberScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_word_number_scope = NumberScope.Number;
                                                    }
                                                }
                                                break;
                                            case "VerseNumberScope":
                                                {
                                                    try
                                                    {
                                                        m_verse_number_scope = (NumberScope)Enum.Parse(typeof(NumberScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_verse_number_scope = NumberScope.Number;
                                                    }
                                                }
                                                break;
                                            case "ChapterNumberScope":
                                                {
                                                    try
                                                    {
                                                        m_chapter_number_scope = (NumberScope)Enum.Parse(typeof(NumberScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_chapter_number_scope = NumberScope.Number;
                                                    }
                                                }
                                                break;
                                            case "DistancesRunningChapterNumberScope":
                                                {
                                                    try
                                                    {
                                                        m_distances_running_chapter_number_scope = (NumberScope)Enum.Parse(typeof(NumberScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_distances_running_chapter_number_scope = NumberScope.Number;
                                                    }
                                                }
                                                break;
                                            case "DistancesRunningVerseNumberScope":
                                                {
                                                    try
                                                    {
                                                        m_distances_running_verse_number_scope = (NumberScope)Enum.Parse(typeof(NumberScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_distances_running_verse_number_scope = NumberScope.NumberInChapter;
                                                    }
                                                }
                                                break;
                                            case "DistancesRunningWordNumberScope":
                                                {
                                                    try
                                                    {
                                                        m_distances_running_word_number_scope = (NumberScope)Enum.Parse(typeof(NumberScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_distances_running_word_number_scope = NumberScope.NumberInVerse;
                                                    }
                                                }
                                                break;
                                            case "DistancesDivisor":
                                                {
                                                    try
                                                    {
                                                        m_distances_divisor = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_distances_divisor = DEFAULT_DIVISOR;
                                                    }
                                                    DistancesDivisorNumericUpDown.Value = m_distances_divisor;
                                                }
                                                break;
                                            case "DistancesUpdateGlobalDivisor":
                                                {
                                                    try
                                                    {
                                                        m_distances_update_global_divisor = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_distances_update_global_divisor = false;
                                                    }
                                                    DistancesUpdateDivisorCheckBox.Checked = m_distances_update_global_divisor;
                                                }
                                                break;
                                            // [Text]
                                            case "ChapterSortMethod":
                                                {
                                                    try
                                                    {
                                                        m_chapter_sort_method = (ChapterSortMethod)Enum.Parse(typeof(ChapterSortMethod), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_chapter_sort_method = ChapterSortMethod.ByCompilation;
                                                    }
                                                }
                                                break;
                                            case "ChapterSortOrder":
                                                {
                                                    try
                                                    {
                                                        m_chapter_sort_order = (ChapterSortOrder)Enum.Parse(typeof(ChapterSortOrder), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_chapter_sort_order = ChapterSortOrder.Ascending;
                                                    }
                                                }
                                                break;
                                            case "PinChapter1":
                                                {
                                                    try
                                                    {
                                                        m_pin_chapter1 = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_pin_chapter1 = false;
                                                    }
                                                }
                                                break;
                                            // [Display]
                                            case "MainTextWordWrap":
                                                {
                                                    try
                                                    {
                                                        m_word_wrap_main_textbox = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_word_wrap_main_textbox = false;
                                                    }
                                                }
                                                break;
                                            case "SearchResultWordWrap":
                                                {
                                                    try
                                                    {
                                                        m_word_wrap_search_textbox = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_word_wrap_search_textbox = false;
                                                    }
                                                }
                                                break;
                                            case "SelectionScope":
                                                {
                                                    try
                                                    {
                                                        selection_scope = (SelectionScope)Enum.Parse(typeof(SelectionScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        selection_scope = SelectionScope.Chapter;
                                                    }
                                                }
                                                break;
                                            case "SelectionIndexes":
                                                {
                                                    try
                                                    {
                                                        string part = parts[1].Trim();
                                                        string[] sub_parts = part.Split('+');
                                                        selection_indexes.Clear();
                                                        for (int i = 0; i < sub_parts.Length; i++)
                                                        {
                                                            int index = int.Parse(sub_parts[i].Trim()) - 1;
                                                            selection_indexes.Add(index);
                                                        }
                                                        m_client.Selection = new Selection(m_client.Book, selection_scope, selection_indexes);
                                                    }
                                                    catch
                                                    {
                                                        selection_indexes.Add(0);
                                                    }
                                                }
                                                break;
                                            case "QuranFont":
                                                {
                                                    // application-level font
                                                    try
                                                    {
                                                        string[] sub_parts = parts[1].Split(',');
                                                        if (sub_parts.Length >= 2)
                                                        {
                                                            string quran_font_name = sub_parts[0].Trim();
                                                            float quran_font_size = float.Parse(sub_parts[1].Replace("pt", "").Trim());
                                                            ApplyFont(quran_font_name, quran_font_size);
                                                        }
                                                        else
                                                        {
                                                            ApplyFont(DEFAULT_QURAN_FONT_NAME, DEFAULT_QURAN_FONT_SIZE);
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        ApplyFont(DEFAULT_QURAN_FONT_NAME, DEFAULT_QURAN_FONT_SIZE);
                                                    }
                                                }
                                                break;
                                            case "TranslationFont":
                                                {
                                                    // system-level font
                                                    try
                                                    {
                                                        string translation_font_properties = null;
                                                        for (int i = 1; i < parts.Length; i++)
                                                        {
                                                            translation_font_properties += parts[i] + "=";
                                                        }
                                                        translation_font_properties = translation_font_properties.Remove(translation_font_properties.Length - 1, 1);
                                                        m_translation_font = (Font)font_converter.ConvertFromString(translation_font_properties.Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_translation_font = new Font(DEFAULT_TRANSALTION_FONT_NAME, DEFAULT_TRANSALTION_FONT_SIZE);
                                                    }
                                                }
                                                break;
                                            case "TranslationColor":
                                                {
                                                    try
                                                    {
                                                        m_translation_color = (Color)color_converter.ConvertFromString(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_translation_color = DEFAULT_TRANSALTION_FONT_COLOR;
                                                    }
                                                }
                                                break;
                                            case "TextZoomFactor":
                                                {
                                                    try
                                                    {
                                                        m_text_zoom_factor = float.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_text_zoom_factor = DEFAULT_TEXT_ZOOM_FACTOR;
                                                    }
                                                }
                                                break;
                                            // [Audio]
                                            case "Reciter":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.ReciterComboBox.Items.Count))
                                                        {
                                                            this.ReciterComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        string item = m_client.Book.RecitationInfos[Client.DEFAULT_RECITATION].Reciter;
                                                        if (this.ReciterComboBox.Items.Contains(item))
                                                        {
                                                            this.ReciterComboBox.SelectedItem = item;
                                                        }
                                                        else
                                                        {
                                                            this.ReciterComboBox.SelectedIndex = -1;
                                                        }
                                                    }
                                                }
                                                break;
                                            case "Volume":
                                                {
                                                    try
                                                    {
                                                        m_audio_volume = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_audio_volume = DEFAULT_AUDIO_VOLUME;
                                                    }
                                                }
                                                break;
                                            case "VerseRepetitions":
                                                {
                                                    try
                                                    {
                                                        m_player_looping_count = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_player_looping_count = int.MaxValue; // infinite
                                                    }
                                                }
                                                break;
                                            case "VerseRepetitionsEnabled":
                                                {
                                                    try
                                                    {
                                                        m_player_looping = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_player_looping = false;
                                                    }
                                                }
                                                break;
                                            case "SelectionRepetitions":
                                                {
                                                    try
                                                    {
                                                        m_player_looping_all_count = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_player_looping_all_count = int.MaxValue; // infinite
                                                    }
                                                }
                                                break;
                                            case "SelectionRepetitionsEnabled":
                                                {
                                                    try
                                                    {
                                                        m_player_looping_all = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_player_looping_all = false;
                                                    }
                                                }
                                                break;
                                            case "SilenceBetweenVerses":
                                                {
                                                    try
                                                    {
                                                        m_silence_between_verses = float.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_silence_between_verses = 0.0F;
                                                    }
                                                }
                                                break;
                                            case "SilenceBetweenSelections":
                                                {
                                                    try
                                                    {
                                                        m_silence_between_selections = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_silence_between_selections = 0;
                                                    }
                                                }
                                                break;
                                            // [Downloads]
                                            case "TranslationUrlPrefix":
                                                {
                                                    try
                                                    {
                                                        TranslationInfo.UrlPrefix = parts[1].Trim();
                                                    }
                                                    catch
                                                    {
                                                        TranslationInfo.UrlPrefix = TranslationInfo.DEFAULT_URL_PREFIX;
                                                    }
                                                }
                                                break;
                                            case "TranslationFileType":
                                                {
                                                    try
                                                    {
                                                        TranslationInfo.FileType = parts[1].Trim();
                                                    }
                                                    catch
                                                    {
                                                        TranslationInfo.FileType = TranslationInfo.DEFAULT_FILE_TYPE;
                                                    }
                                                }
                                                break;
                                            case "TranslationIconUrlPrefix":
                                                {
                                                    try
                                                    {
                                                        TranslationInfo.IconUrlPrefix = parts[1].Trim();
                                                    }
                                                    catch
                                                    {
                                                        TranslationInfo.IconUrlPrefix = TranslationInfo.DEFAULT_ICON_URL_PREFIX;
                                                    }
                                                }
                                                break;
                                            case "RecitationUrlPrefix":
                                                {
                                                    try
                                                    {
                                                        RecitationInfo.UrlPrefix = parts[1].Trim();
                                                    }
                                                    catch
                                                    {
                                                        RecitationInfo.UrlPrefix = RecitationInfo.DEFAULT_URL_PREFIX;
                                                    }
                                                }
                                                break;
                                            case "RecitationFileType":
                                                {
                                                    try
                                                    {
                                                        RecitationInfo.FileType = parts[1].Trim();
                                                    }
                                                    catch
                                                    {
                                                        RecitationInfo.FileType = RecitationInfo.DEFAULT_FILE_TYPE;
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else // first Application launch
                    {
                        this.StartPosition = FormStartPosition.Manual;
                        this.Top = Screen.PrimaryScreen.WorkingArea.Top;
                        this.Left = Screen.PrimaryScreen.WorkingArea.Left;
                        this.Width = DEFAULT_WINDOW_WIDTH;
                        this.Height = DEFAULT_WINDOW_HEIGHT;
                        //this.WindowState = FormWindowState.Maximized;

                        ApplyFont(DEFAULT_QURAN_FONT_NAME, DEFAULT_QURAN_FONT_SIZE);
                        m_translation_font = new Font(DEFAULT_TRANSALTION_FONT_NAME, DEFAULT_TRANSALTION_FONT_SIZE);
                        AllTranslatorsCheckBox.Checked = m_show_all_translations;

                        if (this.LanguageComboBox.Items.Count > 0)
                        {
                            if (this.LanguageComboBox.Items.Contains(DEFAULT_LANGUAGE))
                            {
                                this.LanguageComboBox.SelectedItem = DEFAULT_LANGUAGE;
                            }
                            else
                            {
                                this.LanguageComboBox.SelectedIndex = 0;
                            }
                        }

                        if (this.ChapterComboBox.Items.Count > 0)
                        {
                            this.ChapterComboBox.SelectedIndex = 0;
                        }
                        string item = null;
                        if (m_client.Book.TranslationInfos.ContainsKey(Client.DEFAULT_TRANSLATION))
                        {
                            item = m_client.Book.TranslationInfos[Client.DEFAULT_TRANSLATION].Name;
                            if (this.TranslatorComboBox.Items.Contains(item))
                            {
                                this.TranslatorComboBox.SelectedItem = item;
                            }
                        }
                        if (m_client.Book.TranslationInfos.ContainsKey(Client.DEFAULT_EMLAAEI_TEXT))
                        {
                            item = m_client.Book.TranslationInfos[Client.DEFAULT_EMLAAEI_TEXT].Name;
                            if (this.TranslatorsComboBox.Items.Contains(item))
                            {
                                this.TranslatorsComboBox.SelectedItem = item;
                            }
                        }
                        if (this.SymmetryTypeComboBox.Items.Count > 0)
                        {
                            this.SymmetryTypeComboBox.SelectedIndex = 0;
                        }
                        if (this.CVWLSequenceTypeComboBox.Items.Count > 0)
                        {
                            this.CVWLSequenceTypeComboBox.SelectedIndex = 0;
                        }
                        if (this.ValuesSequenceScopeComboBox.Items.Count > 0)
                        {
                            this.ValuesSequenceScopeComboBox.SelectedIndex = 0;
                        }
                        item = DNASequenceSystem.DEFAULT_NAME;
                        if (this.DNASequenceSystemComboBox.Items.Contains(item))
                        {
                            this.DNASequenceSystemComboBox.SelectedItem = item;
                        }

                        m_values_sequence_radix = DEFAULT_RADIX;
                        ValuesSequenceRadixNumericUpDown.Value = m_values_sequence_radix;
                        m_maths_divisor = DEFAULT_DIVISOR;
                        MathsDivisorNumericUpDown.Value = m_maths_divisor;
                        m_distances_divisor = DEFAULT_DIVISOR;
                        DistancesDivisorNumericUpDown.Value = m_distances_divisor;

                        ShowToolTipsCheckBox.Checked = true;

                        m_show_add_controls = true;
                        ValueLabel_Click(null, null);

                        if (m_client.NumerologySystem != null)
                        {
                            m_client.NumerologySystem.AddDistancesWithinChapters = true;
                            if (m_client.Book != null)
                            {
                                m_client.Book.SetupDistances(m_client.NumerologySystem.AddDistancesWithinChapters);
                            }
                        }

                        // select chapter Al-Fatiha as default
                        m_client.Selection = new Selection(m_client.Book, SelectionScope.Chapter, new List<int>() { 0 });
                    }
                }
            }
        }
        catch
        {
            // continue with next INI entry
        }
    }
    private void SaveApplicationOptions()
    {
        try
        {
            if (m_client != null)
            {
                using (StreamWriter writer = new StreamWriter(m_ini_filename, false, Encoding.Unicode))
                {
                    if (this.WindowState == FormWindowState.Maximized)
                    {
                        this.WindowState = FormWindowState.Normal;
                    }

                    writer.WriteLine("[Window]");
                    if (this.WindowState == FormWindowState.Minimized)
                    {
                        // restore or width/height will be saved as 0
                        writer.WriteLine("Top" + "=" + (Screen.PrimaryScreen.WorkingArea.Height - DEFAULT_WINDOW_HEIGHT) / 2);
                        writer.WriteLine("Left" + "=" + (Screen.PrimaryScreen.WorkingArea.Width - DEFAULT_WINDOW_WIDTH) / 2);
                        writer.WriteLine("Width" + "=" + DEFAULT_WINDOW_WIDTH);
                        writer.WriteLine("Height" + "=" + DEFAULT_WINDOW_HEIGHT);
                    }
                    else
                    {
                        writer.WriteLine("Top" + "=" + this.Top);
                        writer.WriteLine("Left" + "=" + this.Left);
                        writer.WriteLine("Width" + "=" + this.Width);
                        writer.WriteLine("Height" + "=" + this.Height);
                    }
                    writer.WriteLine("DrawingWidth" + "=" + Drawing.WIDTH);
                    writer.WriteLine("DrawingHeight" + "=" + Drawing.HEIGHT);
                    writer.WriteLine("Language" + "=" + this.LanguageComboBox.SelectedIndex);
                    writer.WriteLine("InformationBoxTop" + "=" + m_information_box_top);
                    writer.WriteLine("InformationPageIndex" + "=" + m_information_page_index);
                    writer.WriteLine("TranslationBoxWidth" + "=" + m_translation_box_width);
                    writer.WriteLine("Translator" + "=" + this.TranslatorComboBox.SelectedIndex);
                    writer.WriteLine("Translators" + "=" + this.TranslatorsComboBox.SelectedIndex);
                    writer.WriteLine("ShowToolTip" + "=" + this.ShowToolTipsCheckBox.Checked);
                    writer.WriteLine("ShowAllTranslations" + "=" + m_show_all_translations);
                    writer.WriteLine("SymmetryType" + "=" + this.SymmetryTypeComboBox.SelectedIndex);
                    writer.WriteLine("SymmetryIncludeBoundaryCases" + "=" + m_symmetry_include_boundary_cases);
                    writer.WriteLine("CVWLSequenceType" + "=" + this.CVWLSequenceTypeComboBox.SelectedIndex);
                    writer.WriteLine("CVWLSequenceDirection" + "=" + m_cvwl_sequence_right_to_left);
                    writer.WriteLine("CVWLSequenceShowFactors" + "=" + m_cvwl_sequence_show_factors);
                    writer.WriteLine("ValuesSequenceRadix" + "=" + m_values_sequence_radix);
                    writer.WriteLine("ValuesSequenceScope" + "=" + this.ValuesSequenceScopeComboBox.SelectedIndex);
                    writer.WriteLine("ValuesSequenceDirection" + "=" + m_values_sequence_right_to_left);
                    writer.WriteLine("DNASequenceSystem" + "=" + this.DNASequenceSystemComboBox.SelectedIndex);
                    writer.WriteLine("DNASequenceDirection" + "=" + m_dna_sequence_right_to_left);
                    writer.WriteLine();

                    writer.WriteLine("[Numbers]");
                    writer.WriteLine("Radix" + "=" + m_radix);
                    writer.WriteLine("GlobalDivisor" + "=" + m_divisor);
                    writer.WriteLine("TotalChapterCounts" + "=" + m_total_chapter_counts);
                    if (m_client.NumerologySystem != null)
                    {
                        writer.WriteLine("NumerologySystem" + "=" + m_client.NumerologySystem.Name);
                        writer.WriteLine("AddToLetterLNumber" + "=" + m_client.NumerologySystem.AddToLetterLNumber.ToString());
                        writer.WriteLine("AddToLetterWNumber" + "=" + m_client.NumerologySystem.AddToLetterWNumber.ToString());
                        writer.WriteLine("AddToLetterVNumber" + "=" + m_client.NumerologySystem.AddToLetterVNumber.ToString());
                        writer.WriteLine("AddToLetterCNumber" + "=" + m_client.NumerologySystem.AddToLetterCNumber.ToString());
                        writer.WriteLine("AddToLetterLDistance" + "=" + m_client.NumerologySystem.AddToLetterLDistance.ToString());
                        writer.WriteLine("AddToLetterWDistance" + "=" + m_client.NumerologySystem.AddToLetterWDistance.ToString());
                        writer.WriteLine("AddToLetterVDistance" + "=" + m_client.NumerologySystem.AddToLetterVDistance.ToString());
                        writer.WriteLine("AddToLetterCDistance" + "=" + m_client.NumerologySystem.AddToLetterCDistance.ToString());
                        writer.WriteLine("AddToWordWNumber" + "=" + m_client.NumerologySystem.AddToWordWNumber.ToString());
                        writer.WriteLine("AddToWordVNumber" + "=" + m_client.NumerologySystem.AddToWordVNumber.ToString());
                        writer.WriteLine("AddToWordCNumber" + "=" + m_client.NumerologySystem.AddToWordCNumber.ToString());
                        writer.WriteLine("AddToWordWDistance" + "=" + m_client.NumerologySystem.AddToWordWDistance.ToString());
                        writer.WriteLine("AddToWordVDistance" + "=" + m_client.NumerologySystem.AddToWordVDistance.ToString());
                        writer.WriteLine("AddToWordCDistance" + "=" + m_client.NumerologySystem.AddToWordCDistance.ToString());
                        writer.WriteLine("AddToVerseVNumber" + "=" + m_client.NumerologySystem.AddToVerseVNumber.ToString());
                        writer.WriteLine("AddToVerseCNumber" + "=" + m_client.NumerologySystem.AddToVerseCNumber.ToString());
                        writer.WriteLine("AddToVerseVDistance" + "=" + m_client.NumerologySystem.AddToVerseVDistance.ToString());
                        writer.WriteLine("AddToVerseCDistance" + "=" + m_client.NumerologySystem.AddToVerseCDistance.ToString());
                        writer.WriteLine("AddToChapterCNumber" + "=" + m_client.NumerologySystem.AddToChapterCNumber.ToString());
                        writer.WriteLine("AddPositions" + "=" + m_client.NumerologySystem.AddPositions.ToString());
                        writer.WriteLine("AddDistancesToPrevious" + "=" + m_client.NumerologySystem.AddDistancesToPrevious.ToString());
                        writer.WriteLine("AddDistancesToNext" + "=" + m_client.NumerologySystem.AddDistancesToNext.ToString());
                        writer.WriteLine("AddDistancesWithinChapters" + "=" + m_client.NumerologySystem.AddDistancesWithinChapters.ToString());
                        writer.WriteLine("ShowAddControls" + "=" + m_show_add_controls.ToString());
                    }
                    writer.WriteLine("MathsDivisor" + "=" + m_maths_divisor);
                    writer.WriteLine("MathsUpdateGlobalDivisor" + "=" + m_maths_update_global_divisor);
                    writer.WriteLine("ChapterNumberScope" + "=" + m_chapter_number_scope);
                    writer.WriteLine("VerseNumberScope" + "=" + m_verse_number_scope);
                    writer.WriteLine("WordNumberScope" + "=" + m_word_number_scope);
                    writer.WriteLine("DistancesRunningChapterNumberScope" + "=" + m_distances_running_chapter_number_scope);
                    writer.WriteLine("DistancesRunningVerseNumberScope" + "=" + m_distances_running_verse_number_scope);
                    writer.WriteLine("DistancesRunningWordNumberScope" + "=" + m_distances_running_word_number_scope);
                    writer.WriteLine("DistancesDivisor" + "=" + m_distances_divisor);
                    writer.WriteLine("DistancesUpdateGlobalDivisor" + "=" + m_distances_update_global_divisor);
                    writer.WriteLine();

                    writer.WriteLine("[Text]");
                    writer.WriteLine("EmlaaeiText" + "=" + m_emlaaei_text);
                    writer.WriteLine("WithBismAllah" + "=" + m_with_bism_Allah);
                    writer.WriteLine("WawAsWord" + "=" + m_waw_as_word);
                    writer.WriteLine("ShaddaAsLetter" + "=" + m_shadda_as_letter);
                    writer.WriteLine("ChapterSortMethod" + "=" + m_chapter_sort_method);
                    writer.WriteLine("ChapterSortOrder" + "=" + m_chapter_sort_order);
                    writer.WriteLine("PinChapter1" + "=" + m_pin_chapter1);
                    writer.WriteLine();

                    writer.WriteLine("[Display]");
                    writer.WriteLine("MainTextWordWrap" + "=" + m_word_wrap_main_textbox);
                    writer.WriteLine("SearchResultWordWrap" + "=" + m_word_wrap_search_textbox);
                    if (m_client != null)
                    {
                        if (m_client.Selection != null)
                        {
                            writer.WriteLine("SelectionScope" + "=" + (int)m_client.Selection.Scope);
                            StringBuilder str = new StringBuilder("SelectionIndexes=");
                            if (m_client.Selection.Indexes.Count > 0)
                            {
                                foreach (int index in m_client.Selection.Indexes)
                                {
                                    str.Append((index + 1).ToString() + "+");
                                }
                                if (str.Length > 1)
                                {
                                    str.Remove(str.Length - 1, 1);
                                }
                            }
                            writer.WriteLine(str);
                        }
                    }

                    writer.WriteLine("QuranFont" + "=" + font_converter.ConvertToString(m_quran_font));
                    writer.WriteLine("TranslationFont" + "=" + font_converter.ConvertToString(m_translation_font));
                    writer.WriteLine("TranslationColor" + "=" + color_converter.ConvertToString(m_translation_color));
                    writer.WriteLine("TextZoomFactor" + "=" + m_text_zoom_factor);
                    writer.WriteLine();

                    writer.WriteLine("[Audio]");
                    writer.WriteLine("Reciter" + "=" + this.ReciterComboBox.SelectedIndex);
                    writer.WriteLine("Volume" + "=" + m_audio_volume);
                    writer.WriteLine("VerseRepetitions" + "=" + m_player_looping_count);
                    writer.WriteLine("VerseRepetitionsEnabled" + "=" + m_player_looping);
                    writer.WriteLine("SelectionRepetitions" + "=" + m_player_looping_all_count);
                    writer.WriteLine("SelectionRepetitionsEnabled" + "=" + m_player_looping_all);
                    writer.WriteLine("SilenceBetweenVerses" + "=" + m_silence_between_verses);
                    writer.WriteLine("SilenceBetweenSelections" + "=" + m_silence_between_selections);
                    writer.WriteLine();

                    writer.WriteLine("[Downloads]");
                    writer.WriteLine("TranslationUrlPrefix" + "=" + TranslationInfo.UrlPrefix);
                    writer.WriteLine("TranslationFileType" + "=" + TranslationInfo.FileType);
                    writer.WriteLine("TranslationIconUrlPrefix" + "=" + TranslationInfo.IconUrlPrefix);
                    writer.WriteLine("RecitationUrlPrefix" + "=" + RecitationInfo.UrlPrefix);
                    writer.WriteLine("RecitationFileType" + "=" + RecitationInfo.FileType);
                    writer.WriteLine();

                    writer.WriteLine("[Folders]");
                    writer.WriteLine("LanguagesFolder=" + Globals.LANGUAGES_FOLDER);
                    writer.WriteLine("NumbersFolder=" + Globals.NUMBERS_FOLDER);
                    writer.WriteLine("FontsFolder=" + Globals.FONTS_FOLDER);
                    writer.WriteLine("ImagesFolder=" + Globals.IMAGES_FOLDER);
                    writer.WriteLine("DataFolder=" + Globals.DATA_FOLDER);
                    writer.WriteLine("AudioFolder=" + Globals.AUDIO_FOLDER);
                    writer.WriteLine("TranslationsFolder=" + Globals.TRANSLATIONS_FOLDER);
                    writer.WriteLine("RulesFolder=" + Globals.RULES_FOLDER);
                    writer.WriteLine("ValuesFolder=" + Globals.VALUES_FOLDER);
                    writer.WriteLine("StatisticsFolder=" + Globals.STATISTICS_FOLDER);
                    writer.WriteLine("ResearchFolder=" + Globals.RESEARCH_FOLDER);
                    writer.WriteLine("DrawingsFolder=" + Globals.DRAWINGS_FOLDER);
                    writer.WriteLine("BookmarksFolder=" + Globals.BOOKMARKS_FOLDER);
                    writer.WriteLine("HistoryFolder=" + Globals.HISTORY_FOLDER);
                    writer.WriteLine("HelpFolder=" + Globals.HELP_FOLDER);
                }
            }
        }
        catch
        {
            // silence IO errors in case running from read-only media (CD/DVD)
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region ContextMenu
    ///////////////////////////////////////////////////////////////////////////////
    private string m_clipboard_text = null;
    private string RemovePunctuationMarks(string text)
    {
        if (!String.IsNullOrEmpty(text))
        {
            if (m_language_type == LanguageType.LeftToRight)
            {
                text = text.Replace(".", "");
                text = text.Replace(",", "");
                text = text.Replace(";", "");
                text = text.Replace(":", "");
                text = text.Replace("?", "");
                text = text.Replace("/", "");
                text = text.Replace(")", "");
                text = text.Replace("(", "");
                text = text.Replace(">", "");
                text = text.Replace("<", "");
                text = text.Replace("[", "");
                text = text.Replace("]", "");
                text = text.Replace("{", "");
                text = text.Replace("}", "");
                text = text.Replace("-", "");
                text = text.Replace("\"", "");
                text = text.Replace("\'", "");
                text = text.Replace("!", "");
                text = text.Replace("`", "");
                text = text.Replace("@", "");
                text = text.Replace("#", "");
                text = text.Replace("$", "");
                text = text.Replace("%", "");
                text = text.Replace("^", "");
                text = text.Replace("&", "");
                text = text.Replace("|", "");
                text = text.Replace("*", "");
                text = text.Replace("=", "");
            }
        }
        return text;
    }
    private void SimplifyClipboardTextBeforePaste()
    {
        m_clipboard_text = Clipboard.GetText(TextDataFormat.UnicodeText);
        if ((m_clipboard_text != null) && (m_clipboard_text.Length > 0))
        {
            if (m_client != null)
            {
                if (m_client.NumerologySystem != null)
                {
                    string text = m_clipboard_text.SimplifyTo(m_client.NumerologySystem.TextMode);
                    if ((text != null) && (m_clipboard_text.Length > 0))
                    {
                        Clipboard.SetText(text, TextDataFormat.UnicodeText);
                    }
                }
            }
        }
    }
    private void RestoreClipboardTextAfterPaste()
    {
        if ((m_clipboard_text != null) && (m_clipboard_text.Length > 0))
        {
            Clipboard.SetText(m_clipboard_text, TextDataFormat.UnicodeText);
        }
    }
    private void MenuItem_Undo(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                if (((sender as MenuItem).Parent as ContextMenu).SourceControl is TextBoxBase)
                {
                    (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase).Undo();
                }
            }
        }
    }
    private void MenuItem_Cut(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                if (((sender as MenuItem).Parent as ContextMenu).SourceControl is TextBoxBase)
                {
                    (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase).Cut();
                }
            }
        }
    }
    private void MenuItem_Copy(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                if (((sender as MenuItem).Parent as ContextMenu).SourceControl is TextBoxBase)
                {
                    TextBoxBase control = (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase);

                    if (control.SelectionLength == 0)
                    {
                        List<Verse> selected_verses = GetCurrentVerses();
                        if (selected_verses != null)
                        {
                            StringBuilder str = new StringBuilder();
                            foreach (Verse verse in selected_verses)
                            {
                                str.AppendLine(verse.Chapter.Name + "\t" + verse.Address + "\t" + verse.Text);
                            }
                            Clipboard.SetText(str.ToString());
                            Thread.Sleep(100); // must give chance for Clipboard to refresh its content before Paste
                        }
                    }
                    else
                    {
                        (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase).Copy();
                    }
                }
            }
        }
    }
    private void MenuItem_Paste(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                if (((sender as MenuItem).Parent as ContextMenu).SourceControl is TextBoxBase)
                {
                    SimplifyClipboardTextBeforePaste();
                    Thread.Sleep(100); // must give chance for Clipboard to refresh its content before Paste
                    (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase).Paste();
                    RestoreClipboardTextAfterPaste();
                }
            }
        }
    }
    private void MenuItem_SelectAll(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                if (((sender as MenuItem).Parent as ContextMenu).SourceControl is TextBoxBase)
                {
                    (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase).SelectAll();
                    (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase).KeyDown += new KeyEventHandler(TextBox_KeyDown);
                }
            }
        }
    }
    private void MenuItem_GenerateSentences(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                if (((sender as MenuItem).Parent as ContextMenu).SourceControl is TextBoxBase)
                {
                    TextBoxBase control = (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase);

                    if (control.SelectionLength > 0)
                    {
                        GenerateAnagrams();
                    }
                }
            }
        }
    }
    private void MenuItem_RelatedWords(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                Control control = ((sender as MenuItem).Parent as ContextMenu).SourceControl;
                if ((control == MainTextBox) || (control == SearchResultTextBox))
                {
                    DoFindRelatedWords(control);
                }
            }
        }
    }
    private void MenuItem_RelatedVerses(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                Control control = ((sender as MenuItem).Parent as ContextMenu).SourceControl;
                if ((control == MainTextBox) || (control == SearchResultTextBox))
                {
                    DoFindRelatedVerses(control);
                }
            }
        }
    }
    private void MenuItem_SimilarVerses(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                Control control = ((sender as MenuItem).Parent as ContextMenu).SourceControl;
                if ((control == MainTextBox) || (control == SearchResultTextBox))
                {
                    DoFindSimilarVerses(control);
                }
            }
        }
    }
    private void MenuItem_SameText(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                Control control = ((sender as MenuItem).Parent as ContextMenu).SourceControl;
                if ((control == MainTextBox) || (control == SearchResultTextBox))
                {
                    DoFindSameText(control);
                }
            }
        }
    }
    private void MenuItem_SameVerses(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                Control control = ((sender as MenuItem).Parent as ContextMenu).SourceControl;
                if ((control == MainTextBox) || (control == SearchResultTextBox))
                {
                    DoFindSameVerses(control);
                }
            }
        }
    }
    private void MenuItem_SameHarakat(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                Control control = ((sender as MenuItem).Parent as ContextMenu).SourceControl;
                if ((control == MainTextBox) || (control == SearchResultTextBox))
                {
                    DoFindSameHarakat(control);
                }
            }
        }
    }
    private void MenuItem_SameValue(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                Control control = ((sender as MenuItem).Parent as ContextMenu).SourceControl;
                if ((control == MainTextBox) || (control == SearchResultTextBox))
                {
                    DoFindSameValue(control);
                }
            }
        }
    }
    private void DoFindSameHarakat(object sender)
    {
        if (sender is TextBoxBase)
        {
            string text = (sender as TextBoxBase).SelectedText.Trim();
            if (text.Length == 0) // no selection, get word under mouse pointer
            {
                m_current_word = GetWordAtCursor();
                if (m_current_word == null)
                {
                    return;
                }
                text = m_current_word.Text;
            }

            DoFindSameHarakat(text);
        }
    }
    private void DoFindSameHarakat(string text)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                ClearFindMatches();

                m_client.FindPhrases(TextSearchBlockSize.Verse, text, LanguageType.RightToLeft, null, TextLocationInChapter.Any, TextLocationInVerse.Any, TextLocationInWord.Any, TextWordness.Any, false, true, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                if (m_client.FoundPhrases != null)
                {
                    int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                    if (m_client.FoundVerses != null)
                    {
                        int verse_count = m_client.FoundVerses.Count;
                        m_find_result_header = phrase_count + " " + L[l]["matches"] + " " + L[l]["in"] + " " + verse_count + ((verse_count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + text + " " + L[l]["anywhere"] + " " + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                        DisplayFoundVerses(true, true);

                        //SearchResultTextBox.Focus();
                        //SearchResultTextBox.Refresh();
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DoFindRelatedWords(object sender)
    {
        if (m_emlaaei_text) return;

        if (sender is TextBoxBase)
        {
            string text = (sender as TextBoxBase).SelectedText.Trim();
            if (text.Length == 0) // no selection, get word under mouse pointer
            {
                m_current_word = GetWordAtCursor();
                if (m_current_word == null)
                {
                    return;
                }
                text = m_current_word.Text;
            }

            DoFindRelatedWords(text);
        }
    }
    private void DoFindRelatedWords(string text)
    {
        if (m_emlaaei_text) return;

        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                ClearFindMatches();

                FindByTextTextBox.Text = text;
                FindByTextTextBox.Refresh();

                FindByRoot(text);
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DoFindRelatedVerses(object sender)
    {
        if (m_emlaaei_text) return;

        this.Cursor = Cursors.WaitCursor;
        try
        {
            m_search_type = SearchType.Similarity;

            if (m_client != null)
            {
                ClearFindMatches();

                Verse verse = GetCurrentVerse();
                if (verse != null)
                {
                    if (verse.Chapter != null)
                    {
                        m_client.FindRelatedVerses(verse);
                        if (m_client.FoundVerses != null)
                        {
                            string text = " to verse " + verse.Chapter.Name + " " + verse.NumberInChapter + " ";
                            int verse_count = m_client.FoundVerses.Count;
                            m_find_result_header = verse_count + ((verse_count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + L[l]["similar words"] + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];

                            DisplayFoundVerses(true, true);

                            //SearchResultTextBox.Focus();
                            //SearchResultTextBox.Refresh();
                        }
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DoFindSimilarVerses(object sender)
    {
        if (m_emlaaei_text) return;

        this.Cursor = Cursors.WaitCursor;
        try
        {
            FindBySimilarity();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DoFindSameText(object sender)
    {
        if (sender is TextBoxBase)
        {
            string text = (sender as TextBoxBase).SelectedText.Trim();
            if (text.Length == 0) // no selection, get word under mouse pointer
            {
                m_current_word = GetWordAtCursor();
                if (m_current_word == null)
                {
                    return;
                }
                text = m_current_word.Text;
            }

            DoFindSameText(text);
        }
    }
    private void DoFindSameText(string text)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                ClearFindMatches();

                m_client.FindPhrases(TextSearchBlockSize.Verse, text, LanguageType.RightToLeft, null, TextLocationInChapter.Any, TextLocationInVerse.Any, TextLocationInWord.Any, TextWordness.WholeWord, false, false, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                if (m_client.FoundPhrases != null)
                {
                    int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                    if (m_client.FoundVerses != null)
                    {
                        int verse_count = m_client.FoundVerses.Count;
                        m_find_result_header = phrase_count + " " + L[l]["matches"] + " " + L[l]["in"] + " " + verse_count + ((verse_count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + text + " " + L[l]["anywhere"] + " " + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                        DisplayFoundVerses(true, true);

                        //SearchResultTextBox.Focus();
                        //SearchResultTextBox.Refresh();
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DoFindSameVerses(object sender)
    {
        if (sender is TextBoxBase)
        {
            Verse verse = GetVerseAtCursor();
            if (verse != null)
            {
                DoFindSameText(verse.Text);
            }
        }
    }
    private void DoFindSameValue(object sender)
    {
        if (sender is TextBoxBase)
        {
            if (m_client != null)
            {
                long value = 0L;
                if ((sender as TextBoxBase).SelectionLength > 0)
                {
                    try
                    {
                        value = long.Parse(ValueTextBox.Text);
                    }
                    catch
                    {
                        // leave value = 0L
                    }
                }
                else
                {
                    Verse verse = GetVerseAtCursor();
                    if (verse != null)
                    {
                        value = m_client.CalculateValue(verse);
                    }
                    else
                    {
                        // leave value = 0L
                    }
                }
                DoFindSameValue(value);
            }
        }
    }
    private void DoFindSameValue(long value)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                ClearFindMatches();

                List<Verse> verses = new List<Verse>();
                List<Phrase> phrases = new List<Phrase>();
                string text = "value" + "" + "=" + value.ToString();

                NumberQuery query = new NumberQuery();
                query.Value = value;

                int match_count = m_client.FindWordRanges(query);
                if (match_count > 0)
                {
                    if (m_client.FoundPhrases != null)
                    {
                        phrases.InsertRange(0, new List<Phrase>(m_client.FoundPhrases));
                    }
                }

                if (m_client.FoundVerses != null)
                {
                    m_client.FoundPhrases = phrases;
                    m_find_result_header = match_count + ((match_count == 1) ? " " + L[l]["match"] : " " + L[l]["matches"]) + " " + L[l]["in"] + " " + m_client.FoundVerses.Count + ((m_client.FoundVerses.Count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                    DisplayFoundVerses(true, true);

                    //SearchResultTextBox.Focus();
                    //SearchResultTextBox.Refresh();
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    public static List<Verse> GetVerses(List<Phrase> phrases)
    {
        List<Verse> result = new List<Verse>();
        if (phrases != null)
        {
            foreach (Phrase phrase in phrases)
            {
                if (phrase != null)
                {
                    if (!result.Contains(phrase.Verse))
                    {
                        result.Add(phrase.Verse);
                    }
                }
            }
        }
        return result;
    }
    private void RegisterContextMenu(TextBoxBase control)
    {
        ContextMenu ContextMenu = new ContextMenu();
        if ((control != MainTextBox) && (control != SearchResultTextBox))
        {
            MenuItem EditUndoMenuItem = new MenuItem(L[l]["Undo"] + "\t\tCtrl+Z");
            EditUndoMenuItem.Click += new EventHandler(MenuItem_Undo);
            ContextMenu.MenuItems.Add(EditUndoMenuItem);

            MenuItem MenuItemSeparator1 = new MenuItem("-");
            ContextMenu.MenuItems.Add(MenuItemSeparator1);

            MenuItem EditCutMenuItem = new MenuItem(L[l]["Cut"] + "\t\tCtrl+X");
            EditCutMenuItem.Click += new EventHandler(MenuItem_Cut);
            ContextMenu.MenuItems.Add(EditCutMenuItem);

            MenuItem EditCopyMenuItem = new MenuItem(L[l]["Copy"] + "\t\tCtrl+C");
            EditCopyMenuItem.Click += new EventHandler(MenuItem_Copy);
            ContextMenu.MenuItems.Add(EditCopyMenuItem);

            MenuItem EditPasteMenuItem = new MenuItem(L[l]["Paste"] + "\t\tCtrl+V");
            EditPasteMenuItem.Click += new EventHandler(MenuItem_Paste);
            ContextMenu.MenuItems.Add(EditPasteMenuItem);

            MenuItem MenuItemSeparator2 = new MenuItem("-");
            ContextMenu.MenuItems.Add(MenuItemSeparator2);

            MenuItem EditSelectAllMenuItem = new MenuItem(L[l]["Select All"] + "\tCtrl+A");
            EditSelectAllMenuItem.Click += new EventHandler(MenuItem_SelectAll);
            ContextMenu.MenuItems.Add(EditSelectAllMenuItem);
        }
        else
        {
            MenuItem EditCopyMenuItem = new MenuItem(L[l]["Copy"] + "\t\tCtrl+C");
            EditCopyMenuItem.Click += new EventHandler(MenuItem_Copy);
            ContextMenu.MenuItems.Add(EditCopyMenuItem);

            MenuItem EditGenerateSentencesMenuItem = new MenuItem(L[l]["Generate Sentences"] + "\t\tCtrl+G");
            EditGenerateSentencesMenuItem.Click += new EventHandler(MenuItem_GenerateSentences);
            if (Globals.EDITION == Edition.Ultimate) ContextMenu.MenuItems.Add(EditGenerateSentencesMenuItem);

            MenuItem MenuItemSeparator1 = new MenuItem("-");
            ContextMenu.MenuItems.Add(MenuItemSeparator1);

            MenuItem FindRelatedWordsMenuItem = new MenuItem(L[l]["Related Words"] + "\tF4");
            FindRelatedWordsMenuItem.Click += new EventHandler(MenuItem_RelatedWords);
            ContextMenu.MenuItems.Add(FindRelatedWordsMenuItem);

            MenuItem FindRelatedVersesMenuItem = new MenuItem(L[l]["Related Verses"] + "\tF5");
            FindRelatedVersesMenuItem.Click += new EventHandler(MenuItem_RelatedVerses);
            ContextMenu.MenuItems.Add(FindRelatedVersesMenuItem);

            MenuItem FindSimilarVersesMenuItem = new MenuItem(L[l]["Similar Verses"] + "\tShift+F5");
            FindSimilarVersesMenuItem.Click += new EventHandler(MenuItem_SimilarVerses);
            ContextMenu.MenuItems.Add(FindSimilarVersesMenuItem);

            MenuItem MenuItemSeparator2 = new MenuItem("-");
            ContextMenu.MenuItems.Add(MenuItemSeparator2);

            MenuItem FindSameTextMenuItem = new MenuItem(L[l]["Same Text"] + "\tF6");
            FindSameTextMenuItem.Click += new EventHandler(MenuItem_SameText);
            ContextMenu.MenuItems.Add(FindSameTextMenuItem);

            MenuItem FindSameHarakatMenuItem = new MenuItem(L[l]["Same Harakat"] + "\tF7");
            FindSameHarakatMenuItem.Click += new EventHandler(MenuItem_SameHarakat);
            ContextMenu.MenuItems.Add(FindSameHarakatMenuItem);

            MenuItem FindSameVersesMenuItem = new MenuItem(L[l]["Same Verses"] + "\tF8");
            FindSameVersesMenuItem.Click += new EventHandler(MenuItem_SameVerses);
            ContextMenu.MenuItems.Add(FindSameVersesMenuItem);

            MenuItem MenuItemSeparator3 = new MenuItem("-");
            ContextMenu.MenuItems.Add(MenuItemSeparator3);

            MenuItem FindSameValueMenuItem = new MenuItem(L[l]["Same Value"] + "\tF9");
            FindSameValueMenuItem.Click += new EventHandler(MenuItem_SameValue);
            ContextMenu.MenuItems.Add(FindSameValueMenuItem);
        }

        ContextMenu.Popup += new EventHandler(ContextMenu_Popup);
        ContextMenu.Collapse += new EventHandler(ContextMenu_Collapse);

        control.ContextMenu = ContextMenu;
    }
    private void ContextMenu_Popup(object sender, EventArgs e)
    {
        if (m_active_textbox != null)
        {
            if (m_active_textbox.SelectionLength == 0)
            {
                m_active_textbox.ContextMenu.MenuItems[0].Text = L[l]["Copy Verse"] + "\t\tCtrl+C";
                m_active_textbox.ContextMenu.MenuItems[1].Visible = false;
            }
            else
            {
                m_active_textbox.ContextMenu.MenuItems[0].Text = L[l]["Copy"] + "\t\tCtrl+C";
                m_active_textbox.ContextMenu.MenuItems[1].Visible = true;
            }
        }
    }
    private void ContextMenu_Collapse(object sender, EventArgs e)
    {
    }
    private void RegisterContextMenus()
    {
        RegisterContextMenu(MainTextBox);
        RegisterContextMenu(SearchResultTextBox);
        RegisterContextMenu(TranslationTextBox);
        RegisterContextMenu(TranslationsTextBox);
        RegisterContextMenu(RelatedWordsTextBox);
        RegisterContextMenu(GrammarTextBox);
        RegisterContextMenu(SymmetryTextBox);
        RegisterContextMenu(CVWLSequenceTextBox);
        RegisterContextMenu(ValuesSequenceTextBox);
        RegisterContextMenu(DNASequenceTextBox);
        RegisterContextMenu(UserTextTextBox);
        RegisterContextMenu(FindByTextTextBox);
        RegisterContextMenu(ValueTextBox);
        RegisterContextMenu(NthNumberTextBox);
        RegisterContextMenu(NthAdditiveNumberTextBox);
        RegisterContextMenu(NthNonAdditiveNumberTextBox);
        RegisterContextMenu(Nth4nPlus1NumberTextBox);
        RegisterContextMenu(FindByFrequencyPhraseTextBox);
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Research
    ///////////////////////////////////////////////////////////////////////////////
    private string m_research_assembly_name = "Research";
    private Assembly m_research_methods_assembly = null;
    private void LoadResearchMethods()
    {
        try
        {
            for (int i = 0; i < 3; i++) ResearchMethodsComboBox.SelectedIndexChanged -= new EventHandler(ResearchMethodsComboBox_SelectedIndexChanged);

            AppDomain domain = AppDomain.CurrentDomain;
            if (domain != null)
            {
                //????? dynamic loading of DLL library is dangerous!!!
                m_research_methods_assembly = domain.Load(m_research_assembly_name);

                //// instead add to referenced assemblies in QuranCode project
                //// find it and extract research methods
                //Assembly[] assembly_array = domain.GetAssemblies();
                //foreach (Assembly assembly in assembly_array)
                //{
                //    if (assembly.FullName.Contains(m_research_assembly_name))
                //    {
                //        m_research_methods_assembly = assembly;
                //    }
                //}

                if (m_research_methods_assembly != null)
                {
                    Type class_type = m_research_methods_assembly.GetType(m_research_assembly_name);
                    if (class_type != null)
                    {
                        MethodInfo[] method_infos = null;
                        if (Globals.EDITION == Edition.Standard)
                        {
                            method_infos = class_type.GetMethods(BindingFlags.Static | BindingFlags.Public);
                        }
                        else
                        {
                            method_infos = class_type.GetMethods(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
                        }
                        if (method_infos != null)
                        {
                            ResearchMethodsComboBox.Items.Clear();
                            foreach (MethodInfo method_info in method_infos)
                            {
                                string method_name = method_info.Name;
                                ParameterInfo[] parameters = method_info.GetParameters();
                                if ((parameters.Length == 3) &&
                                    (parameters[0].ParameterType == typeof(Client)) &&
                                    (parameters[1].ParameterType == typeof(string)) &&
                                    (parameters[2].ParameterType == typeof(bool)))
                                {
                                    ResearchMethodsComboBox.Items.Add(method_name);
                                }
                            }
                        }
                    }

                    if (ResearchMethodsComboBox.Items.Count > 0)
                    {
                        ResearchMethodsComboBox.SelectedItem = "AllahWords";
                        ResearchMethodsComboBox_SelectedIndexChanged(null, null);
                    }
                }
            }
        }
        catch
        {
            // cannot load Research assembly, so just ignore
        }
        finally
        {
            ResearchMethodsComboBox.SelectedIndexChanged += new EventHandler(ResearchMethodsComboBox_SelectedIndexChanged);
        }
    }
    private void RunResearchMethod()
    {
        if (m_client != null)
        {
            if (m_client.Selection != null)
            {
                if (ResearchMethodsComboBox.SelectedIndex > -1)
                {
                    if (ResearchMethodsComboBox.SelectedItem != null)
                    {
                        string method_name = ResearchMethodsComboBox.SelectedItem.ToString();
                        string param = ResearchMethodParameterTextBox.Text;
                        if (!string.IsNullOrEmpty(method_name))
                        {
                            InvokeResearchMethod(method_name, m_client, param, m_found_verses_displayed);
                        }
                    }
                }
            }
        }
    }
    private void InvokeResearchMethod(string method_name, Client client, string param, bool in_search_result)
    {
        try
        {
            if (m_research_methods_assembly != null)
            {
                Type assembly_type = m_research_methods_assembly.GetType(m_research_assembly_name);
                if (assembly_type != null)
                {
                    MethodInfo method_info = assembly_type.GetMethod(method_name, BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
                    if (method_info != null)
                    {
                        object[] parameters = { client, param, in_search_result };
                        object result = method_info.Invoke(null, parameters);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            while (ex != null)
            {
                //Console.WriteLine(ex.Message);
                MessageBox.Show(ex.Message, Application.ProductName);
                ex = ex.InnerException;
            }
        }
    }
    private void ResearchMethodsComboBox_DropDown(object sender, EventArgs e)
    {
        int height = this.Height - 100;
        if (height < 100) height = 100;
        ResearchMethodsComboBox.DropDownHeight = height;
    }
    private void ResearchMethodsComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ResearchMethodsComboBox.SelectedItem != null)
        {
            string method_name = ResearchMethodsComboBox.SelectedItem.ToString();

            ResearchMethodParameterTextBox.BringToFront();
            if (method_name == "NewResearchMethod")
            {
                ResearchMethodParameterTextBox.Text = "";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "Target");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if ((method_name.Contains("ByX")) || (method_name.Contains("WithX")))
            {
                ResearchMethodParameterTextBox.Text = "7";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "X");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if ((method_name.Contains("ByXY")) || (method_name.Contains("WithXY")))
            {
                ResearchMethodParameterTextBox.Text = "7,29";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "X,Y");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if ((method_name.Contains("ByXYZ")) || (method_name.Contains("WithXYZ")))
            {
                ResearchMethodParameterTextBox.Text = "7,29,139";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "X,Y,Z");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if (method_name.EndsWith("Sound"))
            {
                ResearchMethodParameterTextBox.Text = "1433";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "Hz");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if (method_name == "nWords_kLetters")
            {
                ResearchMethodParameterTextBox.Text = "7,29";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "words,letters");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if (method_name == "nVerses_kWords")
            {
                ResearchMethodParameterTextBox.Text = "7,29";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "verses,words");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if (method_name == "nChapters_kVerses")
            {
                ResearchMethodParameterTextBox.Text = "7,29";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "chapters,verses");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if (method_name.Contains("Pivot"))
            {
                ResearchMethodParameterTextBox.Text = "16";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "Pivot");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if (method_name.Contains("Index"))
            {
                ResearchMethodParameterTextBox.Text = "0";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "to within");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if (method_name == "LetterFrequencySums")
            {
                ResearchMethodParameterTextBox.Text = "";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "Phrase");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else // method doesn't need parameters
            {
                ResearchMethodParameterTextBox.Text = "";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, null);
                ResearchMethodParameterTextBox.Visible = false;
            }

            // must be done at end so we can trim Research methods
            //ToolTip.SetToolTip(ResearchMethodsComboBox, method_name);
        }
    }
    private void ResearchMethodsComboBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            ResearchMethodsRunButton_Click(sender, e);
        }
    }
    private void ResearchMethodParameterTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            ResearchMethodsRunButton_Click(null, null);
        }
    }
    private void ResearchMethodsRunButton_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (ResearchMethodsComboBox.SelectedItem != null)
            {
                RunResearchMethod();
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region MainTextBox
    ///////////////////////////////////////////////////////////////////////////////
    private float m_text_zoom_factor = DEFAULT_TEXT_ZOOM_FACTOR;
    private float m_graphics_zoom_factor = DEFAULT_GRAPHICS_ZOOM_FACTOR;
    private Point m_previous_location = new Point(0, 0);
    private int m_clicked_chapter_number = 1;
    private int m_clicked_verse_number = 1;
    private int m_clicked_word_number = 1;
    private int m_clicked_letter_number = 1;
    private int m_clicked_chapter_distance = 0;
    private int m_clicked_verse_distance = 0;
    private int m_clicked_word_distance = 0;
    private int m_clicked_letter_distance = 0;
    private void DifferenceStatisticsLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    int previous_chapter_number = m_clicked_chapter_number - m_clicked_chapter_distance;
                    int previous_verse_number = m_clicked_verse_number - m_clicked_verse_distance;
                    int previous_word_number = m_clicked_word_number - m_clicked_word_distance;
                    int previous_letter_number = m_clicked_letter_number - m_clicked_letter_distance;

                    if (((previous_verse_number - 1) >= 0) && ((previous_verse_number - 1) < m_client.Book.Verses.Count))
                    {
                        Verse verse1 = m_client.Book.Verses[previous_verse_number - 1];
                        {
                            if (((m_clicked_verse_number - 1) >= 0) && ((m_clicked_verse_number - 1) < m_client.Book.Verses.Count))
                            {
                                Verse verse2 = m_client.Book.Verses[m_clicked_verse_number - 1];
                                if (verse1 != null)
                                {
                                    if (verse2 != null)
                                    {
                                        string previous_verse_text = verse1.Address + "\t" + verse1.Text;
                                        string current_verse_text = verse2.Address + "\t" + verse2.Text;

                                        StringBuilder str = new StringBuilder();
                                        str.Append(
                                            previous_verse_text +
                                            "\r\n" +
                                            current_verse_text +
                                            "\r\n" +
                                            "\r\n" +
                                            "\tChapter\tVerse\tWord\tLetter" +
                                            "\r\n" +
                                            "From\t" + previous_chapter_number + "\t" + previous_verse_number + "\t" + previous_word_number + "\t" + previous_letter_number +
                                            "\r\n" +
                                            "To\t" + m_clicked_chapter_number + "\t" + m_clicked_verse_number + "\t" + m_clicked_word_number + "\t" + m_clicked_letter_number +
                                            "\r\n" +
                                            "Diff\t" + m_clicked_chapter_distance + "\t" + m_clicked_verse_distance + "\t" + m_clicked_word_distance + "\t" + m_clicked_letter_distance
                                          );
                                        if (str.Length > 0)
                                        {
                                            string result = str.ToString();
                                            string filename = "Distance_" +
                                                            verse1.Chapter.SortedNumber.ToString("000") + verse1.NumberInChapter.ToString("000") +
                                                            "-" +
                                                            verse2.Chapter.SortedNumber.ToString("000") + verse2.NumberInChapter.ToString("000") +
                                                            Globals.OUTPUT_FILE_EXT;
                                            if (Directory.Exists(Globals.STATISTICS_FOLDER))
                                            {
                                                string path = Globals.STATISTICS_FOLDER + "/" + filename;
                                                FileHelper.SaveText(path, result);
                                                FileHelper.DisplayFile(path);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private float m_min_zoom_factor = 0.1F;
    private float m_max_zoom_factor = 2.0F;
    private float m_zoom_factor_increment = 0.1F;
    private float m_error_margin = 0.001F;
    private Font m_quran_font = null;
    private List<Font> m_quran_fonts = null;
    private void InstallFonts()
    {
        if (Directory.Exists(Globals.FONTS_FOLDER))
        {
            BuildFonts(Globals.FONTS_FOLDER);
            PopulateFontComboBox();
        }
    }
    //private void BuildFonts(Assembly resources_assembly)
    //{
    //    if (m_fonts == null)
    //    {
    //        m_fonts = new List<Font>();
    //    }

    //    if (m_fonts != null)
    //    {
    //        m_fonts.Clear();

    //        if (resources_assembly != null)
    //        {
    //            string[] resource_names = resources_assembly.GetManifestResourceNames();
    //            foreach (string resource_name in resource_names)
    //            {
    //                try
    //                {
    //                    Stream font_stream = resources_assembly.GetManifestResourceStream(resource_name);
    //                    Thread.Sleep(100); // time to refresh Windows resources
    //                    if (font_stream != null)
    //                    {
    //                        //string font_name = resource_name.Remove(resource_name.Length - 4, 4);
    //                        //int start = font_name.LastIndexOf(".");
    //                        //font_name = font_name.Substring(start + 1);
    //                        //Font font = FontBuilder.Build(font_stream, font_name, m_main_font.Size * ((font_name.Contains("Mushaf")) ? 1.33F : 1));
    //                        Font font = FontBuilder.Build(font_stream, m_main_font.Name, m_main_font.Size * ((m_main_font.Name.Contains("Mushaf")) ? 1.33F : 1));
    //                        if (font != null)
    //                        {
    //                            m_fonts.Add(font);
    //                        }
    //                    }
    //                }
    //                catch
    //                {
    //                    // skip non-conformant font
    //                }
    //            }
    //        }
    //    }
    //}
    private void BuildFonts(string fonts_folder)
    {
        if (m_quran_fonts == null)
        {
            m_quran_fonts = new List<Font>();
        }

        if (m_quran_fonts != null)
        {
            m_quran_fonts.Clear();

            DirectoryInfo folder = new DirectoryInfo(fonts_folder);
            if (folder != null)
            {
                FileInfo[] files = folder.GetFiles("*.ttf");
                if ((files != null) && (files.Length > 0))
                {
                    foreach (FileInfo file in files)
                    {
                        try
                        {
                            if (!String.IsNullOrEmpty(file.FullName))
                            {
                                Font font = FontBuilder.Build(file.FullName, DEFAULT_QURAN_FONT_SIZE * ((file.Name.Contains("Mushaf")) ? 1.33F : 1));
                                Thread.Sleep(100); // time to refresh Windows resources
                                if (font != null)
                                {
                                    m_quran_fonts.Add(font);
                                }
                            }
                        }
                        catch
                        {
                            // skip non-conformant font
                        }
                    }
                }
            }
        }
    }
    private void PopulateFontComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) FontComboBox.SelectedIndexChanged -= new EventHandler(FontComboBox_SelectedIndexChanged);
            FontComboBox.BeginUpdate();

            if (m_quran_fonts != null)
            {
                FontComboBox.Items.Clear();
                foreach (Font quran_font in m_quran_fonts)
                {
                    FontComboBox.Items.Add(quran_font.Name);
                }
            }
        }
        finally
        {
            FontComboBox.EndUpdate();
            FontComboBox.SelectedIndexChanged += new EventHandler(FontComboBox_SelectedIndexChanged);
        }
    }
    private void FontComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (FontComboBox.SelectedIndex > -1)
        {
            ApplyFont(FontComboBox.SelectedIndex);
        }
    }
    private void FontLabel_Click(object sender, EventArgs e)
    {
        FontComboBox.DroppedDown = true;
    }
    private void ApplyFont(string font_name, float font_size)
    {
        bool found = false;
        if (m_quran_fonts != null)
        {
            for (int i = 0; i < m_quran_fonts.Count; i++)
            {
                if (m_quran_fonts[i] != null)
                {
                    if (m_quran_fonts[i].Name == font_name)
                    {
                        ApplyFont(i);
                        found = true;
                        break;
                    }
                }
            }
        }

        if (!found)
        {
            Font font = new Font(font_name, font_size, FontStyle.Bold);
            MainTextBox.Font = font;
            MainTextBox.Font = font;
            SearchResultTextBox.Font = font;
            SearchResultTextBox.Font = font;
            MainTextBox.AlignToStart();
            SearchResultTextBox.AlignToStart();
            MainTextBox.Refresh();
            SearchResultTextBox.Refresh();
        }
    }
    private void ApplyFont(int index)
    {
        if (m_quran_fonts != null)
        {
            if ((index >= 0) && (index < m_quran_fonts.Count))
            {
                m_quran_font = m_quran_fonts[index];
                if (m_quran_font != null)
                {
                    try
                    {
                        MainTextBox.BeginUpdate();
                        SearchResultTextBox.BeginUpdate();
                        MainTextBox.Font = m_quran_font;
                        MainTextBox.Font = m_quran_font;
                        SearchResultTextBox.Font = m_quran_font;
                        SearchResultTextBox.Font = m_quran_font;
                        MainTextBox.AlignToStart();
                        SearchResultTextBox.AlignToStart();
                        MainTextBox.Refresh();
                        SearchResultTextBox.Refresh();
                    }
                    finally
                    {
                        MainTextBox.EndUpdate();
                        SearchResultTextBox.EndUpdate();
                    }
                }
            }
        }
    }
    private void ApplyFont(Font font)
    {
        if (m_quran_fonts != null)
        {
            if (m_quran_fonts.Contains(font))
            {
                try
                {
                    MainTextBox.BeginUpdate();
                    SearchResultTextBox.BeginUpdate();

                    m_quran_font = font;
                    MainTextBox.Font = m_quran_font;
                    MainTextBox.Font = m_quran_font;
                    SearchResultTextBox.Font = m_quran_font;
                    SearchResultTextBox.Font = m_quran_font;
                    MainTextBox.AlignToStart();
                    SearchResultTextBox.AlignToStart();
                    MainTextBox.Refresh();
                    SearchResultTextBox.Refresh();
                }
                finally
                {
                    MainTextBox.EndUpdate();
                    SearchResultTextBox.EndUpdate();
                }
            }
        }
    }
    private void ApplyTranslationFontAndColor()
    {
        if (m_translation_font != null)
        {
            TranslationTextBox.Font = m_translation_font;
            TranslationTextBox.ForeColor = m_translation_color;
            TranslationTextBox.Refresh();

            if (m_show_all_translations)
            {
                TranslationsTextBox.Font = new Font(DEFAULT_TRANSALTION_FONT_NAME, DEFAULT_TRANSALTION_FONT_SIZE);
                TranslationsTextBox.ForeColor = DEFAULT_TRANSALTION_FONT_COLOR;
            }
            else
            {
                TranslationsTextBox.Font = m_translation_font;
                TranslationsTextBox.ForeColor = m_translation_color;
            }
            TranslationsTextBox.Refresh();

            RelatedWordsTextBox.Font = m_translation_font;
            RelatedWordsTextBox.ForeColor = m_translation_color;
            RelatedWordsTextBox.Refresh();

            GrammarTextBox.Font = m_translation_font;
            GrammarTextBox.ForeColor = m_translation_color;
            GrammarTextBox.Refresh();

            SymmetryTextBox.Font = m_translation_font;
            SymmetryTextBox.ForeColor = m_translation_color;
            SymmetryTextBox.Refresh();

            CVWLSequenceTextBox.Font = m_translation_font;
            CVWLSequenceTextBox.ForeColor = m_translation_color;
            CVWLSequenceTextBox.Refresh();

            ValuesSequenceTextBox.Font = m_translation_font;
            ValuesSequenceTextBox.ForeColor = m_translation_color;
            ValuesSequenceTextBox.Refresh();

            DNASequenceTextBox.Font = m_translation_font;
            DNASequenceTextBox.ForeColor = m_translation_color;
            DNASequenceTextBox.Refresh();

            UserTextTextBox.Font = m_translation_font;
            UserTextTextBox.ForeColor = m_translation_color;
            UserTextTextBox.Refresh();
        }
    }
    private void MainTextBox_TextChanged(object sender, EventArgs e)
    {
        if (
             ((sender != null) && (sender == m_active_textbox)) &&
             (
               (m_active_textbox.Focused) ||
               (ChaptersListBox.Focused) ||
               (ChapterComboBox.Focused) ||
               (ChapterVerseNumericUpDown.Focused) ||
               (ChapterWordNumericUpDown.Focused) ||
               (ChapterLetterNumericUpDown.Focused) ||
               (PageNumericUpDown.Focused) ||
               (StationNumericUpDown.Focused) ||
               (PartNumericUpDown.Focused) ||
               (GroupNumericUpDown.Focused) ||
               (HalfNumericUpDown.Focused) ||
               (QuarterNumericUpDown.Focused) ||
               (BowingNumericUpDown.Focused) ||
               (WordNumericUpDown.Focused) ||
               (LetterNumericUpDown.Focused)
             )
           )
        {
            if (m_client != null)
            {
                CalculateCurrentValue();

                BuildLetterFrequencies();
                DisplayLetterFrequencies();
            }
        }
    }
    private void MainTextBox_SelectionChanged(object sender, EventArgs e)
    {
        if (
             ((sender != null) && (sender == m_active_textbox)) &&
             (
               (m_active_textbox.Focused) ||
               (ChapterWordNumericUpDown.Focused) ||
               (ChapterLetterNumericUpDown.Focused) ||
               (WordNumericUpDown.Focused) ||
               (LetterNumericUpDown.Focused)
             )
           )
        {
            if (m_client != null)
            {
                m_user_text_mode = false;
                m_selection_mode = false;

                Verse previous_verse = GetCurrentVerse();
                Verse verse = GetVerseAtCursor();
                if (verse != null)
                {
                    if (verse != previous_verse)
                    {
                        CurrentVerseIndex = GetVerseIndex(verse);
                        UpdatePlayerButtons(verse);
                        UpdateHeaderLabel();
                    }

                    CalculateCurrentValue();

                    BuildLetterFrequencies();
                    DisplayLetterFrequencies();

                    DisplayCurrentPositions();

                    if (m_active_textbox.SelectionLength > 0)
                    {
                        DisplayWordFrequencies();

                        GenerateSentencesLabel.Visible = (Globals.EDITION == Edition.Ultimate);
                        DuplicateLettersCheckBox.Visible = (Globals.EDITION == Edition.Ultimate);
                        GenerateSentencesLabel.Refresh();
                        DuplicateLettersCheckBox.Refresh();
                    }
                    else
                    {
                        ToolTip.SetToolTip(InspectChaptersLabel, L[l]["Inspect chapters"]);
                        WordsListBoxLabel.Visible = false;
                        WordsListBox.Visible = false;
                        WordsListBox.SendToBack();

                        GenerateSentencesLabel.Visible = false;
                        DuplicateLettersCheckBox.Visible = false;
                        GenerateSentencesLabel.Refresh();
                        DuplicateLettersCheckBox.Refresh();
                    }
                }
            }
        }
    }
    private void MainTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        try
        {
            if ((e.Control) && (e.KeyCode == Keys.C))
            {
                if (m_active_textbox != null)
                {
                    if (m_active_textbox.SelectionLength == 0)
                    {
                        List<Verse> selected_verses = GetCurrentVerses();
                        if (selected_verses != null)
                        {
                            StringBuilder str = new StringBuilder();
                            foreach (Verse verse in selected_verses)
                            {
                                str.AppendLine(verse.Chapter.Name + "\t" + verse.Address + "\t" + verse.Text);
                            }
                            Clipboard.SetText(str.ToString());
                            Thread.Sleep(100); // must give chance for Clipboard to refresh its content before Paste
                            e.Handled = true;
                        }
                    }
                    else
                    {
                        m_active_textbox.Copy();
                    }
                }
            }
            else if ((e.Control) && (e.KeyCode == Keys.V))
            {
                if (m_active_textbox != null)
                {
                    SimplifyClipboardTextBeforePaste();
                    Thread.Sleep(100); // must give chance for Clipboard to refresh its content before Paste
                    m_active_textbox.Paste();
                    RestoreClipboardTextAfterPaste();
                    e.Handled = true;
                }
            }
            else if ((e.Control) && (e.KeyCode == Keys.G))
            {
                if (m_active_textbox != null)
                {
                    if (m_active_textbox.SelectionLength > 0)
                    {
                        GenerateAnagrams();
                        Thread.Sleep(100); // must give chance for Clipboard to refresh its content before Paste
                        e.Handled = true;
                    }
                }
            }
        }
        finally
        {
            UpdateMouseCursor();
        }
    }
    private void MainTextBox_KeyUp(object sender, KeyEventArgs e)
    {
        try
        {
            bool NavigationKeys = (
            e.KeyCode == Keys.Up ||
            e.KeyCode == Keys.Right ||
            e.KeyCode == Keys.Down ||
            e.KeyCode == Keys.Left ||
            e.KeyCode == Keys.Home ||
            e.KeyCode == Keys.End);

            if (NavigationKeys)
            {
                // this code has been moved out of SelectionChanged and brought to MouseClick and KeyUp
                // to keep all verse translations visible until the user clicks a verse then show one verse translation
                if (m_active_textbox != null)
                {
                    if (m_active_textbox.SelectionLength == 0)
                    {
                        Verse verse = GetCurrentVerse();
                        if (verse != null)
                        {
                            DisplayTranslations(verse);
                            DisplaySymmetry();
                            DisplayCVWLSequence();
                            DisplayValuesSequence();
                            DisplayDNASequence();
                        }
                    }
                    else
                    {
                        // selected text is dealt with by CalculateAndDisplayCounts 
                    }
                }
            }
        }
        finally
        {
            UpdateMouseCursor();
        }
    }
    private void MainTextBox_KeyPress(object sender, KeyPressEventArgs e)
    {
        if (e.KeyChar == ' ')
        {
            if ((MainTextBox.Focused) && (!m_translation_readonly)) return;
            if ((SearchResultTextBox.Focused) && (!m_translation_readonly)) return;
            if (FindByTextTextBox.Focused) return;
            if (ChapterComboBox.Focused) return;
            if (BookmarkTextBox.Focused) return;
            if (FindByFrequencyPhraseTextBox.Focused) return;

            if (m_player != null)
            {
                if ((m_player.Playing) || (m_player.Paused))
                {
                    PlayerPlayLabel_Click(null, null);
                }
            }
        }

        e.Handled = true; // stop annoying beep
    }
    private void MainTextBox_Enter(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);
        this.AcceptButton = null;
        UpdateMouseCursor();

        if (m_active_textbox != null)
        {
            CalculateCurrentValue();
            BuildLetterFrequencies();
            DisplayLetterFrequencies();
        }
    }
    private void MainTextBox_MouseEnter(object sender, EventArgs e)
    {
    }
    private void MainTextBox_MouseLeave(object sender, EventArgs e)
    {
        // stop cursor flicker
        if (m_active_textbox != null)
        {
            if (m_active_textbox.Cursor != Cursors.Default)
            {
                m_active_textbox.Cursor = Cursors.Default;
            }
        }
    }
    private void MainTextBox_MouseDown(object sender, MouseEventArgs e)
    {
        if (e.Button == MouseButtons.Right)
        {
            // in case we come from UserTextTextBox
            if (m_active_textbox != null)
            {
                m_active_textbox.Focus();
                MainTextBox_SelectionChanged(m_active_textbox, null);

                // set cursor at mouse RIGHT-click location so we know which word to get related words for
                int start = m_active_textbox.GetCharIndexFromPosition(e.Location);
                if (
                     (start <= m_active_textbox.SelectionStart)
                     ||
                     (start > (m_active_textbox.SelectionStart + m_active_textbox.SelectionLength))
                   )
                {
                    m_active_textbox.Select(start, 0);
                }
            }
        }
    }
    private void MainTextBox_MouseMove(object sender, MouseEventArgs e)
    {
        // stop flickering
        if (
            (Math.Abs(m_previous_location.X - e.X) < 8)
            &&
            (Math.Abs(m_previous_location.Y - e.Y) < 8)
           )
        {
            return;
        }
        m_previous_location = e.Location;

        UpdateMouseCursor();

        Word word = GetWordAtPointer(e);
        if (word != null)
        {
            m_current_word = word;

            // in all cases
            this.Text = Application.ProductName + " | " + GetSelectionSummary();
            UpdateFindMatchCaption();

            string word_info = GetWordInformation(word);
            if (ModifierKeys == Keys.Control)
            {
                word_info += "\r\n\r\n";
                word_info += GetGrammarInformation(word);

                word_info += "\r\n\r\n";
                word_info += GetRelatedWordsInformation(word);
            }
            ToolTip.SetToolTip(m_active_textbox, word_info);

            // diplay word info at application caption
            this.Text += SPACE_GAP +
            (
                word.Verse.Chapter.Name + SPACE_GAP +
                L[l]["verse"] + " " + word.Verse.NumberInChapter + "-" + word.Verse.Number + SPACE_GAP +
                L[l]["word"] + " " + word.NumberInVerse + "-" + word.NumberInChapter + "-" + word.Number + SPACE_GAP +
                word.Transliteration + SPACE_GAP +
                word.Text + SPACE_GAP +
                word.Meaning + SPACE_GAP +
                word.Occurrence.ToString() + "/" + word.Frequency.ToString()
            );
        }
    }
    private void MainTextBox_MouseUp(object sender, MouseEventArgs e)
    {
        if (ModifierKeys == Keys.Control)
        {
            if (e.Button == MouseButtons.Left)
            {
                // go to related words to word under mouse pointer
                FindRelatedWords(m_current_word);
            }
        }
        else
        {
            DisplayRelatedWordsInformation(m_current_word);
            DisplayGrammarInformation(m_current_word);

            // calculate the C V W L distances
            int chapter_number = ChapterComboBox.SelectedIndex + 1;
            int verse_number = (int)VerseNumericUpDown.Value;
            int word_number = (int)WordNumericUpDown.Value;
            int letter_number = (int)LetterNumericUpDown.Value;

            m_clicked_chapter_distance = chapter_number - m_clicked_chapter_number;
            m_clicked_verse_distance = verse_number - m_clicked_verse_number;
            m_clicked_word_distance = word_number - m_clicked_word_number;
            m_clicked_letter_distance = letter_number - m_clicked_letter_number;

            ChapterDiffTextBox.Text = m_clicked_chapter_distance.ToString();
            VerseDiffTextBox.Text = m_clicked_verse_distance.ToString();
            WordDiffTextBox.Text = m_clicked_word_distance.ToString();
            LetterDiffTextBox.Text = m_clicked_letter_distance.ToString();

            ChapterDiffTextBox.ForeColor = Numbers.GetNumberTypeColor(m_clicked_chapter_distance);
            VerseDiffTextBox.ForeColor = Numbers.GetNumberTypeColor(m_clicked_verse_distance);
            WordDiffTextBox.ForeColor = Numbers.GetNumberTypeColor(m_clicked_word_distance);
            LetterDiffTextBox.ForeColor = Numbers.GetNumberTypeColor(m_clicked_letter_distance);

            m_clicked_chapter_number = chapter_number;
            m_clicked_verse_number = verse_number;
            m_clicked_word_number = word_number;
            m_clicked_letter_number = letter_number;

            Verse verse = GetCurrentVerse();
            if (verse != null)
            {
                m_player_looping_i = 0;

                // selected verses are dealt with by CalculateAndDisplayCounts 
            }
        }
    }
    private void MainTextBox_Click(object sender, EventArgs e)
    {
        // this code has been moved out of SelectionChanged and brought to MouseClick and KeyUp
        // to keep all verse translations visible until the user clicks a verse then show one verse translation
        if (m_active_textbox != null)
        {
            if (m_active_textbox.SelectionLength == 0)
            {
                Verse verse = GetCurrentVerse();
                if (verse != null)
                {
                    DisplayTranslations(verse);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();
                }
            }
            else
            {
                // selected text is dealt with by CalculateAndDisplayCounts 
            }
        }
    }
    private void MainTextBox_DoubleClick(object sender, EventArgs e)
    {
        try
        {
            for (int i = 0; i < 3; i++) MainTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
            for (int i = 0; i < 3; i++) MainTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
            MainTextBox.BeginUpdate();

            if (ModifierKeys == Keys.None)
            {
                // double clicking search result, takes us back to Main text displaying the whole chapter of the double-clicked verse
                if (m_found_verses_displayed)
                {
                    Verse verse = GetCurrentVerse();
                    if (verse != null)
                    {
                        GotoVerse(verse);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            MainTextBox.EndUpdate();
            MainTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            MainTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
        }
    }
    private void GotoVerse(Verse verse)
    {
        if (verse != null)
        {
            if (verse.Chapter != null)
            {
                if (m_client != null)
                {
                    // select chapter and display it and colorize target verse
                    m_client.Selection = new Selection(m_client.Book, SelectionScope.Chapter, new List<int>() { verse.Chapter.Number - 1 });
                    if (m_client.Selection != null)
                    {
                        SwitchToMainTextBox();

                        BookmarkTextBox.Enabled = true;
                        // display selection's note (if any)
                        DisplayNote(m_client.GetBookmark(m_client.Selection));

                        m_user_text_mode = false;
                        m_selection_mode = false;

                        ToolTip.SetToolTip(InspectChaptersLabel, L[l]["Inspect chapters"]);
                        WordsListBoxLabel.Visible = false;
                        WordsListBox.Visible = false;
                        WordsListBox.SendToBack();

                        this.Text = Application.ProductName + " | " + GetSelectionSummary();
                        UpdateSearchScope();

                        DisplaySelectionText();

                        MainTextBox.ClearHighlight();
                        MainTextBox.AlignToStart();
                        HighlightVerse(verse);
                        UpdateHeaderLabel();

                        CalculateCurrentValue();

                        UpdateVersePositions(verse);

                        BuildLetterFrequencies();
                        DisplayLetterFrequencies();

                        DisplayTranslations(verse);
                        DisplaySymmetry();
                        DisplayCVWLSequence();
                        DisplayValuesSequence();
                        DisplayDNASequence();

                        //if (add_to_history)
                        {
                            AddSearchHistoryItem();
                        }

                        // change focus to MainTextBox control insead of SearchResultTextBox
                        //MainTextBox.Focus();

                        ToolTip.SetToolTip(InspectChaptersLabel, L[l]["Inspect chapters"]);
                        WordsListBoxLabel.Visible = false;
                        WordsListBox.Visible = false;
                        WordsListBox.SendToBack();

                        GenerateSentencesLabel.Visible = false;
                        DuplicateLettersCheckBox.Visible = false;
                        GenerateSentencesLabel.Refresh();
                        DuplicateLettersCheckBox.Refresh();
                    }
                }
            }
        }
    }
    private void MainTextBox_MouseWheel(object sender, MouseEventArgs e)
    {
        if (ModifierKeys == Keys.Control)
        {
            if (PictureBox.Visible)
            {
                RedrawImage();
            }
            else
            {
                if (m_active_textbox != null)
                {
                    ZoomInLabel.Enabled = true;
                    ZoomOutLabel.Enabled = true;

                    m_text_zoom_factor = m_active_textbox.ZoomFactor;
                    if (m_active_textbox.ZoomFactor <= (m_min_zoom_factor + m_error_margin))
                    {
                        MainTextBox.ZoomFactor = m_min_zoom_factor;
                        SearchResultTextBox.ZoomFactor = m_min_zoom_factor;
                        ZoomInLabel.Enabled = true;
                        ZoomOutLabel.Enabled = false;
                    }
                    else if (m_active_textbox.ZoomFactor >= (m_max_zoom_factor - m_error_margin))
                    {
                        MainTextBox.ZoomFactor = m_max_zoom_factor;
                        SearchResultTextBox.ZoomFactor = m_max_zoom_factor;
                        ZoomInLabel.Enabled = false;
                        ZoomOutLabel.Enabled = true;
                    }

                    MainTextBox.ZoomFactor = m_text_zoom_factor;
                    SearchResultTextBox.ZoomFactor = m_text_zoom_factor;
                }
            }
        }
    }
    private void ZoomInLabel_Click(object sender, EventArgs e)
    {
        if (PictureBox.Visible)
        {
            if (m_drawing_shape == DrawingShape.Lines) return;

            if (m_graphics_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin))
            {
                PictureBox.ZoomIn();
                m_graphics_zoom_factor = PictureBox.ZoomFactor;
            }
            // re-check same condition after zoom_factor update
            ZoomInLabel.Enabled = (m_graphics_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
            ZoomOutLabel.Enabled = true;

            RedrawImage();
        }
        else
        {
            if (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin))
            {
                m_text_zoom_factor += m_zoom_factor_increment;

                MainTextBox.ZoomFactor = m_text_zoom_factor;
                SearchResultTextBox.ZoomFactor = m_text_zoom_factor;
                if (m_active_textbox != null)
                {
                    int selection_start = m_active_textbox.SelectionStart;
                    int selection_kength = m_active_textbox.SelectionLength;
                    m_active_textbox.AlignToStart();
                    if (selection_kength > 0)
                    {
                        m_active_textbox.SelectionStart = selection_start;
                        m_active_textbox.SelectionLength = selection_kength;
                    }
                }
            }
            // re-check same condition after zoom_factor update
            ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
            ZoomOutLabel.Enabled = true;
        }
    }
    private void ZoomOutLabel_Click(object sender, EventArgs e)
    {
        if (PictureBox.Visible)
        {
            if (m_drawing_shape == DrawingShape.Lines) return;

            if (m_graphics_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin))
            {
                PictureBox.ZoomOut();
                m_graphics_zoom_factor = PictureBox.ZoomFactor;
            }
            // re-check same condition after zoom_factor update
            ZoomOutLabel.Enabled = (m_graphics_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));
            ZoomInLabel.Enabled = true;
            RedrawImage();
        }
        else
        {
            if (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin))
            {
                m_text_zoom_factor -= m_zoom_factor_increment;

                MainTextBox.ZoomFactor = m_text_zoom_factor;
                SearchResultTextBox.ZoomFactor = m_text_zoom_factor;
                if (m_active_textbox != null)
                {
                    int selection_start = m_active_textbox.SelectionStart;
                    int selection_kength = m_active_textbox.SelectionLength;
                    m_active_textbox.AlignToStart();
                    if (selection_kength > 0)
                    {
                        m_active_textbox.SelectionStart = selection_start;
                        m_active_textbox.SelectionLength = selection_kength;
                    }
                }
            }
            // re-check same condition after zoom_factor update
            ZoomOutLabel.Enabled = (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));
            ZoomInLabel.Enabled = true;
        }
    }
    private void GenerateSentencesLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            GenerateAnagrams();
        }
        catch
        {
            // silence IO error in case running from read-only media (CD/DVD)
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void GenerateAnagrams()
    {
        if (!String.IsNullOrEmpty(m_current_text))
        {
            string filename = Globals.DATA_FOLDER + "/" + "dictionary.txt";
            if (File.Exists(filename))
            {
                string text = m_current_text.SimplifyTo(m_client.NumerologySystem.TextMode);
                if (!DuplicateLettersCheckBox.Checked)
                {
                    text = text.RemoveDuplicateLetters();
                }
                List<string> sentences = Anagrams.GenerateAnagrams(filename, text);
                sentences.Sort();

                if (Directory.Exists(Globals.STATISTICS_FOLDER))
                {
                    filename = Globals.STATISTICS_FOLDER + "/" + text + ".txt";
                    if (sentences != null)
                    {
                        using (StreamWriter writer = new StreamWriter(filename, false, Encoding.Unicode))
                        {
                            writer.WriteLine("{0} sentences from {1}", sentences.Count, m_current_text);
                            writer.WriteLine("---------------------");
                            foreach (string sentence in sentences)
                            {
                                writer.WriteLine(sentence);
                            }
                        }

                        // show file content after save
                        FileHelper.DisplayFile(filename);
                    }
                }
            }
        }
    }
    // wordwrap mode
    private bool m_word_wrap_main_textbox = false;
    private bool m_word_wrap_search_textbox = false;
    private void ApplyWordWrapSettings()
    {
        try
        {
            MainTextBox.BeginUpdate();
            SearchResultTextBox.BeginUpdate();

            UpdateWordWrapLabel(m_word_wrap_main_textbox);
            MainTextBox.WordWrap = m_word_wrap_main_textbox;
            SearchResultTextBox.WordWrap = m_word_wrap_search_textbox;

            Verse.IncludeNumber = m_word_wrap_main_textbox;
        }
        finally
        {
            MainTextBox.EndUpdate();
            SearchResultTextBox.EndUpdate();
        }
    }
    private void UpdateWordWrapLabel(bool word_wrap)
    {
        if (word_wrap)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "text_wrap.png"))
            {
                WordWrapLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "text_wrap.png");
            }
            ToolTip.SetToolTip(WordWrapLabel, L[l]["Wrap"]);
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "text_unwrap.png"))
            {
                WordWrapLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "text_unwrap.png");
            }
            ToolTip.SetToolTip(WordWrapLabel, L[l]["Unwrap"]);
        }
        WordWrapLabel.Refresh();
    }
    private void WordWrapLabel_Click(object sender, EventArgs e)
    {
        ToggleWordWrap();
    }
    // add/remove Verse.EndMark, wrap/unwrap and redisplay
    private void ToggleWordWrap() // F11
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_active_textbox != null)
            {
                Verse current_verse = null;
                if (m_selection_mode == false)
                {
                    current_verse = GetCurrentVerse();
                }

                m_active_textbox.WordWrap = !m_active_textbox.WordWrap;
                if (m_found_verses_displayed)
                {
                    m_word_wrap_search_textbox = m_active_textbox.WordWrap;
                    Verse.IncludeNumber = false;

                    UpdateWordWrapLabel(m_word_wrap_search_textbox);
                    CVWLSequenceTextBox.WordWrap = m_word_wrap_search_textbox;
                    ValuesSequenceTextBox.WordWrap = m_word_wrap_search_textbox;
                    DNASequenceTextBox.WordWrap = m_word_wrap_search_textbox;

                    // no text is changed so no need to redisplay and recolorize
                    //DisplayFoundVerses(false);
                }
                else
                {
                    m_word_wrap_main_textbox = m_active_textbox.WordWrap;
                    Verse.IncludeNumber = m_word_wrap_main_textbox;

                    UpdateWordWrapLabel(m_word_wrap_main_textbox);
                    CVWLSequenceTextBox.WordWrap = m_word_wrap_main_textbox;
                    ValuesSequenceTextBox.WordWrap = m_word_wrap_main_textbox;
                    DNASequenceTextBox.WordWrap = m_word_wrap_main_textbox;

                    // re-display as verse changed IncludeNumber
                    DisplaySelection(false);
                }

                if (current_verse != null)
                {
                    HighlightVerse(current_verse);
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Verses
    ///////////////////////////////////////////////////////////////////////////////
    // navigation
    private int m_current_selection_verse_index = 0;
    private int m_current_found_verse_index = 0;
    private int CurrentVerseIndex
    {
        get
        {
            if (m_found_verses_displayed)
            {
                return m_current_found_verse_index;
            }
            else
            {
                return m_current_selection_verse_index;
            }
        }
        set
        {
            if (m_client != null)
            {
                if (m_found_verses_displayed)
                {
                    if (m_client.FoundVerses != null)
                    {
                        if ((value >= 0) && (value < m_client.FoundVerses.Count))
                        {
                            m_current_found_verse_index = value;
                        }
                    }
                }
                else
                {
                    if (m_client.Selection != null)
                    {
                        if (m_client.Selection.Verses != null)
                        {
                            if ((value >= 0) && (value < m_client.Selection.Verses.Count))
                            {
                                m_current_selection_verse_index = value;
                            }
                        }
                    }
                }
            }
        }
    }
    private Verse GetCurrentVerse()
    {
        return GetVerse(CurrentVerseIndex);
    }
    private List<Verse> GetCurrentVerses()
    {
        List<Verse> result = new List<Verse>();
        char[] separators = { '\n', Constants.OPEN_BRACKET[0] };
        string[] lines = m_current_text.Split(separators);
        int current_verse_index = CurrentVerseIndex;
        for (int i = current_verse_index; i < current_verse_index + lines.Length; i++)
        {
            result.Add(GetVerse(i));
        }
        return result;
    }
    private Verse GetVerse(int verse_index)
    {
        if (m_client != null)
        {
            List<Verse> verses = null;
            if (m_found_verses_displayed)
            {
                verses = m_client.FoundVerses;
            }
            else // m_curent_verses displayed
            {
                if (m_client.Selection != null)
                {
                    verses = m_client.Selection.Verses;
                }
            }

            if (verses != null)
            {
                if ((verse_index >= 0) && (verse_index < verses.Count))
                {
                    return verses[verse_index];
                }
            }
        }
        return null;
    }
    private int GetVerseDisplayStart(Verse verse)
    {
        int start = 0;
        if (m_client != null)
        {
            if (verse != null)
            {
                List<Verse> verses = null;
                if (m_found_verses_displayed)
                {
                    verses = m_client.FoundVerses;
                }
                else
                {
                    if (m_client.Selection != null)
                    {
                        verses = m_client.Selection.Verses;
                    }
                }

                if (verses != null)
                {
                    foreach (Verse v in verses)
                    {
                        if (v == verse) break;

                        if (m_found_verses_displayed)
                        {//                            \t                  \n
                            start += v.Address.Length + 1 + v.Text.Length + 1;
                        }
                        else
                        {
                            start += v.Text.Length + v.Endmark.Length;
                        }
                    }
                }
            }
        }
        return start;
    }
    private int GetVerseDisplayLength(Verse verse)
    {
        int length = 0;
        if (verse != null)
        {
            if (m_found_verses_displayed)
            {//                                \t                       \n
                length = verse.Address.Length + 1 + verse.Text.Length + 1;
            }
            else
            {//                                 { # }  or  \n
                length = verse.Text.Length + verse.Endmark.Length;
            }
        }
        return length;
    }
    private int GetWordDisplayStart(Word word)
    {
        int start = 0;
        if (word != null)
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                if (m_found_verses_displayed)
                {
                    verses = m_client.FoundVerses;
                }
                else
                {
                    if (m_client.Selection != null)
                    {
                        verses = m_client.Selection.Verses;
                    }
                }

                foreach (Verse verse in verses)
                {
                    if (verse == word.Verse)  //??? this will bring first matching word only
                    {
                        start += word.Position;
                        break;
                    }
                    start += GetVerseDisplayLength(verse);
                }
            }
        }
        return start;
    }
    private int GetWordDisplayLength(Word word)
    {
        if (word != null)
        {
            if (word.Text != null)
            {
                return word.Text.Length + 1;
            }
        }
        return 0;
    }
    // highlighting verse/word
    private Verse m_previous_highlighted_verse = null;
    private void HighlightVerse(Verse verse)
    {
        if (m_active_textbox != null)
        {
            try
            {
                for (int i = 0; i < 3; i++) m_active_textbox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                for (int i = 0; i < 3; i++) m_active_textbox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                m_active_textbox.BeginUpdate();

                // de-highlight previous verse
                if (m_previous_highlighted_verse != null)
                {
                    int start = GetVerseDisplayStart(m_previous_highlighted_verse);
                    int length = GetVerseDisplayLength(m_previous_highlighted_verse);
                    if (m_found_verses_displayed)
                    {
                        if (m_found_verse_backcolors.ContainsKey(m_previous_highlighted_verse))
                        {
                            m_active_textbox.Highlight(start, length - 1, m_found_verse_backcolors[m_previous_highlighted_verse]);
                        }
                        else
                        {
                            m_active_textbox.ClearHighlight(start, length - 1);
                        }
                    }
                    else
                    {
                        m_active_textbox.ClearHighlight(start, length - 1);
                    }
                }

                // highlight this verse
                if (verse != null)
                {
                    int start = GetVerseDisplayStart(verse);
                    int length = GetVerseDisplayLength(verse);
                    m_active_textbox.Highlight(start, length - 1, Color.Lavender);

                    // ####### re-wire MainTextBox_SelectionChanged event
                    m_active_textbox.EndUpdate();
                    m_active_textbox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
                    m_active_textbox.TextChanged += new EventHandler(MainTextBox_TextChanged);
                    CalculateCurrentValue(); // will update translation too !!!

                    // move cursor to verse start
                    m_active_textbox.Select(start, 0);

                    // updates verse position and value when cursor goes to start of verse
                    CurrentVerseIndex = GetVerseIndex(verse);
                    UpdatePlayerButtons(verse);
                    UpdateVersePositions(verse);

                    // backup highlighted verse
                    m_previous_highlighted_verse = verse;
                }
                else
                {
                    m_active_textbox.EndUpdate();
                    m_active_textbox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
                    m_active_textbox.TextChanged += new EventHandler(MainTextBox_TextChanged);
                }
            }
            finally
            {
                //// ####### already re-wired above
                //m_active_textbox.EndUpdate();
                //m_active_textbox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
                //m_active_textbox.TextChanged += new EventHandler(MainTextBox_TextChanged);
            }
        }
    }
    private Word m_previous_highlighted_word = null;
    private void HighlightWord(Word word)
    {
        if (m_active_textbox != null)
        {
            int backup_selection_start = m_active_textbox.SelectionStart;
            int backup_selection_length = m_active_textbox.SelectionLength;

            // de-highlight previous word
            if (m_previous_highlighted_word != null)
            {
                int start = GetWordDisplayStart(m_previous_highlighted_word);
                int length = GetWordDisplayLength(m_previous_highlighted_word);
                m_active_textbox.ClearHighlight(start, length);
            }

            // highlight this word
            if (word != null)
            {
                int start = GetWordDisplayStart(word);
                int length = GetWordDisplayLength(word);
                m_active_textbox.Highlight(start, length, Color.Lavender);

                // backup highlighted word
                m_previous_highlighted_word = word;
            }

            //??? BAD DESIGN: if backup_selection is outside visible area, then this line will scroll to it and loses highlight above
            m_active_textbox.Select(backup_selection_start, backup_selection_length);
        }
    }
    private GoldenRatioType m_golden_ratio_type = GoldenRatioType.Text;
    private GoldenRatioScope m_golden_ratio_scope = GoldenRatioScope.None;
    private GoldenRatioOrder m_golden_ratio_order = GoldenRatioOrder.LongShort;
    private double m_golden_ratio_tolerance = 0.05D;
    private void GoldenRatioScopeLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            switch (m_golden_ratio_scope)
            {
                case GoldenRatioScope.None:
                    {
                        m_golden_ratio_scope = GoldenRatioScope.Letter;
                        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "golden_letter.png"))
                        {
                            GoldenRatioScopeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "golden_letter.png");
                            ToolTip.SetToolTip(GoldenRatioScopeLabel, L[l]["Letter-level golden ratio"]);
                        }
                    }
                    break;
                case GoldenRatioScope.Letter:
                    {
                        m_golden_ratio_scope = GoldenRatioScope.Word;
                        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "golden_word.png"))
                        {
                            GoldenRatioScopeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "golden_word.png");
                            ToolTip.SetToolTip(GoldenRatioScopeLabel, L[l]["Word-level golden ratio"]);
                        }
                    }
                    break;
                case GoldenRatioScope.Word:
                    {
                        m_golden_ratio_scope = GoldenRatioScope.Sentence;
                        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "golden_sentence.png"))
                        {
                            GoldenRatioScopeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "golden_sentence.png");
                            ToolTip.SetToolTip(GoldenRatioScopeLabel, L[l]["Sentence-level golden ratio"]);
                        }
                    }
                    break;
                case GoldenRatioScope.Sentence:
                    {
                        m_golden_ratio_scope = GoldenRatioScope.None;
                        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "golden_none.png"))
                        {
                            GoldenRatioScopeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "golden_none.png");
                            ToolTip.SetToolTip(GoldenRatioScopeLabel, L[l]["Golden ratio colorization"]);
                        }
                    }
                    break;
            }

            GoldenRatioOrderLabel.Enabled = (m_golden_ratio_scope != GoldenRatioScope.None);

            DisplaySelectionText();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void GoldenRatioTypeLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            switch (m_golden_ratio_type)
            {
                case GoldenRatioType.Text:
                    {
                        m_golden_ratio_type = GoldenRatioType.Value;
                        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "golden_value.png"))
                        {
                            GoldenRatioTypeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "golden_value.png");
                            ToolTip.SetToolTip(GoldenRatioTypeLabel, L[l]["Value-based golden ratio colorization"]);
                        }
                    }
                    break;
                case GoldenRatioType.Value:
                    {
                        m_golden_ratio_type = GoldenRatioType.Text;
                        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "golden_text.png"))
                        {
                            GoldenRatioTypeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "golden_text.png");
                            ToolTip.SetToolTip(GoldenRatioTypeLabel, L[l]["Text-based golden ratio colorization"]);
                        }
                    }
                    break;
            }

            DisplaySelectionText();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void GoldenRatioOrderLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            switch (m_golden_ratio_order)
            {
                case GoldenRatioOrder.LongShort:
                    {
                        m_golden_ratio_order = GoldenRatioOrder.ShortLong;
                        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "golden_sl.png"))
                        {
                            GoldenRatioOrderLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "golden_sl.png");
                            ToolTip.SetToolTip(GoldenRatioOrderLabel, L[l]["Golden ratio ~= 1 + 0.618"]);
                        }
                    }
                    break;
                case GoldenRatioOrder.ShortLong:
                    {
                        m_golden_ratio_order = GoldenRatioOrder.LongShort;
                        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "golden_ls.png"))
                        {
                            GoldenRatioOrderLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "golden_ls.png");
                            ToolTip.SetToolTip(GoldenRatioOrderLabel, L[l]["Golden ratio ~= 0.618 + 1"]);
                        }
                    }
                    break;
            }

            DisplaySelectionText();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void UpdateGoldenRatioScopeLabel()
    {
        switch (m_golden_ratio_scope)
        {
            case GoldenRatioScope.None:
                {
                    ToolTip.SetToolTip(GoldenRatioScopeLabel, L[l]["Golden ratio colorization"]);
                }
                break;
            case GoldenRatioScope.Letter:
                {
                    ToolTip.SetToolTip(GoldenRatioScopeLabel, L[l]["Letter-level golden ratio"]);
                }
                break;
            case GoldenRatioScope.Word:
                {
                    ToolTip.SetToolTip(GoldenRatioScopeLabel, L[l]["Word-level golden ratio"]);
                }
                break;
            case GoldenRatioScope.Sentence:
                {
                    ToolTip.SetToolTip(GoldenRatioScopeLabel, L[l]["Sentence-level golden ratio"]);
                }
                break;
        }
    }
    private void UpdateGoldenRatioTypeLabel()
    {
        switch (m_golden_ratio_type)
        {
            case GoldenRatioType.Text:
                {
                    ToolTip.SetToolTip(GoldenRatioTypeLabel, L[l]["Text-based golden ratio colorization"]);
                }
                break;
            case GoldenRatioType.Value:
                {
                    ToolTip.SetToolTip(GoldenRatioTypeLabel, L[l]["Value-based golden ratio colorization"]);
                }
                break;
        }
    }
    private void UpdateGoldenRatioOrderLabel()
    {
        switch (m_golden_ratio_order)
        {
            case GoldenRatioOrder.LongShort:
                {
                    ToolTip.SetToolTip(GoldenRatioOrderLabel, L[l]["Golden ratio ~= 0.618 + 1"]);
                }
                break;
            case GoldenRatioOrder.ShortLong:
                {
                    ToolTip.SetToolTip(GoldenRatioOrderLabel, L[l]["Golden ratio ~= 1 + 0.618"]);
                }
                break;
        }
    }
    private void ColorizeGoldenRatios()
    {
        if (m_golden_ratio_scope != GoldenRatioScope.None)
        {
            if (m_client != null)
            {
                if (m_client.NumerologySystem != null)
                {
                    if (m_client.NumerologySystem.TextMode == "Original")
                    {
                        ColorizeGoldenRatiosInOriginalText();
                    }
                    else
                    {
                        ColorizeGoldenRatiosInSimplifiedText();
                    }
                }
            }
        }
    }
    private void ColorizeGoldenRatiosInOriginalText()
    {
        if (!m_found_verses_displayed)
        {
            this.Cursor = Cursors.WaitCursor;
            try
            {
                for (int i = 0; i < 3; i++) MainTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                for (int i = 0; i < 3; i++) MainTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                MainTextBox.BeginUpdate();

                if (m_client != null)
                {
                    if (m_client.Selection != null)
                    {
                        foreach (Verse verse in m_client.Selection.Verses)
                        {
                            if (verse != null)
                            {
                                int length = GetVerseDisplayLength(verse);
                                int start = GetVerseDisplayStart(verse);

                                if (m_client.NumerologySystem != null)
                                {
                                    int verse_letter_count = verse.LetterCount;

                                    int golden_letters = 0;
                                    switch (m_golden_ratio_type)
                                    {
                                        case GoldenRatioType.Text:
                                            {
                                                switch (m_golden_ratio_order)
                                                {
                                                    case GoldenRatioOrder.LongShort:
                                                        {
                                                            golden_letters = verse_letter_count - (int)Math.Round(((double)verse_letter_count / Numbers.PHI));
                                                        }
                                                        break;
                                                    case GoldenRatioOrder.ShortLong:
                                                        {
                                                            golden_letters = (int)Math.Round(((double)verse_letter_count / Numbers.PHI));
                                                        }
                                                        break;
                                                }
                                            }
                                            break;
                                        case GoldenRatioType.Value:
                                            {
                                                long golden_value = 0L;
                                                long verse_value = m_client.CalculateValue(verse);

                                                switch (m_golden_ratio_order)
                                                {
                                                    case GoldenRatioOrder.LongShort:
                                                        {
                                                            golden_value = verse_value - (long)Math.Round(((double)verse_value / Numbers.PHI));
                                                        }
                                                        break;
                                                    case GoldenRatioOrder.ShortLong:
                                                        {
                                                            golden_value = (long)Math.Round(((double)verse_value / Numbers.PHI));
                                                        }
                                                        break;
                                                }

                                                long sum = 0L;
                                                long diff_1 = 0;
                                                long diff_2 = 0;
                                                bool done = false;
                                                foreach (Word word in verse.Words)
                                                {
                                                    foreach (Letter letter in word.Letters)
                                                    {
                                                        diff_1 = sum - golden_value;
                                                        if (diff_1 == 0) { done = true; break; }

                                                        golden_letters++;

                                                        sum += m_client.CalculateValue(letter);
                                                        diff_2 = sum - golden_value;
                                                        if (diff_2 == 0) { done = true; break; }

                                                        // we've skipped the golden limit so go back and
                                                        // check which diff is nearer to the golden limit
                                                        // and is it within the tolerance level or not !!!
                                                        if ((diff_1 < 0) && (diff_2 > 0))
                                                        {
                                                            if (Math.Abs(diff_1) < diff_2)
                                                            {
                                                                if ((Math.Abs(diff_1) / golden_letters) <= m_golden_ratio_tolerance)
                                                                {
                                                                    golden_letters--;
                                                                    done = true; break;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ((diff_2 / golden_letters) <= m_golden_ratio_tolerance)
                                                                {
                                                                    done = true; break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (done)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }
                                            break;
                                    }

                                    int golden_space_stopmarks_diacritics = 0;
                                    bool colorize = false;
                                    int letter_count = 0;
                                    for (int i = 0; i < verse.Text.Length; i++)
                                    {
                                        if (Constants.ARABIC_LETTERS.Contains(verse.Text[i]))
                                        {
                                            letter_count++;
                                            if (letter_count == golden_letters)
                                            {
                                                switch (m_golden_ratio_scope)
                                                {
                                                    case GoldenRatioScope.None:
                                                        {
                                                            colorize = false;
                                                        }
                                                        break;
                                                    case GoldenRatioScope.Letter:
                                                        {
                                                            colorize = true;
                                                        }
                                                        break;
                                                    case GoldenRatioScope.Word:
                                                        {
                                                            for (int j = 1; j < verse.Text.Length - i; j++)
                                                            {
                                                                if (Constants.ARABIC_LETTERS.Contains(verse.Text[i + j]))
                                                                {
                                                                    break;
                                                                }
                                                                if (verse.Text[i + j] == ' ')
                                                                {
                                                                    colorize = true;
                                                                }
                                                            }
                                                        }
                                                        break;
                                                    case GoldenRatioScope.Sentence:
                                                        {
                                                            for (int j = 1; j < verse.Text.Length - i; j++)
                                                            {
                                                                if (Constants.ARABIC_LETTERS.Contains(verse.Text[i + j]))
                                                                {
                                                                    break;
                                                                }
                                                                else if (Constants.STOPMARKS.Contains(verse.Text[i + j]))
                                                                {
                                                                    colorize = true;
                                                                }
                                                                else
                                                                {
                                                                    continue; // skip space, harakaat, or QURANMARKS 
                                                                }
                                                            }
                                                        }
                                                        break;
                                                }

                                                // in all cases
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            golden_space_stopmarks_diacritics++;
                                        }
                                    }

                                    if (colorize)
                                    {
                                        int golden_length = golden_letters + golden_space_stopmarks_diacritics;

                                        MainTextBox.Colorize(start, golden_length, Color.Navy);
                                        MainTextBox.Colorize(start + golden_length, verse.Text.Length - golden_length, Color.Red);

                                        // reset color back to Navy for subsequent display
                                        //if (MainTextBox.Text.Length > 0)
                                        //{
                                        //    MainTextBox.Colorize(0, 1, Color.Navy);
                                        //}
                                    }
                                }
                            }
                        } // forech verse

                        MainTextBox.AlignToStart();
                    }
                }
            }
            finally
            {
                MainTextBox.EndUpdate();
                MainTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
                MainTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
                this.Cursor = Cursors.Default;
            }
        }
    }
    private void ColorizeGoldenRatiosInSimplifiedText()
    {
        if (!m_found_verses_displayed)
        {
            this.Cursor = Cursors.WaitCursor;
            try
            {
                for (int i = 0; i < 3; i++) MainTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                for (int i = 0; i < 3; i++) MainTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                MainTextBox.BeginUpdate();

                if (m_client != null)
                {
                    if (m_client.Selection != null)
                    {
                        foreach (Verse verse in m_client.Selection.Verses)
                        {
                            if (verse != null)
                            {
                                bool colorize = false;
                                bool word_end = false;
                                bool sentence_end = false;
                                int golden_letters = 0;
                                int golden_spaces = 0;

                                int length = GetVerseDisplayLength(verse);
                                int start = GetVerseDisplayStart(verse);

                                switch (m_golden_ratio_type)
                                {
                                    case GoldenRatioType.Text:
                                        {
                                            switch (m_golden_ratio_order)
                                            {
                                                case GoldenRatioOrder.LongShort:
                                                    {
                                                        golden_letters = verse.LetterCount - (int)Math.Round(((double)verse.LetterCount / Numbers.PHI));   // e.g.  16 - 16/phi = 6
                                                    }
                                                    break;
                                                case GoldenRatioOrder.ShortLong:
                                                    {
                                                        golden_letters = (int)Math.Round(((double)verse.LetterCount / Numbers.PHI));                        // e.g.       16/phi = 10
                                                    }
                                                    break;
                                            }

                                            bool done = false;
                                            int letter_count = 0;
                                            foreach (Word word in verse.Words)
                                            {
                                                foreach (Letter letter in word.Letters)
                                                {
                                                    word_end = (letter.NumberInWord == word.Letters.Count);
                                                    sentence_end = word_end && (word.Stopmark != Stopmark.None);

                                                    letter_count++;
                                                    if (letter_count == golden_letters)
                                                    {
                                                        done = true;
                                                        break;
                                                    }
                                                }
                                                if (done)
                                                {
                                                    break;
                                                }

                                                golden_spaces++;
                                            }
                                        }
                                        break;
                                    case GoldenRatioType.Value:
                                        {
                                            long golden_value = 0;
                                            long verse_value = m_client.CalculateValue(verse);

                                            switch (m_golden_ratio_order)
                                            {
                                                case GoldenRatioOrder.LongShort:
                                                    {
                                                        golden_value = verse_value - (long)Math.Round(((double)verse_value / Numbers.PHI));   // e.g. 1034 - 1034/phi = 394.94 = 395
                                                    }
                                                    break;
                                                case GoldenRatioOrder.ShortLong:
                                                    {
                                                        golden_value = (long)Math.Round(((double)verse_value / Numbers.PHI));                  // e.g.        1034/phi = 639.06 = 639
                                                    }
                                                    break;
                                            }

                                            long sum = 0L;
                                            long diff_1 = 0;
                                            long diff_2 = 0;
                                            bool done = false;
                                            foreach (Word word in verse.Words)
                                            {
                                                foreach (Letter letter in word.Letters)
                                                {
                                                    word_end = (letter.NumberInWord == word.Letters.Count);
                                                    sentence_end = word_end && (word.Stopmark != Stopmark.None);

                                                    diff_1 = sum - golden_value;
                                                    if (diff_1 == 0) { done = true; break; }

                                                    golden_letters++;

                                                    sum += m_client.CalculateValue(letter);
                                                    diff_2 = sum - golden_value;
                                                    if (diff_2 == 0) { done = true; break; }

                                                    // we've skipped the golden limit so go back and
                                                    // check which diff is nearer to the golden limit
                                                    // and is it within the tolerance level or not !!!
                                                    if ((diff_1 < 0) && (diff_2 > 0))
                                                    {
                                                        if (Math.Abs(diff_1) < diff_2)
                                                        {
                                                            if ((Math.Abs(diff_1) / golden_letters) <= m_golden_ratio_tolerance)
                                                            {
                                                                golden_letters--;
                                                                word_end = (letter.NumberInWord == 1);
                                                                sentence_end = word_end && (word.Stopmark != Stopmark.None);
                                                                done = true; break;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ((diff_2 / golden_letters) <= m_golden_ratio_tolerance)
                                                            {
                                                                done = true; break;
                                                            }
                                                        }
                                                    }
                                                }
                                                if (done)
                                                {
                                                    break;
                                                }

                                                golden_spaces++;
                                            }
                                        }
                                        break;
                                }

                                switch (m_golden_ratio_scope)
                                {
                                    case GoldenRatioScope.None:
                                        {
                                            colorize = false;
                                        }
                                        break;
                                    case GoldenRatioScope.Letter:
                                        {
                                            colorize = true;
                                        }
                                        break;
                                    case GoldenRatioScope.Word:
                                        {
                                            if (word_end)
                                            {
                                                colorize = true;
                                            }
                                        }
                                        break;
                                    case GoldenRatioScope.Sentence:
                                        {
                                            if (sentence_end)
                                            {
                                                colorize = true;
                                            }
                                        }
                                        break;
                                }

                                if (colorize)
                                {
                                    int golden_length = golden_letters + golden_spaces;

                                    MainTextBox.Colorize(start, golden_length, Color.Navy);
                                    MainTextBox.Colorize(start + golden_length, verse.Text.Length - golden_length, Color.Red);

                                    // reset color back to Navy for subsequent display
                                    if (MainTextBox.Text.Length > 0)
                                    {
                                        MainTextBox.Colorize(0, 1, Color.Navy);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            finally
            {
                MainTextBox.EndUpdate();
                MainTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
                MainTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
                this.Cursor = Cursors.Default;
            }
        }
    }
    // helpers
    private Verse GetVerseAtCursor()
    {
        if (m_active_textbox != null)
        {
            int start = m_active_textbox.SelectionStart;
            return GetVerseAtChar(start);
        }
        return null;
    }
    private Word GetWordAtCursor()
    {
        if (m_active_textbox != null)
        {
            int char_index = m_active_textbox.SelectionStart;
            if (char_index > 0)
            {
                return GetWordAtChar(char_index);
            }
        }
        return null;
    }
    private Letter GetLetterAtCursor()
    {
        if (m_active_textbox != null)
        {
            int char_index = m_active_textbox.SelectionStart;
            if (char_index > 0)
            {
                return GetLetterAtChar(char_index);
            }
        }
        return null;
    }
    private Verse GetVerseAtPointer(MouseEventArgs e)
    {
        return GetVerseAtLocation(e.Location);
    }
    private Word GetWordAtPointer(MouseEventArgs e)
    {
        return GetWordAtLocation(e.Location);
    }
    private Letter GetLetterAtPointer(MouseEventArgs e)
    {
        return GetLetterAtLocation(e.Location);
    }
    private Verse GetVerseAtLocation(Point mouse_location)
    {
        if (m_active_textbox != null)
        {
            int char_index = m_active_textbox.GetCharIndexFromPosition(mouse_location);
            if (char_index > 0)
            {
                return GetVerseAtChar(char_index);
            }
        }
        return null;
    }
    private Word GetWordAtLocation(Point mouse_location)
    {
        if (m_active_textbox != null)
        {
            int char_index = m_active_textbox.GetCharIndexFromPosition(mouse_location);
            if (char_index > 0)
            {
                return GetWordAtChar(char_index);
            }
        }
        return null;
    }
    private Letter GetLetterAtLocation(Point mouse_location)
    {
        if (m_active_textbox != null)
        {
            int char_index = m_active_textbox.GetCharIndexFromPosition(mouse_location);
            if (char_index > 0)
            {
                return GetLetterAtChar(char_index);
            }
        }
        return null;
    }
    // helper helpers
    private Verse GetVerseAtChar(int char_index)
    {
        if (m_client != null)
        {
            List<Verse> verses = null;
            if (m_found_verses_displayed)
            {
                verses = m_client.FoundVerses;
            }
            else
            {
                if (m_client.Selection != null)
                {
                    verses = m_client.Selection.Verses;
                }
            }

            if (verses != null)
            {
                Verse scanned_verse = null;
                foreach (Verse verse in verses)
                {
                    int start = GetVerseDisplayStart(verse);
                    if (char_index < start)
                    {
                        return scanned_verse;
                    }
                    scanned_verse = verse;
                }
                return scanned_verse;
            }
        }
        return null;
    }
    private Word GetWordAtChar(int char_index)
    {
        Word word = null;
        if (m_client != null)
        {
            if (m_found_verses_displayed)
            {
                List<Verse> verses = m_client.FoundVerses;
                if (verses != null)
                {
                    foreach (Verse verse in verses)
                    {
                        int length = GetVerseDisplayLength(verse);
                        if (char_index >= length)
                        {
                            char_index -= length;
                        }
                        else
                        {
                            // verse found, remove verse address
                            char_index -= verse.Address.Length + 1; // \t

                            int word_index = CalculateWordIndex(verse, char_index);
                            if ((word_index >= 0) && (word_index < verse.Words.Count))
                            {
                                word = verse.Words[word_index];
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                if (m_client.Selection != null)
                {
                    List<Verse> verses = m_client.Selection.Verses;
                    if (verses != null)
                    {
                        foreach (Verse verse in verses)
                        {
                            if ((char_index >= verse.Text.Length) && (char_index < (verse.Text.Length + verse.Endmark.Length - 1)))
                            {
                                return null; // don't return a word at verse Endmark
                            }

                            int length = GetVerseDisplayLength(verse);
                            if (char_index >= length)
                            {
                                char_index -= length;
                            }
                            else
                            {
                                int word_index = CalculateWordIndex(verse, char_index);
                                if ((word_index >= 0) && (word_index < verse.Words.Count))
                                {
                                    word = verse.Words[word_index];
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        return word;
    }
    private Letter GetLetterAtChar(int char_index)
    {
        if (m_client != null)
        {
            if (m_found_verses_displayed)
            {
                List<Verse> verses = m_client.FoundVerses;
                if (verses != null)
                {
                    foreach (Verse verse in verses)
                    {
                        int length = GetVerseDisplayLength(verse);
                        if (char_index >= length)
                        {
                            char_index -= length;
                        }
                        else
                        {
                            // remove verse address
                            char_index -= verse.Address.Length + 1; // \t

                            int letter_index = CalculateLetterIndex(verse, char_index);
                            if ((letter_index >= 0) && (letter_index < verse.LetterCount))
                            {
                                return verse.GetLetter(letter_index);
                            }
                        }
                    }
                }
            }
            else
            {
                if (m_client.Selection != null)
                {
                    List<Verse> verses = m_client.Selection.Verses;
                    if (verses != null)
                    {
                        foreach (Verse verse in verses)
                        {
                            int length = GetVerseDisplayLength(verse);
                            if (char_index >= length)
                            {
                                char_index -= length;
                            }
                            else
                            {
                                int letter_index = CalculateLetterIndex(verse, char_index);
                                if ((letter_index >= 0) && (letter_index < verse.LetterCount))
                                {
                                    return verse.GetLetter(letter_index);
                                }
                            }
                        }
                    }
                }
            }
        }
        return null;
    }
    // helper helper helpers
    /// <summary>
    /// Use only when no duplicate verses are displayed like with VerseRanges or ChapterRanges
    /// </summary>
    /// <param name="verse"></param>
    /// <returns>index of first matching verse</returns>
    private int GetVerseIndex(Verse verse)
    {
        if (m_client != null)
        {
            List<Verse> verses = null;
            if (m_found_verses_displayed)
            {
                verses = m_client.FoundVerses;
            }
            else
            {
                if (m_client.Selection != null)
                {
                    verses = m_client.Selection.Verses;
                }
            }

            if (verses != null)
            {
                int verse_index = -1;
                foreach (Verse v in verses)
                {
                    verse_index++;
                    if (v == verse)
                    {
                        return verse_index;
                    }
                }
            }
        }
        return -1;
    }
    private int CalculateWordIndex(Verse verse, int char_index)
    {
        int word_index = -1;
        if (verse != null)
        {
            string[] word_texts = verse.Text.Split();
            foreach (string word_text in word_texts)
            {
                // skip stopmarks (1-letter words), except real Quranic 1-letter words
                if (
                     (word_text.Length == 1)
                     &&
                     !((word_text == "ص") || (word_text == "ق") || (word_text == "ٯ") || (word_text == "ن") || (word_text == "ں") || (word_text == "و"))
                   )
                {
                    // skip stopmark words
                    char_index -= word_text.Length + 1; // 1 for stopmark
                }
                else
                {
                    word_index++;

                    if (char_index <= word_text.Length)
                    {
                        break;
                    }
                    char_index -= word_text.Length + 1; // 1 for space
                }
            }
        }
        return word_index;
    }
    private int CalculateLetterIndex(Verse verse, int char_index)
    {
        int letter_index = -1;
        if (verse != null)
        {
            // before verse start
            if (char_index < 0)
            {
                char_index = 0;
            }
            // after verse end
            else if (char_index >= verse.Text.Length)
            {
                char_index = verse.Text.Length - 1;
            }

            for (int i = 0; i <= char_index; i++)
            {
                if (Constants.ARABIC_LETTERS.Contains(verse.Text[i]))
                {
                    letter_index++;
                }
            }
        }
        return letter_index;
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Chapters
    ///////////////////////////////////////////////////////////////////////////////
    private void PopulateChapterSortComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) ChapterSortComboBox.SelectedIndexChanged -= new EventHandler(ChapterSortComboBox_SelectedIndexChanged);
            ChapterSortComboBox.BeginUpdate();

            ChapterSortComboBox.Items.Clear();
            ChapterSortComboBox.Items.Add("By Compilation");
            ChapterSortComboBox.Items.Add("By Revelation");
            ChapterSortComboBox.Items.Add("By Verses");
            ChapterSortComboBox.Items.Add("By Words");
            ChapterSortComboBox.Items.Add("By Letters");
            ChapterSortComboBox.Items.Add("By Value");

            ChapterSortComboBox.SelectedIndex = 0;
        }
        finally
        {
            ChapterSortComboBox.EndUpdate();
            ChapterSortComboBox.SelectedIndexChanged += new EventHandler(ChapterSortComboBox_SelectedIndexChanged);
        }
    }
    private void PopulateChapterComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) ChapterComboBox.SelectedIndexChanged -= new EventHandler(ChapterComboBox_SelectedIndexChanged);
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    ChapterComboBox.BeginUpdate();
                    ChapterComboBox.Items.Clear();
                    if (m_client.Book.Chapters != null)
                    {
                        foreach (Chapter chapter in m_client.Book.Chapters)
                        {
                            ChapterComboBox.Items.Add(chapter.SortedNumber + " - " + chapter.Name);
                        }
                    }
                }
            }
        }
        finally
        {
            ChapterComboBox.EndUpdate();
            ChapterComboBox.SelectedIndexChanged += new EventHandler(ChapterComboBox_SelectedIndexChanged);
        }
    }
    private void PopulateChaptersListBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) ChaptersListBox.SelectedIndexChanged -= new EventHandler(ChaptersListBox_SelectedIndexChanged);
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    ChaptersListBox.BeginUpdate();

                    ChaptersListBox.Items.Clear();
                    ChaptersListBox.ClearItemColors(); // cannot override Items.Clear cos not virtual so use this wrapper method
                    if (m_client.Book.Chapters != null)
                    {
                        if (m_found_verses_displayed)
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                ChaptersListBox.Items.Add(String.Format("{0,-3} {2,-3}  {1}", chapter.SortedNumber, chapter.Name, chapter.Verses.Count));

                                int match_count = 0;
                                if (m_matches_per_chapter != null)
                                {
                                    match_count = m_matches_per_chapter[chapter.SortedNumber - 1];
                                }

                                // use color shading to represent match_count visually
                                Color color = ChaptersListBox.BackColor;
                                if (match_count > 0)
                                {
                                    int red = 224;
                                    int green = 224;
                                    int blue = 255;
                                    green -= (match_count * 16);
                                    if (green < 0)
                                    {
                                        red += green;
                                        green = 0;
                                    }
                                    if (red < 0)
                                    {
                                        blue += red;
                                        red = 0;
                                    }
                                    if (blue < 0)
                                    {
                                        blue = 0;
                                    }
                                    color = Color.FromArgb(red, green, blue);
                                }
                                ChaptersListBox.SetItemColor(chapter.SortedNumber - 1, color);

                                int matching_chapters = 0;
                                if (m_matches_per_chapter != null)
                                {
                                    foreach (int chapter_match_count in m_matches_per_chapter)
                                    {
                                        if (chapter_match_count > 0)
                                        {
                                            matching_chapters++;
                                        }
                                    }
                                }
                                ChapterGroupBox.ForeColor = Color.Black;
                                ChapterGroupBox.Text = ((matching_chapters > 99) ? "" : ((matching_chapters > 9) ? " " : "  ")) + matching_chapters + " " + L[l]["Chapters"] + "   ";
                                this.ToolTip.SetToolTip(this.ChapterGroupBox, L[l]["Found chapters"]);
                            }
                        }
                        else // selection displayed
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                ChaptersListBox.Items.Add(String.Format("{0,-3} {2,-3}  {1}", chapter.SortedNumber, chapter.Name, chapter.Verses.Count));
                                ChaptersListBox.SetItemColor(chapter.SortedNumber - 1, CHAPTER_INITIALIZATION_COLORS[(int)chapter.InitializationType]);
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            ChaptersListBox.EndUpdate();
            ChaptersListBox.SelectedIndexChanged += new EventHandler(ChaptersListBox_SelectedIndexChanged);
        }
    }
    private void PopulateChapterSelectionComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) ChapterSelectionComboBox.SelectedIndexChanged -= new EventHandler(ChapterSelectionComboBox_SelectedIndexChanged);

            ChapterSelectionComboBox.BeginUpdate();
            ChapterSelectionComboBox.Items.Clear();
            foreach (ChapterSelection item in Enum.GetValues(typeof(ChapterSelection)))
            {
                ChapterSelectionComboBox.Items.Add(item + " chapter" + ((((item.ToString() == "Any") || (item.ToString() == "Key")) ? "" : "s")));
                //ChapterSelectionComboBox.Items.Add(item);
            }
            if (ChapterSelectionComboBox.Items.Count > 0)
            {
                ChapterSelectionComboBox.SelectedIndex = 0;
            }
        }
        finally
        {
            ChapterSelectionComboBox.EndUpdate();
            ChapterSelectionComboBox.SelectedIndexChanged += new EventHandler(ChapterSelectionComboBox_SelectedIndexChanged);
        }
    }
    private Chapter GetCurrentChapter()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                Verse verse = GetCurrentVerse();
                if (verse != null)
                {
                    return verse.Chapter;
                }
            }
        }
        return null;
    }
    private List<Chapter> GetCurrentChapters()
    {
        List<Chapter> result = new List<Chapter>();
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                List<Verse> verses = GetCurrentVerses();
                if (verses != null)
                {
                    result = m_client.Book.GetChapters(verses);
                }
            }
        }
        return result;
    }

    private ChapterSelection m_chapter_selection = ChapterSelection.Any;
    private void ChapterSelectionComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        m_chapter_selection = (ChapterSelection)(ChapterSelectionComboBox.SelectedIndex);
        ToolTip.SetToolTip(ChapterSelectionComboBox, L[l][(m_chapter_selection.ToString() + " " + "chapters")]);

        DisplayChapterSelection();
        ChapterSelectionComboBox.Focus();
    }
    private void DisplayChapterSelection()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                SelectionScope scope = SelectionScope.Chapter;
                List<int> indexes = new List<int>();
                switch (m_chapter_selection)
                {
                    case ChapterSelection.Any:
                        {
                            // keep current selection
                            indexes = m_client.Selection.Indexes;
                        }
                        break;
                    case ChapterSelection.Key:
                        {
                            indexes.Add(0);
                        }
                        break;
                    case ChapterSelection.Makkah:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (chapter.RevelationPlace == RevelationPlace.Makkah)
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Medina:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (chapter.RevelationPlace == RevelationPlace.Medina)
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Initialized:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if ((chapter.InitializationType == InitializationType.PartiallyInitialized) ||
                                    (chapter.InitializationType == InitializationType.FullyInitialized) ||
                                    (chapter.InitializationType == InitializationType.DoublyInitialized))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.NonInitialized:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if ((chapter.InitializationType == InitializationType.NonInitialized) ||
                                    (chapter.InitializationType == InitializationType.Key))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Even:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsEven(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Odd:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsOdd(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_E:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsEven(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_O:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsOdd(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.E_E:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsEven(chapter.SortedNumber) && Numbers.IsEven(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.E_O:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsEven(chapter.SortedNumber) && Numbers.IsOdd(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.O_O:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsOdd(chapter.SortedNumber) && Numbers.IsOdd(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.O_E:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsOdd(chapter.SortedNumber) && Numbers.IsEven(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.E_E_and_O_O:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsEven(chapter.SortedNumber) && Numbers.IsEven(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsOdd(chapter.SortedNumber) && Numbers.IsOdd(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.E_O_and_O_E:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsEven(chapter.SortedNumber) && Numbers.IsOdd(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsOdd(chapter.SortedNumber) && Numbers.IsEven(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Composite:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsComposite(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Prime:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsPrime(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_C:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_P:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsPrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.C_C:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsComposite(chapter.SortedNumber) && Numbers.IsComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.C_P:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsComposite(chapter.SortedNumber) && Numbers.IsPrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.P_P:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsPrime(chapter.SortedNumber) && Numbers.IsPrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.P_C:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsPrime(chapter.SortedNumber) && Numbers.IsComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.C_C_and_P_P:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsComposite(chapter.SortedNumber) && Numbers.IsComposite(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsPrime(chapter.SortedNumber) && Numbers.IsPrime(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.C_P_and_P_C:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsComposite(chapter.SortedNumber) && Numbers.IsPrime(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsPrime(chapter.SortedNumber) && Numbers.IsComposite(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AdditiveComposite:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditiveComposite(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AdditivePrime:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditivePrime(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_AC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditiveComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_AP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditivePrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AC_AC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditiveComposite(chapter.SortedNumber) && Numbers.IsAdditiveComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AC_AP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditiveComposite(chapter.SortedNumber) && Numbers.IsAdditivePrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AP_AP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditivePrime(chapter.SortedNumber) && Numbers.IsAdditivePrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AP_AC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditivePrime(chapter.SortedNumber) && Numbers.IsAdditiveComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AC_AC_and_AP_AP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsAdditiveComposite(chapter.SortedNumber) && Numbers.IsAdditiveComposite(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsAdditivePrime(chapter.SortedNumber) && Numbers.IsAdditivePrime(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AC_AP_and_AP_AC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsAdditiveComposite(chapter.SortedNumber) && Numbers.IsAdditivePrime(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsAdditivePrime(chapter.SortedNumber) && Numbers.IsAdditiveComposite(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.NonAdditiveComposite:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditiveComposite(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.NonAdditivePrime:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditivePrime(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_XC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditiveComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_XP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditivePrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.XC_XC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditiveComposite(chapter.SortedNumber) && Numbers.IsNonAdditiveComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.XC_XP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditiveComposite(chapter.SortedNumber) && Numbers.IsNonAdditivePrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.XP_XP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditivePrime(chapter.SortedNumber) && Numbers.IsNonAdditivePrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.XP_XC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditivePrime(chapter.SortedNumber) && Numbers.IsNonAdditiveComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.XC_XC_and_XP_XP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsNonAdditiveComposite(chapter.SortedNumber) && Numbers.IsNonAdditiveComposite(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsNonAdditivePrime(chapter.SortedNumber) && Numbers.IsNonAdditivePrime(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.XC_XP_and_XP_XC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsNonAdditiveComposite(chapter.SortedNumber) && Numbers.IsNonAdditivePrime(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsNonAdditivePrime(chapter.SortedNumber) && Numbers.IsNonAdditiveComposite(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Heavy:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (chapter.SortedNumber <= chapter.Verses.Count)
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Light:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (chapter.SortedNumber > chapter.Verses.Count)
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.All:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                indexes.Add(chapter.Number - 1);
                            }
                        }
                        break;
                }
                m_client.Selection = new Selection(m_client.Book, scope, indexes);

                UpdateChaptersListBox();
                UpdateSelection(); // needed again, otherwise hangs. Why?

                DisplaySelection(true);

                ChaptersListBox.Focus();
            }
        }
    }

    private void DisplayChapterRevelationInfo()
    {
        if (m_found_verses_displayed) return;

        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (ChapterComboBox.SelectedIndex > -1)
                {
                    int index = ChapterComboBox.SelectedIndex;
                    if (m_client.Book.Chapters != null)
                    {
                        Chapter chapter = m_client.Book.Chapters[index];
                        if (chapter != null)
                        {
                            string arabic_revelation_place = null;
                            switch (chapter.RevelationPlace)
                            {
                                case RevelationPlace.Makkah:
                                    arabic_revelation_place = L[l]["Makkah"];
                                    break;
                                case RevelationPlace.Medina:
                                    arabic_revelation_place = L[l]["Medina"];
                                    break;
                                default:
                                    arabic_revelation_place = "";
                                    break;
                            }
                            ChapterGroupBox.Text = arabic_revelation_place + " - " + chapter.RevelationOrder.ToString() + "        ";
                        }
                    }
                }
                else
                {
                    ChapterGroupBox.Text = "";
                }
                this.ToolTip.SetToolTip(this.ChapterGroupBox, L[l]["Revelation order"]);

                UpdateChapterGroupBoxTextColor();
            }
        }
    }
    private void UpdateSelection()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (ChaptersListBox.SelectedIndices.Count > 0)
                {
                    SelectionScope scope = SelectionScope.Chapter;
                    List<int> indexes = new List<int>();
                    for (int i = 0; i < ChaptersListBox.SelectedIndices.Count; i++)
                    {
                        int selected_index = ChaptersListBox.SelectedIndices[i];
                        if (m_client.Book.Chapters != null)
                        {
                            if ((selected_index >= 0) && (selected_index < m_client.Book.Chapters.Count))
                            {
                                Chapter chapter = m_client.Book.Chapters[selected_index];
                                if (chapter != null)
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                    }
                    m_client.Selection = new Selection(m_client.Book, scope, indexes);
                }
            }
        }
    }
    private void UpdateChaptersListBox()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Selection != null)
                {
                    try
                    {
                        for (int i = 0; i < 3; i++) ChaptersListBox.SelectedIndexChanged -= new EventHandler(ChaptersListBox_SelectedIndexChanged);
                        if (m_found_verses_displayed)
                        {
                            //??? wrongly removes selections of FindChapters result
                            //??? selects found chapters losing all color-shade information
                            //if (m_client.FoundVerses != null)
                            //{
                            //    List<Chapter> chapters = m_client.Book.GetChapters(m_client.FoundVerses);
                            //    ChaptersListBox.SelectedIndices.Clear();
                            //    foreach (Chapter chapter in chapters)
                            //    {
                            //        ChaptersListBox.SelectedIndices.Add(chapter.Number - 1);
                            //    }
                            //}
                        }
                        else
                        {
                            if (m_client.Selection.Chapters != null)
                            {
                                ChaptersListBox.SelectedIndices.Clear();
                                foreach (Chapter chapter in m_client.Selection.Chapters)
                                {
                                    ChaptersListBox.SelectedIndices.Add(chapter.SortedNumber - 1);
                                }
                            }
                        }
                    }
                    finally
                    {
                        ChaptersListBox.SelectedIndexChanged += new EventHandler(ChaptersListBox_SelectedIndexChanged);
                    }
                }
            }
        }
    }
    private void UpdateMinMaxChapterVerseWordLetter(int chapter_index)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Book.Chapters != null)
                {
                    if ((chapter_index >= 0) && (chapter_index < m_client.Book.Chapters.Count))
                    {
                        Chapter chapter = m_client.Book.Chapters[chapter_index];
                        if (chapter != null)
                        {
                            try
                            {
                                for (int i = 0; i < 3; i++) ChapterVerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                                for (int i = 0; i < 3; i++) ChapterWordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                                for (int i = 0; i < 3; i++) ChapterLetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);

                                ChapterVerseNumericUpDown.Minimum = 1;
                                ChapterVerseNumericUpDown.Maximum = chapter.Verses.Count;

                                ChapterWordNumericUpDown.Minimum = 1;
                                ChapterWordNumericUpDown.Maximum = chapter.WordCount;

                                ChapterLetterNumericUpDown.Minimum = 1;
                                ChapterLetterNumericUpDown.Maximum = chapter.LetterCount;
                            }
                            finally
                            {
                                ChapterVerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                                ChapterWordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                                ChapterLetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                            }
                        }
                    }
                }
            }
        }
    }
    private void UpdateChapterGroupBoxTextColor()
    {
        Verse verse = GetCurrentVerse();
        if (verse != null)
        {
            ChapterGroupBox.ForeColor = CHAPTER_INITIALIZATION_COLORS[(int)verse.Chapter.InitializationType];
            ChapterGroupBox.Refresh();
        }
    }

    private void ChapterComboBox_KeyDown(object sender, KeyEventArgs e)
    {
        bool SeparatorKeys = (
            ((e.KeyCode == Keys.Subtract) && (e.Modifiers != Keys.Shift))           // HYPHEN
            || ((e.KeyCode == Keys.OemMinus) && (e.Modifiers != Keys.Shift))        // HYPHEN
            || ((e.KeyCode == Keys.Oemcomma) && (e.Modifiers != Keys.Shift))        // COMMA
            || ((e.KeyCode == Keys.OemSemicolon) && (e.Modifiers == Keys.Shift))    // COLON
            );

        bool NumericKeys = (
            ((e.KeyCode >= Keys.D0 && e.KeyCode <= Keys.D9) || (e.KeyCode >= Keys.NumPad0 && e.KeyCode <= Keys.NumPad9))
            && e.Modifiers != Keys.Shift);

        bool EditKeys = (
            (e.KeyCode == Keys.A && e.Modifiers == Keys.Control) ||
            (e.KeyCode == Keys.Z && e.Modifiers == Keys.Control) ||
            (e.KeyCode == Keys.X && e.Modifiers == Keys.Control) ||
            (e.KeyCode == Keys.C && e.Modifiers == Keys.Control) ||
            (e.KeyCode == Keys.V && e.Modifiers == Keys.Control) ||
            e.KeyCode == Keys.Delete ||
            e.KeyCode == Keys.Back);

        bool NavigationKeys = (
            e.KeyCode == Keys.Up ||
            e.KeyCode == Keys.Right ||
            e.KeyCode == Keys.Down ||
            e.KeyCode == Keys.Left ||
            e.KeyCode == Keys.Home ||
            e.KeyCode == Keys.End);

        bool ExecuteKeys = (e.KeyCode == Keys.Enter);

        if (ExecuteKeys)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    try
                    {
                        string text = ChapterComboBox.Text;
                        if (!String.IsNullOrEmpty(text))
                        {
                            // 1, 3-4, 5:55, 3-4:19, 6:19-23, 24:35-27:62
                            SelectionScope scope = SelectionScope.Verse;
                            List<int> indexes = new List<int>();

                            foreach (string part in text.Split(','))
                            {
                                string[] range_parts = part.Split('-');
                                if (range_parts.Length == 1) // 1 | 5:55
                                {
                                    string[] sub_range_parts = part.Split(':');
                                    if (sub_range_parts.Length == 1) // 1
                                    {
                                        int chapter_number;
                                        if (int.TryParse(sub_range_parts[0], out chapter_number))
                                        {
                                            Chapter chapter = null;
                                            if (m_client.Book.Chapters != null)
                                            {
                                                foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                {
                                                    if (book_chapter.SortedNumber == chapter_number)
                                                    {
                                                        chapter = book_chapter;
                                                        break;
                                                    }
                                                }

                                                if (chapter != null)
                                                {
                                                    foreach (Verse verse in chapter.Verses)
                                                    {
                                                        if (!indexes.Contains(verse.Number - 1))
                                                        {
                                                            indexes.Add(verse.Number - 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (sub_range_parts.Length == 2) // 5:55
                                    {
                                        int chapter_number;
                                        if (int.TryParse(sub_range_parts[0], out chapter_number)) // 5:55
                                        {
                                            int verse_number_in_chapter;
                                            if (int.TryParse(sub_range_parts[1], out verse_number_in_chapter))
                                            {
                                                Chapter chapter = null;
                                                if (m_client.Book.Chapters != null)
                                                {
                                                    foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                    {
                                                        if (book_chapter.SortedNumber == chapter_number)
                                                        {
                                                            chapter = book_chapter;
                                                            break;
                                                        }
                                                    }

                                                    if (chapter != null)
                                                    {
                                                        if (((verse_number_in_chapter - 1 >= 0) && ((verse_number_in_chapter - 1) < chapter.Verses.Count)))
                                                        {
                                                            int from_verse_index = chapter.Verses[verse_number_in_chapter - 1].Number - 1;
                                                            if (!indexes.Contains(from_verse_index))
                                                            {
                                                                indexes.Add(from_verse_index);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (range_parts.Length == 2) // 3-4, 3-4:19, 6:19-23, 24:35-27:62
                                {
                                    int from_chapter_number;
                                    int to_chapter_number;
                                    if (int.TryParse(range_parts[0], out from_chapter_number))
                                    {
                                        if (int.TryParse(range_parts[1], out to_chapter_number)) // 3-4
                                        {
                                            if (from_chapter_number <= to_chapter_number)
                                            {
                                                for (int number = from_chapter_number; number <= to_chapter_number; number++)
                                                {
                                                    Chapter chapter = null;
                                                    if (m_client.Book.Chapters != null)
                                                    {
                                                        foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                        {
                                                            if (book_chapter.SortedNumber == number)
                                                            {
                                                                chapter = book_chapter;
                                                                break;
                                                            }
                                                        }

                                                        if (chapter != null)
                                                        {
                                                            foreach (Verse verse in chapter.Verses)
                                                            {
                                                                if (!indexes.Contains(verse.Number - 1))
                                                                {
                                                                    indexes.Add(verse.Number - 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else // backward 4-3
                                            {
                                                for (int number = from_chapter_number; number >= to_chapter_number; number--)
                                                {
                                                    Chapter chapter = null;
                                                    if (m_client.Book.Chapters != null)
                                                    {
                                                        foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                        {
                                                            if (book_chapter.SortedNumber == number)
                                                            {
                                                                chapter = book_chapter;
                                                                break;
                                                            }
                                                        }

                                                        if (chapter != null)
                                                        {
                                                            foreach (Verse verse in chapter.Verses)
                                                            {
                                                                if (!indexes.Contains(verse.Number - 1))
                                                                {
                                                                    indexes.Add(verse.Number - 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else // 3-4:19
                                        {
                                            // range_parts[0] == 3
                                            // range_parts[1] == 4:19
                                            string[] to_range_parts = range_parts[1].Split(':'); // 4:19
                                            if (to_range_parts.Length == 2)
                                            {
                                                if (int.TryParse(to_range_parts[0], out to_chapter_number))  // 4
                                                {
                                                    int from_verse_number_in_chapter;
                                                    int to_verse_number_in_chapter;
                                                    if (int.TryParse(to_range_parts[1], out to_verse_number_in_chapter)) // 19
                                                    {
                                                        Chapter from_chapter = null;
                                                        if (m_client.Book.Chapters != null)
                                                        {
                                                            foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                            {
                                                                if (book_chapter.SortedNumber == from_chapter_number)
                                                                {
                                                                    from_chapter = book_chapter;
                                                                    break;
                                                                }
                                                            }

                                                            if (from_chapter != null)
                                                            {
                                                                if (from_chapter_number <= to_chapter_number)
                                                                {
                                                                    from_verse_number_in_chapter = 1; // start from first verse in chapter
                                                                }
                                                                else
                                                                {
                                                                    from_verse_number_in_chapter = from_chapter.Verses.Count; // start from last verse in chapter
                                                                }

                                                                if (((from_verse_number_in_chapter - 1 >= 0) && ((from_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                {
                                                                    int from_verse_index = from_chapter.Verses[from_verse_number_in_chapter - 1].Number - 1;

                                                                    Chapter to_chapter = null;
                                                                    foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                    {
                                                                        if (book_chapter.SortedNumber == to_chapter_number)
                                                                        {
                                                                            to_chapter = book_chapter;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (to_chapter != null)
                                                                    {
                                                                        if (((to_verse_number_in_chapter - 1 >= 0) && ((to_verse_number_in_chapter - 1) < to_chapter.Verses.Count)))
                                                                        {
                                                                            int to_verse_index = to_chapter.Verses[to_verse_number_in_chapter - 1].Number - 1;

                                                                            if (from_verse_index <= to_verse_index)  // XX:19-23
                                                                            {
                                                                                for (int i = from_verse_index; i <= to_verse_index; i++)
                                                                                {
                                                                                    if (!indexes.Contains(i))
                                                                                    {
                                                                                        indexes.Add(i);
                                                                                    }
                                                                                }
                                                                            }
                                                                            else // backward XX:32-19
                                                                            {
                                                                                for (int i = from_verse_index; i >= to_verse_index; i--)
                                                                                {
                                                                                    if (!indexes.Contains(i))
                                                                                    {
                                                                                        indexes.Add(i);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else // "range_parts[0]" contains a colon ':'  // "6:19"-23, "24:35"-27:62
                                    {
                                        //int from_chapter_number;
                                        //int to_chapter_number;
                                        string[] from_parts = range_parts[0].Split(':');
                                        if (from_parts.Length == 2)
                                        {
                                            int from_verse_number_in_chapter;
                                            if (int.TryParse(from_parts[0], out from_chapter_number))
                                            {
                                                if (int.TryParse(from_parts[1], out from_verse_number_in_chapter))
                                                {
                                                    string[] to_parts = range_parts[1].Split(':'); // "range_parts[1]" may or may not contain a colon ':'  // 6:19-"23", 24:35-"27:62"
                                                    if (to_parts.Length == 1) // 6:19-"23"
                                                    {
                                                        int to_verse_number_in_chapter;
                                                        if (int.TryParse(to_parts[0], out to_verse_number_in_chapter))
                                                        {
                                                            if (from_verse_number_in_chapter <= to_verse_number_in_chapter)  // XX:19-23
                                                            {
                                                                Chapter from_chapter = null;
                                                                if (m_client.Book.Chapters != null)
                                                                {
                                                                    foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                    {
                                                                        if (book_chapter.SortedNumber == from_chapter_number)
                                                                        {
                                                                            from_chapter = book_chapter;
                                                                            break;
                                                                        }
                                                                    }

                                                                    if (from_chapter != null)
                                                                    {
                                                                        if (((from_verse_number_in_chapter - 1 >= 0) && ((from_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                        {
                                                                            if (((to_verse_number_in_chapter - 1 >= 0) && ((to_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                            {
                                                                                int from_verse_index = from_chapter.Verses[from_verse_number_in_chapter - 1].Number - 1;
                                                                                int to_verse_index = from_chapter.Verses[to_verse_number_in_chapter - 1].Number - 1;
                                                                                for (int i = from_verse_index; i <= to_verse_index; i++)
                                                                                {
                                                                                    if (!indexes.Contains(i))
                                                                                    {
                                                                                        indexes.Add(i);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else // backward 1:7-5
                                                            {
                                                                Chapter from_chapter = null;
                                                                if (m_client.Book.Chapters != null)
                                                                {
                                                                    foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                    {
                                                                        if (book_chapter.SortedNumber == from_chapter_number)
                                                                        {
                                                                            from_chapter = book_chapter;
                                                                            break;
                                                                        }
                                                                    }

                                                                    if (from_chapter != null)
                                                                    {
                                                                        if (((from_verse_number_in_chapter - 1 >= 0) && ((from_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                        {
                                                                            if (((to_verse_number_in_chapter - 1 >= 0) && ((to_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                            {
                                                                                int from_verse_index = from_chapter.Verses[from_verse_number_in_chapter - 1].Number - 1;
                                                                                int to_verse_index = from_chapter.Verses[to_verse_number_in_chapter - 1].Number - 1;
                                                                                for (int i = from_verse_index; i >= to_verse_index; i--)
                                                                                {
                                                                                    if (!indexes.Contains(i))
                                                                                    {
                                                                                        indexes.Add(i);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else if (to_parts.Length == 2) // 24:35-"27:62"
                                                    {
                                                        int to_verse_number_in_chapter;
                                                        if (int.TryParse(to_parts[0], out to_chapter_number))
                                                        {
                                                            if (int.TryParse(to_parts[1], out to_verse_number_in_chapter))
                                                            {
                                                                if (from_chapter_number <= to_chapter_number)  // 24:XX-27:XX // only worry about chapters
                                                                {
                                                                    Chapter from_chapter = null;
                                                                    if (m_client.Book.Chapters != null)
                                                                    {
                                                                        foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                        {
                                                                            if (book_chapter.SortedNumber == from_chapter_number)
                                                                            {
                                                                                from_chapter = book_chapter;
                                                                                break;
                                                                            }
                                                                        }

                                                                        if (from_chapter != null)
                                                                        {
                                                                            if (((from_verse_number_in_chapter - 1 >= 0) && ((from_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                            {
                                                                                int from_verse_index = from_chapter.Verses[from_verse_number_in_chapter - 1].Number - 1;
                                                                                Chapter to_chapter = null;
                                                                                foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                                {
                                                                                    if (book_chapter.SortedNumber == to_chapter_number)
                                                                                    {
                                                                                        to_chapter = book_chapter;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                if (to_chapter != null)
                                                                                {
                                                                                    if (((to_verse_number_in_chapter - 1 >= 0) && ((to_verse_number_in_chapter - 1) < to_chapter.Verses.Count)))
                                                                                    {
                                                                                        int to_verse_index = to_chapter.Verses[to_verse_number_in_chapter - 1].Number - 1;
                                                                                        for (int i = from_verse_index; i <= to_verse_index; i++)
                                                                                        {
                                                                                            if (!indexes.Contains(i))
                                                                                            {
                                                                                                indexes.Add(i);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else // backward   // 27:XX-24:XX // only worry about chapters
                                                                {
                                                                    Chapter from_chapter = null;
                                                                    if (m_client.Book.Chapters != null)
                                                                    {
                                                                        foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                        {
                                                                            if (book_chapter.SortedNumber == from_chapter_number)
                                                                            {
                                                                                from_chapter = book_chapter;
                                                                                break;
                                                                            }
                                                                        }

                                                                        if (from_chapter != null)
                                                                        {
                                                                            if (((from_verse_number_in_chapter - 1 >= 0) && ((from_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                            {
                                                                                int from_verse_index = from_chapter.Verses[from_verse_number_in_chapter - 1].Number - 1;
                                                                                Chapter to_chapter = null;
                                                                                foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                                {
                                                                                    if (book_chapter.SortedNumber == to_chapter_number)
                                                                                    {
                                                                                        to_chapter = book_chapter;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                if (to_chapter != null)
                                                                                {
                                                                                    if (((to_verse_number_in_chapter - 1 >= 0) && ((to_verse_number_in_chapter - 1) < to_chapter.Verses.Count)))
                                                                                    {
                                                                                        int to_verse_index = to_chapter.Verses[to_verse_number_in_chapter - 1].Number - 1;
                                                                                        for (int i = from_verse_index; i >= to_verse_index; i--)
                                                                                        {
                                                                                            if (!indexes.Contains(i))
                                                                                            {
                                                                                                indexes.Add(i);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if (indexes.Count > 0)
                            {
                                m_client.Selection = new Selection(m_client.Book, scope, indexes);

                                PlayerStopLabel_Click(null, null);

                                DisplaySelection(true);
                            }
                            else
                            {
                                e.Handled = false;
                            }
                        }
                    }
                    catch
                    {
                        // log exception
                    }
                }
            }
        }

        // reject all other keys
        if (!(SeparatorKeys || NumericKeys || EditKeys || NavigationKeys))
        {
            e.SuppressKeyPress = true;
            e.Handled = true;
        }
    }
    private void ChapterComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                List<Chapter> chapters = m_client.Book.Chapters;
                int index = ChapterComboBox.SelectedIndex;
                if ((index >= 0) && (index < chapters.Count))
                {
                    int chapter_index = chapters[index].Number - 1;

                    if (
                         ChapterComboBox.Focused ||
                         ChapterVerseNumericUpDown.Focused ||
                         ChapterWordNumericUpDown.Focused ||
                         ChapterLetterNumericUpDown.Focused ||
                         PageNumericUpDown.Focused ||
                         StationNumericUpDown.Focused ||
                         PartNumericUpDown.Focused ||
                         GroupNumericUpDown.Focused ||
                         HalfNumericUpDown.Focused ||
                         QuarterNumericUpDown.Focused ||
                         BowingNumericUpDown.Focused ||
                         VerseNumericUpDown.Focused ||
                         WordNumericUpDown.Focused ||
                         LetterNumericUpDown.Focused
                     )
                    {
                        UpdateSelection();
                    }
                    else if ((sender == BookmarkBackwardButton) || (sender == BookmarkForwardButton))
                    {
                    }
                    else if ((sender == BrowseHistoryBackwardButton) || (sender == BrowseHistoryForwardButton))
                    {
                    }
                    else
                    {
                    }

                    PlayerStopLabel_Click(null, null);

                    DisplaySelection(false);
                }
            }
        }
    }

    private int m_previous_index = -1;
    private void ChaptersListBox_MouseMove(object sender, MouseEventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                int index = ChaptersListBox.IndexFromPoint(e.Location);
                if (index != m_previous_index)
                {
                    m_previous_index = index;
                    if ((index >= 0) && (index < m_client.Book.Chapters.Count))
                    {
                        Chapter chapter = m_client.Book.Chapters[index];
                        if (chapter != null)
                        {
                            int match_count = 0;
                            if (m_matches_per_chapter != null)
                            {
                                if ((index >= 0) && (index < m_matches_per_chapter.Length))
                                {
                                    match_count = m_matches_per_chapter[index];
                                }
                            }

                            string revelation_place = "";
                            switch (chapter.RevelationPlace)
                            {
                                case RevelationPlace.Makkah:
                                    revelation_place = L[l]["Makkah"];
                                    break;
                                case RevelationPlace.Medina:
                                    revelation_place = L[l]["Medina"];
                                    break;
                                default:
                                    revelation_place = "";
                                    break;
                            }

                            if (chapter.Verses != null)
                            {
                                if (chapter.Verses.Count > 2)
                                {
                                    ToolTip.SetToolTip(ChaptersListBox,
                                        chapter.SortedNumber.ToString() + " - " + chapter.TransliteratedName + " - " + chapter.EnglishName + "\r\n" +
                                        L[l]["Number"] + "\t\t" + chapter.Number.ToString() + "\r\n" +
                                        L[l]["Revelation"] + "\t" + ((revelation_place.IsArabic()) ? "\t" : "") + chapter.RevelationOrder.ToString() + " - " + revelation_place + "\r\n" +
                                        L[l]["Verses"] + "\t\t" + chapter.Verses.Count.ToString() + "\r\n" +
                                        L[l]["Words"] + "\t\t" + chapter.WordCount.ToString() + "\r\n" +
                                        L[l]["Letters"] + "\t\t" + chapter.LetterCount.ToString() + "\r\n" +
                                        L[l]["Unique letters"] + "\t" + chapter.UniqueLetters.Count.ToString() + "\r\n" +
                                        (m_found_verses_displayed ? (L[l]["Matches"] + "\t\t" + match_count.ToString() + "\r\n") : "") + "\r\n" +
                                        chapter.Verses[0].Text + ((index == 41) ? ("\r\n" + chapter.Verses[1].Text) : "")
                                    );
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    private void ChaptersListBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (sender == ChaptersListBox)
        {
            PlayerStopLabel_Click(null, null);

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_found_verses_displayed)
                    {
                        // set chapter filter
                        List<Chapter> chapters = new List<Chapter>();
                        foreach (int index in ChaptersListBox.SelectedIndices)
                        {
                            chapters.Add(m_client.Book.Chapters[index]);
                        }
                        m_client.FilterChapters = chapters;

                        int pos = m_find_result_header.IndexOf(" of ");
                        if (pos > -1)
                        {
                            m_find_result_header = m_find_result_header.Substring(pos + 4);
                        }
                        int selected_chapters_match_count = 0;
                        foreach (int index in ChaptersListBox.SelectedIndices)
                        {
                            if (m_matches_per_chapter != null)
                            {
                                if ((index >= 0) && (index < m_matches_per_chapter.Length))
                                {
                                    selected_chapters_match_count += m_matches_per_chapter[index];
                                }
                            }
                        }
                        m_find_result_header = selected_chapters_match_count + " of " + m_find_result_header;

                        ClearFindMatches(); // clear m_find_matches for F3 to work correctly in filtered result
                        if (m_search_type == SearchType.Numbers)
                        {
                            switch (m_numbers_result_type)
                            {
                                case NumbersResultType.Letters:
                                case NumbersResultType.Words:
                                case NumbersResultType.WordRanges:
                                case NumbersResultType.Verses:
                                    DisplayFoundVerses(false, false);
                                    break;
                                case NumbersResultType.VerseRanges:
                                    DisplayFoundVerseRanges(false, false);
                                    break;
                                case NumbersResultType.Chapters:
                                    DisplayFoundChapters(false, false);
                                    break;
                                case NumbersResultType.ChapterRanges:
                                    DisplayFoundChapterRanges(false, false);
                                    break;
                                default:
                                    DisplayFoundVerses(false, false);
                                    break;
                            }
                        }
                        else
                        {
                            DisplayFoundVerses(false, false);

                            //SearchResultTextBox.Focus();
                            //SearchResultTextBox.Refresh();
                        }
                    }
                    else
                    {
                        UpdateSelection();
                        DisplaySelection(true);
                        if (ChapterSelectionComboBox.Items.Count > 0)
                        {
                            ChapterSelectionComboBox.SelectedIndex = 0;
                        }
                    }

                    ChaptersListBox.Focus();
                }
            }
        }
    }

    private bool m_pin_chapter1 = false;
    private ChapterSortMethod m_chapter_sort_method = ChapterSortMethod.ByCompilation;
    private ChapterSortOrder m_chapter_sort_order = ChapterSortOrder.Ascending;
    private void PinChapter1CheckBox_CheckStateChanged(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Selection != null)
                {
                    // backup selection verses
                    List<Verse> backup_verses = new List<Verse>();
                    if (m_client.Selection.Scope == SelectionScope.Verse)
                    {
                        if (m_client.Selection.Indexes != null)
                        {
                            foreach (int index in m_client.Selection.Indexes)
                            {
                                backup_verses.Add(m_client.Book.Verses[index]);
                            }
                        }
                    }

                    m_pin_chapter1 = PinChapter1CheckBox.Checked;
                    m_client.Book.SortChapters(m_chapter_sort_method, m_chapter_sort_order, m_pin_chapter1);

                    // restore selection verses
                    if (m_client.Selection.Scope == SelectionScope.Verse)
                    {
                        if (m_client.Selection.Indexes != null)
                        {
                            List<int> verse_indexes = new List<int>();
                            foreach (Verse verse in backup_verses)
                            {
                                verse_indexes.Add(verse.Number - 1);
                            }
                            m_client.Selection = new Selection(m_client.Book, SelectionScope.Verse, verse_indexes);
                        }
                    }

                    // display chapters in new order
                    DisplaySortedChapters();
                }
            }
        }
    }
    private void ChapterSortComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Selection != null)
                {
                    // backup selection
                    List<Verse> backup_verses = new List<Verse>();
                    if (m_client.Selection.Scope == SelectionScope.Verse)
                    {
                        if (m_client.Selection.Indexes != null)
                        {
                            foreach (int index in m_client.Selection.Indexes)
                            {
                                backup_verses.Add(m_client.Book.Verses[index]);
                            }
                        }
                    }

                    // do chapter sorting
                    switch (ChapterSortComboBox.SelectedIndex)
                    {
                        case 0:
                            {
                                m_chapter_sort_method = ChapterSortMethod.ByCompilation;
                                ToolTip.SetToolTip(ChapterSortComboBox, L[l]["By Compilation"]);
                                PinChapter1CheckBox.Visible = false;
                            }
                            break;
                        case 1:
                            {
                                m_chapter_sort_method = ChapterSortMethod.ByRevelation;
                                ToolTip.SetToolTip(ChapterSortComboBox, L[l]["By Revelation"]);
                                PinChapter1CheckBox.Visible = false;
                            }
                            break;
                        case 2:
                            {
                                m_chapter_sort_method = ChapterSortMethod.ByVerses;
                                ToolTip.SetToolTip(ChapterSortComboBox, L[l]["By Verses"]);
                                PinChapter1CheckBox.Visible = true;
                            }
                            break;
                        case 3:
                            {
                                m_chapter_sort_method = ChapterSortMethod.ByWords;
                                ToolTip.SetToolTip(ChapterSortComboBox, L[l]["By Words"]);
                                PinChapter1CheckBox.Visible = true;
                            }
                            break;
                        case 4:
                            {
                                m_chapter_sort_method = ChapterSortMethod.ByLetters;
                                ToolTip.SetToolTip(ChapterSortComboBox, L[l]["By Letters"]);
                                PinChapter1CheckBox.Visible = true;
                            }
                            break;
                        case 5:
                            {
                                m_chapter_sort_method = ChapterSortMethod.ByValue;
                                ToolTip.SetToolTip(ChapterSortComboBox, L[l]["By Value"]);
                                PinChapter1CheckBox.Visible = true;
                            }
                            break;
                    }
                    m_client.Book.SortChapters(m_chapter_sort_method, m_chapter_sort_order, m_pin_chapter1);

                    // restore selection
                    if (m_client.Selection.Scope == SelectionScope.Verse)
                    {
                        if (m_client.Selection.Indexes != null)
                        {
                            List<int> verse_indexes = new List<int>();
                            foreach (Verse verse in backup_verses)
                            {
                                verse_indexes.Add(verse.Number - 1);
                            }
                            m_client.Selection = new Selection(m_client.Book, SelectionScope.Verse, verse_indexes);
                        }
                    }

                    // display chapters in new order
                    DisplaySortedChapters();
                }
            }
        }
    }
    private void ChapterSortLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Selection != null)
                    {
                        // backup selection verses
                        List<Verse> backup_verses = new List<Verse>();
                        if (m_client.Selection.Scope == SelectionScope.Verse)
                        {
                            if (m_client.Selection.Indexes != null)
                            {
                                foreach (int index in m_client.Selection.Indexes)
                                {
                                    backup_verses.Add(m_client.Book.Verses[index]);
                                }
                            }
                        }

                        if (Chapter.SortOrder == ChapterSortOrder.Ascending)
                        {
                            m_chapter_sort_order = ChapterSortOrder.Descending;
                            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_down.png"))
                            {
                                ChapterSortLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_down.png");
                                ToolTip.SetToolTip(ChapterSortLabel, L[l]["Descending"]);
                            }
                        }
                        else
                        {
                            m_chapter_sort_order = ChapterSortOrder.Ascending;
                            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_up.png"))
                            {
                                ChapterSortLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_up.png");
                                ToolTip.SetToolTip(ChapterSortLabel, L[l]["Ascending"]);
                            }
                        }
                        m_client.Book.SortChapters(m_chapter_sort_method, m_chapter_sort_order, m_pin_chapter1);

                        // restore selection verses
                        if (m_client.Selection.Scope == SelectionScope.Verse)
                        {
                            if (m_client.Selection.Indexes != null)
                            {
                                List<int> verse_indexes = new List<int>();
                                foreach (Verse verse in backup_verses)
                                {
                                    verse_indexes.Add(verse.Number - 1);
                                }
                                m_client.Selection = new Selection(m_client.Book, SelectionScope.Verse, verse_indexes);
                            }
                        }

                        // display chapters in new order
                        DisplaySortedChapters();
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void UpdateChapterSortControls()
    {
        try
        {
            for (int i = 0; i < 3; i++) PinChapter1CheckBox.CheckStateChanged -= new EventHandler(PinChapter1CheckBox_CheckStateChanged);
            for (int i = 0; i < 3; i++) ChapterSortComboBox.SelectedIndexChanged -= new EventHandler(ChapterSortComboBox_SelectedIndexChanged);
            for (int i = 0; i < 3; i++) ChapterSortLabel.Click -= new EventHandler(ChapterSortLabel_Click);

            //////////////////////////////////////////////////////////
            PinChapter1CheckBox.Checked = Chapter.PinChapter1;
            //////////////////////////////////////////////////////////

            //////////////////////////////////////////////////////////
            if (ChapterSortComboBox.Items.Count == 6)
            {
                switch (Chapter.SortMethod)
                {
                    case ChapterSortMethod.ByCompilation:
                        {
                            ChapterSortComboBox.SelectedIndex = 0;
                            ToolTip.SetToolTip(ChapterSortComboBox, L[l]["By Compilation"]);
                            PinChapter1CheckBox.Visible = false;
                        }
                        break;
                    case ChapterSortMethod.ByRevelation:
                        {
                            ChapterSortComboBox.SelectedIndex = 1;
                            ToolTip.SetToolTip(ChapterSortComboBox, L[l]["By Revelation"]);
                            PinChapter1CheckBox.Visible = false;
                        }
                        break;
                    case ChapterSortMethod.ByVerses:
                        {
                            ChapterSortComboBox.SelectedIndex = 2;
                            ToolTip.SetToolTip(ChapterSortComboBox, L[l]["By Verses"]);
                            PinChapter1CheckBox.Visible = true;
                        }
                        break;
                    case ChapterSortMethod.ByWords:
                        {
                            ChapterSortComboBox.SelectedIndex = 3;
                            ToolTip.SetToolTip(ChapterSortComboBox, L[l]["By Words"]);
                            PinChapter1CheckBox.Visible = true;
                        }
                        break;
                    case ChapterSortMethod.ByLetters:
                        {
                            ChapterSortComboBox.SelectedIndex = 4;
                            ToolTip.SetToolTip(ChapterSortComboBox, L[l]["By Letters"]);
                            PinChapter1CheckBox.Visible = true;
                        }
                        break;
                    case ChapterSortMethod.ByValue:
                        {
                            ChapterSortComboBox.SelectedIndex = 5;
                            ToolTip.SetToolTip(ChapterSortComboBox, L[l]["By Value"]);
                            PinChapter1CheckBox.Visible = true;
                        }
                        break;
                }
            }
            //////////////////////////////////////////////////////////

            //////////////////////////////////////////////////////////
            if (Chapter.SortOrder == ChapterSortOrder.Ascending)
            {
                if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_up.png"))
                {
                    ChapterSortLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_up.png");
                    ToolTip.SetToolTip(ChapterSortLabel, L[l]["Ascending"]);
                }
            }
            else
            {
                if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_down.png"))
                {
                    ChapterSortLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_down.png");
                    ToolTip.SetToolTip(ChapterSortLabel, L[l]["Descending"]);
                }
            }
            //////////////////////////////////////////////////////////
        }
        finally
        {
            ChapterSortLabel.Click += new EventHandler(ChapterSortLabel_Click);
            PinChapter1CheckBox.CheckStateChanged += new EventHandler(PinChapter1CheckBox_CheckStateChanged);
            ChapterSortComboBox.SelectedIndexChanged += new EventHandler(ChapterSortComboBox_SelectedIndexChanged);
        }
    }
    private void DisplaySortedChapters()
    {
        // repopulate chapter lists with new order
        PopulateChapterComboBox();
        PopulateChaptersListBox();

        // select selected chapters
        UpdateChaptersListBox();

        // save new order of selected chapters
        UpdateSelection();

        DisplaySelection(false);
    }
    private void InspectChaptersLabel_Click(object sender, EventArgs e)
    {
        if (m_client == null) return;
        if (m_client.Book == null) return;
        if (m_client.Selection == null) return;

        if (WordsListBox.Visible)
        {
            InspectWordFrequencies();
        }
        else
        {
            List<Chapter> chapters = null;
            if (m_found_verses_displayed)
            {
                chapters = m_client.Book.GetChapters(m_client.FoundVerses);
            }
            else
            {
                chapters = m_client.Selection.Chapters;
            }
            string result = null;
            if (chapters != null)
            {
                result = DisplayChapterInformation(chapters);
            }

            StringBuilder str = new StringBuilder();
            foreach (Chapter chapter in chapters)
            {
                str.Append("." + chapter.SortedNumber);
            }
            if (str.Length > 100)
            {
                str.Remove(100, str.Length - 100);
                int pos = str.ToString().LastIndexOf('.');
                if (pos > -1)
                {
                    str.Remove(pos, str.Length - pos);
                }

                if (str[str.Length - 1] == '.')
                {
                    str.Append("..");
                }
                else
                {
                    str.Append("...");
                }
            }

            string filename = m_client.NumerologySystem.Name + "_" + "Chapters" + m_chapter_sort_method.ToString() + m_chapter_sort_order.ToString() + str.ToString() + Globals.OUTPUT_FILE_EXT;
            if (Directory.Exists(Globals.STATISTICS_FOLDER))
            {
                string path = Globals.STATISTICS_FOLDER + "/" + filename;
                FileHelper.SaveText(path, result);
                FileHelper.DisplayFile(path);
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Selection
    ///////////////////////////////////////////////////////////////////////////////
    private bool m_selection_mode = false;
    private int m_word_number_in_verse = -1;
    private int m_letter_number_in_verse = -1;
    private int m_word_number_in_chapter = -1;
    private int m_letter_number_in_chapter = -1;
    private void NumericUpDown_Enter(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);
        this.AcceptButton = null;

        if (sender == HeaderLabel)
        {
            m_active_textbox.Focus();
            CalculateCurrentValue();
        }

        // Ctrl+Click factorizes number
        if (ModifierKeys == Keys.Control)
        {
            long value = 0L;
            if (sender == ChapterComboBox)
            {
                if (ChapterComboBox.SelectedIndex != -1)
                {
                    string[] parts = ChapterComboBox.Text.Split('-');
                    if (parts.Length > 0)
                    {
                        value = long.Parse(parts[0]);
                    }
                }
            }
            else if (sender is NumericUpDown)
            {
                try
                {
                    value = (int)(sender as NumericUpDown).Value;
                }
                catch
                {
                    value = -1L; // error
                }
            }
            else
            {
                value = -1L; // error
            }

            FactorizeValue(value, false);
        }
    }
    private void NumericUpDown_Leave(object sender, EventArgs e)
    {
        this.AcceptButton = null;
    }
    private void NumericUpDown_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            if (sender is NumericUpDown)
            {
                Control control = (sender as NumericUpDown);
                if (control != null)
                {
                    try
                    {
                        for (int i = 0; i < 3; i++) ChapterVerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) ChapterWordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) ChapterLetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) PageNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) StationNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) PartNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) GroupNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) HalfNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) QuarterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) BowingNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) VerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) WordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) LetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);

                        SelectionScope scope = SelectionScope.Book;
                        if ((control == ChapterVerseNumericUpDown) || (control == VerseNumericUpDown))
                        {
                            scope = SelectionScope.Verse;
                        }
                        else if ((control == ChapterWordNumericUpDown) || (control == WordNumericUpDown))
                        {
                            scope = SelectionScope.Word;
                        }
                        else if ((control == ChapterLetterNumericUpDown) || (control == LetterNumericUpDown))
                        {
                            scope = SelectionScope.Letter;
                        }
                        else if (control == PageNumericUpDown)
                        {
                            scope = SelectionScope.Page;
                        }
                        else if (control == StationNumericUpDown)
                        {
                            scope = SelectionScope.Station;
                        }
                        else if (control == PartNumericUpDown)
                        {
                            scope = SelectionScope.Part;
                        }
                        else if (control == GroupNumericUpDown)
                        {
                            scope = SelectionScope.Group;
                        }
                        else if (control == HalfNumericUpDown)
                        {
                            scope = SelectionScope.Half;
                        }
                        else if (control == QuarterNumericUpDown)
                        {
                            scope = SelectionScope.Quarter;
                        }
                        else if (control == BowingNumericUpDown)
                        {
                            scope = SelectionScope.Bowing;
                        }
                        else
                        {
                            scope = SelectionScope.Book;
                        }

                        if (m_client != null)
                        {
                            if (m_client.Book != null)
                            {
                                if (m_client.Selection != null)
                                {
                                    // varaibles for word/letter highlight
                                    int highlight_word_number = 0;
                                    int highlight_letter_number = 0;

                                    // XXXs before chapter for ChapterXXXNumericUpDown
                                    Chapter chapter = null;
                                    int verses_before_chapter = 0;
                                    int words_before_chapter = 0;
                                    int letters_before_chapter = 0;
                                    if (m_client.Selection.Chapters.Count > 0)
                                    {
                                        chapter = m_client.Selection.Chapters[0];
                                        if (chapter != null)
                                        {
                                            if (chapter.Verses.Count > 0)
                                            {
                                                verses_before_chapter += chapter.Verses[0].Number - 1;
                                                if (chapter.Verses[0].Words.Count > 0)
                                                {
                                                    words_before_chapter += chapter.Verses[0].Words[0].Number - 1;
                                                    if (chapter.Verses[0].Words[0].Letters.Count > 0)
                                                    {
                                                        letters_before_chapter += chapter.Verses[0].Words[0].Letters[0].Number - 1;
                                                    }
                                                }
                                            }

                                            // split by , then by -
                                            List<int> indexes = new List<int>();
                                            string text = (sender as NumericUpDown).Text;
                                            string[] parts = text.Split(',');
                                            foreach (string part in parts)
                                            {
                                                string[] sub_parts = part.Split('-');
                                                if (sub_parts.Length == 1)
                                                {
                                                    int number;
                                                    if (int.TryParse(sub_parts[0], out number))
                                                    {
                                                        if (scope == SelectionScope.Verse)
                                                        {
                                                            if (control == ChapterVerseNumericUpDown)
                                                            {
                                                                if (chapter.Verses != null)
                                                                {
                                                                    if (number > chapter.Verses.Count)
                                                                    {
                                                                        number = chapter.Verses.Count;
                                                                    }
                                                                    number += verses_before_chapter;
                                                                }
                                                            }
                                                        }
                                                        else if (scope == SelectionScope.Word)
                                                        {
                                                            if (control == ChapterWordNumericUpDown)
                                                            {
                                                                if (number > chapter.WordCount)
                                                                {
                                                                    number = chapter.WordCount;
                                                                }
                                                                number += words_before_chapter;
                                                            }

                                                            // number = number of verse containing the word
                                                            if (m_client.Book != null)
                                                            {
                                                                Word word = m_client.Book.GetWord(number - 1);
                                                                if (word != null)
                                                                {
                                                                    if (highlight_word_number == 0)
                                                                    {
                                                                        highlight_word_number = word.Number;
                                                                    }

                                                                    if (word.Verse != null)
                                                                    {
                                                                        number = word.Verse.Number;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else if (scope == SelectionScope.Letter)
                                                        {
                                                            if (control == ChapterLetterNumericUpDown)
                                                            {
                                                                if (number > chapter.LetterCount)
                                                                {
                                                                    number = chapter.LetterCount;
                                                                }
                                                                number += letters_before_chapter;
                                                            }

                                                            // number = number of verse containing the letter
                                                            Letter letter = m_client.Book.GetLetter(number - 1);
                                                            if (letter != null)
                                                            {
                                                                if (highlight_letter_number == 0)
                                                                {
                                                                    highlight_letter_number = letter.Number;
                                                                }

                                                                if (letter.Word != null)
                                                                {
                                                                    if (letter.Word.Verse != null)
                                                                    {
                                                                        number = letter.Word.Verse.Number;
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        // add number to indexes
                                                        if (!indexes.Contains(number - 1))
                                                        {
                                                            indexes.Add(number - 1);
                                                        }
                                                    }
                                                }
                                                else if (sub_parts.Length == 2)
                                                {
                                                    int number;
                                                    int min, max;
                                                    if (int.TryParse(sub_parts[0], out min))
                                                    {
                                                        if (int.TryParse(sub_parts[1], out max))
                                                        {
                                                            int temp = -1;
                                                            if (min > max) // reverse range, e.g. min-max: 100-90
                                                            {
                                                                temp = max;
                                                                max = min;
                                                                min = temp;
                                                            }
                                                            for (int i = min; i <= max; i++)
                                                            {
                                                                if (temp == -1)
                                                                {
                                                                    number = i;
                                                                }
                                                                else // reversed min-max: 90-100
                                                                {
                                                                    // from 100 to 90 i--
                                                                    number = max - (i - min);
                                                                }

                                                                if (scope == SelectionScope.Verse)
                                                                {
                                                                    if (control == ChapterVerseNumericUpDown)
                                                                    {
                                                                        if (chapter.Verses != null)
                                                                        {
                                                                            if (number > chapter.Verses.Count)
                                                                            {
                                                                                number = chapter.Verses.Count;
                                                                            }
                                                                            number += verses_before_chapter;
                                                                        }
                                                                    }
                                                                }
                                                                else if (scope == SelectionScope.Word)
                                                                {
                                                                    if (control == ChapterWordNumericUpDown)
                                                                    {
                                                                        if (number > chapter.WordCount)
                                                                        {
                                                                            number = chapter.WordCount;
                                                                        }
                                                                        number += words_before_chapter;
                                                                    }

                                                                    // number = number of verse containing the word
                                                                    if (m_client.Book != null)
                                                                    {
                                                                        Word word = m_client.Book.GetWord(number - 1);
                                                                        if (word != null)
                                                                        {
                                                                            if (highlight_word_number == 0)
                                                                            {
                                                                                highlight_word_number = word.Number;
                                                                            }

                                                                            if (word.Verse != null)
                                                                            {
                                                                                number = word.Verse.Number;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else if (scope == SelectionScope.Letter)
                                                                {
                                                                    if (control == ChapterLetterNumericUpDown)
                                                                    {
                                                                        if (number > chapter.LetterCount)
                                                                        {
                                                                            number = chapter.LetterCount;
                                                                        }
                                                                        number += letters_before_chapter;
                                                                    }

                                                                    // number = number of verse containing the letter
                                                                    Letter letter = m_client.Book.GetLetter(number - 1);
                                                                    if (letter != null)
                                                                    {
                                                                        if (highlight_letter_number == 0)
                                                                        {
                                                                            highlight_letter_number = letter.Number;
                                                                        }

                                                                        if (letter.Word != null)
                                                                        {
                                                                            if (letter.Word.Verse != null)
                                                                            {
                                                                                number = letter.Word.Verse.Number;
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                                if (!indexes.Contains(number - 1))
                                                                {
                                                                    indexes.Add(number - 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    // do nothing
                                                }
                                            }

                                            // always display selection
                                            if (indexes.Count > 0)
                                            {
                                                if ((scope == SelectionScope.Word) || (scope == SelectionScope.Letter))
                                                {
                                                    scope = SelectionScope.Verse;
                                                }
                                                m_client.Selection = new Selection(m_client.Book, scope, indexes);

                                                PlayerStopLabel_Click(null, null);

                                                DisplaySelection(true);

                                                // highlight first word/letter only
                                                if ((control == WordNumericUpDown) || (control == ChapterWordNumericUpDown))
                                                {
                                                    HighlightWord(highlight_word_number);
                                                }
                                                else if ((control == LetterNumericUpDown) || (control == ChapterLetterNumericUpDown))
                                                {
                                                    HighlightLetter(highlight_letter_number);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    finally
                    {
                        ChapterVerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        ChapterWordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        ChapterLetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        PageNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        StationNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        PartNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        GroupNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        HalfNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        QuarterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        BowingNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        VerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        WordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        LetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    }
                }
            }
        }
    }
    private void NumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        Control control = sender as NumericUpDown;
        if (control != null)
        {
            if (control.Focused)
            {
                DisplayNumericSelection(control);

                if (ChapterSelectionComboBox.Items.Count > 0)
                {
                    ChapterSelectionComboBox.SelectedIndex = 0;
                }
            }
        }
    }
    private void DisplayNumericSelection(Control control)
    {
        if (control is NumericUpDown)
        {
            if (control.Focused)
            {
                try
                {
                    for (int i = 0; i < 3; i++) ChapterVerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) ChapterWordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) ChapterLetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) PageNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) StationNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) PartNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) GroupNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) HalfNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) QuarterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) BowingNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) VerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) WordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) LetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);

                    int number = (int)((control as NumericUpDown).Value);

                    // backup number before as it will be overwritten with verse.Number
                    // if control is WordNumericUpDown OR LetterNumericUpDown or
                    // if control is ChapterWordNumericUpDown OR ChapterLetterNumericUpDown 
                    int word_number = 0;
                    int letter_number = 0;
                    if ((control == WordNumericUpDown) || (control == ChapterLetterNumericUpDown))
                    {
                        word_number = number;
                    }
                    else if ((control == LetterNumericUpDown) || (control == ChapterLetterNumericUpDown))
                    {
                        letter_number = number;
                    }

                    if (m_client != null)
                    {
                        if (m_client.Book != null)
                        {
                            if (m_client.Book.Verses != null)
                            {
                                SelectionScope scope = SelectionScope.Book;

                                if (control == ChapterVerseNumericUpDown)
                                {
                                    scope = SelectionScope.Verse;

                                    if (m_client.Book.Chapters != null)
                                    {
                                        int verse_number_in_chapter = (int)ChapterVerseNumericUpDown.Value;

                                        int selected_index = ChapterComboBox.SelectedIndex;
                                        if ((selected_index >= 0) && (selected_index < m_client.Book.Chapters.Count))
                                        {
                                            Chapter chapter = m_client.Book.Chapters[selected_index];
                                            if (chapter != null)
                                            {
                                                if (chapter.Verses != null)
                                                {
                                                    if (chapter.Verses != null)
                                                    {
                                                        if (chapter.Verses.Count > verse_number_in_chapter - 1)
                                                        {
                                                            Verse verse = chapter.Verses[verse_number_in_chapter - 1];
                                                            if (verse != null)
                                                            {
                                                                number = verse.Number;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if ((control == ChapterWordNumericUpDown) || (control == ChapterLetterNumericUpDown))
                                {
                                    scope = SelectionScope.Verse;

                                    if (m_client.Book.Chapters != null)
                                    {
                                        int selected_index = ChapterComboBox.SelectedIndex;
                                        if ((selected_index >= 0) && (selected_index < m_client.Book.Chapters.Count))
                                        {
                                            Chapter chapter = m_client.Book.Chapters[selected_index];
                                            if (chapter != null)
                                            {
                                                if (chapter.Verses != null)
                                                {
                                                    if (chapter.Verses.Count > 0)
                                                    {
                                                        if (chapter.Verses.Count > 0)
                                                        {
                                                            Verse verse = null;
                                                            if (chapter.Verses[0].Words.Count > 0)
                                                            {
                                                                if (control == ChapterWordNumericUpDown)
                                                                {
                                                                    word_number = number + chapter.Verses[0].Words[0].Number - 1;
                                                                    verse = m_client.Book.GetVerseByWordNumber(word_number);
                                                                }
                                                                else if (control == ChapterLetterNumericUpDown)
                                                                {
                                                                    if (chapter.Verses[0].Words[0].Letters.Count > 0)
                                                                    {
                                                                        letter_number = number + chapter.Verses[0].Words[0].Letters[0].Number - 1;
                                                                        verse = m_client.Book.GetVerseByLetterNumber(letter_number);
                                                                    }
                                                                }
                                                            }
                                                            if (verse != null)
                                                            {
                                                                number = verse.Number;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (control == PageNumericUpDown)
                                {
                                    if (m_client.Book.Pages != null)
                                    {
                                        scope = SelectionScope.Page;
                                    }
                                }
                                else if (control == StationNumericUpDown)
                                {
                                    if (m_client.Book.Stations != null)
                                    {
                                        scope = SelectionScope.Station;
                                    }
                                }
                                else if (control == PartNumericUpDown)
                                {
                                    if (m_client.Book.Parts != null)
                                    {
                                        scope = SelectionScope.Part;
                                    }
                                }
                                else if (control == GroupNumericUpDown)
                                {
                                    if (m_client.Book.Groups != null)
                                    {
                                        scope = SelectionScope.Group;
                                    }
                                }
                                else if (control == HalfNumericUpDown)
                                {
                                    if (m_client.Book.Halfs != null)
                                    {
                                        scope = SelectionScope.Half;
                                    }
                                }
                                else if (control == QuarterNumericUpDown)
                                {
                                    if (m_client.Book.Quarters != null)
                                    {
                                        scope = SelectionScope.Quarter;
                                    }
                                }
                                else if (control == BowingNumericUpDown)
                                {
                                    if (m_client.Book.Bowings != null)
                                    {
                                        scope = SelectionScope.Bowing;
                                    }
                                }
                                else if (control == VerseNumericUpDown)
                                {
                                    if (m_client.Book.Verses != null)
                                    {
                                        scope = SelectionScope.Verse;
                                    }
                                }
                                else if (control == WordNumericUpDown)
                                {
                                    Verse verse = m_client.Book.GetVerseByWordNumber(word_number);
                                    if (verse != null)
                                    {
                                        scope = SelectionScope.Verse;
                                        number = verse.Number;
                                    }
                                }
                                else if (control == LetterNumericUpDown)
                                {
                                    Verse verse = m_client.Book.GetVerseByLetterNumber(letter_number);
                                    if (verse != null)
                                    {
                                        scope = SelectionScope.Verse;
                                        number = verse.Number;
                                    }
                                }
                                else
                                {
                                    // do nothing
                                }

                                if (m_client.Selection != null)
                                {
                                    // if selection has changed
                                    if (
                                        (m_client.Selection.Scope != scope)
                                        ||
                                        ((m_client.Selection.Indexes.Count > 0) && (m_client.Selection.Indexes[0] != (number - 1)))
                                       )
                                    {
                                        PlayerStopLabel_Click(null, null);

                                        List<int> indexes = new List<int>() { number - 1 };
                                        m_client.Selection = new Selection(m_client.Book, scope, indexes);

                                        DisplaySelection(true);
                                    }
                                }

                                if ((control == WordNumericUpDown) || (control == ChapterWordNumericUpDown))
                                {
                                    HighlightWord(word_number);
                                }
                                else if ((control == LetterNumericUpDown) || (control == ChapterLetterNumericUpDown))
                                {
                                    HighlightLetter(letter_number);
                                }
                            }
                        }
                    }
                }
                finally
                {
                    ChapterVerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    ChapterWordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    ChapterLetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    PageNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    StationNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    PartNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    GroupNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    HalfNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    QuarterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    BowingNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    VerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    WordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    LetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                }
            }
        }
    }
    private void DisplaySelection(bool add_to_history)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            SwitchToMainTextBox();

            for (int i = 0; i < 3; i++) MainTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
            for (int i = 0; i < 3; i++) MainTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
            MainTextBox.BeginUpdate();

            BookmarkTextBox.Enabled = true;

            m_user_text_mode = false;
            m_selection_mode = true;

            ToolTip.SetToolTip(InspectChaptersLabel, L[l]["Inspect chapters"]);
            WordsListBoxLabel.Visible = false;
            WordsListBox.Visible = false;
            WordsListBox.SendToBack();

            this.Text = Application.ProductName + " | " + GetSelectionSummary();
            UpdateSearchScope();

            DisplaySelectionText();

            CalculateCurrentValue();

            DisplaySelectionPositions();

            BuildLetterFrequencies();
            DisplayLetterFrequencies();

            MainTextBox.ClearHighlight();
            MainTextBox.AlignToStart();

            m_current_selection_verse_index = 0;
            CurrentVerseIndex = 0;
            UpdateHeaderLabel();

            if (m_client != null)
            {
                if (m_client.Selection != null)
                {
                    DisplayTranslations(m_client.Selection.Verses);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();

                    if (m_client.Selection.Verses.Count > 0)
                    {
                        Verse verse = m_client.Selection.Verses[0];
                        UpdatePlayerButtons(verse);
                    }

                    if (add_to_history)
                    {
                        AddBrowseHistoryItem();
                    }

                    // display selection's note (if any)
                    DisplayNote(m_client.GetBookmark(m_client.Selection));
                }
            }

            if (PictureBox.Visible)
            {
                RedrawImage();
            }

            // update nofity icon text
            UpdateNotifyIconText();
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            MainTextBox.EndUpdate();
            MainTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            MainTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
            this.Cursor = Cursors.Default;
        }
    }
    private void UpdateNotifyIconText()
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                NotifyIcon.Text = Application.ProductName + " | " + m_client.NumerologySystem.TextMode + " | " + GetSelectionSummary();
            }
        }
    }
    private string GetSelectionSummary()
    {
        string result = null;
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Selection != null)
                {
                    if (m_client.Book.Verses != null)
                    {
                        if (m_client.Selection.Indexes != null)
                        {
                            if ((m_client.Selection.Scope == SelectionScope.Word) || (m_client.Selection.Scope == SelectionScope.Letter))
                            {
                                int verse_number = (int)VerseNumericUpDown.Value;
                                result = L[l]["Verse"] + " " + m_client.Book.Verses[verse_number - 1].Address;
                            }
                            else // if scope is Chapter, Page, Station, Part, Group, Half, Quarter, Bowing, Verse
                            {
                                StringBuilder str = new StringBuilder();

                                List<int> selection_indexes = new List<int>();
                                if (m_client.Selection.Scope == SelectionScope.Chapter)
                                {
                                    foreach (Chapter chapter in m_client.Selection.Chapters)
                                    {
                                        selection_indexes.Add(chapter.SortedNumber - 1);
                                    }
                                }
                                else
                                {
                                    selection_indexes = m_client.Selection.Indexes;
                                }

                                if (Numbers.AreConsecutive(selection_indexes))
                                {
                                    if (m_client.Selection.Indexes.Count > 1)
                                    {
                                        int first_index = m_client.Selection.Indexes[0];
                                        int last_index = m_client.Selection.Indexes[m_client.Selection.Indexes.Count - 1];

                                        if (m_client.Selection.Scope == SelectionScope.Verse)
                                        {
                                            str.Append(m_client.Book.Verses[first_index].Address + " - ");
                                            str.Append(m_client.Book.Verses[last_index].Address);
                                        }
                                        else if (m_client.Selection.Scope == SelectionScope.Chapter)
                                        {
                                            int from_chapter_sorted_number = -1;
                                            int to_chapter_sorted_number = -1;
                                            int from_chapter_number = first_index + 1;
                                            int to_chapter_number = last_index + 1;
                                            if (m_client.Book.Chapters != null)
                                            {
                                                foreach (Chapter chapter in m_client.Book.Chapters)
                                                {
                                                    if (chapter.Number == from_chapter_number)
                                                    {
                                                        from_chapter_sorted_number = chapter.SortedNumber;
                                                        break;
                                                    }
                                                }
                                                foreach (Chapter chapter in m_client.Book.Chapters)
                                                {
                                                    if (chapter.Number == to_chapter_number)
                                                    {
                                                        to_chapter_sorted_number = chapter.SortedNumber;
                                                        break;
                                                    }
                                                }
                                                str.Append(from_chapter_sorted_number.ToString() + " - ");
                                                str.Append(to_chapter_sorted_number.ToString());
                                            }
                                        }
                                        else
                                        {
                                            str.Append((first_index + 1).ToString() + "-");
                                            str.Append((last_index + 1).ToString());
                                        }
                                    }
                                    else if (m_client.Selection.Indexes.Count == 1)
                                    {
                                        int index = m_client.Selection.Indexes[0];
                                        if (m_client.Selection.Scope == SelectionScope.Verse)
                                        {
                                            str.Append(m_client.Book.Verses[index].Address);
                                        }
                                        else if (m_client.Selection.Scope == SelectionScope.Chapter)
                                        {
                                            int chapter_sorted_number = 0;
                                            int chapter_number = index + 1;
                                            if (m_client.Book.Chapters != null)
                                            {
                                                foreach (Chapter chapter in m_client.Book.Chapters)
                                                {
                                                    if (chapter.Number == chapter_number)
                                                    {
                                                        chapter_sorted_number = chapter.SortedNumber;
                                                        break;
                                                    }
                                                }
                                                str.Append(chapter_sorted_number.ToString());
                                            }
                                        }
                                        else
                                        {
                                            str.Append((index + 1).ToString());
                                        }
                                    }
                                    else
                                    {
                                        // do nothing
                                    }
                                }
                                else
                                {
                                    if (m_client.Selection.Indexes.Count > 0)
                                    {
                                        foreach (int index in m_client.Selection.Indexes)
                                        {
                                            if (m_client.Selection.Scope == SelectionScope.Verse)
                                            {
                                                str.Append(m_client.Book.Verses[index].Address + " ");
                                            }
                                            else if (m_client.Selection.Scope == SelectionScope.Chapter)
                                            {
                                                int chapter_sorted_number = 0;
                                                int chapter_number = index + 1;
                                                if (m_client.Book.Chapters != null)
                                                {
                                                    foreach (Chapter chapter in m_client.Book.Chapters)
                                                    {
                                                        if (chapter.Number == chapter_number)
                                                        {
                                                            chapter_sorted_number = chapter.SortedNumber;
                                                            break;
                                                        }
                                                    }
                                                    str.Append(chapter_sorted_number.ToString() + " ");
                                                }
                                            }
                                            else
                                            {
                                                str.Append((index + 1).ToString() + " ");
                                            }
                                        }
                                        if (str.Length > 1)
                                        {
                                            str.Remove(str.Length - 1, 1);
                                        }
                                    }

                                    if (m_client.Selection.Scope == SelectionScope.Verse)
                                    {
                                    }
                                    else if (m_client.Selection.Scope == SelectionScope.Chapter)
                                    {
                                    }
                                    else
                                    {
                                    }
                                }

                                if (m_client.Selection.Indexes.Count == 1)
                                {
                                    result = m_client.Selection.Scope.ToString() + " " + str.ToString();
                                }
                                else if (m_client.Selection.Indexes.Count > 1)
                                {
                                    result = m_client.Selection.Scope.ToString() + "s" + " " + str.ToString();
                                }
                            }
                        }
                    }
                }
            }

            if (result != null)
            {
                // trim if too long
                if (result.Length > SELECTON_SCOPE_TEXT_MAX_LENGTH)
                {
                    result = result.Substring(0, SELECTON_SCOPE_TEXT_MAX_LENGTH) + " ...";
                }
            }
        }
        return result;
    }
    private void DisplaySelectionText()
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.QuranOnly)
           )
        {
            if (m_client != null)
            {
                if (m_client.Selection != null)
                {
                    List<Verse> verses = m_client.Selection.Verses;
                    if (verses != null)
                    {
                        if (verses.Count > 0)
                        {
                            StringBuilder str = new StringBuilder();
                            foreach (Verse verse in verses)
                            {
                                if (verse != null)
                                {
                                    str.Append(verse.Text + verse.Endmark);
                                }
                            }
                            if (str.Length > 1)
                            {
                                str.Remove(str.Length - 1, 1); // last space in " {###} "   OR  \n
                            }
                            m_current_text = str.ToString();
                        }
                    }

                    MainTextBox.Text = m_current_text;
                    MainTextBox.Refresh();
                    GenerateSentencesLabel.Visible = false;
                    DuplicateLettersCheckBox.Visible = false;

                    ColorizeGoldenRatios();
                }
            }
        }
    }
    private void UpdateLanguageType(string text)
    {
        if (text.IsArabic())
        {
            SetLanguageType(LanguageType.RightToLeft);
        }
        else
        {
            SetLanguageType(LanguageType.LeftToRight);
        }
        EnableFindByTextControls();
    }
    private void DisplaySelectionPositions()
    {
        if (m_client != null)
        {
            if (m_client.Selection != null)
            {
                List<Verse> verses = m_client.Selection.Verses;
                if (verses != null)
                {
                    if (verses.Count > 0)
                    {
                        Verse verse = verses[0];
                        if (verse != null)
                        {
                            // show postion of selection in the Quran visually
                            UpdateProgressBar(verse);

                            if (verse.Chapter != null)
                            {
                                UpdateMinMaxChapterVerseWordLetter(verse.Chapter.SortedNumber - 1);
                            }

                            if (ChapterComboBox.Items.Count > 0)
                            {
                                // without this guard, we cannot select more than 1 chapter in ChaptersListBox and
                                // we cannot move backward/forward inside the ChaptersListBox using Backspace
                                if (!ChaptersListBox.Focused)
                                {
                                    UpdateChaptersListBox();
                                }
                            }
                            UpdateVersePositions(verse);

                            Bookmark bookmark = m_client.GotoBookmark(m_client.Selection.Scope, m_client.Selection.Indexes);
                            if (bookmark != null)
                            {
                                BookmarkTextBox.ForeColor = m_note_view_color;
                                BookmarkTextBox.Text = bookmark.Note;
                                string hint = "Creation Time" + "\t" + bookmark.CreatedTime + "\r\n"
                                            + "Last Modified" + "\t" + bookmark.LastModifiedTime;
                                ToolTip.SetToolTip(BookmarkTextBox, hint);
                                UpdateBookmarkButtons();
                            }
                            else
                            {
                                DisplayNoteWritingInstruction();
                            }
                        }
                    }
                }
            }
        }
    }
    private Chapter m_old_chapter = null;
    private Verse m_old_verse = null;
    private void DisplayCurrentPositions()
    {
        if (m_active_textbox != null)
        {
            if (m_active_textbox.Lines != null)
            {
                if (m_active_textbox.Lines.Length > 0)
                {
                    Verse verse = GetCurrentVerse();
                    if (verse != null)
                    {
                        if (m_old_verse != verse)
                        {
                            m_old_verse = verse;

                            // show postion of verse in the Quran visually
                            ProgressBar.Minimum = 1;
                            ProgressBar.Maximum = verse.Book.Verses.Count;
                            ProgressBar.Value = verse.Number;
                            ProgressBar.Refresh();

                            if (verse.Chapter != null)
                            {
                                if (m_old_chapter != verse.Chapter)
                                {
                                    m_old_chapter = verse.Chapter;
                                    UpdateMinMaxChapterVerseWordLetter(verse.Chapter.SortedNumber - 1);
                                }
                            }

                            if (ChapterComboBox.Items.Count > 0)
                            {
                                // without this guard, we cannot select more than 1 chapter in ChaptersListBox and
                                // we cannot move backward/forward inside the ChaptersListBox using Backspace
                                if (!ChaptersListBox.Focused)
                                {
                                    UpdateChaptersListBox();
                                }
                            }
                        }
                        UpdateVersePositions(verse);
                    }
                }
            }
        }
    }
    private void UpdateVersePositions(Verse verse)
    {
        if (m_active_textbox != null)
        {
            if (verse != null)
            {
                try
                {
                    for (int i = 0; i < 3; i++) ChapterComboBox.SelectedIndexChanged -= new EventHandler(ChapterComboBox_SelectedIndexChanged);
                    for (int i = 0; i < 3; i++) ChapterVerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) ChapterWordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) ChapterLetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) PageNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) StationNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) PartNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) GroupNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) HalfNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) QuarterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) BowingNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) VerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) WordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) LetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);

                    if (verse.Chapter != null)
                    {
                        if (ChapterComboBox.SelectedIndex != verse.Chapter.SortedNumber - 1)
                        {
                            ChapterComboBox.SelectedIndex = verse.Chapter.SortedNumber - 1;
                            DisplayChapterRevelationInfo();
                        }
                    }

                    if ((verse.NumberInChapter >= 1) && (verse.NumberInChapter <= verse.Chapter.Verses.Count))
                    {
                        if (verse.Chapter != null)
                        {
                            if (ChapterVerseNumericUpDown.Value != verse.NumberInChapter)
                            {
                                ChapterVerseNumericUpDown.Value = (verse.NumberInChapter > ChapterVerseNumericUpDown.Maximum) ? ChapterVerseNumericUpDown.Maximum : verse.NumberInChapter;
                            }
                        }
                    }

                    if (verse.Page != null)
                    {
                        if (PageNumericUpDown.Value != verse.Page.Number)
                        {
                            PageNumericUpDown.Value = verse.Page.Number;
                        }
                    }
                    if (verse.Station != null)
                    {
                        if (StationNumericUpDown.Value != verse.Station.Number)
                        {
                            StationNumericUpDown.Value = verse.Station.Number;
                        }
                    }
                    if (verse.Part != null)
                    {
                        if (PartNumericUpDown.Value != verse.Part.Number)
                        {
                            PartNumericUpDown.Value = verse.Part.Number;
                        }
                    }
                    if (verse.Group != null)
                    {
                        if (GroupNumericUpDown.Value != verse.Group.Number)
                        {
                            GroupNumericUpDown.Value = verse.Group.Number;
                        }
                    }
                    if (verse.Half != null)
                    {
                        if (HalfNumericUpDown.Value != verse.Half.Number)
                        {
                            HalfNumericUpDown.Value = verse.Half.Number;
                        }
                    }
                    if (verse.Quarter != null)
                    {
                        if (QuarterNumericUpDown.Value != verse.Quarter.Number)
                        {
                            QuarterNumericUpDown.Value = verse.Quarter.Number;
                        }
                    }
                    if (verse.Bowing != null)
                    {
                        if (BowingNumericUpDown.Value != verse.Bowing.Number)
                        {
                            BowingNumericUpDown.Value = verse.Bowing.Number;
                        }
                    }
                    if (VerseNumericUpDown.Value != verse.Number)
                    {
                        VerseNumericUpDown.Value = verse.Number;
                    }

                    int char_index = m_active_textbox.SelectionStart;
                    int line_index = m_active_textbox.GetLineFromCharIndex(char_index);

                    Word word = GetWordAtChar(char_index);
                    if (word != null)
                    {
                        int word_index_in_verse = word.NumberInVerse - 1;
                        Letter letter = GetLetterAtChar(char_index);
                        if (letter == null) letter = GetLetterAtChar(char_index - 1); // (Ctrl_End)
                        if (letter != null)
                        {
                            int letter_index_in_verse = letter.NumberInVerse - 1;
                            int word_number = verse.Words[0].Number + word_index_in_verse;
                            if (word_number > WordNumericUpDown.Maximum)
                            {
                                WordNumericUpDown.Value = WordNumericUpDown.Maximum;
                            }
                            else if (word_number < WordNumericUpDown.Minimum)
                            {
                                WordNumericUpDown.Value = WordNumericUpDown.Minimum;
                            }
                            else
                            {
                                if (WordNumericUpDown.Value != word_number)
                                {
                                    WordNumericUpDown.Value = word_number;
                                }
                            }

                            if (verse.Words.Count > 0)
                            {
                                if (verse.Words[0].Letters.Count > 0)
                                {
                                    int letter_number = verse.Words[0].Letters[0].Number + letter_index_in_verse;
                                    if (letter_number > LetterNumericUpDown.Maximum)
                                    {
                                        LetterNumericUpDown.Value = LetterNumericUpDown.Maximum;
                                    }
                                    else if (letter_number < LetterNumericUpDown.Minimum)
                                    {
                                        LetterNumericUpDown.Value = LetterNumericUpDown.Minimum;
                                    }
                                    else
                                    {
                                        if (LetterNumericUpDown.Value != letter_number)
                                        {
                                            LetterNumericUpDown.Value = letter_number;
                                        }
                                    }
                                }
                            }

                            m_word_number_in_verse = word_index_in_verse + 1;
                            m_letter_number_in_verse = letter_index_in_verse + 1;
                            int word_count = 0;
                            int letter_count = 0;
                            if (verse.Chapter != null)
                            {
                                foreach (Verse chapter_verse in verse.Chapter.Verses)
                                {
                                    if (chapter_verse.NumberInChapter < verse.NumberInChapter)
                                    {
                                        word_count += chapter_verse.Words.Count;
                                        letter_count += chapter_verse.LetterCount;
                                    }
                                }
                            }
                            m_word_number_in_chapter = word_count + m_word_number_in_verse;
                            m_letter_number_in_chapter = letter_count + m_letter_number_in_verse;

                            if (m_word_number_in_chapter > ChapterWordNumericUpDown.Maximum)
                            {
                                ChapterWordNumericUpDown.Value = ChapterWordNumericUpDown.Maximum;
                            }
                            else if (m_word_number_in_chapter < ChapterWordNumericUpDown.Minimum)
                            {
                                ChapterWordNumericUpDown.Value = ChapterWordNumericUpDown.Minimum;
                            }
                            else
                            {
                                if (ChapterWordNumericUpDown.Value != m_word_number_in_chapter)
                                {
                                    ChapterWordNumericUpDown.Value = m_word_number_in_chapter;
                                }
                            }

                            if (m_letter_number_in_chapter > ChapterLetterNumericUpDown.Maximum)
                            {
                                ChapterLetterNumericUpDown.Value = ChapterLetterNumericUpDown.Maximum;
                            }
                            else if (m_letter_number_in_chapter < ChapterLetterNumericUpDown.Minimum)
                            {
                                ChapterLetterNumericUpDown.Value = ChapterLetterNumericUpDown.Minimum;
                            }
                            else
                            {
                                if (ChapterLetterNumericUpDown.Value != m_letter_number_in_chapter)
                                {
                                    ChapterLetterNumericUpDown.Value = m_letter_number_in_chapter;
                                }
                            }

                            ColorizePositionNumbers();
                            ColorizePositionControls();

                            UpdateVerseDistances(verse);

                            UpdatePlayerButtons(verse);
                        }
                    }
                }
                catch
                {
                    // ignore poosible error due to non-Arabic search result
                    // showing verses with more words than the words in the Arabic verse
                    // and throwing exception when assigned to WordNumericUpDown.Value or LetterNumericUpDown.Value
                }
                finally
                {
                    ChapterComboBox.SelectedIndexChanged += new EventHandler(ChapterComboBox_SelectedIndexChanged);
                    ChapterVerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    ChapterWordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    ChapterLetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    PageNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    StationNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    PartNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    GroupNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    HalfNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    QuarterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    BowingNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    VerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    WordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    LetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                }
            }
        }
    }
    private void ColorizePositionNumbers()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if ((ChapterComboBox.SelectedIndex >= 0) && (ChapterComboBox.SelectedIndex < m_client.Book.Chapters.Count))
                {
                    int chapter_number = m_client.Book.Chapters[ChapterComboBox.SelectedIndex].SortedNumber;
                    //ChapterComboBox.ForeColor = ChaptersListBox.GetItemColor(chapter_number - 1);
                    ChapterComboBox.ForeColor = Numbers.GetNumberTypeColor(chapter_number);
                    ChapterComboBox.BackColor = (Numbers.Compare(chapter_number, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                }
            }
        }

        ChapterVerseNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)ChapterVerseNumericUpDown.Value);
        ChapterWordNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)ChapterWordNumericUpDown.Value);
        ChapterLetterNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)ChapterLetterNumericUpDown.Value);
        PageNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)PageNumericUpDown.Value);
        StationNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)StationNumericUpDown.Value);
        PartNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)PartNumericUpDown.Value);
        GroupNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)GroupNumericUpDown.Value);
        HalfNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)HalfNumericUpDown.Value);
        QuarterNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)QuarterNumericUpDown.Value);
        BowingNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)BowingNumericUpDown.Value);
        VerseNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)VerseNumericUpDown.Value);
        WordNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)WordNumericUpDown.Value);
        LetterNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)LetterNumericUpDown.Value);

        ChapterVerseNumericUpDown.BackColor = (Numbers.Compare((int)ChapterVerseNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        ChapterWordNumericUpDown.BackColor = (Numbers.Compare((int)ChapterWordNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        ChapterLetterNumericUpDown.BackColor = (Numbers.Compare((int)ChapterLetterNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        PageNumericUpDown.BackColor = (Numbers.Compare((int)PageNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        StationNumericUpDown.BackColor = (Numbers.Compare((int)StationNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        PartNumericUpDown.BackColor = (Numbers.Compare((int)PartNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        GroupNumericUpDown.BackColor = (Numbers.Compare((int)GroupNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        HalfNumericUpDown.BackColor = (Numbers.Compare((int)HalfNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        QuarterNumericUpDown.BackColor = (Numbers.Compare((int)QuarterNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        BowingNumericUpDown.BackColor = (Numbers.Compare((int)BowingNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        VerseNumericUpDown.BackColor = (Numbers.Compare((int)VerseNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        WordNumericUpDown.BackColor = (Numbers.Compare((int)WordNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        LetterNumericUpDown.BackColor = (Numbers.Compare((int)LetterNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;

        ChapterComboBox.Refresh();
        ChapterVerseNumericUpDown.Refresh();
        ChapterWordNumericUpDown.Refresh();
        ChapterLetterNumericUpDown.Refresh();
        PageNumericUpDown.Refresh();
        StationNumericUpDown.Refresh();
        PartNumericUpDown.Refresh();
        GroupNumericUpDown.Refresh();
        HalfNumericUpDown.Refresh();
        QuarterNumericUpDown.Refresh();
        BowingNumericUpDown.Refresh();
        VerseNumericUpDown.Refresh();
        WordNumericUpDown.Refresh();
        LetterNumericUpDown.Refresh();
    }
    private void ColorizePositionControls()
    {
        if (m_client != null)
        {
            // reset colors
            ChapterPositionLabel.ForeColor = Color.CornflowerBlue;
            ChapterVerseWordLetterPositionLabel.ForeColor = Color.CornflowerBlue;
            PagePositionLabel.ForeColor = Color.LightSkyBlue;
            StationPositionLabel.ForeColor = Color.LightSteelBlue;
            PartPositionLabel.ForeColor = Color.LightSteelBlue;
            GroupPositionLabel.ForeColor = Color.LightSteelBlue;
            HalfPositionLabel.ForeColor = Color.LightSteelBlue;
            QuarterPositionLabel.ForeColor = Color.LightSteelBlue;
            BowingPositionLabel.ForeColor = Color.LightSteelBlue;
            VerseWordLetterPositionLabel.ForeColor = Color.LightSteelBlue;

            // set selected color
            if (m_client.Selection != null)
            {
                switch (m_client.Selection.Scope)
                {
                    case SelectionScope.Book:
                        {
                        }
                        break;
                    case SelectionScope.Station:
                        {
                            StationPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Part:
                        {
                            PartPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Group:
                        {
                            GroupPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Half:
                        {
                            HalfPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Quarter:
                        {
                            QuarterPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Bowing:
                        {
                            BowingPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Chapter:
                        {
                            ChapterPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Verse:
                    case SelectionScope.Word:
                    case SelectionScope.Letter:
                        {
                            ChapterVerseWordLetterPositionLabel.ForeColor = Color.LightCoral;
                            VerseWordLetterPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Page:
                        {
                            PagePositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    default: // Unknown
                        break;
                }
            }
        }
    }
    private void HighlightWord(int word_number)
    {
        if (m_active_textbox != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    Verse verse = m_client.Book.GetVerseByWordNumber(word_number);
                    if (verse != null)
                    {
                        word_number -= verse.Words[0].Number;
                        if ((word_number >= 0) && (word_number < verse.Words.Count))
                        {
                            Word word = verse.Words[word_number];
                            m_active_textbox.Select(word.Position, word.Text.Length);
                        }
                    }
                }
            }
        }
    }
    private void HighlightLetter(int letter_number)
    {
        if (m_active_textbox != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    Word word = m_client.Book.GetWordByLetterNumber(letter_number);
                    if (word != null)
                    {
                        if (word.Letters.Count > 0)
                        {
                            letter_number -= word.Letters[0].Number;
                            if ((letter_number >= 0) && (letter_number < word.Letters.Count))
                            {
                                int letter_position = word.Position + letter_number;
                                int letter_length = 1;
                                m_active_textbox.Select(letter_position, letter_length);
                            }
                        }
                    }
                }
            }
        }
    }

    private int m_progressbar_X = 0;
    private Verse m_progressbar_verse = null;
    private void ProgressBar_MouseMove(object sender, MouseEventArgs e)
    {
        if (e.X == m_progressbar_X) return;
        m_progressbar_X = e.X;

        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                int delta = (int)((double)ProgressBar.Maximum / (double)ProgressBar.Width);
                int index = (int)(((double)m_progressbar_X / (double)ProgressBar.Width) * (ProgressBar.Maximum + delta));
                if ((index >= 0) && (index < m_client.Book.Verses.Count))
                {
                    m_progressbar_verse = m_client.Book.Verses[index];
                    string info_text = "Page " + m_progressbar_verse.Page.Number + "     " + m_progressbar_verse.Address + "\t" + m_progressbar_verse.Text;
                    ToolTip.SetToolTip(ProgressBar, info_text);
                }
            }
        }
    }
    private void ProgressBar_Click(object sender, EventArgs e)
    {
        if (m_progressbar_verse != null)
        {
            GotoVerse(m_progressbar_verse);
            UpdateProgressBar(m_progressbar_verse);
        }
    }
    private void UpdateProgressBar(Verse verse)
    {
        if (m_client != null)
        {
            if (m_client.Selection != null)
            {
                switch (m_client.Selection.Scope)
                {
                    case SelectionScope.Book:
                        {
                        }
                        break;
                    case SelectionScope.Station:
                        {
                        }
                        break;
                    case SelectionScope.Part:
                        {
                        }
                        break;
                    case SelectionScope.Group:
                        {
                        }
                        break;
                    case SelectionScope.Half:
                        {
                        }
                        break;
                    case SelectionScope.Quarter:
                        {
                        }
                        break;
                    case SelectionScope.Bowing:
                        {
                        }
                        break;
                    case SelectionScope.Chapter:
                        {
                        }
                        break;
                    case SelectionScope.Verse:
                    case SelectionScope.Word:
                    case SelectionScope.Letter:
                        {
                        }
                        break;
                    case SelectionScope.Page:
                        {
                        }
                        break;
                }

                // show postion of verse in the Quran visually
                ProgressBar.Minimum = 1;
                ProgressBar.Maximum = verse.Book.Verses.Count;
                ProgressBar.Value = verse.Number;
                ProgressBar.Refresh();
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Bookmarks/Notes
    ///////////////////////////////////////////////////////////////////////////////
    private string m_note_writing_instruction = "write a note for";
    private Color m_note_writing_instruction_color = Color.Gray;
    private Color m_note_edit_color = Color.Black;
    private Color m_note_view_color = Color.Blue;
    private void BookmarkTextBox_Enter(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);

        BookmarkTextBox.ForeColor = m_note_edit_color;
        if (!String.IsNullOrEmpty(BookmarkTextBox.Text))
        {
            if (BookmarkTextBox.Text.StartsWith(m_note_writing_instruction))
            {
                BookmarkTextBox.Text = null;
            }
        }
    }
    private void BookmarkTextBox_Leave(object sender, EventArgs e)
    {
        AddBookmarkButton_Click(null, null);
        this.AcceptButton = null;
    }
    private void BookmarkTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            if (!String.IsNullOrEmpty(BookmarkTextBox.Text))
            {
                if (BookmarkTextBox.Text.Length > 0)
                {
                    AddBookmarkButton_Click(null, null);
                }
                else
                {
                    DeleteBookmarkLabel_Click(null, null);
                }
            }
        }
        else
        {
            BookmarkTextBox.ForeColor = m_note_edit_color;
        }
        UpdateBookmarkButtons();
    }
    private void DisplayNoteWritingInstruction()
    {
        DeleteBookmarkLabel.Enabled = false;
        ClearBookmarksLabel.Enabled = false;

        BookmarkTextBox.ForeColor = m_note_writing_instruction_color;
        if (BookmarkTextBox.Focused)
        {
            BookmarkTextBox.Text = null;
        }
        else
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Selection != null)
                    {
                        if (m_client.Selection.Scope == SelectionScope.Book)
                        {
                            BookmarkTextBox.Text = m_note_writing_instruction + " "
                                + m_client.Selection.Scope.ToString();
                        }
                        else if ((m_client.Selection.Scope == SelectionScope.Verse) || (m_client.Selection.Scope == SelectionScope.Word) || (m_client.Selection.Scope == SelectionScope.Letter))
                        {
                            BookmarkTextBox.Text = m_note_writing_instruction + L[l]["Chapter"] + " "
                                + (ChapterComboBox.SelectedIndex + 1).ToString() + " " + L[l]["Verse"] + " "
                                + (ChapterVerseNumericUpDown.Value).ToString();
                        }
                        else
                        {
                            StringBuilder str = new StringBuilder();
                            if (m_client.Selection.Indexes.Count > 0)
                            {
                                foreach (int index in m_client.Selection.Indexes)
                                {
                                    str.Append((index + 1).ToString() + "+");
                                }
                                if (str.Length > 1)
                                {
                                    str.Remove(str.Length - 1, 1);
                                }
                            }

                            BookmarkTextBox.Text = m_note_writing_instruction + " "
                                         + m_client.Selection.Scope.ToString() + " "
                                         + str.ToString();
                        }
                    }
                }
            }
        }

        BookmarkTextBox.Refresh();
        ToolTip.SetToolTip(BookmarkTextBox, null);

        UpdateBookmarkButtons();
    }
    private void DisplayNote(Bookmark bookmark)
    {
        if (bookmark != null)
        {
            if (bookmark.Selection != null)
            {
                BookmarkTextBox.Text = bookmark.Note;
                BookmarkTextBox.ForeColor = m_note_view_color;

                string hint = "Creation Time" + "\t" + bookmark.CreatedTime + "\r\n"
                     + "Last Modified" + "\t" + bookmark.LastModifiedTime;
                ToolTip.SetToolTip(BookmarkTextBox, hint);
            }
        }
        else
        {
            DisplayNoteWritingInstruction();
        }
    }
    private void DisplayBookmark(Bookmark bookmark)
    {
        if (bookmark != null)
        {
            if (bookmark.Selection != null)
            {
                if (m_client != null)
                {
                    m_client.Selection = new Selection(m_client.Book, bookmark.Selection.Scope, bookmark.Selection.Indexes);
                    if (m_client.Selection != null)
                    {
                        PlayerStopLabel_Click(null, null);

                        DisplaySelection(false);

                        BookmarkTextBox.Text = bookmark.Note;
                        BookmarkTextBox.ForeColor = m_note_view_color;
                        string hint = "Creation Time" + "\t" + bookmark.CreatedTime + "\r\n"
                             + "Last Modified" + "\t" + bookmark.LastModifiedTime;
                        ToolTip.SetToolTip(BookmarkTextBox, hint);
                        //MainTextBox.Focus();

                        UpdateBookmarkButtons();
                    }
                }
            }
        }
    }
    private void AddBookmarkButton_Click(object sender, EventArgs e)
    {
        if (!String.IsNullOrEmpty(BookmarkTextBox.Text))
        {
            if (BookmarkTextBox.Text.StartsWith(m_note_writing_instruction))
            {
                // ignore it
            }
            else if (BookmarkTextBox.Text.Length == 0)
            {
                DeleteBookmarkLabel_Click(null, null);
            }
            else //if (!BookmarkTextBox.Text.StartsWith(m_note_writing_instruction))
            {
                if (m_client != null)
                {
                    if (m_client.Book != null)
                    {
                        if (m_client.Selection != null)
                        {
                            Selection selection = new Selection(m_client.Book, m_client.Selection.Scope, m_client.Selection.Indexes);
                            Bookmark bookmark = m_client.CreateBookmark(selection, BookmarkTextBox.Text);

                            BookmarkTextBox.ForeColor = m_note_view_color;
                            UpdateBookmarkButtons();
                        }
                    }
                }
            }
        }
    }
    private void BookmarkBackwardButton_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            Bookmark bookmark = m_client.GotoPreviousBookmark();
            if (bookmark != null)
            {
                DisplayBookmark(bookmark);
            }
        }
    }
    private void BookmarkForwardButton_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            Bookmark bookmark = m_client.GotoNextBookmark();
            if (bookmark != null)
            {
                DisplayBookmark(bookmark);
            }
        }
    }
    private void BookmarkCounterLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.Bookmarks != null)
            {
                if (m_client.Bookmarks.Count > 0)
                {
                    DisplayBookmark(m_client.CurrentBookmark);

                    // call again so the chapter is selected in ChapterListBox
                    DisplayBookmark(m_client.CurrentBookmark);
                }
            }
        }
    }
    private void DeleteBookmarkLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            PlayerStopLabel_Click(null, null);

            // remove existing bookmark (if any)
            m_client.DeleteCurrentBookmark();

            Bookmark bookmark = m_client.CurrentBookmark;
            if (bookmark != null)
            {
                DisplayBookmark(bookmark);
            }
            else
            {
                DisplaySelection(false);
            }
        }
    }
    private void ClearBookmarksLabel_Click(object sender, EventArgs e)
    {
        if (MessageBox.Show(
            L[l]["Delete all bookmarks and notes?"],
            Application.ProductName,
            MessageBoxButtons.YesNo,
            MessageBoxIcon.Question) == DialogResult.Yes)
        {
            if (m_client != null)
            {
                m_client.ClearBookmarks();

                PlayerStopLabel_Click(null, null);

                DisplaySelection(false);
            }
        }
    }
    private void UpdateBookmarkButtons()
    {
        if (m_client != null)
        {
            if (m_client.Bookmarks != null)
            {
                BookmarkBackwardButton.Enabled = (m_client.Bookmarks.Count > 0) && (m_client.CurrentBookmarkIndex > 0);
                BookmarkForwardButton.Enabled = (m_client.Bookmarks.Count > 0) && (m_client.CurrentBookmarkIndex < m_client.Bookmarks.Count - 1);
                BookmarkCounterLabel.Text = (m_client.CurrentBookmarkIndex + 1).ToString() + " / " + m_client.Bookmarks.Count.ToString();
                DeleteBookmarkLabel.Enabled = (!BookmarkTextBox.Text.StartsWith(m_note_writing_instruction)) && (!m_found_verses_displayed) && (m_client.Bookmarks.Count > 0);
                ClearBookmarksLabel.Enabled = (!BookmarkTextBox.Text.StartsWith(m_note_writing_instruction)) && (!m_found_verses_displayed) && (m_client.Bookmarks.Count > 0);
                ClearBookmarksLabel.BackColor = (!BookmarkTextBox.Text.StartsWith(m_note_writing_instruction)) && (!m_found_verses_displayed) && (m_client.Bookmarks.Count > 0) ? Color.LightCoral : SystemColors.ControlLight;
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Audio Player
    ///////////////////////////////////////////////////////////////////////////////
    private MP3Player m_player = new MP3Player();
    private int m_audio_volume = DEFAULT_AUDIO_VOLUME;
    private string m_downloaded_audio_filename = null;
    private bool m_first_play = true;
    private float m_silence_between_verses = 0.0F; // in verse lengths
    private int m_silence_between_selections = 0;  // in milliseconds
    private int m_silence_time_between_verses = 0;
    private int m_silence_time_between_selections = 0;
    private bool m_break_playing = false;
    private bool m_player_looping = false;
    private bool m_player_looping_all = false;
    private int m_player_looping_count = int.MaxValue;        // unlimited verse repetitions
    private int m_player_looping_all_count = int.MaxValue;    // unlimited selection repetitions
    private int m_player_looping_i = 0;
    private int m_player_looping_all_i = 0;
    private void PlayVerse(int index)
    {
        Verse verse = GetVerse(index);
        if (verse != null)
        {
            HighlightVerse(verse);
            PlayVerse(verse);
        }
    }
    private void PlayVerse(Verse verse)
    {
        if (m_active_textbox != null)
        {
            if (verse != null)
            {
                if (m_player != null)
                {
                    // open verse mp3 file
                    if (m_player.Closed)
                    {
                        PlayerOpenAudioFile(verse);
                    }

                    if (m_player.Opened)
                    {
                        if (m_player.MuteAll)
                        {
                            m_player.VolumeAll = 0;
                        }
                        else
                        {
                            m_player.VolumeAll = m_audio_volume;
                        }

                        // play verse
                        m_player.Play();

                        // wait till finish
                        WaitForPlayToFinish();

                        // get verse time length before stop
                        int verse_time_length = (int)m_player.Length;

                        // stop verse
                        if (m_player.Opened)
                        {
                            m_player.Stop();
                            m_player.Close();
                        }

                        // and go into silence if needed
                        m_silence_time_between_verses = (int)(verse_time_length * m_silence_between_verses);
                        if (m_silence_time_between_verses > 0)
                        {
                            WaitFor(m_silence_time_between_verses);
                        }
                        else
                        {
                            // go into silence if last verse in chapter (on last repeat only)
                            if (verse.NumberInChapter == verse.Chapter.Verses.Count)
                            {
                                if (m_player_looping)
                                {
                                    if (m_player_looping_i == m_player_looping_count - 1)
                                    {
                                        WaitFor(3000);
                                    }
                                }
                                else
                                {
                                    WaitFor(3000);
                                }
                            }
                        }

                        // sleep in case of Prostration (Sijood)
                        switch (verse.ProstrationType)
                        {
                            case ProstrationType.None:
                                {
                                    // do nothing
                                }
                                break;
                            case ProstrationType.Obligatory:
                                {
                                    WaitFor(10000);
                                }
                                break;
                            case ProstrationType.Recommended:
                                {
                                    WaitFor(5000);
                                }
                                break;
                        }
                    }
                }

                // simulate mouse click to continue playing next verse and not restart from 1
                m_active_textbox.Focus();
                m_user_text_mode = false;
                m_selection_mode = false;
            }
            else // invalid verse
            {
                PlayerStopLabel_Click(null, null);
                MessageBox.Show("No verse available.", Application.ProductName);
            }
        }
    }
    private void WaitForPlayToFinish()
    {
        if (m_player != null)
        {
            while ((m_player.Length - m_player.Position) > 50UL)
            {
                // stop immediately if requested
                if (m_break_playing)
                {
                    break;
                }

                Application.DoEvents();
                Thread.Sleep(50);
            }
        }
    }
    private void WaitFor(int milliseconds)
    {
        DateTime end = DateTime.Now.AddMilliseconds(milliseconds);
        while (DateTime.Now < end)
        {
            Application.DoEvents();
            Thread.Sleep(50);
        }
    }
    private void PlayerPlayAudhuBillah()
    {
        try
        {
            if (m_player != null)
            {
                if (Directory.Exists(Globals.AUDIO_FOLDER))
                {
                    m_player.Open(Globals.AUDIO_FOLDER + "/" + "audhubillah.mp3");
                    if (m_player.Opened)
                    {
                        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_pause.png"))
                        {
                            PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_pause.png");
                        }
                        ToolTip.SetToolTip(PlayerPlayLabel, L[l]["Pause"]);
                        PlayerPlayLabel.Refresh();

                        m_player.VolumeAll = m_audio_volume;

                        m_player.Play();
                        WaitForPlayToFinish();
                    }
                    else
                    {
                        PlayerStopLabel_Click(null, null);
                        AskUserToDownloadAudioFilesManually();
                    }
                }
            }
        }
        catch
        {
            // skip if not found
        }
    }
    private void PlayerPlayBismAllah()
    {
        try
        {
            if (m_player != null)
            {
                if (m_client != null)
                {
                    if (m_client.Book != null)
                    {
                        Chapter chapter1 = null;
                        foreach (Chapter chapter in m_client.Book.Chapters)
                        {
                            if (chapter.Number == 1)
                            {
                                chapter1 = chapter;
                                break;
                            }
                        }

                        if (chapter1 != null)
                        {
                            if (chapter1.Verses.Count > 0)
                            {
                                try
                                {
                                    // download file if not on disk
                                    DownloadVerseAudioFile(chapter1.Verses[0]);

                                    // open only, don't play
                                    m_player.Open(m_downloaded_audio_filename);

                                    if (m_player.Opened)
                                    {
                                        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_pause.png"))
                                        {
                                            PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_pause.png");
                                        }
                                        ToolTip.SetToolTip(PlayerPlayLabel, L[l]["Pause"]);
                                        PlayerPlayLabel.Refresh();

                                        m_player.VolumeAll = m_audio_volume;

                                        m_player.Play();
                                        WaitForPlayToFinish();
                                    }
                                }
                                catch
                                {
                                    PlayerStopLabel_Click(null, null);
                                    AskUserToDownloadAudioFilesManually();
                                }
                            }
                        }
                    }
                }
            }
        }
        catch
        {
            // skip if not found
        }
    }
    private void PlayerOpenAudioFile(Verse verse)
    {
        if (verse != null)
        {
            if (m_player != null)
            {
                // on first play
                if (m_first_play)
                {
                    // play AudhuBillah always at start
                    PlayerPlayAudhuBillah();

                    // play BismAllah for any Quran verse except 1:1 and chapter 9
                    if (verse.Chapter != null)
                    {
                        if ((verse.Chapter.Number != 1) && (verse.Chapter.Number != 9))
                        {
                            PlayerPlayBismAllah();
                        }
                        else // either chapter 1 or 9
                        {
                            if (verse.Chapter.Number == 1)
                            {
                                if (verse.NumberInChapter > 1) // not 1:1
                                {
                                    PlayerPlayBismAllah();
                                }
                            }
                            else if (verse.Chapter.Number == 9)
                            {
                                // do nothing
                            }
                        }
                    }

                    m_first_play = false;
                }
                else // on subsequent play
                {
                    // play BismAllah before verse 1 of any chapter except chapter 1 and 9
                    // play AudhuBillah before verse 1 of chapter 9
                    if (verse.NumberInChapter == 1)
                    {
                        if (verse.Chapter != null)
                        {
                            if ((verse.Chapter.Number != 1) && (verse.Chapter.Number != 9))
                            {
                                PlayerPlayBismAllah();
                            }
                            else if (verse.Chapter.Number == 9)
                            {
                                PlayerPlayAudhuBillah();
                            }
                        }
                    }
                }

                // load verse for playing (including verse 1 of chapter 1)
                try
                {
                    // download file if not on disk
                    DownloadVerseAudioFile(verse);

                    // open only, don't play
                    m_player.Open(m_downloaded_audio_filename);
                }
                catch
                {
                    PlayerStopLabel_Click(null, null);
                    AskUserToDownloadAudioFilesManually();
                }
            }
        }
        else // invalid verse
        {
            PlayerStopLabel_Click(null, null);
            MessageBox.Show("No verse available.", Application.ProductName);
        }
    }
    private void PlayerPreviousLabel_Click(object sender, EventArgs e)
    {
        try
        {
            ulong position = 0UL;
            if (m_player != null)
            {
                if (m_player.Opened)
                {
                    if ((m_player.Playing) || (m_player.Paused))
                    {
                        position = m_player.Position;
                        m_player.Stop();
                        m_player.Close();
                    }
                }
            }

            m_player_looping_i = 0;
            PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
            ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
            PlayerRepeatCounterLabel.Refresh();

            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_pause.png"))
            {
                PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_pause.png");
            }
            ToolTip.SetToolTip(PlayerPlayLabel, L[l]["Pause"]);
            PlayerPlayLabel.Refresh();

            m_break_playing = false;
            if (position < 3000UL)
            {
                CurrentVerseIndex--;
            }
            PlayFromCurrentVerse();
        }
        catch
        {
            PlayerStopLabel_Click(null, null);
        }
    }
    private void PlayerNextLabel_Click(object sender, EventArgs e)
    {
        try
        {
            if (m_player != null)
            {
                if (m_player.Opened)
                {
                    if ((m_player.Playing) || (m_player.Paused))
                    {
                        m_player.Stop();
                        m_player.Close();
                    }
                }
            }

            m_player_looping_i = 0;
            PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
            ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
            PlayerRepeatCounterLabel.Refresh();

            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_pause.png"))
            {
                PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_pause.png");
            }
            ToolTip.SetToolTip(PlayerPlayLabel, L[l]["Pause"]);
            PlayerPlayLabel.Refresh();

            m_break_playing = false;
            CurrentVerseIndex++;
            PlayFromCurrentVerse();
        }
        catch
        {
            PlayerStopLabel_Click(null, null);
        }
    }
    private void PlayerPlayLabel_Click(object sender, EventArgs e)
    {
        if (m_player != null)
        {
            //m_break_playing = false;
            PlayerStopLabel.Enabled = true;
            PlayerStopLabel.Refresh();

            if ((m_player.Closed) || (m_player.Stopped) || (m_player.Paused))
            {
                if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_pause.png"))
                {
                    PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_pause.png");
                }
                ToolTip.SetToolTip(PlayerPlayLabel, L[l]["Pause"]);
                PlayerPlayLabel.Refresh();

                if ((m_player.Closed) || (m_player.Stopped))
                {
                    m_break_playing = false;
                    PlayFromCurrentVerse();
                }
                else if (m_player.Paused)
                {
                    m_player.Play(); // resume
                }
            }
            else if (m_player.Playing)
            {
                if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_play.png"))
                {
                    PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_play.png");
                }
                ToolTip.SetToolTip(PlayerPlayLabel, L[l]["Play"]);
                PlayerPlayLabel.Refresh();

                m_player.Pause(); // pause play
            }
        }
    }
    private void PlayerStopLabel_Click(object sender, EventArgs e)
    {
        if (m_player != null)
        {
            m_break_playing = true;

            if (m_player.Opened)
            {
                if ((m_player.Playing) || (m_player.Paused))
                {
                    m_player.Stop();
                    m_player.Close();
                }
            }
        }
        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_play.png"))
        {
            PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_play.png");
        }
        PlayerPlayLabel.Refresh();

        PlayerStopLabel.Enabled = false;
        PlayerStopLabel.Refresh();

        m_player_looping_i = 0;
        PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
        ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
        PlayerRepeatCounterLabel.Refresh();

        m_player_looping_all_i = 0;
        PlayerRepeatAllCounterLabel.Text = (m_player_looping_all_i + 1).ToString() + " / " + ((m_player_looping_all_count == int.MaxValue) ? "*" : m_player_looping_all_count.ToString());
        ToolTip.SetToolTip(PlayerRepeatAllCounterLabel, PlayerRepeatAllCounterLabel.Text);
        PlayerRepeatAllCounterLabel.Refresh();
    }
    private void PlayerRepeatLabel_Click(object sender, EventArgs e)
    {
        m_player_looping = !m_player_looping;
        if (m_player_looping)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_repeat_on.png"))
            {
                PlayerRepeatLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_repeat_on.png");
            }
            PlayerRepeatCounterLabel.Visible = true;
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_repeat.png"))
            {
                PlayerRepeatLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_repeat.png");
            }
            PlayerRepeatCounterLabel.Visible = false;
        }
        PlayerRepeatLabel.Refresh();

        PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
        ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
        PlayerRepeatCounterLabel.Refresh();
    }
    private void PlayerRepeatCounterLabel_Click(object sender, EventArgs e)
    {
        if (ModifierKeys == Keys.Shift)
        {
            switch (m_player_looping_count)
            {
                case int.MaxValue: m_player_looping_count = 7; break;
                case 7: m_player_looping_count = 5; break;
                case 5: m_player_looping_count = 3; break;
                case 3: m_player_looping_count = 2; break;
                case 2: m_player_looping_count = int.MaxValue; break;
            }
        }
        else
        {
            switch (m_player_looping_count)
            {
                case int.MaxValue: m_player_looping_count = 2; break;
                case 2: m_player_looping_count = 3; break;
                case 3: m_player_looping_count = 5; break;
                case 5: m_player_looping_count = 7; break;
                case 7: m_player_looping_count = int.MaxValue; break;
            }
        }

        PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
        ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
        PlayerRepeatCounterLabel.Refresh();
    }
    private void PlayerRepeatAllLabel_Click(object sender, EventArgs e)
    {
        m_player_looping_all = !m_player_looping_all;
        if (m_player_looping_all)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_repeat_all_on.png"))
            {
                PlayerRepeatAllLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_repeat_all_on.png");
            }
            PlayerRepeatAllCounterLabel.Visible = true;
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_repeat_all.png"))
            {
                PlayerRepeatAllLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_repeat_all.png");
            }
            PlayerRepeatAllCounterLabel.Visible = false;
        }
        PlayerRepeatAllLabel.Refresh();

        PlayerRepeatAllCounterLabel.Text = (m_player_looping_all_i + 1).ToString() + " / " + ((m_player_looping_all_count == int.MaxValue) ? "*" : m_player_looping_all_count.ToString());
        ToolTip.SetToolTip(PlayerRepeatAllCounterLabel, PlayerRepeatAllCounterLabel.Text);
        PlayerRepeatAllCounterLabel.Refresh();
    }
    private void PlayerRepeatAllCounterLabel_Click(object sender, EventArgs e)
    {
        if (ModifierKeys == Keys.Shift)
        {
            switch (m_player_looping_all_count)
            {
                case int.MaxValue: m_player_looping_all_count = 7; break;
                case 7: m_player_looping_all_count = 5; break;
                case 5: m_player_looping_all_count = 3; break;
                case 3: m_player_looping_all_count = 2; break;
                case 2: m_player_looping_all_count = int.MaxValue; break;
            }
        }
        else
        {
            switch (m_player_looping_all_count)
            {
                case int.MaxValue: m_player_looping_all_count = 2; break;
                case 2: m_player_looping_all_count = 3; break;
                case 3: m_player_looping_all_count = 5; break;
                case 5: m_player_looping_all_count = 7; break;
                case 7: m_player_looping_all_count = int.MaxValue; break;
            }
        }

        PlayerRepeatAllCounterLabel.Text = (m_player_looping_all_i + 1).ToString() + " / " + ((m_player_looping_all_count == int.MaxValue) ? "*" : m_player_looping_all_count.ToString());
        ToolTip.SetToolTip(PlayerRepeatAllCounterLabel, PlayerRepeatAllCounterLabel.Text);
        PlayerRepeatAllCounterLabel.Refresh();
    }
    private void PlayerMuteLabel_Click(object sender, EventArgs e)
    {
        if (m_player != null)
        {
            m_player.MuteAll = !m_player.MuteAll;
            if (m_player.MuteAll)
            {
                m_player.VolumeAll = 0;
                if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_muted.png"))
                {
                    PlayerMuteLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_muted.png");
                }
            }
            else
            {
                m_player.VolumeAll = m_audio_volume;
                if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_vol_hi.png"))
                {
                    PlayerMuteLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_vol_hi.png");
                }
            }
            PlayerMuteLabel.Refresh();
        }
    }
    private void PlayerVolumeTrackBar_Scroll(object sender, EventArgs e)
    {
        if (m_player != null)
        {
            m_audio_volume = PlayerVolumeTrackBar.Value * (1000 / PlayerVolumeTrackBar.Maximum);
            m_player.VolumeAll = m_audio_volume;
            ToolTip.SetToolTip(PlayerVolumeTrackBar, (m_audio_volume / (1000 / PlayerVolumeTrackBar.Maximum)).ToString() + "%");
        }
    }
    private void PlayerVerseSilenceGapTrackBar_Scroll(object sender, EventArgs e)
    {
        m_silence_between_verses = (float)PlayerVerseSilenceGapTrackBar.Value / (PlayerVerseSilenceGapTrackBar.Maximum / 2);
        SetToolTipPlayerVerseSilenceGapTrackBar();
    }
    private void SetToolTipPlayerVerseSilenceGapTrackBar()
    {
        if (m_silence_between_verses == 0.0F)
        {
            ToolTip.SetToolTip(PlayerVerseSilenceGapTrackBar, L[l]["no silence between verse replays"]);
        }
        else
        {
            ToolTip.SetToolTip(PlayerVerseSilenceGapTrackBar, m_silence_between_verses.ToString("0.0") + " " + L[l]["verses silence between verse replays"]);
        }
    }
    private void PlayerSelectionSilenceGapTrackBar_Scroll(object sender, EventArgs e)
    {
        m_silence_between_selections = PlayerSelectionSilenceGapTrackBar.Value;
        SetToolTipPlayerSelectionSilenceGapTrackBar();
    }
    private void SetToolTipPlayerSelectionSilenceGapTrackBar()
    {
        switch (m_silence_between_selections)
        {
            case 0:
                m_silence_time_between_selections = 0 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, L[l]["no silence between selection replays"]);
                break;
            case 1:
                m_silence_time_between_selections = 10 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, L[l]["10 seconds silence between selection replays"]);
                break;
            case 2:
                m_silence_time_between_selections = 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, L[l]["1 minute silence between selection replays"]);
                break;
            case 3:
                m_silence_time_between_selections = 5 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, L[l]["5 minutes silence between selection replays"]);
                break;
            case 4:
                m_silence_time_between_selections = 15 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, L[l]["15 minutes silence between selection replays"]);
                break;
            case 5:
                m_silence_time_between_selections = 1 * 60 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, L[l]["1 hour silence between selection replays"]);
                break;
            case 6:
                m_silence_time_between_selections = 2 * 60 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, L[l]["2 hours silence between selection replays"]);
                break;
            case 7:
                m_silence_time_between_selections = 6 * 60 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, L[l]["6 hours silence between selection replays"]);
                break;
            case 8:
                m_silence_time_between_selections = 12 * 60 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, L[l]["12 hours silence between selection replays"]);
                break;
            case 9:
                m_silence_time_between_selections = 24 * 60 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, L[l]["1 day silence between selection replays"]);
                break;
            case 10:
                m_silence_time_between_selections = new Random().Next(10, 24 * 60 * 60) * 1000; // 10s to 24hr
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, L[l]["Random silence between selection replays"]);
                break;
            default:
                m_silence_time_between_selections = 0 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, L[l]["no silence between selection replays"]);
                break;
        }
    }
    private void PlayFromCurrentVerse()
    {
        if (m_player != null)
        {
            if (m_client != null)
            {
                // if silent_mode or previous verses finished, play current verse
                if ((m_player.Length - m_player.Position) < 50UL)
                {
                    List<Verse> verses = null;
                    if (m_found_verses_displayed)
                    {
                        verses = m_client.FoundVerses;
                    }
                    else
                    {
                        if (m_client.Selection != null)
                        {
                            verses = m_client.Selection.Verses;
                        }
                    }

                    if (verses != null)
                    {
                        int start = CurrentVerseIndex;
                        for (int i = start; i < verses.Count; i++)
                        {
                            // stop immediately if requested
                            if (m_break_playing)
                            {
                                break;
                            }

                            // play verse, loop if required
                            if (m_player_looping)
                            {
                                PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
                                ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
                                PlayerRepeatCounterLabel.Refresh();

                                // play verse
                                PlayVerse(i);

                                if (m_player_looping_i < m_player_looping_count - 1) // -1 as already played once
                                {
                                    m_player_looping_i++;
                                    i--; // for's i++ will replay same verse(i)
                                }
                                else
                                {
                                    m_player_looping_i = 0;
                                    PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
                                    ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
                                    PlayerRepeatCounterLabel.Refresh();
                                }
                            }
                            else
                            {
                                PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
                                ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
                                PlayerRepeatCounterLabel.Refresh();

                                if (m_player_looping_i == 0) // play verse once if no m_player_looping
                                {
                                    // play verse
                                    PlayVerse(i);

                                    // if m_player_looping was ADDED while verse was playing
                                    if (m_player_looping) // ***
                                    {
                                        // replay verse
                                        m_player_looping_i++;
                                        i--; // for's i++ will replay same verse(i)
                                    }
                                }
                                else // if m_player_looping was REMOVED while verse was playing
                                {
                                    // reset m_player_looping_i to move to next verse (in the check above ***) 
                                    m_player_looping_i = 0;
                                }
                            }

                            // if finished playing, loop all selection if required
                            if (i == verses.Count - 1)
                            {
                                if (m_player_looping_all)
                                {
                                    m_player_looping_all_i++;
                                    PlayerRepeatAllCounterLabel.Text = (m_player_looping_all_i + 1).ToString() + " / " + ((m_player_looping_all_count == int.MaxValue) ? "*" : m_player_looping_all_count.ToString());
                                    ToolTip.SetToolTip(PlayerRepeatAllCounterLabel, PlayerRepeatAllCounterLabel.Text);
                                    PlayerRepeatAllCounterLabel.Refresh();

                                    // and go into silence if needed
                                    if (m_silence_time_between_selections > 0)
                                    {
                                        WaitFor(m_silence_time_between_selections);
                                    }

                                    if (m_player_looping_all_i < m_player_looping_all_count)
                                    {
                                        i = -1; // for's i++ will reset it to 0
                                    }
                                    else
                                    {
                                        m_player_looping_all_i = 0;

                                        PlayerRepeatAllCounterLabel.Text = (m_player_looping_all_i + 1).ToString() + " / " + ((m_player_looping_all_count == int.MaxValue) ? "*" : m_player_looping_all_count.ToString());
                                        ToolTip.SetToolTip(PlayerRepeatAllCounterLabel, PlayerRepeatAllCounterLabel.Text);
                                        PlayerRepeatAllCounterLabel.Refresh();
                                    }
                                }
                            }
                        }
                    }
                }
                PlayerStopLabel_Click(null, null);
            }
        }
    }
    private void UpdatePlayerButtons(Verse verse)
    {
        if (m_client != null)
        {
            List<Verse> verses = null;
            if (m_found_verses_displayed)
            {
                verses = m_client.FoundVerses;
            }
            else
            {
                if (m_client.Selection != null)
                {
                    verses = m_client.Selection.Verses;
                }
            }
            if (verses != null)
            {
                if (verses.Count > 0)
                {
                    PlayerPreviousLabel.Enabled = (verse.Number != verses[0].Number);
                    PlayerNextLabel.Enabled = (verse.Number != verses[verses.Count - 1].Number);
                }
                else
                {
                    PlayerPreviousLabel.Enabled = false;
                    PlayerNextLabel.Enabled = false;
                }
            }
        }
    }
    #endregion
    #region Audio Downloader
    ///////////////////////////////////////////////////////////////////////////////
    private List<string> m_downloaded_reciter_folders = null;
    private void AskUserToDownloadAudioFilesManually()
    {
        if (Directory.Exists(Globals.AUDIO_FOLDER))
        {
            if (MessageBox.Show("Cannot auto-download audio file for this verse.\r\n\r\n"
                              + "You need to download all audio files and unzip them to folder:\r\n"
                              + Application.StartupPath + "\\" + Globals.AUDIO_FOLDER + "\\" + m_reciter + "\\" + "\r\n\r\nDo you want to download them now?",
                              Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                Control control = new Control();
                if (m_client != null)
                {
                    if (m_client.Book != null)
                    {
                        if (m_client.Book.RecitationInfos != null)
                        {
                            foreach (string key in m_client.Book.RecitationInfos.Keys)
                            {
                                if (m_client.Book.RecitationInfos[key].Folder == m_reciter)
                                {
                                    control.Tag = RecitationInfo.DEFAULT_URL_PREFIX + m_client.Book.RecitationInfos[key].Url;
                                    LinkLabel_Click(control, null);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    private void DownloadVerseAudioFile(Verse verse)
    {
        // mirror remote_folder locally
        string audio_folder = Globals.AUDIO_FOLDER + "/" + m_reciter;
        if (!Directory.Exists(audio_folder))
        {
            Directory.CreateDirectory(audio_folder);
        }

        if (Directory.Exists(audio_folder))
        {
            // generate audio_filename from verse address
            string audio_filename = null;
            string full_audio_folder = null;
            if (verse == null)
            {
                audio_filename = "001000" + "." + RecitationInfo.FileType; // audhubillah
                full_audio_folder = audio_folder + "/" + "001";
            }
            else
            {
                if (verse.Chapter != null)
                {
                    audio_filename = verse.Chapter.Number.ToString("000") + verse.NumberInChapter.ToString("000") + "." + RecitationInfo.FileType;
                    full_audio_folder = audio_folder + "/" + verse.Chapter.Number.ToString("000");
                }
            }

            // fill up local_audio_filename to return to caller
            m_downloaded_audio_filename = full_audio_folder + "/" + audio_filename;
            string outer_downloaded_audio_filename = audio_folder + "/" + audio_filename;
            string backup_downloaded_audio_filename = Application.StartupPath[0].ToString() + ":" + "/" + "Quran" + "/" + full_audio_folder + "/" + audio_filename;
            // audio file exists in normal folder
            if (File.Exists(m_downloaded_audio_filename))
            {
                // no need to download
            }
            // audio file exists in outer folder
            else if (File.Exists(outer_downloaded_audio_filename))
            {
                if (!Directory.Exists(full_audio_folder))
                {
                    Directory.CreateDirectory(full_audio_folder);
                }

                if (Directory.Exists(full_audio_folder))
                {
                    File.Move(outer_downloaded_audio_filename, m_downloaded_audio_filename);
                }
            }
            // audio file exists in backup folder
            else if (File.Exists(backup_downloaded_audio_filename))
            {
                m_downloaded_audio_filename = backup_downloaded_audio_filename;
            }
            else
            {
                // try to download audio file
                if (m_client != null)
                {
                    if (m_client.Book != null)
                    {
                        if (m_client.Book.RecitationInfos != null)
                        {
                            string recitation_url = null;
                            foreach (string key in m_client.Book.RecitationInfos.Keys)
                            {
                                if (m_client.Book.RecitationInfos[key].Folder == m_reciter)
                                {
                                    recitation_url = RecitationInfo.UrlPrefix + m_client.Book.RecitationInfos[key].Url + "/" + audio_filename;
                                    break;
                                }
                            }

                            DownloadFile(recitation_url, m_downloaded_audio_filename);
                        }
                    }
                }
            }
        }
    }
    private string GetVerseAudioFilename(int verse_index)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Book.Verses != null)
                {
                    if ((verse_index >= 0) && (verse_index < m_client.Book.Verses.Count))
                    {
                        Verse verse = m_client.Book.Verses[verse_index];
                        if (verse != null)
                        {
                            if (verse.Chapter != null)
                            {
                                return (verse.Chapter.Number.ToString("000") + verse.NumberInChapter.ToString("000") + "." + RecitationInfo.FileType);
                            }
                        }
                    }
                }
            }
        }
        return "000000.mp3";
    }
    private string GetVerseAudioFilepath(int verse_index)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Book.Verses != null)
                {
                    if ((verse_index >= 0) && (verse_index < m_client.Book.Verses.Count))
                    {
                        Verse verse = m_client.Book.Verses[verse_index];
                        if (verse != null)
                        {
                            if (verse.Chapter != null)
                            {
                                return (verse.Chapter.Number.ToString("000") + "/" + verse.Chapter.Number.ToString("000") + verse.NumberInChapter.ToString("000") + "." + RecitationInfo.FileType);
                            }
                        }
                    }
                }
            }
        }
        return "000/000000.mp3";
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Audio Recitations
    ///////////////////////////////////////////////////////////////////////////////
    private string m_reciter = Client.DEFAULT_RECITATION;
    private void PopulateRecitationsCheckedListBox()
    {
        try
        {
            // TRICK: to disable item in a list, just ignore user check using this trick
            RecitationsCheckedListBox.ItemCheck += new ItemCheckEventHandler(RecitationsCheckedListBox_ItemCheck);

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.RecitationInfos != null)
                    {
                        for (int i = 0; i < 3; i++) RecitationsCheckedListBox.SelectedIndexChanged -= new EventHandler(RecitationsCheckedListBox_SelectedIndexChanged);
                        RecitationsCheckedListBox.BeginUpdate();
                        RecitationsCheckedListBox.Items.Clear();
                        foreach (string key in m_client.Book.RecitationInfos.Keys)
                        {
                            string reciter = m_client.Book.RecitationInfos[key].Reciter;
                            RecitationsCheckedListBox.Items.Add(reciter);
                        }
                    }
                }
            }
        }
        finally
        {
            RecitationsCheckedListBox.EndUpdate();
            RecitationsCheckedListBox.SelectedIndexChanged += new EventHandler(RecitationsCheckedListBox_SelectedIndexChanged);
        }
    }
    private void RecitationsCheckedListBox_ItemCheck(object sender, ItemCheckEventArgs e)
    {
        if (e.CurrentValue == CheckState.Indeterminate)
        {
            e.NewValue = e.CurrentValue;
        }
    }
    private void PopulateReciterComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) ReciterComboBox.SelectedIndexChanged -= new EventHandler(ReciterComboBox_SelectedIndexChanged);
            ReciterComboBox.BeginUpdate();

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.RecitationInfos != null)
                    {
                        ReciterComboBox.Items.Clear();
                        foreach (string key in m_client.Book.RecitationInfos.Keys)
                        {
                            string reciter = m_client.Book.RecitationInfos[key].Reciter;
                            ReciterComboBox.Items.Add(reciter);
                        }
                        if (ReciterComboBox.Items.Count > 3)
                        {
                            ReciterComboBox.SelectedIndex = 3;
                        }
                    }
                }
            }
        }
        finally
        {
            ReciterComboBox.EndUpdate();
            ReciterComboBox.SelectedIndexChanged += new EventHandler(ReciterComboBox_SelectedIndexChanged);
        }
    }
    private void UpdateRecitationsCheckedListBox()
    {
        try
        {
            /////////////////////////////////////////////////////////////////////////////
            // foreach reciter -> foreach verse, if audio file exist and valid then check
            /////////////////////////////////////////////////////////////////////////////

            if (m_downloaded_reciter_folders == null)
            {
                m_downloaded_reciter_folders = new List<string>();
            }
            m_downloaded_reciter_folders.Clear();

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.RecitationInfos != null)
                    {
                        foreach (string reciter_folder in m_client.Book.RecitationInfos.Keys)
                        {
                            bool fully_downloaded = true;
                            for (int i = 0; i < m_client.Book.Verses.Count; i++)
                            {
                                string download_folder = Globals.AUDIO_FOLDER + "/" + reciter_folder;
                                string filename = GetVerseAudioFilename(i); // e.g. i=8 ==> 002001.mp3
                                string full_filename = GetVerseAudioFilepath(i); // e.g. i=8 ==> 002/002001.mp3
                                string full_path = download_folder + "/" + full_filename;
                                if (File.Exists(full_path)) // file exist
                                {
                                    long filesize = (new FileInfo(full_path)).Length;
                                    if (filesize < 1024) // invalid file
                                    {
                                        fully_downloaded = false;
                                        break;
                                    }
                                }
                                else // file not found
                                {
                                    fully_downloaded = false;
                                    break;
                                }
                            }

                            int index = 0;
                            string reciter = m_client.Book.RecitationInfos[reciter_folder].Reciter;
                            for (int i = 0; i < RecitationsCheckedListBox.Items.Count; i++)
                            {
                                if (RecitationsCheckedListBox.Items[i].ToString() == reciter)
                                {
                                    index = i;
                                }
                            }

                            if (fully_downloaded)
                            {
                                RecitationsCheckedListBox.SetItemCheckState(index, CheckState.Indeterminate);
                                m_downloaded_reciter_folders.Add(reciter_folder);
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
    }
    private void RecitationsCheckedListBox_SelectedIndexChanged(object sender, EventArgs e)
    {
    }
    private void RecitationsCheckedListBox_MouseUp(object sender, MouseEventArgs e)
    {
        if (RecitationsCheckedListBox.SelectedItem != null)
        {
            string reciter = RecitationsCheckedListBox.SelectedItem.ToString();

            string reciter_folder = null;
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.RecitationInfos != null)
                    {
                        foreach (string key in m_client.Book.RecitationInfos.Keys)
                        {
                            if (reciter == m_client.Book.RecitationInfos[key].Reciter)
                            {
                                reciter_folder = key;
                                break;
                            }
                        }
                    }
                }
            }

            if (m_downloaded_reciter_folders.Contains(reciter_folder))
            {
                RecitationsCheckedListBox.SetItemCheckState(RecitationsCheckedListBox.SelectedIndex, CheckState.Indeterminate);
            }
        }
    }
    private void ReciterComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ReciterComboBox.SelectedItem != null)
        {
            string reciter = ReciterComboBox.SelectedItem.ToString();
            RecitationGroupBox.Text = reciter + "                                 ";

            // update m_recitation_folder
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.RecitationInfos != null)
                    {
                        foreach (string key in m_client.Book.RecitationInfos.Keys)
                        {
                            if (m_client.Book.RecitationInfos[key].Reciter == reciter)
                            {
                                m_reciter = m_client.Book.RecitationInfos[key].Folder;
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
    private void RecitationsApplySettingsLabel_Click(object sender, EventArgs e)
    {
        if (!RecitationsDownloadGroupBox.Visible)
        {
            UpdateRecitationsCheckedListBox();

            RecitationsDownloadGroupBox.Visible = true;
            RecitationsCancelSettingsLabel.Visible = true;
            RecitationsDownloadGroupBox.BringToFront();

            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "apply.png"))
            {
                RecitationsApplySettingsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "apply.png");
            }
            ToolTip.SetToolTip(RecitationsApplySettingsLabel, L[l]["Download complete Quran recitations"]);
        }
        else
        {
            RecitationsDownloadGroupBox.Visible = false;
            RecitationsCancelSettingsLabel.Visible = false;

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "settings.png"))
                    {
                        RecitationsApplySettingsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "settings.png");
                    }
                    ToolTip.SetToolTip(RecitationsApplySettingsLabel, L[l]["Add/Remove recitations"]);

                    if (m_client.Book.RecitationInfos != null)
                    {
                        try
                        {
                            List<string> keys_to_download = new List<string>();
                            foreach (int cheched_index in RecitationsCheckedListBox.CheckedIndices)
                            {
                                if (RecitationsCheckedListBox.GetItemCheckState(cheched_index) != CheckState.Indeterminate)
                                {
                                    foreach (string key in m_client.Book.RecitationInfos.Keys)
                                    {
                                        string reciter = RecitationsCheckedListBox.Items[cheched_index].ToString();
                                        if (m_client.Book.RecitationInfos[key].Reciter == reciter)
                                        {
                                            keys_to_download.Add(key);
                                            break;
                                        }
                                    }
                                }
                            }

                            foreach (string reciter_folder in m_client.Book.RecitationInfos.Keys)
                            {
                                if (keys_to_download.Contains(reciter_folder))
                                {
                                    ProgressBar.Minimum = 1;
                                    ProgressBar.Maximum = m_client.Book.Verses.Count;
                                    ProgressBar.Value = 1;
                                    ProgressBar.Refresh();

                                    for (int i = 0; i < m_client.Book.Verses.Count; i++)
                                    {
                                        string download_folder = Globals.AUDIO_FOLDER + "/" + reciter_folder;
                                        string filename = GetVerseAudioFilename(i); // e.g. i=8 ==> 002001.mp3
                                        string full_filename = GetVerseAudioFilepath(i); // e.g. i=8 ==> 002/002001.mp3
                                        string full_path = download_folder + "/" + full_filename;
                                        if (File.Exists(full_path)) // file exist
                                        {
                                            long filesize = (new FileInfo(full_path)).Length;
                                            if (filesize < 1024) // if < 1kb invalid file then re-download
                                            {
                                                DownloadFile(RecitationInfo.UrlPrefix + m_client.Book.RecitationInfos[reciter_folder].Url + "/" + filename, full_path);
                                            }
                                        }
                                        else // file not found so download it
                                        {
                                            DownloadFile(RecitationInfo.UrlPrefix + m_client.Book.RecitationInfos[reciter_folder].Url + "/" + filename, full_path);
                                        }

                                        ProgressBar.Value = i + 1;
                                        ProgressBar.Refresh();

                                        Application.DoEvents();
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message, Application.ProductName);
                        }
                        finally
                        {
                            if (m_client.Selection != null)
                            {
                                List<Verse> verses = m_client.Selection.Verses;
                                if (verses.Count > 0)
                                {
                                    ProgressBar.Minimum = 1;
                                    ProgressBar.Maximum = m_client.Book.Verses.Count;
                                    ProgressBar.Value = verses[0].Number;
                                    ProgressBar.Refresh();
                                }
                            }
                        }
                    }
                }
            }
        }

        RecitationsApplySettingsLabel.Refresh();
    }
    private void RecitationsCancelSettingsLabel_Click(object sender, EventArgs e)
    {
        RecitationsDownloadGroupBox.Visible = false;
        RecitationsDownloadGroupBox.Refresh();
        RecitationsCancelSettingsLabel.Visible = RecitationsDownloadGroupBox.Visible;
        RecitationsCancelSettingsLabel.Refresh();
        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "settings.png"))
        {
            RecitationsApplySettingsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "settings.png");
        }
        ToolTip.SetToolTip(RecitationsApplySettingsLabel, L[l]["Setup recitations"]);
        PopulateRecitationsCheckedListBox();
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Translations
    ///////////////////////////////////////////////////////////////////////////////
    private int m_information_page_index = 0;
    private int m_information_box_top = DEFAULT_INFORMATION_BOX_TOP;
    private int m_translation_box_width = DEFAULT_TRANSLATION_BOX_WIDTH;
    private void TranslationSplitContainer_SplitterMoved(object sender, SplitterEventArgs e)
    {
        m_translation_box_width = this.TranslationSplitContainer.SplitterDistance;
    }
    private void TabControl_SelectedIndexChanged(object sender, EventArgs e)
    {
        m_information_page_index = TabControl.SelectedIndex;
    }
    private void TabControl_Click(object sender, EventArgs e)
    {
        if (TabControl.SelectedTab == UserTextTabPage)
        {
            m_user_text_mode = true;
            UserTextTextBox.Focus();
            CalculateCurrentValue();

            BuildLetterFrequencies();
            DisplayLetterFrequencies();
        }
    }
    private void TabControl_Enter(object sender, EventArgs e)
    {
    }
    private Font m_translation_font = null;
    private Color m_translation_color = DEFAULT_TRANSALTION_FONT_COLOR;
    private void TranslationFontLabel_Click(object sender, EventArgs e)
    {
        try
        {
            if (FontDialog != null)
            {
                FontDialog.ShowColor = true;
                FontDialog.ShowApply = true;
                FontDialog.Font = TranslationTextBox.Font;
                FontDialog.Color = TranslationTextBox.ForeColor;
                Font cancel_font = FontDialog.Font;
                Color cancel_color = FontDialog.Color;

                if (FontDialog.ShowDialog() == DialogResult.OK)
                {
                    m_translation_font = FontDialog.Font;
                    m_translation_color = FontDialog.Color;
                    ApplyTranslationFontAndColor();
                }
                else
                {
                    FontDialog.Font = cancel_font;
                    FontDialog.Color = cancel_color;
                    m_translation_font = cancel_font;
                    m_translation_color = cancel_color;
                    ApplyTranslationFontAndColor();
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
    }
    private void FontDialog_Apply(object sender, EventArgs e)
    {
        if (FontDialog != null)
        {
            m_translation_font = FontDialog.Font;
            m_translation_color = FontDialog.Color;
            ApplyTranslationFontAndColor();
        }
    }
    // translation
    private List<string> m_selected_translations = new List<string>();
    private void PopulateTranslatorsCheckedListBox()
    {
        try
        {
            // TRICK: to disable item in a list, just ignore user check using this trick
            TranslatorsCheckedListBox.ItemCheck += new ItemCheckEventHandler(TranslatorsCheckedListBox_ItemCheck);

            for (int i = 0; i < 3; i++) TranslatorsCheckedListBox.SelectedIndexChanged -= new EventHandler(TranslatorsCheckedListBox_SelectedIndexChanged);
            TranslatorsCheckedListBox.BeginUpdate();
            TranslatorsCheckedListBox.Items.Clear();

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.Verses != null)
                    {
                        if (m_client.Book.Verses.Count > 0)
                        {
                            m_selected_translations.Clear();
                            foreach (string key in m_client.Book.Verses[0].Translations.Keys)
                            {
                                m_selected_translations.Add(key);
                            }

                            // populate TranslatorsCheckedListBox
                            if (m_client.Book.TranslationInfos != null)
                            {
                                foreach (string key in m_client.Book.TranslationInfos.Keys)
                                {
                                    string name = m_client.Book.TranslationInfos[key].Name;
                                    bool is_checked = m_selected_translations.Contains(key);
                                    TranslatorsCheckedListBox.Items.Add(name, is_checked);
                                }

                                // disable list item if default so user cannot uncheck it
                                for (int i = 0; i < TranslatorsCheckedListBox.Items.Count; i++)
                                {
                                    string item_text = TranslatorsCheckedListBox.Items[i].ToString();
                                    foreach (string key in m_client.Book.TranslationInfos.Keys)
                                    {
                                        string name = m_client.Book.TranslationInfos[key].Name;
                                        if (name == item_text)
                                        {
                                            if (
                                                (key == Client.DEFAULT_EMLAAEI_TEXT) ||
                                                (key == Client.DEFAULT_TRANSLATION) ||
                                                (key == Client.DEFAULT_OLD_TRANSLATION) ||
                                                (key == Client.DEFAULT_TRANSLITERATION) ||
                                                (key == Client.DEFAULT_WORD_MEANINGS) ||
                                                (key == Client.DEFAULT_TRANSLATION_1) ||
                                                (key == Client.DEFAULT_TRANSLATION_2) ||
                                                (key == Client.DEFAULT_TRANSLATION_3) ||
                                                (key == Client.DEFAULT_TRANSLATION_4) ||
                                                (key == Client.DEFAULT_TRANSLATION_5) ||
                                                (key == Client.DEFAULT_TRANSLATION_6) ||
                                                (key == Client.DEFAULT_TRANSLATION_7)
                                               )
                                            {
                                                TranslatorsCheckedListBox.SetItemCheckState(i, CheckState.Indeterminate);
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            TranslatorsCheckedListBox.Sorted = true;
            TranslatorsCheckedListBox.EndUpdate();
            TranslatorsCheckedListBox.SelectedIndexChanged += new EventHandler(TranslatorsCheckedListBox_SelectedIndexChanged);
        }
    }
    private void TranslatorsCheckedListBox_ItemCheck(object sender, ItemCheckEventArgs e)
    {
        if (e.CurrentValue == CheckState.Indeterminate)
        {
            e.NewValue = e.CurrentValue;
        }
    }
    private void PopulateTranslatorComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) TranslatorComboBox.SelectedIndexChanged -= new EventHandler(TranslatorComboBox_SelectedIndexChanged);
            TranslatorComboBox.BeginUpdate();

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.Verses != null)
                    {
                        if (m_client.Book.Verses.Count > 0)
                        {
                            if (m_client.Book.Verses[0].Translations != null)
                            {
                                if (m_client.Book.Verses[0].Translations.Count == 0)
                                {
                                    DownloadTranslations();
                                }

                                string backup_translation_name = null;
                                if (TranslatorComboBox.SelectedItem != null)
                                {
                                    backup_translation_name = TranslatorComboBox.SelectedItem.ToString();
                                }

                                if (m_client.Book.TranslationInfos != null)
                                {
                                    TranslatorComboBox.Items.Clear();
                                    foreach (string key in m_client.Book.Verses[0].Translations.Keys)
                                    {
                                        string name = m_client.Book.TranslationInfos[key].Name;
                                        TranslatorComboBox.Items.Add(name);
                                    }

                                    if (!String.IsNullOrEmpty(backup_translation_name))
                                    {
                                        bool found = false;
                                        for (int i = 0; i < TranslatorComboBox.Items.Count; i++)
                                        {
                                            if (TranslatorComboBox.Items[i].ToString() == backup_translation_name)
                                            {
                                                found = true;
                                                break;
                                            }
                                        }
                                        if (found)
                                        {
                                            this.TranslatorComboBox.SelectedItem = backup_translation_name;
                                        }
                                        else
                                        {
                                            this.TranslatorComboBox.SelectedItem = m_client.Book.TranslationInfos[Client.DEFAULT_TRANSLATION].Name;
                                        }
                                    }
                                    else // if all translations were cleared, we still have the 3 mandatory ones at minimum
                                    {
                                        if (this.TranslatorComboBox.Items.Count >= 3)
                                        {
                                            this.TranslatorComboBox.SelectedItem = m_client.Book.TranslationInfos[Client.DEFAULT_TRANSLATION].Name;
                                        }
                                        else // if user deleted one or more of the 3 mandatory translations manually
                                        {
                                            if (this.TranslatorComboBox.Items.Count > 0)
                                            {
                                                this.TranslatorComboBox.SelectedItem = 0;
                                            }
                                            else // if no transaltion at all was left
                                            {
                                                TranslatorComboBox.SelectedIndex = -1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        catch
        {
            TranslatorComboBox.SelectedIndex = -1;
        }
        finally
        {
            TranslatorComboBox.Sorted = true;
            TranslatorComboBox.EndUpdate();
            TranslatorComboBox.SelectedIndexChanged += new EventHandler(TranslatorComboBox_SelectedIndexChanged);
        }
    }
    private void PopulateTranslatorsComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) TranslatorsComboBox.SelectedIndexChanged -= new EventHandler(TranslatorComboBox_SelectedIndexChanged);
            TranslatorsComboBox.BeginUpdate();

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.Verses != null)
                    {
                        if (m_client.Book.Verses.Count > 0)
                        {
                            if (m_client.Book.Verses[0].Translations != null)
                            {
                                if (m_client.Book.Verses[0].Translations.Count == 0)
                                {
                                    DownloadTranslations();
                                }

                                string backup_translation_name = null;
                                if (TranslatorsComboBox.SelectedItem != null)
                                {
                                    backup_translation_name = TranslatorsComboBox.SelectedItem.ToString();
                                }

                                if (m_client.Book.TranslationInfos != null)
                                {
                                    TranslatorsComboBox.Items.Clear();
                                    foreach (string key in m_client.Book.Verses[0].Translations.Keys)
                                    {
                                        string name = m_client.Book.TranslationInfos[key].Name;
                                        TranslatorsComboBox.Items.Add(name);
                                    }

                                    if (!String.IsNullOrEmpty(backup_translation_name))
                                    {
                                        bool found = false;
                                        for (int i = 0; i < TranslatorsComboBox.Items.Count; i++)
                                        {
                                            if (TranslatorsComboBox.Items[i].ToString() == backup_translation_name)
                                            {
                                                found = true;
                                                break;
                                            }
                                        }
                                        if (found)
                                        {
                                            this.TranslatorsComboBox.SelectedItem = backup_translation_name;
                                        }
                                        else
                                        {
                                            this.TranslatorsComboBox.SelectedItem = m_client.Book.TranslationInfos[Client.DEFAULT_TRANSLATION].Name;
                                        }
                                    }
                                    else // if all translations were cleared, we still have the 3 mandatory ones at minimum
                                    {
                                        if (this.TranslatorsComboBox.Items.Count >= 3)
                                        {
                                            this.TranslatorsComboBox.SelectedItem = m_client.Book.TranslationInfos[Client.DEFAULT_TRANSLATION].Name;
                                        }
                                        else // if user deleted one or more of the 3 mandatory translations manually
                                        {
                                            if (this.TranslatorsComboBox.Items.Count > 0)
                                            {
                                                this.TranslatorsComboBox.SelectedItem = 0;
                                            }
                                            else // if no transaltion at all was left
                                            {
                                                TranslatorsComboBox.SelectedIndex = -1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        catch
        {
            TranslatorsComboBox.SelectedIndex = -1;
        }
        finally
        {
            TranslatorsComboBox.Sorted = true;
            TranslatorsComboBox.EndUpdate();
            TranslatorsComboBox.SelectedIndexChanged += new EventHandler(TranslatorComboBox_SelectedIndexChanged);
        }
    }
    private void TranslatorsCheckedListBox_SelectedIndexChanged(object sender, EventArgs e)
    {
    }
    private void TranslationsApplySettingsLabel_Click(object sender, EventArgs e)
    {
        TranslatorsCheckedListBox.Visible = !TranslatorsCheckedListBox.Visible;
        TranslationsCancelSettingsLabel.Visible = TranslatorsCheckedListBox.Visible;

        if (TranslatorsCheckedListBox.Visible)
        {
            TranslatorsCheckedListBox.BringToFront();
            TranslationsCancelSettingsLabel.BringToFront();

            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "apply.png"))
            {
                TranslationsApplySettingsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "apply.png");
            }
            ToolTip.SetToolTip(TranslationsApplySettingsLabel, L[l]["Download translations"]);
        }
        else // download any newly checked translation(s)
        {
            TranslatorsCheckedListBox.SendToBack();
            TranslationsCancelSettingsLabel.SendToBack();

            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "settings.png"))
            {
                TranslationsApplySettingsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "settings.png");
            }
            ToolTip.SetToolTip(TranslationsApplySettingsLabel, L[l]["Add/Remove translations"]);

            int index_of_first_new_translation = DownloadTranslations();
            if ((index_of_first_new_translation >= 0) && (index_of_first_new_translation < TranslatorComboBox.Items.Count))
            {
                TranslatorComboBox.SelectedIndex = index_of_first_new_translation;
            }

            this.AcceptButton = null;
        }
    }
    private void TranslationsCancelSettingsLabel_Click(object sender, EventArgs e)
    {
        TranslatorsCheckedListBox.Visible = false;
        TranslatorsCheckedListBox.SendToBack();
        TranslationsCancelSettingsLabel.SendToBack();
        TranslationsCancelSettingsLabel.Visible = false;

        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "settings.png"))
        {
            TranslationsApplySettingsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "settings.png");
        }
        ToolTip.SetToolTip(TranslationsApplySettingsLabel, L[l]["Add/Remove translations"]);

        // remove any new user checkes 
        PopulateTranslatorsCheckedListBox();

        this.AcceptButton = null;
    }
    private bool m_show_all_translations = true;
    private void AllTranslatorsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_show_all_translations = AllTranslatorsCheckBox.Checked;
        TranslatorsComboBox.Enabled = !m_show_all_translations;
        TranslatorComboBox_SelectedIndexChanged(null, null);
        ApplyTranslationFontAndColor();
    }
    private void TranslatorComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (m_selection_mode)
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                if (m_found_verses_displayed)
                {
                    verses = m_client.FoundVerses;
                }
                else
                {
                    if (m_client.Selection != null)
                    {
                        verses = m_client.Selection.Verses;
                    }
                }

                if (verses != null)
                {
                    DisplayTranslations(verses);
                }
            }
        }
        else
        {
            if ((m_translated_verses != null) && (m_translated_verses.Count > 1))
            {
                DisplayTranslations(m_translated_verses);
            }
            else // single verse
            {
                Verse verse = GetCurrentVerse();
                if (verse != null)
                {
                    DisplayTranslations(verse);
                }
            }
        }
    }
    private bool m_translation_readonly = true;
    private void EditSaveTranslationLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            m_translation_readonly = !m_translation_readonly;
            UpdateTranslationReadOnly();

            if (!m_translation_readonly) // Edit
            {
                if (m_player != null)
                {
                    if (m_player.Playing)
                    {
                        PlayerPlayLabel_Click(null, null); // pause
                    }
                }
            }
            else // Save
            {
                SaveTranslation();
                if (m_player != null)
                {
                    if (m_player.Paused)
                    {
                        PlayerPlayLabel_Click(null, null); // resume
                    }
                }
            }
        }
        finally
        {
            Thread.Sleep(100);
            this.Cursor = Cursors.Default;
        }
    }
    private void UpdateTranslationReadOnly()
    {
        TranslationTextBox.ReadOnly = m_translation_readonly;
        TranslationTextBox.BackColor = m_translation_readonly ? Color.LightGray : SystemColors.Window;

        if (m_translation_readonly)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "text_unlocked.png"))
            {
                EditSaveTranslationLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "text_unlocked.png");
            }
            ToolTip.SetToolTip(EditSaveTranslationLabel, L[l]["Edit translation"]);
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "save.png"))
            {
                EditSaveTranslationLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "save.png");
            }
            ToolTip.SetToolTip(EditSaveTranslationLabel, L[l]["Save translation"]);
        }
        EditSaveTranslationLabel.Refresh();
    }
    private void TranslationTextBox_KeyPress(object sender, KeyPressEventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (ModifierKeys == Keys.Control)
            {
                if (e.KeyChar == 19) // Ctrl+S == 19 
                {
                    if (!m_translation_readonly)
                    {
                        SaveTranslation();
                        if (m_player != null)
                        {
                            if (m_player.Paused)
                            {
                                PlayerPlayLabel_Click(null, null); // resume
                            }
                        }

                        e.Handled = true; // stop annoying beep for no default button defined
                    }
                }
            }
        }
        finally
        {
            Thread.Sleep(100);
            this.Cursor = Cursors.Default;
        }
    }
    private void SaveTranslation()
    {
        Verse verse = GetCurrentVerse();
        if (verse != null)
        {
            if (m_client != null)
            {
                string translation = Client.DEFAULT_TRANSLATION;
                if (TranslatorComboBox.SelectedItem != null)
                {
                    translation = m_client.GetTranslationKey(TranslatorComboBox.SelectedItem.ToString());
                }

                int index = TranslationTextBox.Text.IndexOf(VERSE_ADDRESS_TRANSLATION_SEPARATOR);
                verse.Translations[translation] = TranslationTextBox.Text.Substring(index + 1);

                m_client.SaveTranslation(translation);

                DisplayTranslations(verse);
            }
        }
    }
    private int DownloadTranslations()
    {
        int index_of_first_new_transaltion = -1;

        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                m_selected_translations.Clear();
                if (m_client.Book.TranslationInfos != null)
                {
                    try
                    {
                        foreach (string key in m_client.Book.TranslationInfos.Keys)
                        {
                            if (
                                (key == Client.DEFAULT_EMLAAEI_TEXT) ||
                                (key == Client.DEFAULT_TRANSLATION) ||
                                (key == Client.DEFAULT_OLD_TRANSLATION) ||
                                (key == Client.DEFAULT_TRANSLITERATION) ||
                                (key == Client.DEFAULT_WORD_MEANINGS) ||
                                (key == Client.DEFAULT_TRANSLATION_1) ||
                                (key == Client.DEFAULT_TRANSLATION_2) ||
                                (key == Client.DEFAULT_TRANSLATION_3) ||
                                (key == Client.DEFAULT_TRANSLATION_4) ||
                                (key == Client.DEFAULT_TRANSLATION_5) ||
                                (key == Client.DEFAULT_TRANSLATION_6) ||
                                (key == Client.DEFAULT_TRANSLATION_7)
                               )
                            {
                                m_selected_translations.Add(key);
                            }
                            else
                            {
                                foreach (int index in TranslatorsCheckedListBox.CheckedIndices)
                                {
                                    if (m_client.Book.TranslationInfos[key].Name == TranslatorsCheckedListBox.Items[index].ToString())
                                    {
                                        m_selected_translations.Add(key);
                                        break;
                                    }
                                }
                            }
                        }

                        ProgressBar.Minimum = 0;
                        ProgressBar.Maximum = m_selected_translations.Count;
                        ProgressBar.Value = 0;
                        ProgressBar.Refresh();

                        string[] keys = new string[m_client.Book.TranslationInfos.Keys.Count];
                        m_client.Book.TranslationInfos.Keys.CopyTo(keys, 0);
                        foreach (string key in keys)
                        {
                            if (m_selected_translations.Contains(key))
                            {
                                ProgressBar.Value++;
                                ProgressBar.Refresh();
                                string translations_path = Globals.TRANSLATIONS_FOLDER + "/" + key + ".txt";
                                string offline_path = Globals.TRANSLATIONS_OFFLINE_FOLDER + "/" + key + ".txt";

                                // delete file in translations_path if invalid
                                if (File.Exists(translations_path))
                                {
                                    long filesize = (new FileInfo(translations_path)).Length;
                                    if (filesize < 1024) // < 1kb invalid file
                                    {
                                        File.Delete(translations_path);
                                    }
                                }

                                // delete file in offline_path if invalid
                                if (File.Exists(offline_path))
                                {
                                    long filesize = (new FileInfo(offline_path)).Length;
                                    if (filesize < 1024) // < 1kb invalid file
                                    {
                                        File.Delete(offline_path);
                                    }
                                }

                                if (!File.Exists(translations_path))
                                {
                                    // download file to offline_path
                                    if (!File.Exists(offline_path))
                                    {
                                        DownloadFile(TranslationInfo.UrlPrefix + m_client.Book.TranslationInfos[key].Url, offline_path);
                                    }

                                    // copy to translations_path
                                    if (File.Exists(offline_path))
                                    {
                                        long filesize = (new FileInfo(offline_path)).Length;
                                        if (filesize < 1024) // < 1kb invalid file
                                        {
                                            File.Delete(offline_path);
                                            m_client.UnloadTranslation(key);
                                        }
                                        else // copy valid file
                                        {
                                            File.Copy(offline_path, translations_path);
                                            m_client.LoadTranslation(key);
                                        }
                                    }

                                    // get index of first new translation
                                    if (index_of_first_new_transaltion == -1)
                                    {
                                        int index_of_new_transaltion = -1;
                                        foreach (int index in TranslatorsCheckedListBox.CheckedIndices)
                                        {
                                            index_of_new_transaltion++;
                                            if (m_client.Book.TranslationInfos[key].Name == TranslatorsCheckedListBox.Items[index].ToString())
                                            {
                                                index_of_first_new_transaltion = index_of_new_transaltion;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            else // unload translation
                            {
                                if (File.Exists(Globals.TRANSLATIONS_FOLDER + "/" + key + ".txt"))
                                {
                                    m_client.UnloadTranslation(key);
                                    File.Delete(Globals.TRANSLATIONS_FOLDER + "/" + key + ".txt");
                                }
                            }

                            Application.DoEvents();
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message, Application.ProductName);
                    }
                    finally
                    {
                        PopulateTranslatorsCheckedListBox();
                        PopulateTranslatorComboBox();
                        PopulateTranslatorsComboBox();

                        if (m_client.Selection != null)
                        {
                            List<Verse> verses = m_client.Selection.Verses;
                            if (verses.Count > 0)
                            {
                                ProgressBar.Minimum = 1;
                                ProgressBar.Maximum = m_client.Book.Verses.Count;
                                ProgressBar.Value = verses[0].Number;
                                ProgressBar.Refresh();
                            }
                        }
                    }
                }
            }
        }

        return index_of_first_new_transaltion;
    }
    private List<Verse> m_translated_verses = new List<Verse>();
    private void DisplayTranslations(List<Verse> verses)
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            //if (
            //    (TabControl.SelectedTab == TranslationTabPage) ||
            //    (TabControl.SelectedTab == GrammarTabPage) ||
            //    (TabControl.SelectedTab == RelatedWordsTabPage)
            //   )
            {
                if (verses != null)
                {
                    if (verses.Count > 0)
                    {
                        if (verses.Count == 1)
                        {
                            DisplayTranslations(verses[0]);
                        }
                        else
                        {
                            StringBuilder str = new StringBuilder();
                            if (TranslatorComboBox.SelectedItem != null)
                            {
                                if (m_client != null)
                                {
                                    string name = TranslatorComboBox.SelectedItem.ToString();
                                    string key = m_client.GetTranslationKey(name);
                                    if (key != null)
                                    {
                                        foreach (Verse verse in verses)
                                        {
                                            if (verse.Translations.ContainsKey(key))
                                            {
                                                str.AppendLine(verse.PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verse.Translations[key]);
                                            }
                                        }
                                        if (str.Length > 2)
                                        {
                                            str.Remove(str.Length - 2, 2);
                                        }
                                    }
                                }
                            }
                            TranslationTextBox.WordWrap = false;
                            TranslationTextBox.Text = str.ToString();
                            TranslationTextBox.Refresh();

                            StringBuilder strs = new StringBuilder();
                            if (m_show_all_translations)
                            {
                                if (m_selected_translations.Count > 0)
                                {
                                    foreach (string key in m_selected_translations)
                                    {
                                        if (verses[0].Translations.ContainsKey(key))
                                        {
                                            //strs.AppendLine("[" + key.Pad(13) + "]\t" + verses[0].PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verses[0].Translations[key]);
                                            strs.AppendLine(verses[0].PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verses[0].Translations[key]);
                                        }
                                    }
                                    if (strs.Length > 2)
                                    {
                                        strs.Remove(strs.Length - 2, 2);
                                    }
                                }

                                TranslationsTextBox.WordWrap = false;
                                TranslationsTextBox.Text = strs.ToString();
                                TranslationsTextBox.Refresh();
                            }
                            else
                            {
                                if (TranslatorsComboBox.SelectedItem != null)
                                {
                                    if (m_client != null)
                                    {
                                        string name = TranslatorsComboBox.SelectedItem.ToString();
                                        string key = m_client.GetTranslationKey(name);
                                        if (key != null)
                                        {
                                            foreach (Verse verse in verses)
                                            {
                                                if (verse.Translations.ContainsKey(key))
                                                {
                                                    strs.AppendLine(verse.PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verse.Translations[key]);
                                                }
                                            }
                                            if (strs.Length > 2)
                                            {
                                                strs.Remove(strs.Length - 2, 2);
                                            }
                                        }
                                    }
                                }
                                TranslationsTextBox.WordWrap = true;
                                TranslationsTextBox.Text = strs.ToString();
                                TranslationsTextBox.Refresh();
                            }

                            if (m_translated_verses != verses)
                            {
                                if (m_translated_verses != null)
                                {
                                    m_translated_verses.Clear();
                                    m_translated_verses.AddRange(verses);
                                }
                            }

                            m_translation_readonly = true;
                            UpdateTranslationReadOnly();
                            EditSaveTranslationLabel.Enabled = (verses.Count == 1);
                        }
                    }
                    else // no verse is selected
                    {
                        TranslationTextBox.WordWrap = false;
                        TranslationTextBox.Text = null;
                        TranslationTextBox.Refresh();

                        TranslationsTextBox.WordWrap = false;
                        TranslationsTextBox.Text = null;
                        TranslationsTextBox.Refresh();

                        m_translation_readonly = true;
                        UpdateTranslationReadOnly();
                        EditSaveTranslationLabel.Enabled = false;
                    }
                }
            }
        }
    }
    private void DisplayTranslations(Verse verse)
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            //if (
            //    (TabControl.SelectedTab == TranslationTabPage) ||
            //    (TabControl.SelectedTab == GrammarTabPage) ||
            //    (TabControl.SelectedTab == RelatedWordsTabPage)
            //   )
            {
                if (verse != null)
                {
                    StringBuilder str = new StringBuilder();
                    if (TranslatorComboBox.SelectedItem != null)
                    {
                        if (m_client != null)
                        {
                            string name = TranslatorComboBox.SelectedItem.ToString();
                            string key = m_client.GetTranslationKey(name);
                            if (key != null)
                            {
                                if (verse.Translations.ContainsKey(key))
                                {
                                    str.Append(verse.PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verse.Translations[key]);
                                }
                            }
                        }
                    }
                    TranslationTextBox.WordWrap = true;
                    TranslationTextBox.Text = str.ToString();
                    TranslationTextBox.Refresh();

                    StringBuilder strs = new StringBuilder();
                    if (m_show_all_translations)
                    {
                        if (m_selected_translations.Count > 0)
                        {
                            foreach (string key in m_selected_translations)
                            {
                                if (verse.Translations.ContainsKey(key))
                                {
                                    //strs.AppendLine("[" + key.Pad(13) + "]\t" + verse.PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verse.Translations[key]);
                                    strs.AppendLine(verse.PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verse.Translations[key]);
                                }
                            }
                            if (strs.Length > 2)
                            {
                                strs.Remove(strs.Length - 2, 2);
                            }
                        }
                        TranslationsTextBox.WordWrap = false;
                        TranslationsTextBox.Text = strs.ToString();
                        TranslationsTextBox.Refresh();
                    }
                    else
                    {
                        if (TranslatorsComboBox.SelectedItem != null)
                        {
                            if (m_client != null)
                            {
                                string name = TranslatorsComboBox.SelectedItem.ToString();
                                string key = m_client.GetTranslationKey(name);
                                if (key != null)
                                {
                                    if (verse.Translations.ContainsKey(key))
                                    {
                                        strs.Append(verse.PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verse.Translations[key]);
                                    }
                                }
                            }
                        }
                        TranslationsTextBox.WordWrap = true;
                        TranslationsTextBox.Text = strs.ToString();
                        TranslationsTextBox.Refresh();
                    }

                    if (m_translated_verses != null)
                    {
                        m_translated_verses.Clear();
                        m_translated_verses.Add(verse);
                    }

                    m_translation_readonly = true;
                    UpdateTranslationReadOnly();
                    EditSaveTranslationLabel.Enabled = true;
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Grammar/RelatedWords
    ///////////////////////////////////////////////////////////////////////////////
    private Word m_current_word = null;
    private Word m_info_word = null;
    private string GetWordInformation(Word word)
    {
        if (m_emlaaei_text) return null;

        if (word != null)
        {
            StringBuilder roots = new StringBuilder();
            if (word.Roots != null)
            {
                if (word.Roots.Count > 0)
                {
                    foreach (string root in word.Roots)
                    {
                        roots.Append(root + " | ");
                    }
                    roots.Remove(roots.Length - 3, 3);
                }
            }

            return
                word.Transliteration + SPACE_GAP +
                word.Text + SPACE_GAP +
                word.Meaning + SPACE_GAP +
                roots + "\r\n" +
                L[l]["chapter"] + "  " + word.Verse.Chapter.SortedNumber /*+ " " + word.Verse.Chapter.Name*/ + SPACE_GAP +
                L[l]["verse"] + "  " + word.Verse.NumberInChapter /*+ "-" + word.Verse.Number*/ + SPACE_GAP +
                L[l]["word"] + "  " + word.NumberInVerse /*+ "-" + word.NumberInChapter + "-" + word.Number*/ + SPACE_GAP + SPACE_GAP + SPACE_GAP +
                word.Occurrence.ToString() + "/" + word.Frequency.ToString();
        }
        return null;
    }
    private string GetGrammarInformation(Word word)
    {
        if (m_emlaaei_text) return null;

        if (word != null)
        {
            string grammar_info = "";

            //if (word.Lemma != null)
            //{
            //    grammar_info += "Lemma\t" + word.Lemma + "\t";
            //}
            //if (word.Root != null)
            //{
            //    grammar_info += "Root\t" + word.Root + "\t";
            //}
            //if (word.SpecialGroup != null)
            //{
            //    grammar_info += "Special Group\t" + word.SpecialGroup + "\t";
            //}
            //if (grammar_info.Length > 0)
            //{
            //    grammar_info += "\r\n";
            //}

            grammar_info += word.ArabicGrammar;
            grammar_info += "\r\n";
            grammar_info += word.EnglishGrammar;

            return grammar_info;
        }
        return null;
    }
    private string GetRelatedWordsInformation(Word word)
    {
        if (m_emlaaei_text) return null;

        if (word != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    string result = null;
                    int words_per_line = 0;
                    int max_words_per_line = 10;
                    List<Word> related_words = m_client.Book.GetRelatedWords(word);
                    int word_count = related_words.Count;
                    related_words = related_words.RemoveDuplicates();
                    int unique_word_count = related_words.Count;
                    if (related_words != null)
                    {
                        StringBuilder str = new StringBuilder();
                        str.AppendLine(word_count.ToString() + " (" + unique_word_count.ToString() + ")" + "  " + L[l]["related words"]);

                        if (related_words.Count > 0)
                        {
                            foreach (Word related_word in related_words)
                            {
                                words_per_line++;
                                str.Append(related_word.Text + (((words_per_line % max_words_per_line) == 0) ? "\r\n" : "\t"));
                            }
                            if (str.Length > 1)
                            {
                                str.Remove(str.Length - 1, 1); // \t
                            }
                            str.AppendLine();

                            result = str.ToString();
                        }
                    }
                    return result;
                }
            }
        }
        return null;
    }
    private string GetRelatedVersesInformation(Word word)
    {
        if (m_emlaaei_text) return null;

        if (word != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    string result = null;
                    List<Verse> related_verses = m_client.Book.GetRelatedWordVerses(word);
                    if (related_verses != null)
                    {
                        StringBuilder str = new StringBuilder();
                        str.AppendLine(related_verses.Count.ToString() + "  " + L[l]["related verses"]);

                        foreach (Verse related_verse in related_verses)
                        {
                            str.AppendLine(related_verse.Text);
                        }
                        str.AppendLine();

                        result = str.ToString();
                    }
                    return result;
                }
            }
        }
        return null;
    }
    private void DisplayRelatedWordsInformation(Word word)
    {
        if (m_emlaaei_text) return;

        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            //if (
            //    (TabControl.SelectedTab == TranslationTabPage) ||
            //    (TabControl.SelectedTab == GrammarTabPage) ||
            //    (TabControl.SelectedTab == RelatedWordsTabPage)
            //   )
            {
                if (word != null)
                {
                    RelatedWordsTextBox.Text = GetRelatedWordsInformation(m_current_word) + "\r\n" + GetRelatedVersesInformation(m_current_word);
                    RelatedWordsTextBox.Refresh();

                    m_info_word = word;
                }
                else
                {
                    RelatedWordsTextBox.Text = L[l]["Click a word to display words from the same root and all verses."];
                    RelatedWordsTextBox.Refresh();

                    m_info_word = null;
                }
            }
        }
    }
    private void DisplayGrammarInformation(Word word)
    {
        if (m_emlaaei_text) return;

        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            //if (
            //    (TabControl.SelectedTab == TranslationTabPage) ||
            //    (TabControl.SelectedTab == GrammarTabPage) ||
            //    (TabControl.SelectedTab == RelatedWordsTabPage)
            //   )
            {
                if (word != null)
                {
                    string word_grammar = GetGrammarInformation(m_current_word);
                    if (!String.IsNullOrEmpty(word_grammar))
                    {
                        GrammarTextBox.Text = word_grammar;
                    }
                    else
                    {
                        GrammarTextBox.Text = L[l]["Click a word to display its grammar information in Arabic and English"];
                    }
                    GrammarTextBox.Refresh();

                    m_info_word = word;
                }
                else
                {
                    GrammarTextBox.Text = L[l]["Click a word to display its grammar information in Arabic and English"];
                    GrammarTextBox.Refresh();

                    m_info_word = null;
                }
            }
        }
    }
    private void RelatedWordsTextBox_TextChanged(object sender, EventArgs e)
    {
        if (m_emlaaei_text) return;

        RelatedWordsButton.Enabled = (RelatedWordsTextBox.Text.Length > 0);
    }
    private void RelatedWordsButton_Click(object sender, EventArgs e)
    {
        if (m_emlaaei_text) return;

        if (m_info_word != null)
        {
            FindRelatedWords(m_info_word);
        }
    }
    private void FindRelatedWords(Word word)
    {
        if (m_emlaaei_text) return;

        if (word != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    string text = word.Text;
                    text = RemovePunctuationMarks(text);

                    FindByTextTextBox.Text = text;
                    FindByTextTextBox.Refresh();
                    text = word.BestRoot;
                    FindByRoot(text);
                }
            }
        }
    }
    private void UpdateMouseCursor()
    {
        if (m_emlaaei_text)
        {
            // stop cursor flicker
            if (m_active_textbox.Cursor != Cursors.IBeam)
            {
                m_active_textbox.Cursor = Cursors.IBeam;
            }
        }
        else
        {
            if (m_active_textbox != null)
            {
                if (ModifierKeys == Keys.Control)
                {
                    // stop cursor flicker
                    if (m_active_textbox.Cursor != Cursors.Hand)
                    {
                        m_active_textbox.Cursor = Cursors.Hand;
                    }
                }
                else
                {
                    // stop cursor flicker
                    if (m_active_textbox.Cursor != Cursors.IBeam)
                    {
                        m_active_textbox.Cursor = Cursors.IBeam;
                    }
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Symmetry
    ///////////////////////////////////////////////////////////////////////////////
    private enum SymmetryType
    {
        WordLetters,
        VerseWords,
        VerseLetters
    };
    private bool m_symmetry_include_boundary_cases = false;
    private void PopulateSymmetryTypeComboBox()
    {
        SymmetryTypeComboBox.Items.Clear();
        try
        {
            for (int i = 0; i < 3; i++) SymmetryTypeComboBox.SelectedIndexChanged -= new EventHandler(SymmetryTypeComboBox_SelectedIndexChanged);

            SymmetryTypeComboBox.BeginUpdate();
            SymmetryTypeComboBox.Items.Clear();
            foreach (SymmetryType item in Enum.GetValues(typeof(SymmetryType)))
            {
                SymmetryTypeComboBox.Items.Add(item);
            }
            if (SymmetryTypeComboBox.Items.Count > 0)
            {
                SymmetryTypeComboBox.SelectedIndex = 0;
            }
        }
        finally
        {
            SymmetryTypeComboBox.EndUpdate();
            SymmetryTypeComboBox.SelectedIndexChanged += new EventHandler(SymmetryTypeComboBox_SelectedIndexChanged);
        }
    }
    private void SymmetryTypeComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (SymmetryTypeComboBox.SelectedItem != null)
        {
            SymmetryType symmetry_type = (SymmetryType)Enum.Parse(typeof(SymmetryType), SymmetryTypeComboBox.SelectedItem.ToString());
            if (!String.IsNullOrEmpty(m_current_text))
            {
                SymmetryTextBox.Text = BuildSymmetry(symmetry_type, m_current_text);
            }
        }
    }
    private string BuildSymmetry(SymmetryType symmetry_type, string text)
    {
        if (String.IsNullOrEmpty(text)) return null;

        StringBuilder str = new StringBuilder();

        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                if (m_client.Selection != null)
                {
                    text = text.SimplifyTo(m_client.NumerologySystem.TextMode);
                    text = text.Replace("\r", "");
                    text = text.Replace("\t", "");
                    text = text.Replace("_", "");
                    text = text.Replace(Constants.OPEN_BRACKET, "");
                    text = text.Replace(Constants.CLOSE_BRACKET, "");
                    foreach (char character in Constants.INDIAN_DIGITS)
                    {
                        text = text.Replace(character.ToString(), "");
                    }
                    foreach (char character in Constants.QURANMARKS)
                    {
                        text = text.Replace(character.ToString(), "");
                    }
                    foreach (char character in Constants.STOPMARKS)
                    {
                        text = text.Replace(character.ToString(), "");
                    }
                    text = text.Replace("\n ", "\n"); // quran marks
                    text = text.Replace(" \n", "\n"); // sijood marks
                    while (text.Contains("  "))
                    {
                        text = text.Replace("  ", " ");
                    }
                    text = text.Trim();

                    switch (symmetry_type)
                    {
                        case SymmetryType.WordLetters:
                            {
                                str.AppendLine("WORDS\t#\tWords\tLetters\tWSum\tLSum");

                                text = text.Replace("\n", " ");
                                string[] words = text.Split(' ');

                                int count = 0;
                                int w_sum = 0;
                                int l_sum = 0;
                                int max = words.Length - 1;
                                if (m_symmetry_include_boundary_cases)
                                {
                                    // 0, 0
                                    count++;
                                    w_sum += 0;
                                    l_sum += 0;
                                    //             WORDS                            #                         Words        Letters      WSum         LSum
                                    str.AppendLine(words.Length.ToString() + "\t" + count.ToString() + "\t" + "0" + "\t" + "0" + "\t" + "0" + "\t" + "0");

                                    // all words, all letters
                                    max++;
                                }

                                int a = 0;
                                int z = 0;
                                for (int i = 0; i < max; i++)
                                {
                                    int j = words.Length - 1 - i;

                                    a += words[i].Length;
                                    z += words[j].Length;
                                    if (a == z)
                                    {
                                        count++;
                                        w_sum += (i + 1);
                                        l_sum += a;
                                        //             WORDS                            #                         Words                       Letters               WSum                      LSum
                                        str.AppendLine(words.Length.ToString() + "\t" + count.ToString() + "\t" + (i + 1).ToString() + "\t" + a.ToString() + "\t" + w_sum.ToString() + "\t" + l_sum.ToString());
                                    }
                                }

                                str.AppendLine("Symmetry:" + "\t\t" + ((double)((count - (m_symmetry_include_boundary_cases ? 2 : 0)) * 100.0D) / (double)words.Length).ToString("0.000") + "%");
                            }
                            break;
                        case SymmetryType.VerseWords:
                            {
                                str.AppendLine("VERSES\t#\tVerses\tWords\tVSum\tWSum");

                                string[] verses = text.Split('\n');

                                int count = 0;
                                int v_sum = 0;
                                int w_sum = 0;
                                int max = verses.Length - 1;
                                if (m_symmetry_include_boundary_cases)
                                {
                                    // 0, 0
                                    count++;
                                    v_sum += 0;
                                    w_sum += 0;
                                    //             VERSES                            #                         Verses        Words       VSum         WSum
                                    str.AppendLine(verses.Length.ToString() + "\t" + count.ToString() + "\t" + "0" + "\t" + "0" + "\t" + "0" + "\t" + "0");

                                    // all verses, all words
                                    max++;
                                }

                                int a = 0;
                                int z = 0;
                                for (int i = 0; i < max; i++)
                                {
                                    int j = verses.Length - 1 - i;

                                    a += verses[i].Split(' ').Length;
                                    z += verses[j].Split(' ').Length;
                                    if (a == z)
                                    {
                                        count++;
                                        v_sum += (i + 1);
                                        w_sum += a;
                                        //             VERSES                            #                         Verses                      Words                 VSum                      WSum
                                        str.AppendLine(verses.Length.ToString() + "\t" + count.ToString() + "\t" + (i + 1).ToString() + "\t" + a.ToString() + "\t" + v_sum.ToString() + "\t" + w_sum.ToString());
                                    }
                                }

                                str.AppendLine("Symmetry:" + "\t\t" + ((double)((count - (m_symmetry_include_boundary_cases ? 2 : 0)) * 100.0D) / (double)verses.Length).ToString("0.000") + "%");
                            }
                            break;
                        case SymmetryType.VerseLetters:
                            {
                                str.AppendLine("VERSES\t#\tVerses\tLetters\tVSum\tLSum");

                                string[] verses = text.Split('\n');

                                int count = 0;
                                int v_sum = 0;
                                int l_sum = 0;
                                int max = verses.Length - 1;
                                if (m_symmetry_include_boundary_cases)
                                {
                                    // 0, 0
                                    count++;
                                    v_sum += 0;
                                    l_sum += 0;
                                    //             VERSES                            #                         Verses       Letters      VSum         LSum
                                    str.AppendLine(verses.Length.ToString() + "\t" + count.ToString() + "\t" + "0" + "\t" + "0" + "\t" + "0" + "\t" + "0");

                                    // all verses, all letters
                                    max++;
                                }

                                int a = 0;
                                int z = 0;
                                for (int i = 0; i < max; i++)
                                {
                                    int j = verses.Length - 1 - i;

                                    a += verses[i].Replace(" ", "").Length;
                                    z += verses[j].Replace(" ", "").Length;
                                    if (a == z)
                                    {
                                        count++;
                                        v_sum += (i + 1);
                                        l_sum += a;
                                        //             VERSES                            #                         Verses                      Letters               VSum                      LSum
                                        str.AppendLine(verses.Length.ToString() + "\t" + count.ToString() + "\t" + (i + 1).ToString() + "\t" + a.ToString() + "\t" + v_sum.ToString() + "\t" + l_sum.ToString());
                                    }
                                }

                                str.AppendLine("Symmetry:" + "\t\t" + ((double)((count - (m_symmetry_include_boundary_cases ? 2 : 0)) * 100.0D) / (double)verses.Length).ToString("0.000") + "%");
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        return str.ToString().Trim();
    }
    private void DisplaySymmetry()
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            //if (TabControl.SelectedTab == SymmetryTabPage)
            {
                SymmetryTypeComboBox_SelectedIndexChanged(null, null);
            }
        }
    }
    private void SymmetryIncludeBoundaryCasesCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_symmetry_include_boundary_cases = SymmetryIncludeBoundaryCasesCheckBox.Checked;
        SymmetryTypeComboBox_SelectedIndexChanged(null, null);
    }
    private void SymmetryInspectLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                string filename = SymmetryTypeComboBox.SelectedItem.ToString() + "_" + (m_symmetry_include_boundary_cases ? "Boundaries" : "") + "_" + m_client.NumerologySystem.TextMode + "_" + GetSelectionSummary().Replace(" ", "") + "_" + Globals.OUTPUT_FILE_EXT;
                if (Directory.Exists(Globals.STATISTICS_FOLDER))
                {
                    string path = Globals.STATISTICS_FOLDER + "/" + filename;
                    FileHelper.SaveText(path, SymmetryTextBox.Text);
                    FileHelper.DisplayFile(path);
                }
            }
        }
    }
    // all symmetries: CalculateWordSymmetry
    private void ChapterPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Chapter, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void ChapterVerseWordLetterPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Verse, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void PagePositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Page, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void StationPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Station, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void PartPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Part, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void GroupPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Group, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void HalfPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Half, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void QuarterPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Quarter, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void BowingPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Bowing, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void VerseWordLetterPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Book, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region C+V Maths
    ///////////////////////////////////////////////////////////////////////////////
    private long m_maths_divisor = DEFAULT_DIVISOR;
    private bool m_maths_update_global_divisor = false;
    private void MathsDivisorNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        m_maths_divisor = (long)MathsDivisorNumericUpDown.Value;
        UpdateMathsChapterVerseSums();

        if (m_maths_update_global_divisor)
        {
            m_divisor = m_maths_divisor;
            DivisorValueLabel.Text = m_divisor.ToString();
        }
    }
    private void MathsUpdateDivisorCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_maths_update_global_divisor = MathsUpdateDivisorCheckBox.Checked;
        if (m_maths_update_global_divisor)
        {
            m_divisor = m_maths_divisor;
        }
        else
        {
            m_divisor = DEFAULT_DIVISOR;
        }
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private void MathsInterestingNumbersEditLabel_Click(object sender, EventArgs e)
    {
        // display the interesting.txt file for live editing using ISubscriber
        string filename = Globals.NUMBERS_FOLDER + "/" + "interesting_numbers.txt";
        FileHelper.DisplayFile(filename);
    }

    private List<Verse> m_maths_verses = null;
    private bool m_maths_abs_cminusv = false;
    private bool m_maths_vdividec = false;
    private void MathsChaptersCMinusVSumLabel_Click(object sender, EventArgs e)
    {
        m_maths_abs_cminusv = !m_maths_abs_cminusv;
        MathsChaptersCMinusVSumLabel.Text = m_maths_abs_cminusv ? "|C - V|" : "C -- V";
        UpdateMathsChapterVerseSums();
    }
    private void MathsChaptersCDivideVSumLabel_Click(object sender, EventArgs e)
    {
        m_maths_vdividec = !m_maths_vdividec;
        MathsChaptersCDivideVSumLabel.Text = m_maths_vdividec ? "V ÷ C" : "C ÷ V";
        UpdateMathsChapterVerseSums();
    }
    private void UpdateMathsChapterVerseSums()
    {
        DisplayMathsChapterVerseSums(m_maths_verses);
    }
    private void DisplayMathsChapterVerseSums(List<Verse> verses)
    {
        DisplayMathsChapterSums(verses);
        DisplayMathsChapterSumRatios(verses);

        DisplayMathsVerseSums(verses);
        DisplayMathsVerseSumRatios(verses);
    }
    private void DisplayMathsChapterSums(List<Verse> verses)
    {
        //if (TabControl.SelectedTab == MathsTabPage)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (verses != null)
                    {
                        m_maths_verses = verses;

                        List<Chapter> chapters = m_client.Book.GetChapters(m_maths_verses);
                        if (chapters != null)
                        {
                            long C = 0;  // all
                            long oC = 0; // odd
                            long eC = 0; // even
                            long pC = 0; // prime
                            long cC = 0; // composite
                            long V = 0;
                            long oV = 0;
                            long eV = 0;
                            long pV = 0;
                            long cV = 0;
                            long CPlusV = 0;
                            long oCPlusV = 0;
                            long eCPlusV = 0;
                            long pCPlusV = 0;
                            long cCPlusV = 0;
                            long CMinusV = 0;
                            long oCMinusV = 0;
                            long eCMinusV = 0;
                            long pCMinusV = 0;
                            long cCMinusV = 0;
                            long CMultiplyV = 0;
                            long oCMultiplyV = 0;
                            long eCMultiplyV = 0;
                            long pCMultiplyV = 0;
                            long cCMultiplyV = 0;
                            double CDivideV = 0;
                            double oCDivideV = 0;
                            double eCDivideV = 0;
                            double pCDivideV = 0;
                            double cCDivideV = 0;
                            foreach (Chapter chapter in chapters)
                            {
                                long chapter_number = chapter.SortedNumber;
                                long verse_count = chapter.Verses.Count;
                                long cplusv = chapter_number + verse_count;
                                long cminusv = m_maths_abs_cminusv ? Math.Abs(chapter_number - verse_count) : (chapter_number - verse_count);
                                long cmultiplyv = chapter_number * verse_count;
                                double cdividev = m_maths_vdividec ? ((double)verse_count / (double)chapter_number) : ((double)chapter_number / (double)verse_count);

                                C += chapter_number;
                                if (Numbers.IsOdd(chapter_number))
                                {
                                    oC += chapter_number;
                                }
                                else
                                {
                                    eC += chapter_number;
                                }
                                if (Numbers.IsPrime(chapter_number))
                                {
                                    pC += chapter_number;
                                }
                                else if (Numbers.IsComposite(chapter_number))
                                {
                                    cC += chapter_number;
                                }
                                else //if (chapter_number == 1)
                                {
                                }

                                V += verse_count;
                                if (Numbers.IsOdd(verse_count))
                                {
                                    oV += verse_count;
                                }
                                else
                                {
                                    eV += verse_count;
                                }
                                if (Numbers.IsPrime(verse_count))
                                {
                                    pV += verse_count;
                                }
                                else if (Numbers.IsComposite(verse_count))
                                {
                                    cV += verse_count;
                                }
                                else //if (verse_count == 1)
                                {
                                }

                                CPlusV += cplusv;
                                if (Numbers.IsOdd(cplusv))
                                {
                                    oCPlusV += cplusv;
                                }
                                else
                                {
                                    eCPlusV += cplusv;
                                }
                                if (Numbers.IsPrime(cplusv))
                                {
                                    pCPlusV += cplusv;
                                }
                                else if (Numbers.IsComposite(cplusv))
                                {
                                    cCPlusV += cplusv;
                                }
                                else //if (cplusv == 1)
                                {
                                }

                                CMinusV += cminusv;
                                if (Numbers.IsOdd(cminusv))
                                {
                                    oCMinusV += cminusv;
                                }
                                else
                                {
                                    eCMinusV += cminusv;
                                }
                                if (Numbers.IsPrime(cminusv))
                                {
                                    pCMinusV += cminusv;
                                }
                                else if (Numbers.IsComposite(cminusv))
                                {
                                    cCMinusV += cminusv;
                                }
                                else //if (cminusv == 1)
                                {
                                }

                                CMultiplyV += cmultiplyv;
                                if (Numbers.IsOdd(cmultiplyv))
                                {
                                    oCMultiplyV += cmultiplyv;
                                }
                                else
                                {
                                    eCMultiplyV += cmultiplyv;
                                }
                                if (Numbers.IsPrime(cmultiplyv))
                                {
                                    pCMultiplyV += cmultiplyv;
                                }
                                else if (Numbers.IsComposite(cmultiplyv))
                                {
                                    cCMultiplyV += cmultiplyv;
                                }
                                else //if (cmultiplyv == 1)
                                {
                                }

                                CDivideV += cdividev;
                                if (Numbers.IsOdd((long)cdividev))
                                {
                                    oCDivideV += cdividev;
                                }
                                else
                                {
                                    eCDivideV += cdividev;
                                }
                                if (Numbers.IsPrime((long)cdividev))
                                {
                                    pCDivideV += cdividev;
                                }
                                else if (Numbers.IsComposite((long)cdividev))
                                {
                                    cCDivideV += cdividev;
                                }
                                else //if (cdividev == 1)
                                {
                                }
                            }
                            MathsChaptersCSumTextBox.Text = C.ToString();
                            MathsChaptersCOddSumTextBox.Text = oC.ToString();
                            MathsChaptersCEvenSumTextBox.Text = eC.ToString();
                            MathsChaptersCPrimeSumTextBox.Text = pC.ToString();
                            MathsChaptersCCompositeSumTextBox.Text = cC.ToString();
                            MathsChaptersVSumTextBox.Text = V.ToString();
                            MathsChaptersVOddSumTextBox.Text = oV.ToString();
                            MathsChaptersVEvenSumTextBox.Text = eV.ToString();
                            MathsChaptersVPrimeSumTextBox.Text = pV.ToString();
                            MathsChaptersVCompositeSumTextBox.Text = cV.ToString();
                            MathsChaptersCPlusVSumTextBox.Text = CPlusV.ToString();
                            MathsChaptersCPlusVOddSumTextBox.Text = oCPlusV.ToString();
                            MathsChaptersCPlusVEvenSumTextBox.Text = eCPlusV.ToString();
                            MathsChaptersCPlusVPrimeSumTextBox.Text = pCPlusV.ToString();
                            MathsChaptersCPlusVCompositeSumTextBox.Text = cCPlusV.ToString();
                            MathsChaptersCMinusVSumTextBox.Text = CMinusV.ToString();
                            MathsChaptersCMinusVOddSumTextBox.Text = oCMinusV.ToString();
                            MathsChaptersCMinusVEvenSumTextBox.Text = eCMinusV.ToString();
                            MathsChaptersCMinusVPrimeSumTextBox.Text = pCMinusV.ToString();
                            MathsChaptersCMinusVCompositeSumTextBox.Text = cCMinusV.ToString();
                            MathsChaptersCMultiplyVSumTextBox.Text = CMultiplyV.ToString();
                            MathsChaptersCMultiplyVOddSumTextBox.Text = oCMultiplyV.ToString();
                            MathsChaptersCMultiplyVEvenSumTextBox.Text = eCMultiplyV.ToString();
                            MathsChaptersCMultiplyVPrimeSumTextBox.Text = pCMultiplyV.ToString();
                            MathsChaptersCMultiplyVCompositeSumTextBox.Text = cCMultiplyV.ToString();
                            MathsChaptersCDivideVSumTextBox.Text = (CDivideV).ToString("0.0");
                            MathsChaptersCDivideVOddSumTextBox.Text = (oCDivideV).ToString("0.0");
                            MathsChaptersCDivideVEvenSumTextBox.Text = (eCDivideV).ToString("0.0");
                            MathsChaptersCDivideVPrimeSumTextBox.Text = (pCDivideV).ToString("0.0");
                            MathsChaptersCDivideVCompositeSumTextBox.Text = (cCDivideV).ToString("0.0");

                            MathsChaptersCSumTextBox.ForeColor = Numbers.GetNumberTypeColor(C);
                            MathsChaptersCOddSumTextBox.ForeColor = Numbers.GetNumberTypeColor(oC);
                            MathsChaptersCEvenSumTextBox.ForeColor = Numbers.GetNumberTypeColor(eC);
                            MathsChaptersCPrimeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(pC);
                            MathsChaptersCCompositeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(cC);
                            MathsChaptersVSumTextBox.ForeColor = Numbers.GetNumberTypeColor(V);
                            MathsChaptersVOddSumTextBox.ForeColor = Numbers.GetNumberTypeColor(oV);
                            MathsChaptersVEvenSumTextBox.ForeColor = Numbers.GetNumberTypeColor(eV);
                            MathsChaptersVPrimeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(pV);
                            MathsChaptersVCompositeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(cV);
                            MathsChaptersCPlusVSumTextBox.ForeColor = Numbers.GetNumberTypeColor(CPlusV);
                            MathsChaptersCPlusVOddSumTextBox.ForeColor = Numbers.GetNumberTypeColor(oCPlusV);
                            MathsChaptersCPlusVEvenSumTextBox.ForeColor = Numbers.GetNumberTypeColor(eCPlusV);
                            MathsChaptersCPlusVPrimeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(pCPlusV);
                            MathsChaptersCPlusVCompositeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(cCPlusV);
                            MathsChaptersCMinusVSumTextBox.ForeColor = Numbers.GetNumberTypeColor(CMinusV);
                            MathsChaptersCMinusVOddSumTextBox.ForeColor = Numbers.GetNumberTypeColor(oCMinusV);
                            MathsChaptersCMinusVEvenSumTextBox.ForeColor = Numbers.GetNumberTypeColor(eCMinusV);
                            MathsChaptersCMinusVPrimeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(pCMinusV);
                            MathsChaptersCMinusVCompositeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(cCMinusV);
                            MathsChaptersCMultiplyVSumTextBox.ForeColor = Numbers.GetNumberTypeColor(CMultiplyV);
                            MathsChaptersCMultiplyVOddSumTextBox.ForeColor = Numbers.GetNumberTypeColor(oCMultiplyV);
                            MathsChaptersCMultiplyVEvenSumTextBox.ForeColor = Numbers.GetNumberTypeColor(eCMultiplyV);
                            MathsChaptersCMultiplyVPrimeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(pCMultiplyV);
                            MathsChaptersCMultiplyVCompositeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(cCMultiplyV);
                            MathsChaptersCDivideVSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)CDivideV);
                            MathsChaptersCDivideVOddSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)oCDivideV);
                            MathsChaptersCDivideVEvenSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)eCDivideV);
                            MathsChaptersCDivideVPrimeSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)pCDivideV);
                            MathsChaptersCDivideVCompositeSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)cCDivideV);

                            MathsChaptersCSumTextBox.BackColor = (Numbers.Compare(C, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCOddSumTextBox.BackColor = (Numbers.Compare(oC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCEvenSumTextBox.BackColor = (Numbers.Compare(eC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCPrimeSumTextBox.BackColor = (Numbers.Compare(pC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCCompositeSumTextBox.BackColor = (Numbers.Compare(cC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersVSumTextBox.BackColor = (Numbers.Compare(V, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersVOddSumTextBox.BackColor = (Numbers.Compare(oV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersVEvenSumTextBox.BackColor = (Numbers.Compare(eV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersVPrimeSumTextBox.BackColor = (Numbers.Compare(pV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersVCompositeSumTextBox.BackColor = (Numbers.Compare(cV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCPlusVSumTextBox.BackColor = (Numbers.Compare(CPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCPlusVOddSumTextBox.BackColor = (Numbers.Compare(oCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCPlusVEvenSumTextBox.BackColor = (Numbers.Compare(eCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCPlusVPrimeSumTextBox.BackColor = (Numbers.Compare(pCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCPlusVCompositeSumTextBox.BackColor = (Numbers.Compare(cCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMinusVSumTextBox.BackColor = (Numbers.Compare(CMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMinusVOddSumTextBox.BackColor = (Numbers.Compare(oCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMinusVEvenSumTextBox.BackColor = (Numbers.Compare(eCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMinusVPrimeSumTextBox.BackColor = (Numbers.Compare(pCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMinusVCompositeSumTextBox.BackColor = (Numbers.Compare(cCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMultiplyVSumTextBox.BackColor = (Numbers.Compare(CMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMultiplyVOddSumTextBox.BackColor = (Numbers.Compare(oCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMultiplyVEvenSumTextBox.BackColor = (Numbers.Compare(eCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMultiplyVPrimeSumTextBox.BackColor = (Numbers.Compare(pCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMultiplyVCompositeSumTextBox.BackColor = (Numbers.Compare(cCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCDivideVSumTextBox.BackColor = (Numbers.Compare((long)CDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCDivideVOddSumTextBox.BackColor = (Numbers.Compare((long)oCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCDivideVEvenSumTextBox.BackColor = (Numbers.Compare((long)eCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCDivideVPrimeSumTextBox.BackColor = (Numbers.Compare((long)pCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCDivideVCompositeSumTextBox.BackColor = (Numbers.Compare((long)cCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;

                            // Interesting numbers
                            if (C.IsInteresting()) MathsChaptersCSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (oC.IsInteresting()) MathsChaptersCOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (eC.IsInteresting()) MathsChaptersCEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (pC.IsInteresting()) MathsChaptersCPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (cC.IsInteresting()) MathsChaptersCCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (V.IsInteresting()) MathsChaptersVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (oV.IsInteresting()) MathsChaptersVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (eV.IsInteresting()) MathsChaptersVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (pV.IsInteresting()) MathsChaptersVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (cV.IsInteresting()) MathsChaptersVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (CPlusV.IsInteresting()) MathsChaptersCPlusVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (oCPlusV.IsInteresting()) MathsChaptersCPlusVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (eCPlusV.IsInteresting()) MathsChaptersCPlusVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (pCPlusV.IsInteresting()) MathsChaptersCPlusVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (cCPlusV.IsInteresting()) MathsChaptersCPlusVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (CMinusV.IsInteresting()) MathsChaptersCMinusVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (oCMinusV.IsInteresting()) MathsChaptersCMinusVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (eCMinusV.IsInteresting()) MathsChaptersCMinusVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (pCMinusV.IsInteresting()) MathsChaptersCMinusVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (cCMinusV.IsInteresting()) MathsChaptersCMinusVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (CMultiplyV.IsInteresting()) MathsChaptersCMultiplyVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (oCMultiplyV.IsInteresting()) MathsChaptersCMultiplyVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (eCMultiplyV.IsInteresting()) MathsChaptersCMultiplyVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (pCMultiplyV.IsInteresting()) MathsChaptersCMultiplyVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (cCMultiplyV.IsInteresting()) MathsChaptersCMultiplyVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (CDivideV.IsInteresting()) MathsChaptersCDivideVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (oCDivideV.IsInteresting()) MathsChaptersCDivideVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (eCDivideV.IsInteresting()) MathsChaptersCDivideVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (pCDivideV.IsInteresting()) MathsChaptersCDivideVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (cCDivideV.IsInteresting()) MathsChaptersCDivideVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                        }
                    }
                }
            }
        }
    }
    private void DisplayMathsChapterSumRatios(List<Verse> verses)
    {
        //if (TabControl.SelectedTab == MathsTabPage)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (verses != null)
                    {
                        m_maths_verses = verses;

                        List<Chapter> chapters = m_client.Book.GetChapters(m_maths_verses);
                        if (chapters != null)
                        {
                            Dictionary<long, long> frequencies = new Dictionary<long, long>();
                            if (frequencies != null)
                            {
                                frequencies.Clear();
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = chapter.SortedNumber;
                                    if (frequencies.ContainsKey(n))
                                    {
                                        frequencies[n]++;
                                    }
                                    else
                                    {
                                        frequencies.Add(n, 1);
                                    }
                                }
                                long dC = 0; // duplicate
                                long uC = 0; // unique
                                foreach (long n in frequencies.Keys)
                                {
                                    if (frequencies[n] > 1)
                                    {
                                        dC += n * frequencies[n];
                                    }
                                    else
                                    {
                                        uC += n;
                                    }
                                }
                                double duC = 0.0D; // ratio
                                if (uC != 0) duC = (double)dC / (double)uC;
                                MathsChaptersCDUSumTextBox.Text = duC.ToString("0.00000");
                                MathsChaptersCDUSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)duC);
                                if (duC.IsInteresting()) MathsChaptersCDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;

                                ToolTip.SetToolTip(MathsChaptersCDUSumTextBox, dC.ToString() + "/" + uC.ToString());

                                frequencies.Clear();
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = chapter.Verses.Count;
                                    if (frequencies.ContainsKey(n))
                                    {
                                        frequencies[n]++;
                                    }
                                    else
                                    {
                                        frequencies.Add(n, 1);
                                    }
                                }
                                long dV = 0; // duplicate
                                long uV = 0; // unique
                                foreach (long n in frequencies.Keys)
                                {
                                    if (frequencies[n] > 1)
                                    {
                                        dV += n * frequencies[n];
                                    }
                                    else
                                    {
                                        uV += n;
                                    }
                                }
                                double duV = 0.0D; // ratio
                                if (uV != 0) duV = (double)dV / (double)uV;
                                MathsChaptersVDUSumTextBox.Text = duV.ToString("0.00000");
                                MathsChaptersVDUSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)duV);
                                if (duV.IsInteresting()) MathsChaptersVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                ToolTip.SetToolTip(MathsChaptersVDUSumTextBox, dV.ToString() + "/" + uV.ToString());

                                frequencies.Clear();
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = chapter.SortedNumber + chapter.Verses.Count;
                                    if (frequencies.ContainsKey(n))
                                    {
                                        frequencies[n]++;
                                    }
                                    else
                                    {
                                        frequencies.Add(n, 1);
                                    }
                                }
                                long dCPlusV = 0; // duplicate
                                long uCPlusV = 0; // unique
                                foreach (long n in frequencies.Keys)
                                {
                                    if (frequencies[n] > 1)
                                    {
                                        dCPlusV += n * frequencies[n];
                                    }
                                    else
                                    {
                                        uCPlusV += n;
                                    }
                                }
                                double duCPlusV = 0.0D; // ratio
                                if (uCPlusV != 0) duCPlusV = (double)dCPlusV / (double)uCPlusV;
                                MathsChaptersCPlusVDUSumTextBox.Text = duCPlusV.ToString("0.00000");
                                MathsChaptersCPlusVDUSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)duCPlusV);
                                if (duCPlusV.IsInteresting()) MathsChaptersCPlusVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                ToolTip.SetToolTip(MathsChaptersCPlusVDUSumTextBox, dCPlusV.ToString() + "/" + uCPlusV.ToString());

                                frequencies.Clear();
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = m_maths_abs_cminusv ? Math.Abs(chapter.SortedNumber - chapter.Verses.Count) : (chapter.SortedNumber - chapter.Verses.Count);
                                    if (frequencies.ContainsKey(n))
                                    {
                                        frequencies[n]++;
                                    }
                                    else
                                    {
                                        frequencies.Add(n, 1);
                                    }
                                }
                                long dCMinusV = 0; // duplicate
                                long uCMinusV = 0; // unique
                                foreach (long n in frequencies.Keys)
                                {
                                    if (frequencies[n] > 1)
                                    {
                                        dCMinusV += n * frequencies[n];
                                    }
                                    else
                                    {
                                        uCMinusV += n;
                                    }
                                }
                                double duCMinusV = 0.0D; // ratio
                                if (uCMinusV != 0) duCMinusV = (double)dCMinusV / (double)uCMinusV;
                                MathsChaptersCMinusVDUSumTextBox.Text = duCMinusV.ToString("0.00000");
                                MathsChaptersCMinusVDUSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)duCMinusV);
                                if (duCMinusV.IsInteresting()) MathsChaptersCMinusVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                ToolTip.SetToolTip(MathsChaptersCMinusVDUSumTextBox, dCMinusV.ToString() + "/" + uCMinusV.ToString());

                                frequencies.Clear();
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = chapter.SortedNumber * chapter.Verses.Count;
                                    if (frequencies.ContainsKey(n))
                                    {
                                        frequencies[n]++;
                                    }
                                    else
                                    {
                                        frequencies.Add(n, 1);
                                    }
                                }
                                long dCMultiplyV = 0; // duplicate
                                long uCMultiplyV = 0; // unique
                                foreach (long n in frequencies.Keys)
                                {
                                    if (frequencies[n] > 1)
                                    {
                                        dCMultiplyV += n * frequencies[n];
                                    }
                                    else
                                    {
                                        uCMultiplyV += n;
                                    }
                                }
                                double duCMultiplyV = 0.0D; // ratio
                                if (uCMultiplyV != 0) duCMultiplyV = (double)dCMultiplyV / (double)uCMultiplyV;
                                MathsChaptersCMultiplyVDUSumTextBox.Text = duCMultiplyV.ToString("0.00000");
                                MathsChaptersCMultiplyVDUSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)duCMultiplyV);
                                if (duCMultiplyV.IsInteresting()) MathsChaptersCMultiplyVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                ToolTip.SetToolTip(MathsChaptersCMultiplyVDUSumTextBox, dCMultiplyV.ToString() + "/" + uCMultiplyV.ToString());

                                frequencies.Clear();
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = m_maths_vdividec ? ((long)((double)chapter.Verses.Count / (double)chapter.SortedNumber)) : ((long)((double)chapter.SortedNumber / (double)chapter.Verses.Count));
                                    if (frequencies.ContainsKey(n))
                                    {
                                        frequencies[n]++;
                                    }
                                    else
                                    {
                                        frequencies.Add(n, 1);
                                    }
                                }
                                long dCDivideV = 0; // duplicate
                                long uCDivideV = 0; // unique
                                foreach (long n in frequencies.Keys)
                                {
                                    if (frequencies[n] > 1)
                                    {
                                        dCDivideV += n * frequencies[n];
                                    }
                                    else
                                    {
                                        uCDivideV += n;
                                    }
                                }
                                double duCDivideV = 0.0D; // ratio
                                if (uCDivideV != 0) duCDivideV = (double)dCDivideV / (double)uCDivideV;
                                MathsChaptersCDivideVDUSumTextBox.Text = duCDivideV.ToString("0.00000");
                                MathsChaptersCDivideVDUSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)duCDivideV);
                                if (duCDivideV.IsInteresting()) MathsChaptersCDivideVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                ToolTip.SetToolTip(MathsChaptersCDivideVDUSumTextBox, dCDivideV.ToString() + "/" + uCDivideV.ToString());
                            }
                        }
                    }
                }
            }
        }
    }
    private void DisplayMathsVerseSums(List<Verse> verses)
    {
        //if (TabControl.SelectedTab == MathsTabPage)
        {
            if (verses != null)
            {
                m_maths_verses = verses;

                long C = 0;  // all
                long oC = 0; // odd
                long eC = 0; // even
                long pC = 0; // prime
                long cC = 0; // composite
                long V = 0;
                long oV = 0;
                long eV = 0;
                long pV = 0;
                long cV = 0;
                long CPlusV = 0;
                long oCPlusV = 0;
                long eCPlusV = 0;
                long pCPlusV = 0;
                long cCPlusV = 0;
                long CMinusV = 0;
                long oCMinusV = 0;
                long eCMinusV = 0;
                long pCMinusV = 0;
                long cCMinusV = 0;
                long CMultiplyV = 0;
                long oCMultiplyV = 0;
                long eCMultiplyV = 0;
                long pCMultiplyV = 0;
                long cCMultiplyV = 0;
                double CDivideV = 0;
                double oCDivideV = 0;
                double eCDivideV = 0;
                double pCDivideV = 0;
                double cCDivideV = 0;
                foreach (Verse verse in m_maths_verses)
                {
                    long chapter_number = verse.Chapter.SortedNumber;
                    long verse_number = verse.NumberInChapter;
                    long cplusv = chapter_number + verse_number;
                    long cminusv = m_maths_abs_cminusv ? Math.Abs(chapter_number - verse_number) : (chapter_number - verse_number);
                    long cmultiplyv = chapter_number * verse_number;
                    double cdividev = m_maths_vdividec ? ((double)verse_number / (double)chapter_number) : ((double)chapter_number / (double)verse_number);

                    C += chapter_number;
                    if (Numbers.IsOdd(chapter_number))
                    {
                        oC += chapter_number;
                    }
                    else
                    {
                        eC += chapter_number;
                    }
                    if (Numbers.IsPrime(chapter_number))
                    {
                        pC += chapter_number;
                    }
                    else if (Numbers.IsComposite(chapter_number))
                    {
                        cC += chapter_number;
                    }
                    else //if (chapter_number == 1)
                    {
                    }

                    V += verse_number;
                    if (Numbers.IsOdd(verse_number))
                    {
                        oV += verse_number;
                    }
                    else
                    {
                        eV += verse_number;
                    }
                    if (Numbers.IsPrime(verse_number))
                    {
                        pV += verse_number;
                    }
                    else if (Numbers.IsComposite(verse_number))
                    {
                        cV += verse_number;
                    }
                    else //if (verse_count == 1)
                    {
                    }

                    CPlusV += cplusv;
                    if (Numbers.IsOdd(cplusv))
                    {
                        oCPlusV += cplusv;
                    }
                    else
                    {
                        eCPlusV += cplusv;
                    }
                    if (Numbers.IsPrime(cplusv))
                    {
                        pCPlusV += cplusv;
                    }
                    else if (Numbers.IsComposite(cplusv))
                    {
                        cCPlusV += cplusv;
                    }
                    else //if (cplusv == 1)
                    {
                    }

                    CMinusV += cminusv;
                    if (Numbers.IsOdd(cminusv))
                    {
                        oCMinusV += cminusv;
                    }
                    else
                    {
                        eCMinusV += cminusv;
                    }
                    if (Numbers.IsPrime(cminusv))
                    {
                        pCMinusV += cminusv;
                    }
                    else if (Numbers.IsComposite(cminusv))
                    {
                        cCMinusV += cminusv;
                    }
                    else //if (cminusv == 1)
                    {
                    }

                    CMultiplyV += cmultiplyv;
                    if (Numbers.IsOdd(cmultiplyv))
                    {
                        oCMultiplyV += cmultiplyv;
                    }
                    else
                    {
                        eCMultiplyV += cmultiplyv;
                    }
                    if (Numbers.IsPrime(cmultiplyv))
                    {
                        pCMultiplyV += cmultiplyv;
                    }
                    else if (Numbers.IsComposite(cmultiplyv))
                    {
                        cCMultiplyV += cmultiplyv;
                    }
                    else //if (cmultiplyv == 1)
                    {
                    }

                    CDivideV += cdividev;
                    if (Numbers.IsOdd((long)cdividev))
                    {
                        oCDivideV += cdividev;
                    }
                    else
                    {
                        eCDivideV += cdividev;
                    }
                    if (Numbers.IsPrime((long)cdividev))
                    {
                        pCDivideV += cdividev;
                    }
                    else if (Numbers.IsComposite((long)cdividev))
                    {
                        cCDivideV += cdividev;
                    }
                    else //if (cdividev == 1)
                    {
                    }
                }
                MathsVersesCSumTextBox.Text = C.ToString();
                MathsVersesCOddSumTextBox.Text = oC.ToString();
                MathsVersesCEvenSumTextBox.Text = eC.ToString();
                MathsVersesCPrimeSumTextBox.Text = pC.ToString();
                MathsVersesCCompositeSumTextBox.Text = cC.ToString();
                MathsVersesVSumTextBox.Text = V.ToString();
                MathsVersesVOddSumTextBox.Text = oV.ToString();
                MathsVersesVEvenSumTextBox.Text = eV.ToString();
                MathsVersesVPrimeSumTextBox.Text = pV.ToString();
                MathsVersesVCompositeSumTextBox.Text = cV.ToString();
                MathsVersesCPlusVSumTextBox.Text = CPlusV.ToString();
                MathsVersesCPlusVOddSumTextBox.Text = oCPlusV.ToString();
                MathsVersesCPlusVEvenSumTextBox.Text = eCPlusV.ToString();
                MathsVersesCPlusVPrimeSumTextBox.Text = pCPlusV.ToString();
                MathsVersesCPlusVCompositeSumTextBox.Text = cCPlusV.ToString();
                MathsVersesCMinusVSumTextBox.Text = CMinusV.ToString();
                MathsVersesCMinusVOddSumTextBox.Text = oCMinusV.ToString();
                MathsVersesCMinusVEvenSumTextBox.Text = eCMinusV.ToString();
                MathsVersesCMinusVPrimeSumTextBox.Text = pCMinusV.ToString();
                MathsVersesCMinusVCompositeSumTextBox.Text = cCMinusV.ToString();
                MathsVersesCMultiplyVSumTextBox.Text = CMultiplyV.ToString();
                MathsVersesCMultiplyVOddSumTextBox.Text = oCMultiplyV.ToString();
                MathsVersesCMultiplyVEvenSumTextBox.Text = eCMultiplyV.ToString();
                MathsVersesCMultiplyVPrimeSumTextBox.Text = pCMultiplyV.ToString();
                MathsVersesCMultiplyVCompositeSumTextBox.Text = cCMultiplyV.ToString();
                MathsVersesCDivideVSumTextBox.Text = (CDivideV).ToString("0.0");
                MathsVersesCDivideVOddSumTextBox.Text = (oCDivideV).ToString("0.0");
                MathsVersesCDivideVEvenSumTextBox.Text = (eCDivideV).ToString("0.0");
                MathsVersesCDivideVPrimeSumTextBox.Text = (pCDivideV).ToString("0.0");
                MathsVersesCDivideVCompositeSumTextBox.Text = (cCDivideV).ToString("0.0");

                MathsVersesCSumTextBox.ForeColor = Numbers.GetNumberTypeColor(C);
                MathsVersesCOddSumTextBox.ForeColor = Numbers.GetNumberTypeColor(oC);
                MathsVersesCEvenSumTextBox.ForeColor = Numbers.GetNumberTypeColor(eC);
                MathsVersesCPrimeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(pC);
                MathsVersesCCompositeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(cC);
                MathsVersesVSumTextBox.ForeColor = Numbers.GetNumberTypeColor(V);
                MathsVersesVOddSumTextBox.ForeColor = Numbers.GetNumberTypeColor(oV);
                MathsVersesVEvenSumTextBox.ForeColor = Numbers.GetNumberTypeColor(eV);
                MathsVersesVPrimeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(pV);
                MathsVersesVCompositeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(cV);
                MathsVersesCPlusVSumTextBox.ForeColor = Numbers.GetNumberTypeColor(CPlusV);
                MathsVersesCPlusVOddSumTextBox.ForeColor = Numbers.GetNumberTypeColor(oCPlusV);
                MathsVersesCPlusVEvenSumTextBox.ForeColor = Numbers.GetNumberTypeColor(eCPlusV);
                MathsVersesCPlusVPrimeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(pCPlusV);
                MathsVersesCPlusVCompositeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(cCPlusV);
                MathsVersesCMinusVSumTextBox.ForeColor = Numbers.GetNumberTypeColor(CMinusV);
                MathsVersesCMinusVOddSumTextBox.ForeColor = Numbers.GetNumberTypeColor(oCMinusV);
                MathsVersesCMinusVEvenSumTextBox.ForeColor = Numbers.GetNumberTypeColor(eCMinusV);
                MathsVersesCMinusVPrimeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(pCMinusV);
                MathsVersesCMinusVCompositeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(cCMinusV);
                MathsVersesCMultiplyVSumTextBox.ForeColor = Numbers.GetNumberTypeColor(CMultiplyV);
                MathsVersesCMultiplyVOddSumTextBox.ForeColor = Numbers.GetNumberTypeColor(oCMultiplyV);
                MathsVersesCMultiplyVEvenSumTextBox.ForeColor = Numbers.GetNumberTypeColor(eCMultiplyV);
                MathsVersesCMultiplyVPrimeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(pCMultiplyV);
                MathsVersesCMultiplyVCompositeSumTextBox.ForeColor = Numbers.GetNumberTypeColor(cCMultiplyV);
                MathsVersesCDivideVSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)CDivideV);
                MathsVersesCDivideVOddSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)oCDivideV);
                MathsVersesCDivideVEvenSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)eCDivideV);
                MathsVersesCDivideVPrimeSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)pCDivideV);
                MathsVersesCDivideVCompositeSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)cCDivideV);

                MathsVersesCSumTextBox.BackColor = (Numbers.Compare(C, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCOddSumTextBox.BackColor = (Numbers.Compare(oC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCEvenSumTextBox.BackColor = (Numbers.Compare(eC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCPrimeSumTextBox.BackColor = (Numbers.Compare(pC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCCompositeSumTextBox.BackColor = (Numbers.Compare(cC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesVSumTextBox.BackColor = (Numbers.Compare(V, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesVOddSumTextBox.BackColor = (Numbers.Compare(oV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesVEvenSumTextBox.BackColor = (Numbers.Compare(eV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesVPrimeSumTextBox.BackColor = (Numbers.Compare(pV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesVCompositeSumTextBox.BackColor = (Numbers.Compare(cV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCPlusVSumTextBox.BackColor = (Numbers.Compare(CPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCPlusVOddSumTextBox.BackColor = (Numbers.Compare(oCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCPlusVEvenSumTextBox.BackColor = (Numbers.Compare(eCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCPlusVPrimeSumTextBox.BackColor = (Numbers.Compare(pCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCPlusVCompositeSumTextBox.BackColor = (Numbers.Compare(cCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMinusVSumTextBox.BackColor = (Numbers.Compare(CMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMinusVOddSumTextBox.BackColor = (Numbers.Compare(oCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMinusVEvenSumTextBox.BackColor = (Numbers.Compare(eCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMinusVPrimeSumTextBox.BackColor = (Numbers.Compare(pCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMinusVCompositeSumTextBox.BackColor = (Numbers.Compare(cCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMultiplyVSumTextBox.BackColor = (Numbers.Compare(CMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMultiplyVOddSumTextBox.BackColor = (Numbers.Compare(oCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMultiplyVEvenSumTextBox.BackColor = (Numbers.Compare(eCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMultiplyVPrimeSumTextBox.BackColor = (Numbers.Compare(pCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMultiplyVCompositeSumTextBox.BackColor = (Numbers.Compare(cCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCDivideVSumTextBox.BackColor = (Numbers.Compare((long)CDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCDivideVOddSumTextBox.BackColor = (Numbers.Compare((long)oCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCDivideVEvenSumTextBox.BackColor = (Numbers.Compare((long)eCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCDivideVPrimeSumTextBox.BackColor = (Numbers.Compare((long)pCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCDivideVCompositeSumTextBox.BackColor = (Numbers.Compare((long)cCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;

                // Interesting numbers
                if (C.IsInteresting()) MathsVersesCSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (oC.IsInteresting()) MathsVersesCOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (eC.IsInteresting()) MathsVersesCEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (pC.IsInteresting()) MathsVersesCPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (cC.IsInteresting()) MathsVersesCCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (V.IsInteresting()) MathsVersesVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (oV.IsInteresting()) MathsVersesVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (eV.IsInteresting()) MathsVersesVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (pV.IsInteresting()) MathsVersesVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (cV.IsInteresting()) MathsVersesVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (CPlusV.IsInteresting()) MathsVersesCPlusVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (oCPlusV.IsInteresting()) MathsVersesCPlusVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (eCPlusV.IsInteresting()) MathsVersesCPlusVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (pCPlusV.IsInteresting()) MathsVersesCPlusVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (cCPlusV.IsInteresting()) MathsVersesCPlusVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (CMinusV.IsInteresting()) MathsVersesCMinusVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (oCMinusV.IsInteresting()) MathsVersesCMinusVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (eCMinusV.IsInteresting()) MathsVersesCMinusVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (pCMinusV.IsInteresting()) MathsVersesCMinusVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (cCMinusV.IsInteresting()) MathsVersesCMinusVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (CMultiplyV.IsInteresting()) MathsVersesCMultiplyVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (oCMultiplyV.IsInteresting()) MathsVersesCMultiplyVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (eCMultiplyV.IsInteresting()) MathsVersesCMultiplyVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (pCMultiplyV.IsInteresting()) MathsVersesCMultiplyVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (cCMultiplyV.IsInteresting()) MathsVersesCMultiplyVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (CDivideV.IsInteresting()) MathsVersesCDivideVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (oCDivideV.IsInteresting()) MathsVersesCDivideVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (eCDivideV.IsInteresting()) MathsVersesCDivideVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (pCDivideV.IsInteresting()) MathsVersesCDivideVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (cCDivideV.IsInteresting()) MathsVersesCDivideVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
            }
        }
    }
    private void DisplayMathsVerseSumRatios(List<Verse> verses)
    {
        //if (TabControl.SelectedTab == MathsTabPage)
        {
            if (verses != null)
            {
                m_maths_verses = verses;

                Dictionary<long, long> frequencies = new Dictionary<long, long>();
                if (frequencies != null)
                {
                    frequencies.Clear();
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = verse.Chapter.SortedNumber;
                        if (frequencies.ContainsKey(n))
                        {
                            frequencies[n]++;
                        }
                        else
                        {
                            frequencies.Add(n, 1);
                        }
                    }
                    long dC = 0; // duplicate
                    long uC = 0; // unique
                    foreach (long n in frequencies.Keys)
                    {
                        if (frequencies[n] > 1)
                        {
                            dC += n * frequencies[n];
                        }
                        else
                        {
                            uC += n;
                        }
                    }
                    double duC = 0.0D; // ratio
                    if (uC != 0) duC = (double)dC / (double)uC;
                    MathsVersesCDUSumTextBox.Text = duC.ToString("0.00000");
                    MathsVersesCDUSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)duC);
                    if (duC.IsInteresting()) MathsVersesCDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                    ToolTip.SetToolTip(MathsVersesCDUSumTextBox, dC.ToString() + "/" + uC.ToString());

                    frequencies.Clear();
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = verse.NumberInChapter;
                        if (frequencies.ContainsKey(n))
                        {
                            frequencies[n]++;
                        }
                        else
                        {
                            frequencies.Add(n, 1);
                        }
                    }
                    long dV = 0; // duplicate
                    long uV = 0; // unique
                    foreach (long n in frequencies.Keys)
                    {
                        if (frequencies[n] > 1)
                        {
                            dV += n * frequencies[n];
                        }
                        else
                        {
                            uV += n;
                        }
                    }
                    double duV = 0.0D; // ratio
                    if (uV != 0) duV = (double)dV / (double)uV;
                    MathsVersesVDUSumTextBox.Text = duV.ToString("0.00000");
                    MathsVersesVDUSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)duV);
                    if (duV.IsInteresting()) MathsVersesVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                    ToolTip.SetToolTip(MathsVersesVDUSumTextBox, dV.ToString() + "/" + uV.ToString());

                    frequencies.Clear();
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = verse.Chapter.SortedNumber + verse.NumberInChapter;
                        if (frequencies.ContainsKey(n))
                        {
                            frequencies[n]++;
                        }
                        else
                        {
                            frequencies.Add(n, 1);
                        }
                    }
                    long dCPlusV = 0; // duplicate
                    long uCPlusV = 0; // unique
                    foreach (long n in frequencies.Keys)
                    {
                        if (frequencies[n] > 1)
                        {
                            dCPlusV += n * frequencies[n];
                        }
                        else
                        {
                            uCPlusV += n;
                        }
                    }
                    double duCPlusV = 0.0D; // ratio
                    if (uCPlusV != 0) duCPlusV = (double)dCPlusV / (double)uCPlusV;
                    MathsVersesCPlusVDUSumTextBox.Text = duCPlusV.ToString("0.00000");
                    MathsVersesCPlusVDUSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)duCPlusV);
                    if (duCPlusV.IsInteresting()) MathsVersesCPlusVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                    ToolTip.SetToolTip(MathsVersesCPlusVDUSumTextBox, dCPlusV.ToString() + "/" + uCPlusV.ToString());

                    frequencies.Clear();
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = m_maths_abs_cminusv ? Math.Abs(verse.Chapter.SortedNumber - verse.NumberInChapter) : (verse.Chapter.SortedNumber - verse.NumberInChapter);
                        if (frequencies.ContainsKey(n))
                        {
                            frequencies[n]++;
                        }
                        else
                        {
                            frequencies.Add(n, 1);
                        }
                    }
                    long dCMinusV = 0; // duplicate
                    long uCMinusV = 0; // unique
                    foreach (long n in frequencies.Keys)
                    {
                        if (frequencies[n] > 1)
                        {
                            dCMinusV += n * frequencies[n];
                        }
                        else
                        {
                            uCMinusV += n;
                        }
                    }
                    double duCMinusV = 0.0D; // ratio
                    if (uCMinusV != 0) duCMinusV = (double)dCMinusV / (double)uCMinusV;
                    MathsVersesCMinusVDUSumTextBox.Text = duCMinusV.ToString("0.00000");
                    MathsVersesCMinusVDUSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)duCMinusV);
                    if (duCMinusV.IsInteresting()) MathsVersesCMinusVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                    ToolTip.SetToolTip(MathsVersesCMinusVDUSumTextBox, dCMinusV.ToString() + "/" + uCMinusV.ToString());

                    frequencies.Clear();
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = verse.Chapter.SortedNumber * verse.NumberInChapter;
                        if (frequencies.ContainsKey(n))
                        {
                            frequencies[n]++;
                        }
                        else
                        {
                            frequencies.Add(n, 1);
                        }
                    }
                    long dCMultiplyV = 0; // duplicate
                    long uCMultiplyV = 0; // unique
                    foreach (long n in frequencies.Keys)
                    {
                        if (frequencies[n] > 1)
                        {
                            dCMultiplyV += n * frequencies[n];
                        }
                        else
                        {
                            uCMultiplyV += n;
                        }
                    }
                    double duCMultiplyV = 0.0D; // ratio
                    if (uCMultiplyV != 0) duCMultiplyV = (double)dCMultiplyV / (double)uCMultiplyV;
                    MathsVersesCMultiplyVDUSumTextBox.Text = duCMultiplyV.ToString("0.00000");
                    MathsVersesCMultiplyVDUSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)duCMultiplyV);
                    if (duCMultiplyV.IsInteresting()) MathsVersesCMultiplyVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                    ToolTip.SetToolTip(MathsVersesCMultiplyVDUSumTextBox, dCMultiplyV.ToString() + "/" + uCMultiplyV.ToString());

                    frequencies.Clear();
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = m_maths_vdividec ? ((long)((double)verse.NumberInChapter / (double)verse.Chapter.SortedNumber)) : ((long)((double)verse.Chapter.SortedNumber / (double)verse.NumberInChapter));
                        if (frequencies.ContainsKey(n))
                        {
                            frequencies[n]++;
                        }
                        else
                        {
                            frequencies.Add(n, 1);
                        }
                    }
                    long dCDivideV = 0; // duplicate
                    long uCDivideV = 0; // unique
                    foreach (long n in frequencies.Keys)
                    {
                        if (frequencies[n] > 1)
                        {
                            dCDivideV += n * frequencies[n];
                        }
                        else
                        {
                            uCDivideV += n;
                        }
                    }
                    double duCDivideV = 0.0D; // ratio
                    if (uCDivideV != 0) duCDivideV = (double)dCDivideV / (double)uCDivideV;
                    MathsVersesCDivideVDUSumTextBox.Text = duCDivideV.ToString("0.00000");
                    MathsVersesCDivideVDUSumTextBox.ForeColor = Numbers.GetNumberTypeColor((long)duCDivideV);
                    if (duCDivideV.IsInteresting()) MathsVersesCDivideVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                    ToolTip.SetToolTip(MathsVersesCDivideVDUSumTextBox, dCDivideV.ToString() + "/" + uCDivideV.ToString());
                }
            }
        }
    }
    private void MathsChaptersSumInspectLabel_Click(object sender, EventArgs e)
    {
        InspectMathsChaptersSums();
    }
    private void MathsVersesSumInspectLabel_Click(object sender, EventArgs e)
    {
        InspectMathsVersesSums();
    }
    private void InspectMathsChaptersSums()
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (Directory.Exists(Globals.STATISTICS_FOLDER))
            {
                string filename = Globals.STATISTICS_FOLDER + "/" + DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss") + "_" + "MathsChapterSums.txt";

                StringBuilder str = new StringBuilder();
                str.Append("\t");
                str.AppendLine("Chapter" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                                "Verses" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                                   "C+V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                                   "C-V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                                   "C×V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                                   "C÷V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique");

                if (m_maths_verses != null)
                {
                    if (m_client != null)
                    {
                        if (m_client.Book != null)
                        {
                            // CHAPTER SUMS
                            List<Chapter> chapters = m_client.Book.GetChapters(m_maths_verses);
                            if (chapters != null)
                            {
                                long dC = 0; // duplicate
                                long uC = 0; // unique
                                double duC = 0.0D; // d/u ratio
                                Dictionary<long, long> c_frequencies = new Dictionary<long, long>();
                                if (c_frequencies != null)
                                {
                                    foreach (Chapter chapter in chapters)
                                    {
                                        long n = chapter.SortedNumber;
                                        if (c_frequencies.ContainsKey(n))
                                        {
                                            c_frequencies[n]++;
                                        }
                                        else
                                        {
                                            c_frequencies.Add(n, 1);
                                        }
                                    }
                                    foreach (long n in c_frequencies.Keys)
                                    {
                                        if (c_frequencies[n] > 1)
                                        {
                                            dC += n * c_frequencies[n];
                                        }
                                        else
                                        {
                                            uC += n;
                                        }
                                    }
                                    if (uC != 0) duC = (double)dC / (double)uC;
                                }

                                long dV = 0; // duplicate
                                long uV = 0; // unique
                                double duV = 0.0D; // d/u ratio
                                Dictionary<long, long> v_frequencies = new Dictionary<long, long>();
                                if (v_frequencies != null)
                                {
                                    foreach (Chapter chapter in chapters)
                                    {
                                        long n = chapter.Verses.Count;
                                        if (v_frequencies.ContainsKey(n))
                                        {
                                            v_frequencies[n]++;
                                        }
                                        else
                                        {
                                            v_frequencies.Add(n, 1);
                                        }
                                    }
                                    foreach (long n in v_frequencies.Keys)
                                    {
                                        if (v_frequencies[n] > 1)
                                        {
                                            dV += n * v_frequencies[n];
                                        }
                                        else
                                        {
                                            uV += n;
                                        }
                                    }
                                    if (uV != 0) duV = (double)dV / (double)uV;
                                }

                                long dCPlusV = 0; // duplicate
                                long uCPlusV = 0; // unique
                                double duCPlusV = 0.0D; // d/u ratio
                                Dictionary<long, long> cplusv_frequencies = new Dictionary<long, long>();
                                if (cplusv_frequencies != null)
                                {
                                    foreach (Chapter chapter in chapters)
                                    {
                                        long n = chapter.SortedNumber + chapter.Verses.Count;
                                        if (cplusv_frequencies.ContainsKey(n))
                                        {
                                            cplusv_frequencies[n]++;
                                        }
                                        else
                                        {
                                            cplusv_frequencies.Add(n, 1);
                                        }
                                    }
                                    foreach (long n in cplusv_frequencies.Keys)
                                    {
                                        if (cplusv_frequencies[n] > 1)
                                        {
                                            dCPlusV += n * cplusv_frequencies[n];
                                        }
                                        else
                                        {
                                            uCPlusV += n;
                                        }
                                    }
                                    if (uCPlusV != 0) duCPlusV = (double)dCPlusV / (double)uCPlusV;
                                }

                                long dCMinusV = 0; // duplicate
                                long uCMinusV = 0; // unique
                                double duCMinusV = 0.0D; // d/u ratio
                                Dictionary<long, long> cminusv_frequencies = new Dictionary<long, long>();
                                if (cminusv_frequencies != null)
                                {
                                    foreach (Chapter chapter in chapters)
                                    {
                                        long n = m_maths_abs_cminusv ? Math.Abs(chapter.SortedNumber - chapter.Verses.Count) : (chapter.SortedNumber - chapter.Verses.Count);
                                        if (cminusv_frequencies.ContainsKey(n))
                                        {
                                            cminusv_frequencies[n]++;
                                        }
                                        else
                                        {
                                            cminusv_frequencies.Add(n, 1);
                                        }
                                    }
                                    foreach (long n in cminusv_frequencies.Keys)
                                    {
                                        if (cminusv_frequencies[n] > 1)
                                        {
                                            dCMinusV += n * cminusv_frequencies[n];
                                        }
                                        else
                                        {
                                            uCMinusV += n;
                                        }
                                    }
                                    if (uCMinusV != 0) duCMinusV = (double)dCMinusV / (double)uCMinusV;
                                }

                                long dCMultiplyV = 0; // duplicate
                                long uCMultiplyV = 0; // unique
                                double duCMultiplyV = 0.0D; // d/u ratio
                                Dictionary<long, long> cmultiplyv_frequencies = new Dictionary<long, long>();
                                if (cmultiplyv_frequencies != null)
                                {
                                    foreach (Chapter chapter in chapters)
                                    {
                                        long n = chapter.SortedNumber * chapter.Verses.Count;
                                        if (cmultiplyv_frequencies.ContainsKey(n))
                                        {
                                            cmultiplyv_frequencies[n]++;
                                        }
                                        else
                                        {
                                            cmultiplyv_frequencies.Add(n, 1);
                                        }
                                    }
                                    foreach (long n in cmultiplyv_frequencies.Keys)
                                    {
                                        if (cmultiplyv_frequencies[n] > 1)
                                        {
                                            dCMultiplyV += n * cmultiplyv_frequencies[n];
                                        }
                                        else
                                        {
                                            uCMultiplyV += n;
                                        }
                                    }
                                    if (uCMultiplyV != 0) duCMultiplyV = (double)dCMultiplyV / (double)uCMultiplyV;
                                }

                                long dCDivideV = 0; // duplicate
                                long uCDivideV = 0; // unique
                                double duCDivideV = 0.0D; // d/u ratio
                                Dictionary<long, long> cdividev_frequencies = new Dictionary<long, long>();
                                if (cdividev_frequencies != null)
                                {
                                    foreach (Chapter chapter in chapters)
                                    {
                                        long n = m_maths_vdividec ? ((long)((double)chapter.Verses.Count / (double)chapter.SortedNumber)) : ((long)((double)chapter.SortedNumber / (double)chapter.Verses.Count));
                                        if (cdividev_frequencies.ContainsKey(n))
                                        {
                                            cdividev_frequencies[n]++;
                                        }
                                        else
                                        {
                                            cdividev_frequencies.Add(n, 1);
                                        }
                                    }
                                    foreach (long n in cdividev_frequencies.Keys)
                                    {
                                        if (cdividev_frequencies[n] > 1)
                                        {
                                            dCDivideV += n * cdividev_frequencies[n];
                                        }
                                        else
                                        {
                                            uCDivideV += n;
                                        }
                                    }
                                    if (uCDivideV != 0) duCDivideV = (double)dCDivideV / (double)uCDivideV;
                                }

                                long C = 0;
                                long oC = 0;
                                long eC = 0;
                                long pC = 0;
                                long cC = 0;
                                long V = 0;
                                long oV = 0;
                                long eV = 0;
                                long pV = 0;
                                long cV = 0;
                                long CPlusV = 0;
                                long oCPlusV = 0;
                                long eCPlusV = 0;
                                long pCPlusV = 0;
                                long cCPlusV = 0;
                                long CMinusV = 0;
                                long oCMinusV = 0;
                                long eCMinusV = 0;
                                long pCMinusV = 0;
                                long cCMinusV = 0;
                                long CMultiplyV = 0;
                                long oCMultiplyV = 0;
                                long eCMultiplyV = 0;
                                long pCMultiplyV = 0;
                                long cCMultiplyV = 0;
                                double CDivideV = 0;
                                double oCDivideV = 0;
                                double eCDivideV = 0;
                                double pCDivideV = 0;
                                double cCDivideV = 0;
                                foreach (Chapter chapter in chapters)
                                {
                                    long chapter_number = chapter.SortedNumber;
                                    long verse_count = chapter.Verses.Count;
                                    long cplusv = chapter_number + verse_count;
                                    long cminusv = m_maths_abs_cminusv ? Math.Abs(chapter_number - verse_count) : (chapter_number - verse_count);
                                    long cmultiplyv = chapter_number * verse_count;
                                    double cdividev = m_maths_vdividec ? ((double)verse_count / (double)chapter_number) : ((double)chapter_number / (double)verse_count);

                                    str.Append("\t");

                                    C += chapter_number;
                                    str.Append(chapter_number + "\t");
                                    if (Numbers.IsOdd(chapter_number))
                                    {
                                        oC += chapter_number;
                                        str.Append(chapter_number + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    else
                                    {
                                        eC += chapter_number;
                                        str.Append(0 + "\t");
                                        str.Append(chapter_number + "\t");
                                    }
                                    if (Numbers.IsPrime(chapter_number))
                                    {
                                        pC += chapter_number;
                                        str.Append(chapter_number + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    else if (Numbers.IsComposite(chapter_number))
                                    {
                                        cC += chapter_number;
                                        str.Append(0 + "\t");
                                        str.Append(chapter_number + "\t");
                                    }
                                    else //if (chapter_number == 1)
                                    {
                                        str.Append(0 + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    if (c_frequencies != null)
                                    {
                                        if (c_frequencies.ContainsKey(chapter_number))
                                        {
                                            if (c_frequencies[chapter_number] > 1)
                                            {
                                                str.Append(chapter_number + "\t");
                                                str.Append(0 + "\t");
                                            }
                                            else
                                            {
                                                str.Append(0 + "\t");
                                                str.Append(chapter_number + "\t");
                                            }
                                        }
                                    }
                                    str.Append("\t");

                                    V += verse_count;
                                    str.Append(verse_count + "\t");
                                    if (Numbers.IsOdd(verse_count))
                                    {
                                        oV += verse_count;
                                        str.Append(verse_count + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    else
                                    {
                                        eV += verse_count;
                                        str.Append(0 + "\t");
                                        str.Append(verse_count + "\t");
                                    }
                                    if (Numbers.IsPrime(verse_count))
                                    {
                                        pV += verse_count;
                                        str.Append(verse_count + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    else if (Numbers.IsComposite(verse_count))
                                    {
                                        cV += verse_count;
                                        str.Append(0 + "\t");
                                        str.Append(verse_count + "\t");
                                    }
                                    else //if (verse_count == 1)
                                    {
                                        str.Append(0 + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    if (v_frequencies != null)
                                    {
                                        if (v_frequencies.ContainsKey(verse_count))
                                        {
                                            if (v_frequencies[verse_count] > 1)
                                            {
                                                str.Append(verse_count + "\t");
                                                str.Append(0 + "\t");
                                            }
                                            else
                                            {
                                                str.Append(0 + "\t");
                                                str.Append(verse_count + "\t");
                                            }
                                        }
                                    }
                                    str.Append("\t");

                                    CPlusV += cplusv;
                                    str.Append(cplusv + "\t");
                                    if (Numbers.IsOdd(cplusv))
                                    {
                                        oCPlusV += cplusv;
                                        str.Append(cplusv + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    else
                                    {
                                        eCPlusV += cplusv;
                                        str.Append(0 + "\t");
                                        str.Append(cplusv + "\t");
                                    }
                                    if (Numbers.IsPrime(cplusv))
                                    {
                                        pCPlusV += cplusv;
                                        str.Append(cplusv + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    else if (Numbers.IsComposite(cplusv))
                                    {
                                        cCPlusV += cplusv;
                                        str.Append(0 + "\t");
                                        str.Append(cplusv + "\t");
                                    }
                                    else //if (cplusv == 1)
                                    {
                                        str.Append(0 + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    if (cplusv_frequencies != null)
                                    {
                                        if (cplusv_frequencies.ContainsKey(cplusv))
                                        {
                                            if (cplusv_frequencies[cplusv] > 1)
                                            {
                                                str.Append(cplusv + "\t");
                                                str.Append(0 + "\t");
                                            }
                                            else
                                            {
                                                str.Append(0 + "\t");
                                                str.Append(cplusv + "\t");
                                            }
                                        }
                                    }
                                    str.Append("\t");

                                    CMinusV += cminusv;
                                    str.Append(cminusv + "\t");
                                    if (Numbers.IsOdd(cminusv))
                                    {
                                        oCMinusV += cminusv;
                                        str.Append(cminusv + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    else
                                    {
                                        eCMinusV += cminusv;
                                        str.Append(0 + "\t");
                                        str.Append(cminusv + "\t");
                                    }
                                    if (Numbers.IsPrime(cminusv))
                                    {
                                        pCMinusV += cminusv;
                                        str.Append(cminusv + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    else if (Numbers.IsComposite(cminusv))
                                    {
                                        cCMinusV += cminusv;
                                        str.Append(0 + "\t");
                                        str.Append(cminusv + "\t");
                                    }
                                    else //if (cminusv == 1)
                                    {
                                        str.Append(0 + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    if (cminusv_frequencies != null)
                                    {
                                        if (cminusv_frequencies.ContainsKey(cminusv))
                                        {
                                            if (cminusv_frequencies[cminusv] > 1)
                                            {
                                                str.Append(cminusv + "\t");
                                                str.Append(0 + "\t");
                                            }
                                            else
                                            {
                                                str.Append(0 + "\t");
                                                str.Append(cminusv + "\t");
                                            }
                                        }
                                    }
                                    str.Append("\t");

                                    CMultiplyV += cmultiplyv;
                                    str.Append(cmultiplyv + "\t");
                                    if (Numbers.IsOdd(cmultiplyv))
                                    {
                                        oCMultiplyV += cmultiplyv;
                                        str.Append(cmultiplyv + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    else
                                    {
                                        eCMultiplyV += cmultiplyv;
                                        str.Append(0 + "\t");
                                        str.Append(cmultiplyv + "\t");
                                    }
                                    if (Numbers.IsPrime(cmultiplyv))
                                    {
                                        pCMultiplyV += cmultiplyv;
                                        str.Append(cmultiplyv + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    else if (Numbers.IsComposite(cmultiplyv))
                                    {
                                        cCMultiplyV += cmultiplyv;
                                        str.Append(0 + "\t");
                                        str.Append(cmultiplyv + "\t");
                                    }
                                    else //if (cmultiplyv == 1)
                                    {
                                        str.Append(0 + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    if (cmultiplyv_frequencies != null)
                                    {
                                        if (cmultiplyv_frequencies.ContainsKey(cmultiplyv))
                                        {
                                            if (cmultiplyv_frequencies[cmultiplyv] > 1)
                                            {
                                                str.Append(cmultiplyv + "\t");
                                                str.Append(0 + "\t");
                                            }
                                            else
                                            {
                                                str.Append(0 + "\t");
                                                str.Append(cmultiplyv + "\t");
                                            }
                                        }
                                    }
                                    str.Append("\t");


                                    CDivideV += cdividev;
                                    str.Append(cdividev.ToString("0.0") + "\t");
                                    if (Numbers.IsOdd((long)cdividev))
                                    {
                                        oCDivideV += cdividev;
                                        str.Append(cdividev.ToString("0.0") + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    else
                                    {
                                        eCDivideV += cdividev;
                                        str.Append(0 + "\t");
                                        str.Append(cdividev.ToString("0.0") + "\t");
                                    }
                                    if (Numbers.IsPrime((long)cdividev))
                                    {
                                        pCDivideV += cdividev;
                                        str.Append(cdividev.ToString("0.0") + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    else if (Numbers.IsComposite((long)cdividev))
                                    {
                                        cCDivideV += cdividev;
                                        str.Append(0 + "\t");
                                        str.Append(cdividev.ToString("0.0") + "\t");
                                    }
                                    else //if (cdividev == 1)
                                    {
                                        str.Append(0 + "\t");
                                        str.Append(0 + "\t");
                                    }
                                    if (cdividev_frequencies != null)
                                    {
                                        if (cdividev_frequencies.ContainsKey((long)cdividev))
                                        {
                                            if (cdividev_frequencies[(long)cdividev] > 1)
                                            {
                                                str.Append(cdividev.ToString("0.0") + "\t");
                                                str.Append(0 + "\t");
                                            }
                                            else
                                            {
                                                str.Append(0 + "\t");
                                                str.Append(cdividev.ToString("0.0") + "\t");
                                            }
                                        }
                                    }
                                    str.Remove(str.Length - 1, 1);

                                    str.AppendLine();
                                }

                                str.Append("Sum" + "\t");
                                str.AppendLine(C + "\t" + oC + "\t" + eC + "\t" + pC + "\t" + cC + "\t" + dC + "\t" + uC + "\t" + "\t" +
                                               V + "\t" + oV + "\t" + eV + "\t" + pV + "\t" + cV + "\t" + dV + "\t" + uV + "\t" + "\t" +
                                               CPlusV + "\t" + oCPlusV + "\t" + eCPlusV + "\t" + pCPlusV + "\t" + cCPlusV + "\t" + dCPlusV + "\t" + uCPlusV + "\t" + "\t" +
                                               CMinusV + "\t" + oCMinusV + "\t" + eCMinusV + "\t" + pCMinusV + "\t" + cCMinusV + "\t" + dCMinusV + "\t" + uCMinusV + "\t" + "\t" +
                                               CMultiplyV + "\t" + oCMultiplyV + "\t" + eCMultiplyV + "\t" + pCMultiplyV + "\t" + cCMultiplyV + "\t" + dCMultiplyV + "\t" + uCMultiplyV + "\t" + "\t" +
                                               CDivideV.ToString("0.0") + "\t" + oCDivideV.ToString("0.0") + "\t" + eCDivideV.ToString("0.0") + "\t" + pCDivideV.ToString("0.0") + "\t" + cCDivideV.ToString("0.0") + "\t" + dCDivideV.ToString("0.0") + "\t" + uCDivideV.ToString("0.0"));
                                FileHelper.SaveText(filename, str.ToString());
                                FileHelper.DisplayFile(filename);
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void InspectMathsVersesSums()
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (Directory.Exists(Globals.STATISTICS_FOLDER))
            {
                string filename = Globals.STATISTICS_FOLDER + "/" + DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss") + "_" + "MathsVerseSums.txt";

                StringBuilder str = new StringBuilder();
                str.Append("\t");
                str.AppendLine("Chapter" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                                 "Verse" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                                   "C+V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                                   "C-V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                                   "C×V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                                   "C÷V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique");

                // VERSE SUMS
                if (m_maths_verses != null)
                {
                    long dC = 0; // duplicate
                    long uC = 0; // unique
                    double duC = 0.0D; // d/u ratio
                    Dictionary<long, long> c_frequencies = new Dictionary<long, long>();
                    if (c_frequencies != null)
                    {
                        foreach (Verse verse in m_maths_verses)
                        {
                            long n = verse.Chapter.SortedNumber;
                            if (c_frequencies.ContainsKey(n))
                            {
                                c_frequencies[n]++;
                            }
                            else
                            {
                                c_frequencies.Add(n, 1);
                            }
                        }
                        foreach (long n in c_frequencies.Keys)
                        {
                            if (c_frequencies[n] > 1)
                            {
                                dC += n * c_frequencies[n];
                            }
                            else
                            {
                                uC += n;
                            }
                        }
                        if (uC != 0) duC = (double)dC / (double)uC;
                    }

                    long dV = 0; // duplicate
                    long uV = 0; // unique
                    double duV = 0.0D; // d/u ratio
                    Dictionary<long, long> v_frequencies = new Dictionary<long, long>();
                    if (v_frequencies != null)
                    {
                        foreach (Verse verse in m_maths_verses)
                        {
                            long n = verse.NumberInChapter;
                            if (v_frequencies.ContainsKey(n))
                            {
                                v_frequencies[n]++;
                            }
                            else
                            {
                                v_frequencies.Add(n, 1);
                            }
                        }
                        foreach (long n in v_frequencies.Keys)
                        {
                            if (v_frequencies[n] > 1)
                            {
                                dV += n * v_frequencies[n];
                            }
                            else
                            {
                                uV += n;
                            }
                        }
                        if (uV != 0) duV = (double)dV / (double)uV;
                    }

                    long dCPlusV = 0; // duplicate
                    long uCPlusV = 0; // unique
                    double duCPlusV = 0.0D; // d/u ratio
                    Dictionary<long, long> cplusv_frequencies = new Dictionary<long, long>();
                    if (cplusv_frequencies != null)
                    {
                        foreach (Verse verse in m_maths_verses)
                        {
                            long n = verse.Chapter.SortedNumber + verse.NumberInChapter;
                            if (cplusv_frequencies.ContainsKey(n))
                            {
                                cplusv_frequencies[n]++;
                            }
                            else
                            {
                                cplusv_frequencies.Add(n, 1);
                            }
                        }
                        foreach (long n in cplusv_frequencies.Keys)
                        {
                            if (cplusv_frequencies[n] > 1)
                            {
                                dCPlusV += n * cplusv_frequencies[n];
                            }
                            else
                            {
                                uCPlusV += n;
                            }
                        }
                        if (uCPlusV != 0) duCPlusV = (double)dCPlusV / (double)uCPlusV;
                    }

                    long dCMinusV = 0; // duplicate
                    long uCMinusV = 0; // unique
                    double duCMinusV = 0.0D; // d/u ratio
                    Dictionary<long, long> cminusv_frequencies = new Dictionary<long, long>();
                    if (cminusv_frequencies != null)
                    {
                        foreach (Verse verse in m_maths_verses)
                        {
                            long n = m_maths_abs_cminusv ? Math.Abs(verse.Chapter.SortedNumber - verse.NumberInChapter) : (verse.Chapter.SortedNumber - verse.NumberInChapter);
                            if (cminusv_frequencies.ContainsKey(n))
                            {
                                cminusv_frequencies[n]++;
                            }
                            else
                            {
                                cminusv_frequencies.Add(n, 1);
                            }
                        }
                        foreach (long n in cminusv_frequencies.Keys)
                        {
                            if (cminusv_frequencies[n] > 1)
                            {
                                dCMinusV += n * cminusv_frequencies[n];
                            }
                            else
                            {
                                uCMinusV += n;
                            }
                        }
                        if (uCMinusV != 0) duCMinusV = (double)dCMinusV / (double)uCMinusV;
                    }

                    long dCMultiplyV = 0; // duplicate
                    long uCMultiplyV = 0; // unique
                    double duCMultiplyV = 0.0D; // d/u ratio
                    Dictionary<long, long> cmultiplyv_frequencies = new Dictionary<long, long>();
                    if (cmultiplyv_frequencies != null)
                    {
                        foreach (Verse verse in m_maths_verses)
                        {
                            long n = verse.Chapter.SortedNumber * verse.NumberInChapter;
                            if (cmultiplyv_frequencies.ContainsKey(n))
                            {
                                cmultiplyv_frequencies[n]++;
                            }
                            else
                            {
                                cmultiplyv_frequencies.Add(n, 1);
                            }
                        }
                        foreach (long n in cmultiplyv_frequencies.Keys)
                        {
                            if (cmultiplyv_frequencies[n] > 1)
                            {
                                dCMultiplyV += n * cmultiplyv_frequencies[n];
                            }
                            else
                            {
                                uCMultiplyV += n;
                            }
                        }
                        if (uCMultiplyV != 0) duCMultiplyV = (double)dCMultiplyV / (double)uCMultiplyV;
                    }

                    long dCDivideV = 0; // duplicate
                    long uCDivideV = 0; // unique
                    double duCDivideV = 0.0D; // d/u ratio
                    Dictionary<long, long> cdividev_frequencies = new Dictionary<long, long>();
                    if (cdividev_frequencies != null)
                    {
                        foreach (Verse verse in m_maths_verses)
                        {
                            long n = m_maths_vdividec ? ((long)((double)verse.NumberInChapter / (double)verse.Chapter.SortedNumber)) : ((long)((double)verse.Chapter.SortedNumber / (double)verse.NumberInChapter));
                            if (cdividev_frequencies.ContainsKey(n))
                            {
                                cdividev_frequencies[n]++;
                            }
                            else
                            {
                                cdividev_frequencies.Add(n, 1);
                            }
                        }
                        foreach (long n in cdividev_frequencies.Keys)
                        {
                            if (cdividev_frequencies[n] > 1)
                            {
                                dCDivideV += n * cdividev_frequencies[n];
                            }
                            else
                            {
                                uCDivideV += n;
                            }
                        }
                        if (uCDivideV != 0) duCDivideV = (double)dCDivideV / (double)uCDivideV;
                    }

                    long C = 0;
                    long oC = 0;
                    long eC = 0;
                    long pC = 0;
                    long cC = 0;
                    long V = 0;
                    long oV = 0;
                    long eV = 0;
                    long pV = 0;
                    long cV = 0;
                    long CPlusV = 0;
                    long oCPlusV = 0;
                    long eCPlusV = 0;
                    long pCPlusV = 0;
                    long cCPlusV = 0;
                    long CMinusV = 0;
                    long oCMinusV = 0;
                    long eCMinusV = 0;
                    long pCMinusV = 0;
                    long cCMinusV = 0;
                    long CMultiplyV = 0;
                    long oCMultiplyV = 0;
                    long eCMultiplyV = 0;
                    long pCMultiplyV = 0;
                    long cCMultiplyV = 0;
                    double CDivideV = 0;
                    double oCDivideV = 0;
                    double eCDivideV = 0;
                    double pCDivideV = 0;
                    double cCDivideV = 0;
                    foreach (Verse verse in m_maths_verses)
                    {
                        long chapter_number = verse.Chapter.SortedNumber;
                        long verse_number = verse.NumberInChapter;
                        long cplusv = chapter_number + verse_number;
                        long cminusv = m_maths_abs_cminusv ? Math.Abs(chapter_number - verse_number) : (chapter_number - verse_number);
                        long cmultiplyv = chapter_number * verse_number;
                        double cdividev = m_maths_vdividec ? ((double)verse_number / (double)chapter_number) : ((double)chapter_number / (double)verse_number);

                        str.Append("\t");

                        C += chapter_number;
                        str.Append(chapter_number + "\t");
                        if (Numbers.IsOdd(chapter_number))
                        {
                            oC += chapter_number;
                            str.Append(chapter_number + "\t");
                            str.Append(0 + "\t");
                        }
                        else
                        {
                            eC += chapter_number;
                            str.Append(0 + "\t");
                            str.Append(chapter_number + "\t");
                        }
                        if (Numbers.IsPrime(chapter_number))
                        {
                            pC += chapter_number;
                            str.Append(chapter_number + "\t");
                            str.Append(0 + "\t");
                        }
                        else if (Numbers.IsComposite(chapter_number))
                        {
                            cC += chapter_number;
                            str.Append(0 + "\t");
                            str.Append(chapter_number + "\t");
                        }
                        else //if (chapter_number == 1)
                        {
                            str.Append(0 + "\t");
                            str.Append(0 + "\t");
                        }
                        if (c_frequencies != null)
                        {
                            if (c_frequencies.ContainsKey(chapter_number))
                            {
                                if (c_frequencies[chapter_number] > 1)
                                {
                                    str.Append(chapter_number + "\t");
                                    str.Append(0 + "\t");
                                }
                                else
                                {
                                    str.Append(0 + "\t");
                                    str.Append(chapter_number + "\t");
                                }
                            }
                        }
                        str.Append("\t");

                        V += verse_number;
                        str.Append(verse_number + "\t");
                        if (Numbers.IsOdd(verse_number))
                        {
                            oV += verse_number;
                            str.Append(verse_number + "\t");
                            str.Append(0 + "\t");
                        }
                        else
                        {
                            eV += verse_number;
                            str.Append(0 + "\t");
                            str.Append(verse_number + "\t");
                        }
                        if (Numbers.IsPrime(verse_number))
                        {
                            pV += verse_number;
                            str.Append(verse_number + "\t");
                            str.Append(0 + "\t");
                        }
                        else if (Numbers.IsComposite(verse_number))
                        {
                            cV += verse_number;
                            str.Append(0 + "\t");
                            str.Append(verse_number + "\t");
                        }
                        else //if (verse_count == 1)
                        {
                            str.Append(0 + "\t");
                            str.Append(0 + "\t");
                        }
                        if (v_frequencies != null)
                        {
                            if (v_frequencies.ContainsKey(verse_number))
                            {
                                if (v_frequencies[verse_number] > 1)
                                {
                                    str.Append(verse_number + "\t");
                                    str.Append(0 + "\t");
                                }
                                else
                                {
                                    str.Append(0 + "\t");
                                    str.Append(verse_number + "\t");
                                }
                            }
                        }
                        str.Append("\t");

                        CPlusV += cplusv;
                        str.Append(cplusv + "\t");
                        if (Numbers.IsOdd(cplusv))
                        {
                            oCPlusV += cplusv;
                            str.Append(cplusv + "\t");
                            str.Append(0 + "\t");
                        }
                        else
                        {
                            eCPlusV += cplusv;
                            str.Append(0 + "\t");
                            str.Append(cplusv + "\t");
                        }
                        if (Numbers.IsPrime(cplusv))
                        {
                            pCPlusV += cplusv;
                            str.Append(cplusv + "\t");
                            str.Append(0 + "\t");
                        }
                        else if (Numbers.IsComposite(cplusv))
                        {
                            cCPlusV += cplusv;
                            str.Append(0 + "\t");
                            str.Append(cplusv + "\t");
                        }
                        else //if (cplusv == 1)
                        {
                            str.Append(0 + "\t");
                            str.Append(0 + "\t");
                        }
                        if (cplusv_frequencies != null)
                        {
                            if (cplusv_frequencies.ContainsKey(cplusv))
                            {
                                if (cplusv_frequencies[cplusv] > 1)
                                {
                                    str.Append(cplusv + "\t");
                                    str.Append(0 + "\t");
                                }
                                else
                                {
                                    str.Append(0 + "\t");
                                    str.Append(cplusv + "\t");
                                }
                            }
                        }
                        str.Append("\t");

                        CMinusV += cminusv;
                        str.Append(cminusv + "\t");
                        if (Numbers.IsOdd(cminusv))
                        {
                            oCMinusV += cminusv;
                            str.Append(cminusv + "\t");
                            str.Append(0 + "\t");
                        }
                        else
                        {
                            eCMinusV += cminusv;
                            str.Append(0 + "\t");
                            str.Append(cminusv + "\t");
                        }
                        if (Numbers.IsPrime(cminusv))
                        {
                            pCMinusV += cminusv;
                            str.Append(cminusv + "\t");
                            str.Append(0 + "\t");
                        }
                        else if (Numbers.IsComposite(cminusv))
                        {
                            cCMinusV += cminusv;
                            str.Append(0 + "\t");
                            str.Append(cminusv + "\t");
                        }
                        else //if (cminusv == 1)
                        {
                            str.Append(0 + "\t");
                            str.Append(0 + "\t");
                        }
                        if (cminusv_frequencies != null)
                        {
                            if (cminusv_frequencies.ContainsKey(cminusv))
                            {
                                if (cminusv_frequencies[cminusv] > 1)
                                {
                                    str.Append(cminusv + "\t");
                                    str.Append(0 + "\t");
                                }
                                else
                                {
                                    str.Append(0 + "\t");
                                    str.Append(cminusv + "\t");
                                }
                            }
                        }
                        str.Append("\t");

                        CMultiplyV += cmultiplyv;
                        str.Append(cmultiplyv + "\t");
                        if (Numbers.IsOdd(cmultiplyv))
                        {
                            oCMultiplyV += cmultiplyv;
                            str.Append(cmultiplyv + "\t");
                            str.Append(0 + "\t");
                        }
                        else
                        {
                            eCMultiplyV += cmultiplyv;
                            str.Append(0 + "\t");
                            str.Append(cmultiplyv + "\t");
                        }
                        if (Numbers.IsPrime(cmultiplyv))
                        {
                            pCMultiplyV += cmultiplyv;
                            str.Append(cmultiplyv + "\t");
                            str.Append(0 + "\t");
                        }
                        else if (Numbers.IsComposite(cmultiplyv))
                        {
                            cCMultiplyV += cmultiplyv;
                            str.Append(0 + "\t");
                            str.Append(cmultiplyv + "\t");
                        }
                        else //if (cmultiplyv == 1)
                        {
                            str.Append(0 + "\t");
                            str.Append(0 + "\t");
                        }
                        if (cmultiplyv_frequencies != null)
                        {
                            if (cmultiplyv_frequencies.ContainsKey(cmultiplyv))
                            {
                                if (cmultiplyv_frequencies[cmultiplyv] > 1)
                                {
                                    str.Append(cmultiplyv + "\t");
                                    str.Append(0 + "\t");
                                }
                                else
                                {
                                    str.Append(0 + "\t");
                                    str.Append(cmultiplyv + "\t");
                                }
                            }
                        }
                        str.Append("\t");

                        CDivideV += cdividev;
                        str.Append(cdividev.ToString("0.0") + "\t");
                        if (Numbers.IsOdd((long)cdividev))
                        {
                            oCDivideV += cdividev;
                            str.Append(cdividev.ToString("0.0") + "\t");
                            str.Append(0 + "\t");
                        }
                        else
                        {
                            eCDivideV += cdividev;
                            str.Append(0 + "\t");
                            str.Append(cdividev.ToString("0.0") + "\t");
                        }
                        if (Numbers.IsPrime((long)cdividev))
                        {
                            pCDivideV += cdividev;
                            str.Append(cdividev.ToString("0.0") + "\t");
                            str.Append(0 + "\t");
                        }
                        else if (Numbers.IsComposite((long)cdividev))
                        {
                            cCDivideV += cdividev;
                            str.Append(0 + "\t");
                            str.Append(cdividev.ToString("0.0") + "\t");
                        }
                        else //if (cdividev == 1)
                        {
                            str.Append(0 + "\t");
                            str.Append(0 + "\t");
                        }
                        if (cdividev_frequencies != null)
                        {
                            if (cdividev_frequencies.ContainsKey((long)cdividev))
                            {
                                if (cdividev_frequencies[(long)cdividev] > 1)
                                {
                                    str.Append(cdividev.ToString("0.0") + "\t");
                                    str.Append(0 + "\t");
                                }
                                else
                                {
                                    str.Append(0 + "\t");
                                    str.Append(cdividev.ToString("0.0") + "\t");
                                }
                            }
                        }
                        str.Remove(str.Length - 1, 1);

                        str.AppendLine();
                    }

                    str.Append("Sum" + "\t");
                    str.AppendLine(C + "\t" + oC + "\t" + eC + "\t" + pC + "\t" + cC + "\t" + dC + "\t" + uC + "\t" + "\t" +
                                   V + "\t" + oV + "\t" + eV + "\t" + pV + "\t" + cV + "\t" + dV + "\t" + uV + "\t" + "\t" +
                                   CPlusV + "\t" + oCPlusV + "\t" + eCPlusV + "\t" + pCPlusV + "\t" + cCPlusV + "\t" + dCPlusV + "\t" + uCPlusV + "\t" + "\t" +
                                   CMinusV + "\t" + oCMinusV + "\t" + eCMinusV + "\t" + pCMinusV + "\t" + cCMinusV + "\t" + dCMinusV + "\t" + uCMinusV + "\t" + "\t" +
                                   CMultiplyV + "\t" + oCMultiplyV + "\t" + eCMultiplyV + "\t" + pCMultiplyV + "\t" + cCMultiplyV + "\t" + dCMultiplyV + "\t" + uCMultiplyV + "\t" + "\t" +
                                   CDivideV.ToString("0.0") + "\t" + oCDivideV.ToString("0.0") + "\t" + eCDivideV.ToString("0.0") + "\t" + pCDivideV.ToString("0.0") + "\t" + cCDivideV.ToString("0.0") + "\t" + dCDivideV.ToString("0.0") + "\t" + uCDivideV.ToString("0.0"));

                    FileHelper.SaveText(filename, str.ToString());
                    FileHelper.DisplayFile(filename);
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Distances
    ///////////////////////////////////////////////////////////////////////////////
    private int m_distances_divisor = DEFAULT_DIVISOR;
    private bool m_distances_update_global_divisor = false;
    private void DistancesDivisorNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        m_distances_divisor = (int)DistancesDivisorNumericUpDown.Value;
        Verse verse = GetVerseAtCursor();
        if (verse != null)
        {
            UpdateVerseDistances(verse);
        }

        if (m_distances_update_global_divisor)
        {
            m_divisor = m_distances_divisor;
            DivisorValueLabel.Text = m_divisor.ToString();
        }
    }
    private void DistancesUpdateDivisorCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_distances_update_global_divisor = DistancesUpdateDivisorCheckBox.Checked;
        if (m_distances_update_global_divisor)
        {
            m_divisor = m_distances_divisor;
        }
        else
        {
            m_divisor = DEFAULT_DIVISOR;
        }
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private void DistancesInterestingNumbersEditLabel_Click(object sender, EventArgs e)
    {
        // display the interesting.txt file for live editing using ISubscriber
        string filename = Globals.NUMBERS_FOLDER + "/" + "interesting_numbers.txt";
        FileHelper.DisplayFile(filename);
    }

    private NumberScope m_distances_running_chapter_number_scope = NumberScope.Number;
    private NumberScope m_distances_running_verse_number_scope = NumberScope.Number;
    private NumberScope m_distances_running_word_number_scope = NumberScope.Number;
    private void DistancesRunningChapterNumberScopeLabel_Click(object sender, EventArgs e)
    {
        Verse verse = GetVerseAtCursor();
        if (verse != null)
        {
            switch (m_distances_running_chapter_number_scope)
            {
                case NumberScope.Number:
                default:
                    {
                        m_distances_running_chapter_number_scope = NumberScope.Number;
                        //DistancesRunningChapterNumberScopeLabel.Text = L[l]["Chapter numbers in Book"];
                        //DistancesRunningChapterNumberScopeLabel.Refresh();
                    }
                    break;
            }
            UpdateVerseDistances(verse);
        }
    }
    private void DistancesRunningVerseNumberScopeLabel_Click(object sender, EventArgs e)
    {
        Verse verse = GetVerseAtCursor();
        if (verse != null)
        {
            switch (m_distances_running_verse_number_scope)
            {
                case NumberScope.Number:
                    {
                        m_distances_running_verse_number_scope = NumberScope.NumberInChapter;
                        DistancesRunningVerseNumberScopeLabel.Text = L[l]["Verse numbers in chapters"];
                    }
                    break;
                case NumberScope.NumberInChapter:
                default:
                    {
                        m_distances_running_verse_number_scope = NumberScope.Number;
                        DistancesRunningVerseNumberScopeLabel.Text = L[l]["Verse numbers in Book"];
                    }
                    break;
            }
            UpdateVerseDistances(verse);
        }
    }
    private void DistancesRunningWordNumberScopeLabel_Click(object sender, EventArgs e)
    {
        Verse verse = GetVerseAtCursor();
        if (verse != null)
        {
            switch (m_distances_running_word_number_scope)
            {
                case NumberScope.Number:
                    {
                        m_distances_running_word_number_scope = NumberScope.NumberInChapter;
                        DistancesRunningWordNumberScopeLabel.Text = L[l]["Word numbers in chapters"];
                    }
                    break;
                case NumberScope.NumberInChapter:
                    {
                        m_distances_running_word_number_scope = NumberScope.NumberInVerse;
                        DistancesRunningWordNumberScopeLabel.Text = L[l]["Word numbers in verses"];
                    }
                    break;
                case NumberScope.NumberInVerse:
                default:
                    {
                        m_distances_running_word_number_scope = NumberScope.Number;
                        DistancesRunningWordNumberScopeLabel.Text = L[l]["Word numbers in Book"];
                    }
                    break;
            }
            UpdateVerseDistances(verse);
        }
    }
    private void UpdateDistancesOptions()
    {
        if (L != null)
        {
            if (L.ContainsKey(l))
            {
                switch (m_distances_running_chapter_number_scope)
                {
                    case NumberScope.Number:
                    default:
                        {
                            DistancesRunningVerseNumberScopeLabel.Text = L[l]["Chapter numbers in Book"];
                        }
                        break;
                }

                switch (m_distances_running_verse_number_scope)
                {
                    case NumberScope.Number:
                        {
                            DistancesRunningVerseNumberScopeLabel.Text = L[l]["Verse numbers in Book"];
                        }
                        break;
                    case NumberScope.NumberInChapter:
                    default:
                        {
                            DistancesRunningVerseNumberScopeLabel.Text = L[l]["Verse numbers in chapters"];
                        }
                        break;
                }

                switch (m_distances_running_word_number_scope)
                {
                    case NumberScope.Number:
                        {
                            DistancesRunningWordNumberScopeLabel.Text = L[l]["Word numbers in Book"];
                        }
                        break;
                    case NumberScope.NumberInChapter:
                        {
                            DistancesRunningWordNumberScopeLabel.Text = L[l]["Word numbers in chapters"];
                        }
                        break;
                    case NumberScope.NumberInVerse:
                    default:
                        {
                            DistancesRunningWordNumberScopeLabel.Text = L[l]["Word numbers in verses"];
                        }
                        break;
                }
            }
        }
    }

    //// m_selection_mode and Selection.Scope = Chapter
    // should pass Selection not Chapter to these methods
    private long GetDistancesVerseBeforeChapter(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    for (int i = 0; i < chapter.SortedNumber - 1; i++)
                    {
                        result += chapter.Book.Chapters[i].Verses.Count;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesVerseAfterChapter(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                    {
                        result += chapter.Book.Chapters[i].Verses.Count;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesWordBeforeChapter(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    for (int i = 0; i < chapter.SortedNumber - 1; i++)
                    {
                        result += chapter.Book.Chapters[i].WordCount;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesWordAfterChapter(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                    {
                        result += chapter.Book.Chapters[i].WordCount;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesVerseBeforeChapterRunningTotal(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    switch (m_distances_running_verse_number_scope)
                    {
                        case NumberScope.Number:
                            {
                                foreach (Chapter c in chapter.Book.Chapters)
                                {
                                    if (c == chapter) break;
                                    foreach (Verse verse in c.Verses)
                                    {
                                        result += verse.Number;
                                    }
                                }
                            }
                            break;
                        case NumberScope.NumberInChapter:
                        default:
                            {
                                foreach (Chapter c in chapter.Book.Chapters)
                                {
                                    if (c == chapter) break;
                                    foreach (Verse verse in c.Verses)
                                    {
                                        result += verse.NumberInChapter;
                                    }
                                }
                            }
                            break;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesVerseAfterChapterRunningTotal(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    switch (m_distances_running_verse_number_scope)
                    {
                        case NumberScope.Number:
                            {
                                for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                                {
                                    foreach (Verse verse in chapter.Book.Chapters[i].Verses)
                                    {
                                        result += verse.Number;
                                    }
                                }
                            }
                            break;
                        case NumberScope.NumberInChapter:
                        default:
                            {
                                for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                                {
                                    foreach (Verse verse in chapter.Book.Chapters[i].Verses)
                                    {
                                        result += verse.NumberInChapter;
                                    }
                                }
                            }
                            break;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesWordBeforeChapterRunningTotal(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    switch (m_distances_running_word_number_scope)
                    {
                        case NumberScope.Number:
                            {
                                foreach (Chapter c in chapter.Book.Chapters)
                                {
                                    if (c == chapter) break;
                                    foreach (Verse verse in c.Verses)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            result += word.Number;
                                        }
                                    }
                                }
                            }
                            break;
                        case NumberScope.NumberInChapter:
                            {
                                foreach (Chapter c in chapter.Book.Chapters)
                                {
                                    if (c == chapter) break;
                                    foreach (Verse verse in c.Verses)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            result += word.NumberInChapter;
                                        }
                                    }
                                }
                            }
                            break;
                        case NumberScope.NumberInVerse:
                        default:
                            {
                                foreach (Chapter c in chapter.Book.Chapters)
                                {
                                    if (c == chapter) break;
                                    foreach (Verse verse in c.Verses)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            result += word.NumberInVerse;
                                        }
                                    }
                                }
                            }
                            break;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesWordAfterChapterRunningTotal(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    switch (m_distances_running_word_number_scope)
                    {
                        case NumberScope.Number:
                            {
                                for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                                {
                                    foreach (Verse verse in chapter.Book.Chapters[i].Verses)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            result += word.Number;
                                        }
                                    }
                                }
                            }
                            break;
                        case NumberScope.NumberInChapter:
                            {
                                for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                                {
                                    foreach (Verse verse in chapter.Book.Chapters[i].Verses)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            result += word.NumberInChapter;
                                        }
                                    }
                                }
                            }
                            break;
                        case NumberScope.NumberInVerse:
                        default:
                            {
                                for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                                {
                                    foreach (Verse verse in chapter.Book.Chapters[i].Verses)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            result += word.NumberInVerse;
                                        }
                                    }
                                }
                            }
                            break;
                    }
                }
            }
        }
        return result;
    }

    //// verse or word clicked
    // get running total of chapter numbers
    private long GetDistancesChapterBeforeWithinBookRunningTotal(Chapter chapter)
    {
        if (chapter == null) return 0;

        long n = chapter.SortedNumber - 1;
        return ((n * (n + 1)) / 2);
    }
    private long GetDistancesChapterWithinBookRunningTotal(Chapter chapter)
    {
        if (chapter == null) return 0;

        long n = chapter.SortedNumber;
        return ((n * (n + 1)) / 2);
    }
    private long GetDistancesChapterAfterWithinBookRunningTotal(Chapter chapter)
    {
        if (chapter == null) return 0;
        if (chapter.Book == null) return 0;
        if (chapter.Book.Chapters == null) return 0;

        long n = chapter.SortedNumber;
        long z = chapter.Book.Chapters.Count;
        return (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
    }
    // get running total of verse numbers
    private long GetDistancesVerseBeforeWithinBookRunningTotal(Verse verse)
    {
        if (verse == null) return 0;
        if (verse.Book == null) return 0;
        if (verse.Chapter == null) return 0;
        if (verse.Book.Chapters == null) return 0;

        long result = 0;
        switch (m_distances_running_verse_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = verse.Number - 1;
                    result = ((n * (n + 1)) / 2);
                }
                break;
            case NumberScope.NumberInChapter:
            default:
                {
                    result = GetDistancesVerseBeforeChapterRunningTotal(verse.Chapter);

                    foreach (Verse v in verse.Chapter.Verses)
                    {
                        if (v == verse) break;
                        result += v.NumberInChapter;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesVerseWithinBookRunningTotal(Verse verse)
    {
        if (verse == null) return 0;
        if (verse.Book == null) return 0;
        if (verse.Chapter == null) return 0;
        if (verse.Book.Chapters == null) return 0;

        long result = 0;
        switch (m_distances_running_verse_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = verse.Number;
                    result = ((n * (n + 1)) / 2);
                }
                break;
            case NumberScope.NumberInChapter:
            default:
                {
                    result = GetDistancesVerseBeforeChapterRunningTotal(verse.Chapter);

                    foreach (Verse v in verse.Chapter.Verses)
                    {
                        result += v.NumberInChapter;
                        if (v == verse) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesVerseAfterWithinBookRunningTotal(Verse verse)
    {
        if (verse == null) return 0;
        if (verse.Book == null) return 0;
        if (verse.Book.Verses == null) return 0;
        if (verse.Chapter == null) return 0;
        if (verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_verse_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = verse.Number;
                    long z = verse.Book.Verses.Count;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
                }
                break;
            case NumberScope.NumberInChapter:
            default:
                {
                    long n = verse.NumberInChapter;
                    long z = verse.Chapter.Verses.Count;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));

                    result += GetDistancesVerseAfterChapterRunningTotal(verse.Chapter);
                }
                break;
        }
        return result;
    }
    private long GetDistancesVerseBeforeWithinChapterRunningTotal(Verse verse)
    {
        if (verse == null) return 0;
        if (verse.Book == null) return 0;
        if (verse.Chapter == null) return 0;
        if (verse.Book.Chapters == null) return 0;

        long result = 0;
        switch (m_distances_running_verse_number_scope)
        {
            case NumberScope.Number:
                {
                    foreach (Verse v in verse.Chapter.Verses)
                    {
                        if (v == verse) break;
                        result += v.Number;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
            default:
                {
                    foreach (Verse v in verse.Chapter.Verses)
                    {
                        if (v == verse) break;
                        result += v.NumberInChapter;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesVerseWithinChapterRunningTotal(Verse verse)
    {
        if (verse == null) return 0;
        if (verse.Book == null) return 0;
        if (verse.Chapter == null) return 0;
        if (verse.Book.Chapters == null) return 0;

        long result = 0;
        switch (m_distances_running_verse_number_scope)
        {
            case NumberScope.Number:
                {
                    foreach (Verse v in verse.Chapter.Verses)
                    {
                        result += v.Number;
                        if (v == verse) break;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
            default:
                {
                    foreach (Verse v in verse.Chapter.Verses)
                    {
                        result += v.NumberInChapter;
                        if (v == verse) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesVerseAfterWithinChapterRunningTotal(Verse verse)
    {
        if (verse == null) return 0;
        if (verse.Book == null) return 0;
        if (verse.Book.Verses == null) return 0;
        if (verse.Chapter == null) return 0;
        if (verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_verse_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = verse.Number;
                    long z = verse.Chapter.Verses[verse.Chapter.Verses.Count - 1].Number;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
                }
                break;
            case NumberScope.NumberInChapter:
            default:
                {
                    long n = verse.NumberInChapter;
                    long z = verse.Chapter.Verses.Count;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
                }
                break;
        }
        return result;
    }
    // get running total of word numbers
    private long GetDistancesWordBeforeWithinBookRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Chapter == null) return 0;
        if (word.Verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = word.Number - 1;
                    result = ((n * (n + 1)) / 2);
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    result = GetDistancesWordBeforeChapterRunningTotal(word.Verse.Chapter);

                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            if (w == word) break;
                            result += w.NumberInChapter;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    result = GetDistancesWordBeforeChapterRunningTotal(word.Verse.Chapter);

                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            if (w == word) break;
                            result += w.NumberInVerse;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordWithinBookRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Chapter == null) return 0;
        if (word.Verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = word.Number;
                    result = ((n * (n + 1)) / 2);
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    result = GetDistancesWordBeforeChapterRunningTotal(word.Verse.Chapter);

                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            result += w.NumberInChapter;
                            if (w == word) break;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    result = GetDistancesWordBeforeChapterRunningTotal(word.Verse.Chapter);

                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            result += w.NumberInVerse;
                            if (w == word) break;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordAfterWithinBookRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Chapter == null) return 0;
        if (word.Verse.Chapter.Verses == null) return 0;
        if (word.Verse.Book == null) return 0;
        if (word.Verse.Book.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = word.Number;
                    Verse last_verse = word.Verse.Book.Verses[word.Verse.Book.Verses.Count - 1];
                    long z = last_verse.Words[last_verse.Words.Count - 1].Number;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    long n = word.NumberInChapter;
                    long z = word.Verse.Chapter.WordCount;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));

                    result += GetDistancesWordAfterChapterRunningTotal(word.Verse.Chapter);
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    long n = word.NumberInVerse;
                    long z = word.Verse.Words.Count;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));

                    for (int i = word.Verse.NumberInChapter; i < word.Verse.Chapter.Verses.Count; i++)
                    {
                        foreach (Word w in word.Verse.Chapter.Verses[i].Words)
                        {
                            result += w.NumberInVerse;
                        }
                    }

                    result += GetDistancesWordAfterChapterRunningTotal(word.Verse.Chapter);
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordBeforeWithinChapterRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Chapter == null) return 0;
        if (word.Verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            if (w == word) break;
                            result += w.Number;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            if (w == word) break;
                            result += w.NumberInChapter;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            if (w == word) break;
                            result += w.NumberInVerse;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordWithinChapterRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Chapter == null) return 0;
        if (word.Verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            result += w.Number;
                            if (w == word) break;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            result += w.NumberInChapter;
                            if (w == word) break;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            result += w.NumberInVerse;
                            if (w == word) break;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordAfterWithinChapterRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Chapter == null) return 0;
        if (word.Verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = word.Number;
                    Verse last_verse = word.Verse.Chapter.Verses[word.Verse.Chapter.Verses.Count - 1];
                    long z = last_verse.Words[last_verse.Words.Count - 1].Number;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    long n = word.NumberInChapter;
                    long z = word.Verse.Chapter.WordCount;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    long n = word.NumberInVerse;
                    long z = word.Verse.Words.Count;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));

                    for (int i = word.Verse.NumberInChapter; i < word.Verse.Chapter.Verses.Count; i++)
                    {
                        foreach (Word w in word.Verse.Chapter.Verses[i].Words)
                        {
                            result += w.NumberInVerse;
                        }
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordBeforeWithinVerseRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Words == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    foreach (Word w in word.Verse.Words)
                    {
                        if (w == word) break;
                        result += w.Number;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    foreach (Word w in word.Verse.Words)
                    {
                        if (w == word) break;
                        result += w.NumberInChapter;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    foreach (Word w in word.Verse.Words)
                    {
                        if (w == word) break;
                        result += w.NumberInVerse;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordWithinVerseRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Words == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    foreach (Word w in word.Verse.Words)
                    {
                        result += w.Number;
                        if (w == word) break;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    foreach (Word w in word.Verse.Words)
                    {
                        result += w.NumberInChapter;
                        if (w == word) break;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    foreach (Word w in word.Verse.Words)
                    {
                        result += w.NumberInVerse;
                        if (w == word) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordAfterWithinVerseRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Words == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    for (int i = word.NumberInVerse; i < word.Verse.Words.Count; i++)
                    {
                        result += word.Verse.Words[i].Number;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    for (int i = word.NumberInVerse; i < word.Verse.Words.Count; i++)
                    {
                        result += word.Verse.Words[i].NumberInChapter;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    for (int i = word.NumberInVerse; i < word.Verse.Words.Count; i++)
                    {
                        result += word.Verse.Words[i].NumberInVerse;
                    }
                }
                break;
        }
        return result;
    }

    // display the results
    private void UpdateVerseDistances(Verse verse)
    {
        //if (TabControl.SelectedTab == DistancesTabPage)
        {
            if (verse != null)
            {
                if (verse.Book != null)
                {
                    if (verse.Book.Chapters != null)
                    {
                        if (verse.Book.Verses != null)
                        {
                            bool chapter_selection_mode = true;
                            if (m_client != null)
                            {
                                if (m_client.Selection != null)
                                {
                                    chapter_selection_mode =
                                        m_selection_mode
                                        &&
                                        (
                                            m_client.Selection.Scope != SelectionScope.Verse &&
                                            m_client.Selection.Scope != SelectionScope.Word &&
                                            m_client.Selection.Scope != SelectionScope.Letter
                                        );
                                }
                            }

                            long chapter_count = verse.Book.Chapters.Count;
                            long verse_count = verse.Book.Verses.Count;
                            long word_count = 0;
                            foreach (Verse v in verse.Book.Verses)
                            {
                                word_count += v.Words.Count;
                            }

                            int char_index = m_active_textbox.SelectionStart;
                            int line_index = m_active_textbox.GetLineFromCharIndex(char_index);
                            Word word = GetWordAtChar(char_index);
                            if (word != null)
                            {
                                // variables
                                long DistancesChapterBeforeWithinBook = (verse.Chapter.SortedNumber - 1);
                                long DistancesChapterWithinBook = (verse.Chapter.SortedNumber);
                                long DistancesChapterAfterWithinBook = (chapter_count - verse.Chapter.SortedNumber);
                                long DistancesChapterDifferenceWithinBook = DistancesChapterAfterWithinBook - DistancesChapterBeforeWithinBook;
                                long DistancesVerseBeforeWithinBook = chapter_selection_mode ? GetDistancesVerseBeforeChapter(verse.Chapter) : (verse.Number - 1);
                                long DistancesVerseWithinBook = chapter_selection_mode ? 0 : (verse.Number);
                                long DistancesVerseAfterWithinBook = chapter_selection_mode ? GetDistancesVerseAfterChapter(verse.Chapter) : (verse_count - verse.Number);
                                long DistancesVerseDifferenceWithinBook = DistancesVerseAfterWithinBook - DistancesVerseBeforeWithinBook;
                                long DistancesVerseBeforeWithinChapter = chapter_selection_mode ? 0 : (verse.NumberInChapter - 1);
                                long DistancesVerseWithinChapter = chapter_selection_mode ? 0 : (verse.NumberInChapter);
                                long DistancesVerseAfterWithinChapter = chapter_selection_mode ? 0 : (verse.Chapter.Verses.Count - verse.NumberInChapter);
                                long DistancesVerseDifferenceWithinChapter = DistancesVerseAfterWithinChapter - DistancesVerseBeforeWithinChapter;
                                long DistancesWordBeforeWithinBook = chapter_selection_mode ? GetDistancesWordBeforeChapter(verse.Chapter) : (word.Number - 1);
                                long DistancesWordWithinBook = chapter_selection_mode ? 0 : (word.Number);
                                long DistancesWordAfterWithinBook = chapter_selection_mode ? GetDistancesWordAfterChapter(verse.Chapter) : (word_count - word.Number);
                                long DistancesWordDifferenceWithinBook = DistancesWordAfterWithinBook - DistancesWordBeforeWithinBook;
                                long DistancesWordBeforeWithinChapter = chapter_selection_mode ? 0 : (word.NumberInChapter - 1);
                                long DistancesWordWithinChapter = chapter_selection_mode ? 0 : (word.NumberInChapter);
                                long DistancesWordAfterWithinChapter = chapter_selection_mode ? 0 : (verse.Chapter.WordCount - word.NumberInChapter);
                                long DistancesWordDifferenceWithinChapter = DistancesWordAfterWithinChapter - DistancesWordBeforeWithinChapter;
                                long DistancesWordBeforeWithinVerse = chapter_selection_mode ? 0 : (word.NumberInVerse - 1);
                                long DistancesWordWithinVerse = chapter_selection_mode ? 0 : (word.NumberInVerse);
                                long DistancesWordAfterWithinVerse = chapter_selection_mode ? 0 : (verse.Words.Count - word.NumberInVerse);
                                long DistancesWordDifferenceWithinVerse = DistancesWordAfterWithinVerse - DistancesWordBeforeWithinVerse;
                                // Running totals ...
                                long DistancesChapterBeforeWithinBookRunningTotal = GetDistancesChapterBeforeWithinBookRunningTotal(verse.Chapter);
                                long DistancesChapterWithinBookRunningTotal = GetDistancesChapterWithinBookRunningTotal(verse.Chapter);
                                long DistancesChapterAfterWithinBookRunningTotal = GetDistancesChapterAfterWithinBookRunningTotal(verse.Chapter);
                                long DistancesChapterDifferenceWithinBookRunningTotal = DistancesChapterAfterWithinBookRunningTotal - DistancesChapterBeforeWithinBookRunningTotal;
                                long DistancesVerseBeforeWithinBookRunningTotal = chapter_selection_mode ? GetDistancesVerseBeforeChapterRunningTotal(verse.Chapter) : GetDistancesVerseBeforeWithinBookRunningTotal(verse);
                                long DistancesVerseWithinBookRunningTotal = chapter_selection_mode ? 0 : GetDistancesVerseWithinBookRunningTotal(verse);
                                long DistancesVerseAfterWithinBookRunningTotal = chapter_selection_mode ? GetDistancesVerseAfterChapterRunningTotal(verse.Chapter) : GetDistancesVerseAfterWithinBookRunningTotal(verse);
                                long DistancesVerseDifferenceWithinBookRunningTotal = DistancesVerseAfterWithinBookRunningTotal - DistancesVerseBeforeWithinBookRunningTotal;
                                long DistancesVerseBeforeWithinChapterRunningTotal = chapter_selection_mode ? 0 : GetDistancesVerseBeforeWithinChapterRunningTotal(verse);
                                long DistancesVerseWithinChapterRunningTotal = chapter_selection_mode ? 0 : GetDistancesVerseWithinChapterRunningTotal(verse);
                                long DistancesVerseAfterWithinChapterRunningTotal = chapter_selection_mode ? 0 : GetDistancesVerseAfterWithinChapterRunningTotal(verse);
                                long DistancesVerseDifferenceWithinChapterRunningTotal = DistancesVerseAfterWithinChapterRunningTotal - DistancesVerseBeforeWithinChapterRunningTotal;
                                long DistancesWordBeforeWithinBookRunningTotal = chapter_selection_mode ? GetDistancesWordBeforeChapterRunningTotal(verse.Chapter) : GetDistancesWordBeforeWithinBookRunningTotal(word);
                                long DistancesWordWithinBookRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordWithinBookRunningTotal(word);
                                long DistancesWordAfterWithinBookRunningTotal = chapter_selection_mode ? GetDistancesWordAfterChapterRunningTotal(verse.Chapter) : GetDistancesWordAfterWithinBookRunningTotal(word);
                                long DistancesWordDifferenceWithinBookRunningTotal = DistancesWordAfterWithinBookRunningTotal - DistancesWordBeforeWithinBookRunningTotal;
                                long DistancesWordBeforeWithinChapterRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordBeforeWithinChapterRunningTotal(word);
                                long DistancesWordWithinChapterRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordWithinChapterRunningTotal(word);
                                long DistancesWordAfterWithinChapterRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordAfterWithinChapterRunningTotal(word);
                                long DistancesWordDifferenceWithinChapterRunningTotal = DistancesWordAfterWithinChapterRunningTotal - DistancesWordBeforeWithinChapterRunningTotal;
                                long DistancesWordBeforeWithinVerseRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordBeforeWithinVerseRunningTotal(word);
                                long DistancesWordWithinVerseRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordWithinVerseRunningTotal(word);
                                long DistancesWordAfterWithinVerseRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordAfterWithinVerseRunningTotal(word);
                                long DistancesWordDifferenceWithinVerseRunningTotal = DistancesWordAfterWithinVerseRunningTotal - DistancesWordBeforeWithinVerseRunningTotal;

                                // .Text
                                DistancesChapterBeforeWithinBookTextBox.Text = DistancesChapterBeforeWithinBook.ToString();
                                DistancesChapterWithinBookTextBox.Text = DistancesChapterWithinBook.ToString();
                                DistancesChapterAfterWithinBookTextBox.Text = DistancesChapterAfterWithinBook.ToString();
                                DistancesChapterDifferenceWithinBookTextBox.Text = DistancesChapterDifferenceWithinBook.ToString();
                                DistancesVerseBeforeWithinBookTextBox.Text = DistancesVerseBeforeWithinBook.ToString();
                                DistancesVerseWithinBookTextBox.Text = chapter_selection_mode ? "" : DistancesVerseWithinBook.ToString();
                                DistancesVerseAfterWithinBookTextBox.Text = DistancesVerseAfterWithinBook.ToString();
                                DistancesVerseDifferenceWithinBookTextBox.Text = DistancesVerseDifferenceWithinBook.ToString();
                                DistancesVerseBeforeWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesVerseBeforeWithinChapter.ToString();
                                DistancesVerseWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesVerseWithinChapter.ToString();
                                DistancesVerseAfterWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesVerseAfterWithinChapter.ToString();
                                DistancesVerseDifferenceWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesVerseDifferenceWithinChapter.ToString();
                                DistancesWordBeforeWithinBookTextBox.Text = DistancesWordBeforeWithinBook.ToString();
                                DistancesWordWithinBookTextBox.Text = chapter_selection_mode ? "" : DistancesWordWithinBook.ToString();
                                DistancesWordAfterWithinBookTextBox.Text = DistancesWordAfterWithinBook.ToString();
                                DistancesWordDifferenceWithinBookTextBox.Text = DistancesWordDifferenceWithinBook.ToString();
                                DistancesWordBeforeWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesWordBeforeWithinChapter.ToString();
                                DistancesWordWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesWordWithinChapter.ToString();
                                DistancesWordAfterWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesWordAfterWithinChapter.ToString();
                                DistancesWordDifferenceWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesWordDifferenceWithinChapter.ToString();
                                DistancesWordBeforeWithinVerseTextBox.Text = chapter_selection_mode ? "" : DistancesWordBeforeWithinVerse.ToString();
                                DistancesWordWithinVerseTextBox.Text = chapter_selection_mode ? "" : DistancesWordWithinVerse.ToString();
                                DistancesWordAfterWithinVerseTextBox.Text = chapter_selection_mode ? "" : DistancesWordAfterWithinVerse.ToString();
                                DistancesWordDifferenceWithinVerseTextBox.Text = chapter_selection_mode ? "" : DistancesWordDifferenceWithinVerse.ToString();
                                // Running totals ...
                                DistancesChapterBeforeWithinBookRunningTotalTextBox.Text = DistancesChapterBeforeWithinBookRunningTotal.ToString();
                                DistancesChapterWithinBookRunningTotalTextBox.Text = DistancesChapterWithinBookRunningTotal.ToString();
                                DistancesChapterAfterWithinBookRunningTotalTextBox.Text = DistancesChapterAfterWithinBookRunningTotal.ToString();
                                DistancesChapterDifferenceWithinBookRunningTotalTextBox.Text = DistancesChapterDifferenceWithinBookRunningTotal.ToString();
                                DistancesVerseBeforeWithinBookRunningTotalTextBox.Text = DistancesVerseBeforeWithinBookRunningTotal.ToString();
                                DistancesVerseWithinBookRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesVerseWithinBookRunningTotal.ToString();
                                DistancesVerseAfterWithinBookRunningTotalTextBox.Text = DistancesVerseAfterWithinBookRunningTotal.ToString();
                                DistancesVerseDifferenceWithinBookRunningTotalTextBox.Text = DistancesVerseDifferenceWithinBookRunningTotal.ToString();
                                DistancesVerseBeforeWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesVerseBeforeWithinChapterRunningTotal.ToString();
                                DistancesVerseWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesVerseWithinChapterRunningTotal.ToString();
                                DistancesVerseAfterWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesVerseAfterWithinChapterRunningTotal.ToString();
                                DistancesVerseDifferenceWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesVerseDifferenceWithinChapterRunningTotal.ToString();
                                DistancesWordBeforeWithinBookRunningTotalTextBox.Text = DistancesWordBeforeWithinBookRunningTotal.ToString();
                                DistancesWordWithinBookRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordWithinBookRunningTotal.ToString();
                                DistancesWordAfterWithinBookRunningTotalTextBox.Text = DistancesWordAfterWithinBookRunningTotal.ToString();
                                DistancesWordDifferenceWithinBookRunningTotalTextBox.Text = DistancesWordDifferenceWithinBookRunningTotal.ToString();
                                DistancesWordBeforeWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordBeforeWithinChapterRunningTotal.ToString();
                                DistancesWordWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordWithinChapterRunningTotal.ToString();
                                DistancesWordAfterWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordAfterWithinChapterRunningTotal.ToString();
                                DistancesWordDifferenceWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordDifferenceWithinChapterRunningTotal.ToString();
                                DistancesWordBeforeWithinVerseRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordBeforeWithinVerseRunningTotal.ToString();
                                DistancesWordWithinVerseRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordWithinVerseRunningTotal.ToString();
                                DistancesWordAfterWithinVerseRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordAfterWithinVerseRunningTotal.ToString();
                                DistancesWordDifferenceWithinVerseRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordDifferenceWithinVerseRunningTotal.ToString();

                                // .ForeColor
                                DistancesChapterBeforeWithinBookTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesChapterBeforeWithinBook);
                                DistancesChapterWithinBookTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesChapterWithinBook);
                                DistancesChapterAfterWithinBookTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesChapterAfterWithinBook);
                                DistancesChapterDifferenceWithinBookTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesChapterDifferenceWithinBook);
                                DistancesVerseBeforeWithinBookTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseBeforeWithinBook);
                                DistancesVerseWithinBookTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseWithinBook);
                                DistancesVerseAfterWithinBookTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseAfterWithinBook);
                                DistancesVerseDifferenceWithinBookTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseDifferenceWithinBook);
                                DistancesVerseBeforeWithinChapterTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseBeforeWithinChapter);
                                DistancesVerseWithinChapterTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseWithinChapter);
                                DistancesVerseAfterWithinChapterTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseAfterWithinChapter);
                                DistancesVerseDifferenceWithinChapterTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseDifferenceWithinChapter);
                                DistancesWordBeforeWithinBookTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordBeforeWithinBook);
                                DistancesWordWithinBookTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordWithinBook);
                                DistancesWordAfterWithinBookTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordAfterWithinBook);
                                DistancesWordDifferenceWithinBookTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordDifferenceWithinBook);
                                DistancesWordBeforeWithinChapterTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordBeforeWithinChapter);
                                DistancesWordWithinChapterTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordWithinChapter);
                                DistancesWordAfterWithinChapterTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordAfterWithinChapter);
                                DistancesWordDifferenceWithinChapterTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordDifferenceWithinChapter);
                                DistancesWordBeforeWithinVerseTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordBeforeWithinVerse);
                                DistancesWordWithinVerseTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordWithinVerse);
                                DistancesWordAfterWithinVerseTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordAfterWithinVerse);
                                DistancesWordDifferenceWithinVerseTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordDifferenceWithinVerse);
                                // Running totals ...
                                DistancesChapterBeforeWithinBookRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesChapterBeforeWithinBookRunningTotal);
                                DistancesChapterWithinBookRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesChapterWithinBookRunningTotal);
                                DistancesChapterAfterWithinBookRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesChapterAfterWithinBookRunningTotal);
                                DistancesChapterDifferenceWithinBookRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesChapterDifferenceWithinBookRunningTotal);
                                DistancesVerseBeforeWithinBookRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseBeforeWithinBookRunningTotal);
                                DistancesVerseWithinBookRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseWithinBookRunningTotal);
                                DistancesVerseAfterWithinBookRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseAfterWithinBookRunningTotal);
                                DistancesVerseDifferenceWithinBookRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseDifferenceWithinBookRunningTotal);
                                DistancesVerseBeforeWithinChapterRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseBeforeWithinChapterRunningTotal);
                                DistancesVerseWithinChapterRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseWithinChapterRunningTotal);
                                DistancesVerseAfterWithinChapterRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseAfterWithinChapterRunningTotal);
                                DistancesVerseDifferenceWithinChapterRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesVerseDifferenceWithinChapterRunningTotal);
                                DistancesWordBeforeWithinBookRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordBeforeWithinBookRunningTotal);
                                DistancesWordWithinBookRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordWithinBookRunningTotal);
                                DistancesWordAfterWithinBookRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordAfterWithinBookRunningTotal);
                                DistancesWordDifferenceWithinBookRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordDifferenceWithinBookRunningTotal);
                                DistancesWordBeforeWithinChapterRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordBeforeWithinChapterRunningTotal);
                                DistancesWordWithinChapterRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordWithinChapterRunningTotal);
                                DistancesWordAfterWithinChapterRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordAfterWithinChapterRunningTotal);
                                DistancesWordDifferenceWithinChapterRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordDifferenceWithinChapterRunningTotal);
                                DistancesWordBeforeWithinVerseRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordBeforeWithinVerseRunningTotal);
                                DistancesWordWithinVerseRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordWithinVerseRunningTotal);
                                DistancesWordAfterWithinVerseRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordAfterWithinVerseRunningTotal);
                                DistancesWordDifferenceWithinVerseRunningTotalTextBox.ForeColor = Numbers.GetNumberTypeColor(DistancesWordDifferenceWithinVerseRunningTotal);

                                // Divisor coloring
                                DistancesChapterBeforeWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesChapterBeforeWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesChapterWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesChapterWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesChapterAfterWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesChapterAfterWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesChapterDifferenceWithinBookTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesChapterDifferenceWithinBook), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseBeforeWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesVerseBeforeWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesVerseWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseAfterWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesVerseAfterWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseDifferenceWithinBookTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesVerseDifferenceWithinBook), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseBeforeWithinChapterTextBox.BackColor = (Numbers.Compare((long)DistancesVerseBeforeWithinChapter, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseWithinChapterTextBox.BackColor = (Numbers.Compare((long)DistancesVerseWithinChapter, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseAfterWithinChapterTextBox.BackColor = (Numbers.Compare((long)DistancesVerseAfterWithinChapter, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseDifferenceWithinChapterTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesVerseDifferenceWithinChapter), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordBeforeWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesWordBeforeWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesWordWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordAfterWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesWordAfterWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordDifferenceWithinBookTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesWordDifferenceWithinBook), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordBeforeWithinChapterTextBox.BackColor = (Numbers.Compare((long)DistancesWordBeforeWithinChapter, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordWithinChapterTextBox.BackColor = (Numbers.Compare((long)DistancesWordWithinChapter, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordAfterWithinChapterTextBox.BackColor = (Numbers.Compare((long)DistancesWordAfterWithinChapter, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordDifferenceWithinChapterTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesWordDifferenceWithinChapter), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordBeforeWithinVerseTextBox.BackColor = (Numbers.Compare((long)DistancesWordBeforeWithinVerse, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordWithinVerseTextBox.BackColor = (Numbers.Compare((long)DistancesWordWithinVerse, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordAfterWithinVerseTextBox.BackColor = (Numbers.Compare((long)DistancesWordAfterWithinVerse, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordDifferenceWithinVerseTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesWordDifferenceWithinVerse), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                // Running totals ...
                                DistancesChapterBeforeWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesChapterBeforeWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesChapterWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesChapterWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesChapterAfterWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesChapterAfterWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesChapterDifferenceWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesChapterDifferenceWithinBookRunningTotal), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseBeforeWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesVerseBeforeWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesVerseWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseAfterWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesVerseAfterWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseDifferenceWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesVerseDifferenceWithinBookRunningTotal), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseBeforeWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesVerseBeforeWithinChapterRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesVerseWithinChapterRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseAfterWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesVerseAfterWithinChapterRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseDifferenceWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesVerseDifferenceWithinChapterRunningTotal), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordBeforeWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordBeforeWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordAfterWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordAfterWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordDifferenceWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesWordDifferenceWithinBookRunningTotal), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordBeforeWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordBeforeWithinChapterRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordWithinChapterRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordAfterWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordAfterWithinChapterRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordDifferenceWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesWordDifferenceWithinChapterRunningTotal), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordBeforeWithinVerseRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordBeforeWithinVerseRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordWithinVerseRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordWithinVerseRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordAfterWithinVerseRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordAfterWithinVerseRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordDifferenceWithinVerseRunningTotalTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesWordDifferenceWithinVerseRunningTotal), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;

                                // Interesting numbers
                                if (DistancesChapterBeforeWithinBook.IsInteresting()) DistancesChapterBeforeWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesChapterWithinBook.IsInteresting()) DistancesChapterWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesChapterAfterWithinBook.IsInteresting()) DistancesChapterAfterWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesChapterDifferenceWithinBook).IsInteresting()) DistancesChapterDifferenceWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseBeforeWithinBook.IsInteresting()) DistancesVerseBeforeWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseWithinBook.IsInteresting()) DistancesVerseWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseAfterWithinBook.IsInteresting()) DistancesVerseAfterWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesVerseDifferenceWithinBook).IsInteresting()) DistancesVerseDifferenceWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseBeforeWithinChapter.IsInteresting()) DistancesVerseBeforeWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseWithinChapter.IsInteresting()) DistancesVerseWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseAfterWithinChapter.IsInteresting()) DistancesVerseAfterWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesVerseDifferenceWithinChapter).IsInteresting()) DistancesVerseDifferenceWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordBeforeWithinBook.IsInteresting()) DistancesWordBeforeWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordWithinBook.IsInteresting()) DistancesWordWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordAfterWithinBook.IsInteresting()) DistancesWordAfterWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesWordDifferenceWithinBook).IsInteresting()) DistancesWordDifferenceWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordBeforeWithinChapter.IsInteresting()) DistancesWordBeforeWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordWithinChapter.IsInteresting()) DistancesWordWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordAfterWithinChapter.IsInteresting()) DistancesWordAfterWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesWordDifferenceWithinChapter).IsInteresting()) DistancesWordDifferenceWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordBeforeWithinVerse.IsInteresting()) DistancesWordBeforeWithinVerseTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordWithinVerse.IsInteresting()) DistancesWordWithinVerseTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordAfterWithinVerse.IsInteresting()) DistancesWordAfterWithinVerseTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesWordDifferenceWithinVerse).IsInteresting()) DistancesWordDifferenceWithinVerseTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                // Running totals ...
                                if (DistancesChapterBeforeWithinBookRunningTotal.IsInteresting()) DistancesChapterBeforeWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesChapterWithinBookRunningTotal.IsInteresting()) DistancesChapterWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesChapterAfterWithinBookRunningTotal.IsInteresting()) DistancesChapterAfterWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesChapterDifferenceWithinBookRunningTotal).IsInteresting()) DistancesChapterDifferenceWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseBeforeWithinBookRunningTotal.IsInteresting()) DistancesVerseBeforeWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseWithinBookRunningTotal.IsInteresting()) DistancesVerseWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseAfterWithinBookRunningTotal.IsInteresting()) DistancesVerseAfterWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesVerseDifferenceWithinBookRunningTotal).IsInteresting()) DistancesVerseDifferenceWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseBeforeWithinChapterRunningTotal.IsInteresting()) DistancesVerseBeforeWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseWithinChapterRunningTotal.IsInteresting()) DistancesVerseWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseAfterWithinChapterRunningTotal.IsInteresting()) DistancesVerseAfterWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesVerseDifferenceWithinChapterRunningTotal).IsInteresting()) DistancesVerseDifferenceWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordBeforeWithinBookRunningTotal.IsInteresting()) DistancesWordBeforeWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordWithinBookRunningTotal.IsInteresting()) DistancesWordWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordAfterWithinBookRunningTotal.IsInteresting()) DistancesWordAfterWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesWordDifferenceWithinBookRunningTotal).IsInteresting()) DistancesWordDifferenceWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordBeforeWithinChapterRunningTotal.IsInteresting()) DistancesWordBeforeWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordWithinChapterRunningTotal.IsInteresting()) DistancesWordWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordAfterWithinChapterRunningTotal.IsInteresting()) DistancesWordAfterWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesWordDifferenceWithinChapterRunningTotal).IsInteresting()) DistancesWordDifferenceWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordBeforeWithinVerseRunningTotal.IsInteresting()) DistancesWordBeforeWithinVerseRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordWithinVerseRunningTotal.IsInteresting()) DistancesWordWithinVerseRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordAfterWithinVerseRunningTotal.IsInteresting()) DistancesWordAfterWithinVerseRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesWordDifferenceWithinVerseRunningTotal).IsInteresting()) DistancesWordDifferenceWithinVerseRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            }
                        }
                    }
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region CVWLSequence
    ///////////////////////////////////////////////////////////////////////////////
    private enum CVWLSequenceType
    {
        _________________wLetters,
        Word_____________wLetters,
        Word_____________wLLLLL,
        VerseWord________wLetters,
        VerseWord________wLLLLL,
        ChapterVerseWord_wLetters,
        ChapterVerseWord_wLLLLL,

        _________________vLetters,
        _________________vWords,
        Verse____________vLetters,
        Verse____________vLLLLL,
        Verse____________vWords,
        Verse____________vWWWWW,
        ChapterVerse_____vLetters,
        ChapterVerse_____vLLLLL,
        ChapterVerse_____vWords,
        ChapterVerse_____vWWWWW,

        _________________cLetters,
        _________________cWords,
        _________________cVerses,
        Chapter__________cLetters,
        Chapter__________cLLLLL,
        Chapter__________cWords,
        Chapter__________cWWWWW,
        Chapter__________cVerses,
        Chapter__________cVVVVV,
    };
    private void PopulateCVWLSequenceTypeComboBox()
    {
        CVWLSequenceTypeComboBox.Items.Clear();

        try
        {
            for (int i = 0; i < 3; i++) CVWLSequenceTypeComboBox.SelectedIndexChanged -= new EventHandler(CVWLSequenceTypeComboBox_SelectedIndexChanged);

            CVWLSequenceTypeComboBox.BeginUpdate();
            CVWLSequenceTypeComboBox.Items.Clear();
            foreach (CVWLSequenceType item in Enum.GetValues(typeof(CVWLSequenceType)))
            {
                CVWLSequenceTypeComboBox.Items.Add(item);
            }
            if (CVWLSequenceTypeComboBox.Items.Count > 0)
            {
                CVWLSequenceTypeComboBox.SelectedIndex = 0;
            }
        }
        finally
        {
            CVWLSequenceTypeComboBox.EndUpdate();
            CVWLSequenceTypeComboBox.SelectedIndexChanged += new EventHandler(CVWLSequenceTypeComboBox_SelectedIndexChanged);
        }
    }
    private bool m_cvwl_sequence_show_factors = false;
    private void CVWLSequenceShowFactorsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_cvwl_sequence_show_factors = CVWLSequenceShowFactorsCheckBox.Checked;
        CVWLSequenceShowFactorsCheckBox.Refresh();

        DisplayCVWLSequence();
    }
    private void CVWLSequenceTypeComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (CVWLSequenceTypeComboBox.SelectedItem != null)
        {
            CVWLSequenceType cvwl_sequence_type = (CVWLSequenceType)Enum.Parse(typeof(CVWLSequenceType), CVWLSequenceTypeComboBox.SelectedItem.ToString());
            if (!String.IsNullOrEmpty(m_current_text))
            {
                if (m_cvwl_sequence_show_factors)
                {
                    string cvwl_str = BuildCVWLSequence(cvwl_sequence_type, m_current_text);
                    cvwl_str = cvwl_str.Replace("\r", "");

                    StringBuilder str = new StringBuilder();
                    string[] lines = cvwl_str.Split('\n');
                    foreach (string line in lines)
                    {
                        string factors_str = "";
                        if (line.Length <= 19) // max long is 19 digits long
                        {
                            long number = 0L;
                            if (long.TryParse(line, out number))
                            {
                                factors_str = Numbers.FactorizeToString(number);
                            }
                        }
                        str.AppendLine(line + "\t\t" + factors_str);
                    }

                    CVWLSequenceTextBox.Text = str.ToString();
                }
                else
                {
                    CVWLSequenceTextBox.Text = BuildCVWLSequence(cvwl_sequence_type, m_current_text);
                }
            }
        }
    }
    private string BuildCVWLSequence(CVWLSequenceType cvwl_sequence_type, string text)
    {
        if (String.IsNullOrEmpty(text)) return null;
        StringBuilder str = new StringBuilder();
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                if (m_client.Selection != null)
                {
                    text = text.SimplifyTo(m_client.NumerologySystem.TextMode);
                    text = text.Replace("\r", "");

                    if (m_cvwl_sequence_right_to_left)
                    {
                        switch (cvwl_sequence_type)
                        {
                            case CVWLSequenceType._________________wLetters:
                                R2L__________________wLetters(text, str);
                                break;
                            case CVWLSequenceType.Word_____________wLetters:
                                R2L_Word_____________wLetters(str);
                                break;
                            case CVWLSequenceType.Word_____________wLLLLL:
                                R2L_Word_____________wLLLLL(str);
                                break;
                            case CVWLSequenceType.VerseWord________wLetters:
                                R2L_VerseWord________wLetters(str);
                                break;
                            case CVWLSequenceType.VerseWord________wLLLLL:
                                R2L_VerseWord________wLLLLL(str);
                                break;
                            case CVWLSequenceType.ChapterVerseWord_wLetters:
                                R2L_ChapterVerseWord_wLetters(str);
                                break;
                            case CVWLSequenceType.ChapterVerseWord_wLLLLL:
                                R2L_ChapterVerseWord_wLLLLL(str);
                                break;
                            case CVWLSequenceType._________________vLetters:
                                R2L__________________vLetters(str);
                                break;
                            case CVWLSequenceType._________________vWords:
                                R2L__________________vWords(str);
                                break;
                            case CVWLSequenceType.Verse____________vLetters:
                                R2L_Verse____________vLetters(str);
                                break;
                            case CVWLSequenceType.Verse____________vLLLLL:
                                R2L_Verse____________vLLLLL(str);
                                break;
                            case CVWLSequenceType.Verse____________vWords:
                                R2L_Verse____________vWords(str);
                                break;
                            case CVWLSequenceType.Verse____________vWWWWW:
                                R2L_Verse____________vWWWWW(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vLetters:
                                R2L_ChapterVerse_____vLetters(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vLLLLL:
                                R2L_ChapterVerse_____vLLLLL(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vWords:
                                R2L_ChapterVerse_____vWords(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vWWWWW:
                                R2L_ChapterVerse_____vWWWWW(str);
                                break;
                            case CVWLSequenceType._________________cLetters:
                                R2L__________________cLetters(str);
                                break;
                            case CVWLSequenceType._________________cWords:
                                R2L__________________cWords(str);
                                break;
                            case CVWLSequenceType._________________cVerses:
                                R2L__________________cVerses(str);
                                break;
                            case CVWLSequenceType.Chapter__________cLetters:
                                R2L_Chapter__________cLetters(str);
                                break;
                            case CVWLSequenceType.Chapter__________cLLLLL:
                                R2L_Chapter__________cLLLLL(str);
                                break;
                            case CVWLSequenceType.Chapter__________cWords:
                                R2L_Chapter__________cWords(str);
                                break;
                            case CVWLSequenceType.Chapter__________cWWWWW:
                                R2L_Chapter__________cWWWWW(str);
                                break;
                            case CVWLSequenceType.Chapter__________cVerses:
                                R2L_Chapter__________cVerses(str);
                                break;
                            case CVWLSequenceType.Chapter__________cVVVVV:
                                R2L_Chapter__________cVVVVV(str);
                                break;
                            default:
                                break;
                        }
                    }
                    else // left to right
                    {
                        switch (cvwl_sequence_type)
                        {
                            case CVWLSequenceType._________________wLetters:
                                L2R__________________wLetters(text, str);
                                break;
                            case CVWLSequenceType.Word_____________wLetters:
                                L2R_Word_____________wLetters(str);
                                break;
                            case CVWLSequenceType.Word_____________wLLLLL:
                                L2R_Word_____________wLLLLL(str);
                                break;
                            case CVWLSequenceType.VerseWord________wLetters:
                                L2R_VerseWord________wLetters(str);
                                break;
                            case CVWLSequenceType.VerseWord________wLLLLL:
                                L2R_VerseWord________wLLLLL(str);
                                break;
                            case CVWLSequenceType.ChapterVerseWord_wLetters:
                                L2R_ChapterVerseWord_wLetters(str);
                                break;
                            case CVWLSequenceType.ChapterVerseWord_wLLLLL:
                                L2R_ChapterVerseWord_wLLLLL(str);
                                break;
                            case CVWLSequenceType._________________vLetters:
                                L2R__________________vLetters(str);
                                break;
                            case CVWLSequenceType._________________vWords:
                                L2R__________________vWords(str);
                                break;
                            case CVWLSequenceType.Verse____________vLetters:
                                L2R_Verse____________vLetters(str);
                                break;
                            case CVWLSequenceType.Verse____________vLLLLL:
                                L2R_Verse____________vLLLLL(str);
                                break;
                            case CVWLSequenceType.Verse____________vWords:
                                L2R_Verse____________vWords(str);
                                break;
                            case CVWLSequenceType.Verse____________vWWWWW:
                                L2R_Verse____________vWWWWW(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vLetters:
                                L2R_ChapterVerse_____vLetters(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vLLLLL:
                                L2R_ChapterVerse_____vLLLLL(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vWords:
                                L2R_ChapterVerse_____vWords(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vWWWWW:
                                L2R_ChapterVerse_____vWWWWW(str);
                                break;
                            case CVWLSequenceType._________________cLetters:
                                L2R__________________cLetters(str);
                                break;
                            case CVWLSequenceType._________________cWords:
                                L2R__________________cWords(str);
                                break;
                            case CVWLSequenceType._________________cVerses:
                                L2R__________________cVerses(str);
                                break;
                            case CVWLSequenceType.Chapter__________cLetters:
                                L2R_Chapter__________cLetters(str);
                                break;
                            case CVWLSequenceType.Chapter__________cLLLLL:
                                L2R_Chapter__________cLLLLL(str);
                                break;
                            case CVWLSequenceType.Chapter__________cWords:
                                L2R_Chapter__________cWords(str);
                                break;
                            case CVWLSequenceType.Chapter__________cWWWWW:
                                L2R_Chapter__________cWWWWW(str);
                                break;
                            case CVWLSequenceType.Chapter__________cVerses:
                                L2R_Chapter__________cVerses(str);
                                break;
                            case CVWLSequenceType.Chapter__________cVVVVV:
                                L2R_Chapter__________cVVVVV(str);
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
        }
        return str.ToString().Trim();
    }
    private void R2L__________________wLetters(string text, StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                foreach (Word word in verse.Words)
                {
                    str.Insert(start, word.Letters.Count.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            string[] lines = text.Split('\n');
            foreach (string line in lines)
            {
                string[] words = line.Split(' ');
                foreach (string word in words)
                {
                    if (word.Length > 0)
                    {
                        str.Insert(start, word.Length.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
    }
    private void R2L_Word_____________wLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                foreach (Word word in verse.Words)
                {
                    str.Insert(start, word.Letters.Count.ToString() + word.NumberInVerse.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    foreach (Word word in verse.Words)
                    {
                        str.Insert(start, word.Letters.Count.ToString() + word.NumberInVerse.ToString());
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Word_____________wLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                foreach (Word word in verse.Words)
                {
                    str.Insert(start, word.NumberInVerse.ToString());
                    foreach (Letter letter in word.Letters)
                    {
                        str.Insert(start, letter.NumberInWord.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    foreach (Word word in verse.Words)
                    {
                        str.Insert(start, word.NumberInVerse.ToString());
                        foreach (Letter letter in word.Letters)
                        {
                            str.Insert(start, letter.NumberInWord.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_VerseWord________wLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    str.Insert(start, word.Letters.Count.ToString() + word.NumberInVerse.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        str.Insert(start, word.Letters.Count.ToString() + word.NumberInVerse.ToString());
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_VerseWord________wLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    str.Insert(start, word.NumberInVerse.ToString());
                    foreach (Letter letter in word.Letters)
                    {
                        str.Insert(start, letter.NumberInWord.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        str.Insert(start, word.NumberInVerse.ToString());
                        foreach (Letter letter in word.Letters)
                        {
                            str.Insert(start, letter.NumberInWord.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_ChapterVerseWord_wLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            str.Insert(start, word.Letters.Count.ToString() + word.NumberInVerse.ToString());
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                str.Insert(start, word.Letters.Count.ToString() + word.NumberInVerse.ToString());
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_ChapterVerseWord_wLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            str.Insert(start, word.NumberInVerse.ToString());
                            foreach (Letter letter in word.Letters)
                            {
                                str.Insert(start, letter.NumberInWord.ToString());
                            }
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                str.Insert(start, word.NumberInVerse.ToString());
                                foreach (Letter letter in word.Letters)
                                {
                                    str.Insert(start, letter.NumberInWord.ToString());
                                }
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L__________________vLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.LetterCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.LetterCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L__________________vWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.Words.Count.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.Words.Count.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Verse____________vLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.LetterCount.ToString() + verse.NumberInChapter.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.LetterCount.ToString() + verse.NumberInChapter.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Verse____________vLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    foreach (Letter letter in word.Letters)
                    {
                        str.Insert(start, letter.NumberInVerse.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        foreach (Letter letter in word.Letters)
                        {
                            str.Insert(start, letter.NumberInVerse.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Verse____________vWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.Words.Count.ToString() + verse.NumberInChapter.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.Words.Count.ToString() + verse.NumberInChapter.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Verse____________vWWWWW(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    str.Insert(start, word.NumberInVerse.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        str.Insert(start, word.NumberInVerse.ToString());
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_ChapterVerse_____vLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.LetterCount.ToString() + verse.NumberInChapter.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.LetterCount.ToString() + verse.NumberInChapter.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_ChapterVerse_____vLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            foreach (Letter letter in word.Letters)
                            {
                                str.Insert(start, letter.NumberInVerse.ToString());
                            }
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                foreach (Letter letter in word.Letters)
                                {
                                    str.Insert(start, letter.NumberInVerse.ToString());
                                }
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_ChapterVerse_____vWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.Words.Count.ToString() + verse.NumberInChapter.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.Words.Count.ToString() + verse.NumberInChapter.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_ChapterVerse_____vWWWWW(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            str.Insert(start, word.NumberInVerse.ToString());
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                str.Insert(start, word.NumberInVerse.ToString());
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L__________________cLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.LetterCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.LetterCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L__________________cWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.WordCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.WordCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L__________________cVerses(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.Verses.Count.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.Verses.Count.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Chapter__________cLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.LetterCount.ToString() + chapter.SortedNumber.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.LetterCount.ToString() + chapter.SortedNumber.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Chapter__________cLLLLL(StringBuilder str)//
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        foreach (Word word in verse.Words)
                        {
                            foreach (Letter letter in word.Letters)
                            {
                                str.Insert(start, letter.NumberInVerse.ToString());
                            }
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            foreach (Word word in verse.Words)
                            {
                                foreach (Letter letter in word.Letters)
                                {
                                    str.Insert(start, letter.NumberInVerse.ToString());
                                }
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Chapter__________cWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.WordCount.ToString() + chapter.SortedNumber.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.WordCount.ToString() + chapter.SortedNumber.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Chapter__________cWWWWW(StringBuilder str)//
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        foreach (Word word in verse.Words)
                        {
                            str.Append(word.NumberInChapter.ToString());
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            foreach (Word word in verse.Words)
                            {
                                str.Append(word.NumberInChapter.ToString());
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Chapter__________cVerses(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.Verses.Count.ToString() + chapter.SortedNumber.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.Verses.Count.ToString() + chapter.SortedNumber.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Chapter__________cVVVVV(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.NumberInChapter.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.NumberInChapter.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void L2R__________________wLetters(string text, StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                foreach (Word word in verse.Words)
                {
                    str.Append(word.Letters.Count);
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            string[] lines = text.Split('\n');
            foreach (string line in lines)
            {
                string[] words = line.Split(' ');
                foreach (string word in words)
                {
                    if (word.Length > 0)
                    {
                        str.Append(word.Length);
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
    }
    private void L2R_Word_____________wLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                foreach (Word word in verse.Words)
                {
                    str.Append(word.NumberInVerse.ToString() + word.Letters.Count.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    foreach (Word word in verse.Words)
                    {
                        str.Append(word.NumberInVerse.ToString() + word.Letters.Count.ToString());
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Word_____________wLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                foreach (Word word in verse.Words)
                {
                    str.Append(word.NumberInVerse.ToString());
                    foreach (Letter letter in word.Letters)
                    {
                        str.Append(letter.NumberInWord.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    foreach (Word word in verse.Words)
                    {
                        str.Append(word.NumberInVerse.ToString());
                        foreach (Letter letter in word.Letters)
                        {
                            str.Append(letter.NumberInWord.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_VerseWord________wLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    str.Append(word.NumberInVerse.ToString() + word.Letters.Count.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        str.Append(word.NumberInVerse.ToString() + word.Letters.Count.ToString());
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_VerseWord________wLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    str.Append(word.NumberInVerse.ToString());
                    foreach (Letter letter in word.Letters)
                    {
                        str.Append(letter.NumberInWord.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        str.Append(word.NumberInVerse.ToString());
                        foreach (Letter letter in word.Letters)
                        {
                            str.Append(letter.NumberInWord.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_ChapterVerseWord_wLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            str.Append(word.NumberInVerse.ToString() + word.Letters.Count.ToString());
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                str.Append(word.NumberInVerse.ToString() + word.Letters.Count.ToString());
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_ChapterVerseWord_wLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            str.Append(word.NumberInVerse.ToString());
                            foreach (Letter letter in word.Letters)
                            {
                                str.Append(letter.NumberInWord.ToString());
                            }
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                str.Append(word.NumberInVerse.ToString());
                                foreach (Letter letter in word.Letters)
                                {
                                    str.Append(letter.NumberInWord.ToString());
                                }
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R__________________vLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.LetterCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.LetterCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R__________________vWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.Words.Count.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.Words.Count.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Verse____________vLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.NumberInChapter.ToString() + verse.LetterCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.NumberInChapter.ToString() + verse.LetterCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Verse____________vLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    foreach (Letter letter in word.Letters)
                    {
                        str.Append(letter.NumberInVerse.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        foreach (Letter letter in word.Letters)
                        {
                            str.Append(letter.NumberInVerse.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Verse____________vWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.NumberInChapter.ToString() + verse.Words.Count.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.NumberInChapter.ToString() + verse.Words.Count.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Verse____________vWWWWW(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    str.Append(word.NumberInVerse.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        str.Append(word.NumberInVerse.ToString());
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_ChapterVerse_____vLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString() + verse.LetterCount.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString() + verse.LetterCount.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_ChapterVerse_____vLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            foreach (Letter letter in word.Letters)
                            {
                                str.Append(letter.NumberInVerse.ToString());
                            }
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                foreach (Letter letter in word.Letters)
                                {
                                    str.Append(letter.NumberInVerse.ToString());
                                }
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_ChapterVerse_____vWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString() + verse.Words.Count.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString() + verse.Words.Count.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_ChapterVerse_____vWWWWW(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            str.Append(word.NumberInVerse.ToString());
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                str.Append(word.NumberInVerse.ToString());
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R__________________cLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.LetterCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.LetterCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R__________________cWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.WordCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.WordCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R__________________cVerses(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.Verses.Count.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.Verses.Count.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Chapter__________cLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString() + chapter.LetterCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString() + chapter.LetterCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Chapter__________cLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        foreach (Word word in verse.Words)
                        {
                            foreach (Letter letter in word.Letters)
                            {
                                str.Append(letter.NumberInChapter.ToString());
                            }
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            foreach (Word word in verse.Words)
                            {
                                foreach (Letter letter in word.Letters)
                                {
                                    str.Append(letter.NumberInChapter.ToString());
                                }
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Chapter__________cWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString() + chapter.WordCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString() + chapter.WordCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Chapter__________cWWWWW(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        foreach (Word word in verse.Words)
                        {
                            str.Append(word.NumberInChapter.ToString());
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            foreach (Word word in verse.Words)
                            {
                                str.Append(word.NumberInChapter.ToString());
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Chapter__________cVerses(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString() + chapter.Verses.Count.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString() + chapter.Verses.Count.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Chapter__________cVVVVV(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private bool m_cvwl_sequence_right_to_left = true;
    private void CVWLSequenceDirectionLabel_Click(object sender, EventArgs e)
    {
        m_cvwl_sequence_right_to_left = !m_cvwl_sequence_right_to_left;
        //CVWLSequenceTextBox.RightToLeft = m_cvwl_sequence_right_to_left ? RightToLeft.Yes : RightToLeft.No;
        //CVWLSequenceDirectionLabel.Left = m_cvwl_sequence_right_to_left ? -2 : 633;
        //CVWLSequenceDirectionLabel.Anchor = m_cvwl_sequence_right_to_left ? (AnchorStyles.Top | AnchorStyles.Left) : (AnchorStyles.Top | AnchorStyles.Right);

        if (m_cvwl_sequence_right_to_left)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_left.png"))
            {
                CVWLSequenceDirectionLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_left.png");
            }
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_right.png"))
            {
                CVWLSequenceDirectionLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_right.png");
            }
        }
        CVWLSequenceDirectionLabel.Refresh();

        DisplayCVWLSequence();
    }
    private void DisplayCVWLSequence()
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            //if (TabControl.SelectedTab == CVWLSequenceTabPage)
            {
                CVWLSequenceTypeComboBox_SelectedIndexChanged(null, null);
            }
        }
    }
    private void CVWLSequenceInspectLabel_Click(object sender, EventArgs e)
    {
        string cvwl_sequence_type = CVWLSequenceTypeComboBox.SelectedItem.ToString();
        string filename = (m_cvwl_sequence_right_to_left ? "R2L" : "L2R") + "_" + cvwl_sequence_type + Globals.OUTPUT_FILE_EXT;
        if (Directory.Exists(Globals.STATISTICS_FOLDER))
        {
            string path = Globals.STATISTICS_FOLDER + "/" + filename;
            FileHelper.SaveText(path, CVWLSequenceTextBox.Text);
            FileHelper.DisplayFile(path);
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region ValuesSequence
    ///////////////////////////////////////////////////////////////////////////////
    private int m_values_sequence_radix = DEFAULT_RADIX;
    private enum ValuesSequenceScope
    {
        LetterValues,
        WordValues,
        VerseValues,
        ChapterValues
    };
    private void PopulateValuesSequenceScopeComboBox()
    {
        ValuesSequenceScopeComboBox.Items.Clear();
        try
        {
            for (int i = 0; i < 3; i++) ValuesSequenceScopeComboBox.SelectedIndexChanged -= new EventHandler(ValuesSequenceScopeComboBox_SelectedIndexChanged);

            ValuesSequenceScopeComboBox.BeginUpdate();
            ValuesSequenceScopeComboBox.Items.Clear();
            foreach (ValuesSequenceScope item in Enum.GetValues(typeof(ValuesSequenceScope)))
            {
                ValuesSequenceScopeComboBox.Items.Add(item);
            }
            if (ValuesSequenceScopeComboBox.Items.Count > 0)
            {
                ValuesSequenceScopeComboBox.SelectedIndex = 0;
            }
        }
        finally
        {
            ValuesSequenceScopeComboBox.EndUpdate();
            ValuesSequenceScopeComboBox.SelectedIndexChanged += new EventHandler(ValuesSequenceScopeComboBox_SelectedIndexChanged);
        }
    }
    private void ValuesSequenceScopeComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ValuesSequenceScopeComboBox.SelectedItem != null)
        {
            ValuesSequenceScope values_sequence_scope = (ValuesSequenceScope)Enum.Parse(typeof(ValuesSequenceScope), ValuesSequenceScopeComboBox.SelectedItem.ToString());
            if (!String.IsNullOrEmpty(m_current_text))
            {
                ValuesSequenceTextBox.Text = BuildValuesSequence(values_sequence_scope, m_current_text);
            }
        }
    }
    private void ValuesSequenceRadixNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        m_values_sequence_radix = (int)ValuesSequenceRadixNumericUpDown.Value;
        DisplayValuesSequence();
    }
    private string BuildValuesSequence(ValuesSequenceScope values_sequence_scope, string text)
    {
        if (String.IsNullOrEmpty(text)) return null;

        StringBuilder str = new StringBuilder();

        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                if (m_client.Selection != null)
                {
                    text = text.SimplifyTo(m_client.NumerologySystem.TextMode);
                    text = text.Replace("\r", "");

                    if (m_values_sequence_right_to_left)
                    {
                        int line_start = 0;
                        switch (values_sequence_scope)
                        {
                            case ValuesSequenceScope.LetterValues:
                                {
                                    foreach (char c in text)
                                    {
                                        if (c == '\n')
                                        {
                                            str.AppendLine();
                                            line_start = str.Length;
                                        }
                                        else if (c == ' ')
                                        {
                                            str.Insert(line_start, c);
                                        }
                                        else
                                        {
                                            str.Insert(line_start, " ");
                                            long value = m_client.CalculateValueUserText(c);
                                            str.Insert(line_start, Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 8, '0'));
                                        }
                                    }
                                }
                                break;
                            case ValuesSequenceScope.WordValues:
                                {
                                    string[] lines = text.Split('\n');
                                    foreach (string line in lines)
                                    {
                                        string[] word_texts = line.Split(' ');
                                        foreach (string word_text in word_texts)
                                        {
                                            long value = m_client.CalculateValueUserText(word_text);
                                            str.Insert(line_start, Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 16, '0'));
                                            str.Insert(line_start, " ");
                                        }
                                        str.Remove(line_start, 1); // last ' '
                                        str.AppendLine();
                                        line_start = str.Length;
                                    }
                                }
                                break;
                            case ValuesSequenceScope.VerseValues:
                                {
                                    string[] lines = text.Split('\n');
                                    foreach (string line in lines)
                                    {
                                        long value = m_client.CalculateValueUserText(line);
                                        str.AppendLine(Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 32, '0'));
                                    }
                                }
                                break;
                            case ValuesSequenceScope.ChapterValues:
                                {
                                    if (m_client.Book != null)
                                    {
                                        foreach (Chapter chapter in m_client.Selection.Chapters)
                                        {
                                            long value = m_client.CalculateValue(chapter);
                                            str.AppendLine(Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 64, '0'));
                                        }
                                    }
                                }
                                break;
                            default:
                                break;
                        }
                    }
                    else
                    {
                        switch (values_sequence_scope)
                        {
                            case ValuesSequenceScope.LetterValues:
                                {
                                    foreach (char c in text)
                                    {
                                        if (c == '\n')
                                        {
                                            str.Remove(str.Length - 1, 1); // last " "
                                            str.AppendLine();
                                        }
                                        else if (c == ' ')
                                        {
                                            str.Append(c);
                                        }
                                        else
                                        {
                                            long value = m_client.CalculateValueUserText(c);
                                            str.Append(Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 8, '0'));
                                            str.Append(" ");
                                        }
                                    }
                                }
                                break;
                            case ValuesSequenceScope.WordValues:
                                {
                                    string[] lines = text.Split('\n');
                                    foreach (string line in lines)
                                    {
                                        string[] word_texts = line.Split(' ');
                                        foreach (string word_text in word_texts)
                                        {
                                            long value = m_client.CalculateValueUserText(word_text);
                                            str.Append(Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 16, '0'));
                                            str.Append(" ");
                                        }
                                        str.Remove(str.Length - 1, 1); // last " "
                                        str.AppendLine();
                                    }
                                }
                                break;
                            case ValuesSequenceScope.VerseValues:
                                {
                                    string[] lines = text.Split('\n');
                                    foreach (string line in lines)
                                    {
                                        long value = m_client.CalculateValueUserText(line);
                                        str.AppendLine(Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 32, '0'));
                                    }
                                }
                                break;
                            case ValuesSequenceScope.ChapterValues:
                                {
                                    foreach (Chapter chapter in m_client.Selection.Chapters)
                                    {
                                        if (m_client.Book != null)
                                        {
                                            long value = m_client.CalculateValue(chapter);
                                            str.AppendLine(Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 64, '0'));
                                        }
                                    }
                                }
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
        }
        return str.ToString().Trim();
    }
    private bool m_values_sequence_right_to_left = true;
    private void ValuesSequenceDirectionLabel_Click(object sender, EventArgs e)
    {
        m_values_sequence_right_to_left = !m_values_sequence_right_to_left;
        //ValuesSequenceTextBox.RightToLeft = m_values_sequence_right_to_left ? RightToLeft.Yes : RightToLeft.No;
        //ValuesSequenceDirectionLabel.Left = m_values_sequence_right_to_left ? -2 : 633;
        //ValuesSequenceDirectionLabel.Anchor = m_values_sequence_right_to_left ? (AnchorStyles.Top | AnchorStyles.Left) : (AnchorStyles.Top | AnchorStyles.Right);

        if (m_values_sequence_right_to_left)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_left.png"))
            {
                ValuesSequenceDirectionLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_left.png");
            }
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_right.png"))
            {
                ValuesSequenceDirectionLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_right.png");
            }
        }
        ValuesSequenceDirectionLabel.Refresh();

        ValuesSequenceScopeComboBox_SelectedIndexChanged(null, null);
    }
    private void DisplayValuesSequence()
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            //if (TabControl.SelectedTab == ValuesSequenceTabPage)
            {
                ValuesSequenceScopeComboBox_SelectedIndexChanged(null, null);
            }
        }
    }
    private void ValuesSequenceInspectLabel_Click(object sender, EventArgs e)
    {
        string filename = (m_values_sequence_right_to_left ? "R2L" : "L2R") + "_" + "Base" + m_values_sequence_radix + " " + ValuesSequenceScopeComboBox.SelectedItem.ToString() + Globals.OUTPUT_FILE_EXT;
        if (Directory.Exists(Globals.STATISTICS_FOLDER))
        {
            string path = Globals.STATISTICS_FOLDER + "/" + filename;
            FileHelper.SaveText(path, ValuesSequenceTextBox.Text);
            FileHelper.DisplayFile(path);
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region DNASequence
    ///////////////////////////////////////////////////////////////////////////////
    private void PopulateDNASequenceSystemComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) DNASequenceSystemComboBox.SelectedIndexChanged -= new EventHandler(DNASequenceSystemComboBox_SelectedIndexChanged);

            if (m_client != null)
            {
                if (m_client.LoadedDNASequenceSystems != null)
                {
                    DNASequenceSystemComboBox.BeginUpdate();

                    DNASequenceSystemComboBox.Items.Clear();
                    foreach (DNASequenceSystem dna_sequence_system in m_client.LoadedDNASequenceSystems.Values)
                    {
                        DNASequenceSystemComboBox.Items.Add(dna_sequence_system.Name);
                    }
                }
            }
        }
        finally
        {
            DNASequenceSystemComboBox.EndUpdate();
            DNASequenceSystemComboBox.SelectedIndexChanged += new EventHandler(DNASequenceSystemComboBox_SelectedIndexChanged);
        }
    }
    private void DNASequenceSystemComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (DNASequenceSystemComboBox.SelectedItem != null)
        {
            string dna_sequence_system_name = DNASequenceSystemComboBox.SelectedItem.ToString();
            if (!String.IsNullOrEmpty(m_current_text))
            {
                DNASequenceTextBox.Text = BuildDNASequence(dna_sequence_system_name, m_current_text);
            }
        }
    }
    private string BuildDNASequence(string dna_sequence_system_name, string text)
    {
        if (String.IsNullOrEmpty(text)) return null;

        StringBuilder str = new StringBuilder();

        if (m_client != null)
        {
            if (m_client.DNASequenceSystem != null)
            {
                if (m_client.DNASequenceSystem.Name != dna_sequence_system_name)
                {
                    LoadDNASequenceSystem(dna_sequence_system_name);
                }

                // recheck after Loading
                if (m_client.DNASequenceSystem != null)
                {
                    text = text.SimplifyTo(m_client.DNASequenceSystem.TextMode);
                    text = text.Replace("\r", "");

                    if (m_dna_sequence_right_to_left)
                    {
                        int line_start = 0;
                        foreach (char c in text)
                        {
                            if (c == '\n')
                            {
                                str.AppendLine();
                                line_start = str.Length;
                            }
                            else if (c == ' ')
                            {
                                str.Insert(line_start, c);
                            }
                            else
                            {
                                if (m_client.DNASequenceSystem.ContainsKey(c))
                                {
                                    char r = m_client.DNASequenceSystem[c];
                                    str.Insert(line_start, r);
                                }
                            }
                        }
                    }
                    else
                    {
                        foreach (char c in text)
                        {
                            if (c == '\n')
                            {
                                str.AppendLine();
                            }
                            else if (c == ' ')
                            {
                                str.Append(c);
                            }
                            else
                            {
                                if (m_client.DNASequenceSystem.ContainsKey(c))
                                {
                                    char r = m_client.DNASequenceSystem[c];
                                    str.Append(r);
                                }
                            }
                        }
                    }
                }
            }
        }

        return str.ToString().Trim();
    }
    private void LoadDNASequenceSystem(string dna_sequence_system_name)
    {
        if (m_client != null)
        {
            m_client.LoadDNASequenceSystem(dna_sequence_system_name);
        }
    }
    private bool m_dna_sequence_right_to_left = true;
    private void DNASequenceDirectionLabel_Click(object sender, EventArgs e)
    {
        m_dna_sequence_right_to_left = !m_dna_sequence_right_to_left;
        //DNASequenceTextBox.RightToLeft = m_dna_sequence_right_to_left ? RightToLeft.Yes : RightToLeft.No;
        //DNASequenceDirectionLabel.Left = m_dna_sequence_right_to_left ? -2 : 633;
        //DNASequenceDirectionLabel.Anchor = m_dna_sequence_right_to_left ? (AnchorStyles.Top | AnchorStyles.Left) : (AnchorStyles.Top | AnchorStyles.Right);

        if (m_dna_sequence_right_to_left)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_left.png"))
            {
                DNASequenceDirectionLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_left.png");
            }
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_right.png"))
            {
                DNASequenceDirectionLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_right.png");
            }
        }
        DNASequenceDirectionLabel.Refresh();

        DNASequenceSystemComboBox_SelectedIndexChanged(null, null);
    }
    private void DNASequenceSystemEditLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.DNASequenceSystem != null)
            {
                // display the DNASequenceSystem file for live editing using ISubscriber
                string filename = Globals.VALUES_FOLDER + "/" + m_client.DNASequenceSystem.Name + ".txt";
                FileHelper.DisplayFile(filename);
            }
        }
        DNASequenceSystemComboBox.Focus();
    }
    private void DisplayDNASequence()
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            //if (TabControl.SelectedTab == DNASequenceTabPage)
            {
                DNASequenceSystemComboBox_SelectedIndexChanged(null, null);
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region UserText
    ///////////////////////////////////////////////////////////////////////////////
    private bool m_mouse_down = false;
    private int m_user_text_selection_start = 0;
    private int m_user_text_selection_length = 0;
    private void CalculateUserTextValue(Point location)
    {
        m_user_text_selection_length = UserTextTextBox.SelectionLength;
        m_user_text_selection_start = UserTextTextBox.SelectionStart;

        string text = "";
        if (UserTextTextBox.SelectionLength > 0)
        {
            // selected text only
            text = UserTextTextBox.SelectedText;
        }
        else
        {
            if ((location.X == 0) && (location.Y == 0))
            {
                // all text
                text = UserTextTextBox.Text;
            }
            else
            {
                // current line text
                int char_index = UserTextTextBox.GetCharIndexFromPosition(location);
                int line_index = UserTextTextBox.GetLineFromCharIndex(char_index);
                if ((line_index >= 0) && (line_index < UserTextTextBox.Lines.Length))
                {
                    text = UserTextTextBox.Lines[line_index].ToString();
                }
                else
                {
                    text = "";
                }
            }
        }
        text = text.Replace("\r", "");
        text = text.Replace("\t", "");
        text = text.Replace("_", "");
        text = text.Replace(Constants.OPEN_BRACKET, "");
        text = text.Replace(Constants.CLOSE_BRACKET, "");
        foreach (char character in Constants.INDIAN_DIGITS)
        {
            text = text.Replace(character.ToString(), "");
        }
        foreach (char character in Constants.QURANMARKS)
        {
            text = text.Replace(character.ToString(), "");
        }
        foreach (char character in Constants.STOPMARKS)
        {
            text = text.Replace(character.ToString(), "");
        }
        text = text.Replace("\n ", "\n"); // quran marks
        text = text.Replace(" \n", "\n"); // sijood marks
        while (text.Contains("  "))
        {
            text = text.Replace("  ", " ");
        }
        text = text.Replace(",", "");
        text = text.Replace(":", "");
        text = text.Replace("0", "");
        text = text.Replace("1", "");
        text = text.Replace("2", "");
        text = text.Replace("3", "");
        text = text.Replace("4", "");
        text = text.Replace("5", "");
        text = text.Replace("6", "");
        text = text.Replace("7", "");
        text = text.Replace("8", "");
        text = text.Replace("9", "");
        text = text.Trim();

        ////////////////////////////////////////////////////
        // overwrite m_current_text to show LetterStatistics
        ////////////////////////////////////////////////////
        m_current_text = text;

        // calculate Letters value
        CalculateValueAndDisplayFactors(m_current_text);

        // calculate and display verse_number_sum, word_number_sum, letter_number_sum
        CalculateAndDisplayCounts(m_current_text);

        BuildLetterFrequencies();
        DisplayLetterFrequencies();

        if (UserTextTextBox.SelectionLength > 0)
        {
            DisplayWordFrequencies();
            this.AcceptButton = null;  // prevent steeling focus by this.AcceptButton = FindByTextButton;
        }
        else
        {
            WordsListBoxLabel.Visible = false;
            WordsListBox.Visible = false;
            WordsListBox.SendToBack();
        }
    }
    private Point m_caret_position = new Point(0, 0);
    private void UserTextTextBox_KeyUp(object sender, KeyEventArgs e)
    {
        int char_index = UserTextTextBox.GetFirstCharIndexOfCurrentLine();
        if (char_index >= 0)
        {
            m_caret_position = UserTextTextBox.GetPositionFromCharIndex(char_index);
            CalculateUserTextValue(m_caret_position);
        }
    }
    private void UserTextTextBox_MouseDown(object sender, MouseEventArgs e)
    {
        m_mouse_down = true;
    }
    private void UserTextTextBox_MouseMove(object sender, MouseEventArgs e)
    {
        if (m_mouse_down)
        {
            CalculateUserTextValue(e.Location);
        }
    }
    private void UserTextTextBox_MouseUp(object sender, MouseEventArgs e)
    {
        m_mouse_down = false;
        CalculateUserTextValue(e.Location);

        // backup m_caret_position
        int char_index = UserTextTextBox.GetFirstCharIndexOfCurrentLine();
        if (char_index >= 0)
        {
            m_caret_position = UserTextTextBox.GetPositionFromCharIndex(char_index);
        }

    }
    private void UserTextTextBox_Enter(object sender, EventArgs e)
    {
        m_user_text_mode = true;
        CalculateUserTextValue(m_caret_position);
    }
    private void UserTextTextBox_Leave(object sender, EventArgs e)
    {
    }
    private void UserTextTextBox_TextChanged(object sender, EventArgs e)
    {
        m_user_text_mode = true;
        //CalculateUserTextValue(m_caret_position);
        CalculateUserTextValue(new Point(0, 0));
    }
    private void UserTextValueNumericUpDown_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            UserTextValueButton_Click(null, null);
            e.Handled = true; // stop annoying beep
        }
    }
    private void UserTextValueNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        //long value = (long)UserTextValueNumericUpDown.Value;
        //UserTextValueNumericUpDown.ForeColor = Numbers.GetNumberTypeColor((int)value);
        //UserTextValueNumericUpDown.Refresh();
        UserTextValueButton_Click(null, null);
    }
    private void UserTextValueButton_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.NumerologySystem != null)
                {
                    long value = (long)UserTextValueNumericUpDown.Value;

                    SortedDictionary<string, List<Word>> matches = new SortedDictionary<string, List<Word>>();
                    if (matches != null)
                    {
                        List<Word> words = new List<Word>();
                        if (words != null)
                        {
                            if (m_client.Book != null)
                            {
                                if (m_client.Book.Verses != null)
                                {
                                    foreach (Verse verse in m_client.Book.Verses)
                                    {
                                        words.AddRange(verse.Words);
                                    }
                                }
                            }

                            foreach (Word word in words)
                            {
                                if (m_client.CalculateValue(word) == value)
                                {
                                    string simplified_word_text = word.Text.SimplifyTo(m_client.NumerologySystem.TextMode);
                                    if (matches.ContainsKey(simplified_word_text))
                                    {
                                        matches[simplified_word_text].Add(word);
                                    }
                                    else
                                    {
                                        List<Word> list = new List<Word>();
                                        list.Add(word);
                                        matches.Add(simplified_word_text, list);
                                    }
                                }
                            }

                            StringBuilder str = new StringBuilder();
                            if (str != null)
                            {
                                int count = 0;
                                int word_count = 0;
                                int letter_count = 0;
                                foreach (string key in matches.Keys)
                                {
                                    count++;
                                    word_count += matches[key].Count;
                                    letter_count += key.Length;

                                    StringBuilder addresses = new StringBuilder();
                                    foreach (Word word in matches[key])
                                    {
                                        addresses.Append(word.Address + ",");
                                    }
                                    if (addresses.Length > 0)
                                    {
                                        addresses.Remove(addresses.Length - 1, 1);
                                    }
                                    str.AppendLine(count + "\t" + key + "\t" + matches[key].Count + "\t" + addresses.ToString());
                                }
                                str.AppendLine();
                                str.AppendLine(count + "\t" + letter_count + "\t" + word_count);

                                UserTextTextBox.Text = str.ToString();
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void UserTextInspectLabel_Click(object sender, EventArgs e)
    {
        string filename = "UserText" + "_" + DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss") + Globals.OUTPUT_FILE_EXT;
        if (Directory.Exists(Globals.STATISTICS_FOLDER))
        {
            string path = Globals.STATISTICS_FOLDER + "/" + filename;
            FileHelper.SaveText(path, UserTextTextBox.Text);
            FileHelper.DisplayFile(path);
        }
    }
    private void UserTextLoadLabel_Click(object sender, EventArgs e)
    {
        if (sender is Label)
        {
            Control control = (sender as Label);

            string control_name = control.Name;
            int pos = control_name.IndexOf("LoadLabel");
            if (pos > -1)
            {
                string filename = control_name.Remove(pos) + ".txt";
                if (Directory.Exists(Globals.USERTEXT_FOLDER))
                {
                    string path = Globals.USERTEXT_FOLDER + "/" + filename;
                    string text = FileHelper.LoadText(path);
                    UserTextTextBox.Text = ((text == "\r\n") || (text == "\n") || (text == "\r")) ? "" : text;
                    UserTextTextBox.Refresh();
                    UserTextTextBox.Focus();
                }
            }
        }
    }
    private void UserTextSaveLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (sender is Label)
            {
                Control control = (sender as Label);
                string control_name = control.Name;
                if (control_name == "UserText1SaveLabel") return;

                int pos = control_name.IndexOf("SaveLabel");
                if (pos > -1)
                {
                    string filename = control_name.Remove(pos) + ".txt";
                    if (Directory.Exists(Globals.USERTEXT_FOLDER))
                    {
                        string path = Globals.USERTEXT_FOLDER + "/" + filename;
                        string text = UserTextTextBox.Text;

                        if ((text == "\r\n") || (text == "\n") || (text == "\r"))
                        {
                            text = "";
                        }

                        FileHelper.SaveText(path, text);
                        UserTextTextBox.Focus();

                        string load_control_name = control_name.Replace("Save", "Load");
                        control = GetControl(load_control_name);
                        if (control != null)
                        {
                            ToolTip.SetToolTip(control, (text.Length > 0) ? text : L[l]["Load"]);
                            control.ForeColor = (text.Length > 0) ? Color.Black : Color.Lime;
                            control.BackColor = (text.Length > 0) ? Color.Lime : Color.Black;
                        }
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Prostration
    ///////////////////////////////////////////////////////////////////////////////
    private ProstrationType m_find_by_prostration_type = ProstrationType.None;
    private int m_find_by_prostration_index = 0;
    private void DisplayProstrationVersesLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                ClearFindMatches();

                if (m_find_by_prostration_index == 0)
                {
                    m_find_by_prostration_type = ProstrationType.Obligatory | ProstrationType.Recommended;
                    m_find_by_prostration_index = 1;
                    DisplayProstrationVersesLabel.Text = "۞";
                    ToolTip.SetToolTip(DisplayProstrationVersesLabel, L[l]["All prostration verses"]);
                }
                else if (m_find_by_prostration_index == 1)
                {
                    m_find_by_prostration_type = ProstrationType.Obligatory;
                    m_find_by_prostration_index = 2;
                    DisplayProstrationVersesLabel.Text = "۩";
                    ToolTip.SetToolTip(DisplayProstrationVersesLabel, L[l]["Obligatory prostration verses"]);
                }
                else if (m_find_by_prostration_index == 2)
                {
                    m_find_by_prostration_type = ProstrationType.Recommended;
                    m_find_by_prostration_index = 0;
                    DisplayProstrationVersesLabel.Text = "⌂";
                    ToolTip.SetToolTip(DisplayProstrationVersesLabel, L[l]["Recommended prostration verses"]);
                }


                m_client.FindVerses(m_find_by_prostration_type);
                if (m_client.FoundVerses != null)
                {
                    int verse_count = m_client.FoundVerses.Count;
                    m_find_result_header = verse_count + ((verse_count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + m_find_by_prostration_type.ToString() + " " + L[l]["prostrations"] + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                    DisplayFoundVerses(true, true);
                }

                //SearchResultTextBox.Focus();
                //SearchResultTextBox.Refresh();
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Autocomplete/WordFrequency
    ///////////////////////////////////////////////////////////////////////////////
    private bool m_auto_complete_mode = false;
    private bool m_word_double_click = false;
    private bool m_sort_by_word_frequency = true;
    private Dictionary<string, int> m_word_frequency_dictionary = null;
    private void WordsListBox_Enter(object sender, EventArgs e)
    {
        this.AcceptButton = FindByTextButton;
    }
    private void WordsListBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            if (WordsListBox.SelectedIndices.Count > 1)
            {
                FindSelectedWordsMenuItem_Click(null, null);
            }
            else
            {
                WordsListBox_DoubleClick(sender, e);
            }
        }
        else if (e.KeyCode == Keys.Space)
        {
            FindByTextTextBox.Text += " ";
            FindByTextTextBox.Focus();
        }
        else if ((e.KeyCode == Keys.Left) || (e.KeyCode == Keys.Right))
        {
            FindByTextTextBox.Focus();
        }
        FindByTextTextBox.SelectionStart = FindByTextTextBox.Text.Length;
    }
    private void WordsListBox_MouseDown(object sender, MouseEventArgs e)
    {
        if (e.Button == MouseButtons.Right)
        {
            // set cursor at mouse RIGHT-click location so we know which word to Find
            if (WordsListBox.SelectedIndices.Count == 1)
            {
                WordsListBox.SelectedIndex = -1;
            }
            WordsListBox.SelectedIndex = WordsListBox.IndexFromPoint(e.X, e.Y);
        }
    }
    private void WordsListBox_MouseMove(object sender, MouseEventArgs e)
    {
        if (ModifierKeys == Keys.Control)
        {
            if (m_client != null)
            {
                int index = WordsListBox.IndexFromPoint(e.Location);
                if (index != m_previous_index)
                {
                    m_previous_index = index;
                    if ((index >= 0) && (index < WordsListBox.Items.Count))
                    {
                        char[] separators = { ' ' };
                        string[] parts = WordsListBox.Items[index].ToString().Split(separators, StringSplitOptions.RemoveEmptyEntries);
                        if (parts.Length > 1)
                        {
                            DisplayWordVerses(parts[1]);
                        }
                    }
                }
            }
        }
        else
        {
            ToolTip.SetToolTip(WordsListBox, null);
        }
    }
    private void WordsListBox_Click(object sender, EventArgs e)
    {
        // do nothing
    }
    private void WordsListBox_DoubleClick(object sender, EventArgs e)
    {
        m_word_double_click = true;
        if (WordsListBox.Items.Count > 0)
        {
            AddNextWordToFindText();
        }
        else
        {
            FindByTextButton_Click(null, null);
        }
        m_word_double_click = false;
    }
    private void WordsListBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (m_word_frequency_dictionary != null)
        {
            int count = 0;
            int total = 0;
            if (WordsListBox.SelectedIndices.Count > 1)
            {
                // update total(unique) counts
                foreach (object item in WordsListBox.SelectedItems)
                {
                    string[] parts = item.ToString().Split();
                    if (parts.Length > 0)
                    {
                        total += int.Parse(parts[0]);
                        count++;
                    }
                }
            }
            else
            {
                // restore total(unique) counts
                foreach (string key in m_word_frequency_dictionary.Keys)
                {
                    total += m_word_frequency_dictionary[key];
                    count++;
                }
            }

            WordsListBoxLabel.Text = total.ToString() + " (" + count.ToString() + ")";
            WordsListBoxLabel.ForeColor = Numbers.GetNumberTypeColor(total);
            WordsListBoxLabel.Refresh();
        }
    }
    private void WordsListBoxLabel_Click(object sender, EventArgs e)
    {
        // Ctrl+Click factorizes number
        if (ModifierKeys == Keys.Control)
        {
            FactorizeNumber(sender as Label);
        }
        else
        {
            m_sort_by_word_frequency = !m_sort_by_word_frequency;
            ToolTip.SetToolTip(WordsListBoxLabel, (m_sort_by_word_frequency ? "sort alphabetically" : "sort by frequency"));

            if (m_auto_complete_mode)
            {
                PopulateWordsListBox();
            }
            else
            {
                PopulateWordsListBoxWithHighlightedWords();
            }
        }
    }
    private void AddNextWordToFindText()
    {
        if (WordsListBox.SelectedItem != null)
        {
            string word_to_add = WordsListBox.SelectedItem.ToString();
            int pos = word_to_add.LastIndexOf(' ');
            if (pos > -1)
            {
                word_to_add = word_to_add.Substring(pos + 1);
            }

            string text = FindByTextTextBox.Text;
            int index = text.LastIndexOf(' ');
            if (index != -1)
            {
                if (text.Length > index + 1)
                {
                    if ((text[index + 1] == '+') || (text[index + 1] == '-'))
                    {
                        index++;
                    }
                }

                text = text.Substring(0, index + 1);
                text += word_to_add;
                FindByTextTextBox.Text = text + " ";
            }
            else
            {
                FindByTextTextBox.Text = word_to_add + " ";
            }
            FindByTextTextBox.Refresh();
            FindByTextTextBox.SelectionStart = FindByTextTextBox.Text.Length;
        }
    }
    private void PopulateWordsListBox()
    {
        if (m_text_search_type == TextSearchType.Exact)
        {
            PopulateWordsListBoxWithCurrentOrNextWords();
        }
        else if (m_text_search_type == TextSearchType.Root)
        {
            PopulateWordsListBoxWithRoots();
        }
        else if (m_text_search_type == TextSearchType.Proximity)
        {
            PopulateWordsListBoxWithCurrentWords();
        }
    }
    private void PopulateWordsListBoxWithCurrentOrNextWords()
    {
        try
        {
            for (int i = 0; i < 3; i++) WordsListBox.SelectedIndexChanged -= new EventHandler(WordsListBox_SelectedIndexChanged);

            if (m_client != null)
            {
                //SearchGroupBox.Text = " Search by Exact words      ";
                //SearchGroupBox.Refresh();
                WordsListBoxLabel.Text = "000 (00)";
                WordsListBoxLabel.ForeColor = Numbers.GetNumberTypeColor(0);
                //ToolTip.SetToolTip(WordsListBoxLabel, "total (unique)");
                WordsListBoxLabel.Refresh();

                WordsListBox.BeginUpdate();
                WordsListBox.Items.Clear();

                m_auto_complete_mode = true;

                string text = FindByTextTextBox.Text;
                if (!String.IsNullOrEmpty(text))
                {
                    if (text.EndsWith(" "))
                    {
                        m_word_frequency_dictionary = m_client.GetNextWords(text, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, m_text_wordness, m_case_sensitive, m_with_diacritics);
                    }
                    else
                    {
                        m_word_frequency_dictionary = m_client.GetCurrentWords(text, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, m_text_wordness, m_case_sensitive, m_with_diacritics);
                    }

                    if (m_word_frequency_dictionary != null)
                    {
                        // sort dictionary by value or key
                        List<KeyValuePair<string, int>> list = new List<KeyValuePair<string, int>>(m_word_frequency_dictionary);
                        if (m_sort_by_word_frequency)
                        {
                            list.Sort(
                                delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                {
                                    return nextPair.Value.CompareTo(firstPair.Value);
                                }
                            );
                        }
                        else
                        {
                            list.Sort(
                                delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                {
                                    return firstPair.Key.CompareTo(nextPair.Key);
                                }
                            );
                        }

                        int count = 0;
                        int total = 0;
                        foreach (KeyValuePair<string, int> pair in list)
                        {
                            //string value_str = found_words[key].ToString().PadRight(3, ' ');
                            //string key_str = key.PadLeft(10, ' ');
                            //string entry = String.Format("{0} {1}", value_str, key_str);
                            string entry = String.Format("{0,-3} {1,10}", pair.Value, pair.Key);
                            WordsListBox.Items.Add(entry);
                            total += pair.Value;
                            count++;
                        }

                        if (WordsListBox.Items.Count > 0)
                        {
                            WordsListBox.SelectedIndex = 0;
                        }
                        else // no match [either current text_mode doesn't have a match or it was last word in verse]
                        {
                            // m_word_frequency_list_double_click == false if input was via keyboard
                            // m_word_frequency_list_double_click == true  if input was via double click
                            // if no more word when double click, then it means it was the last word in the verse
                            // else the user has entered non-matching text

                            // if last word in verse, remove the extra space after it
                            if ((m_word_double_click) && (WordsListBox.Items.Count == 0) && (FindByTextTextBox.Text.EndsWith(" ")))
                            {
                                for (int i = 0; i < 3; i++) FindByTextTextBox.TextChanged -= new EventHandler(FindByTextTextBox_TextChanged);
                                try
                                {
                                    FindByTextTextBox.Text = FindByTextTextBox.Text.Remove(FindByTextTextBox.Text.Length - 1);
                                }
                                finally
                                {
                                    FindByTextTextBox.TextChanged += new EventHandler(FindByTextTextBox_TextChanged);
                                }
                            }
                        }

                        WordsListBoxLabel.Text = total.ToString() + " (" + count.ToString() + ")";
                        WordsListBoxLabel.ForeColor = Numbers.GetNumberTypeColor(total);
                        WordsListBoxLabel.Refresh();
                    }
                }
            }
        }
        finally
        {
            WordsListBox.EndUpdate();
            WordsListBox.SelectedIndexChanged += new EventHandler(WordsListBox_SelectedIndexChanged);
        }
    }
    private void PopulateWordsListBoxWithCurrentWords()
    {
        try
        {
            for (int i = 0; i < 3; i++) WordsListBox.SelectedIndexChanged -= new EventHandler(WordsListBox_SelectedIndexChanged);

            if (m_client != null)
            {
                //SearchGroupBox.Text = " Search by Proximity        ";
                //SearchGroupBox.Refresh();
                WordsListBoxLabel.Text = "000 (00)";
                WordsListBoxLabel.ForeColor = Numbers.GetNumberTypeColor(0);
                //ToolTip.SetToolTip(WordsListBoxLabel, "total (unique)");
                WordsListBoxLabel.Refresh();

                WordsListBox.BeginUpdate();
                WordsListBox.Items.Clear();

                m_auto_complete_mode = true;

                string text = FindByTextTextBox.Text;
                if (!String.IsNullOrEmpty(text))
                {
                    string[] text_parts = text.Split();
                    text = text_parts[text_parts.Length - 1];
                    if (!String.IsNullOrEmpty(text))
                    {
                        m_word_frequency_dictionary = m_client.GetCurrentWords(text, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, m_text_wordness, m_case_sensitive, m_with_diacritics);
                        if (m_word_frequency_dictionary != null)
                        {
                            // sort dictionary by value or key
                            List<KeyValuePair<string, int>> list = new List<KeyValuePair<string, int>>(m_word_frequency_dictionary);
                            if (m_sort_by_word_frequency)
                            {
                                list.Sort(
                                    delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                    {
                                        return nextPair.Value.CompareTo(firstPair.Value);
                                    }
                                );
                            }
                            else
                            {
                                list.Sort(
                                    delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                    {
                                        return firstPair.Key.CompareTo(nextPair.Key);
                                    }
                                );
                            }

                            int count = 0;
                            int total = 0;
                            foreach (KeyValuePair<string, int> pair in list)
                            {
                                //string value_str = found_words[key].ToString().PadRight(3, ' ');
                                //string key_str = key.PadLeft(10, ' ');
                                //string entry = String.Format("{0} {1}", value_str, key_str);
                                string entry = String.Format("{0,-3} {1,10}", pair.Value, pair.Key);
                                WordsListBox.Items.Add(entry);
                                total += pair.Value;
                                count++;
                            }

                            if (WordsListBox.Items.Count > 0)
                            {
                                WordsListBox.SelectedIndex = 0;
                            }
                            else
                            {
                                // if not a valid word, keep word as is
                            }

                            WordsListBoxLabel.Text = total.ToString() + " (" + count.ToString() + ")";
                            WordsListBoxLabel.ForeColor = Numbers.GetNumberTypeColor(total);
                            WordsListBoxLabel.Refresh();
                        }
                    }
                }
            }
        }
        finally
        {
            WordsListBox.EndUpdate();
            WordsListBox.SelectedIndexChanged += new EventHandler(WordsListBox_SelectedIndexChanged);
        }
    }
    private void PopulateWordsListBoxWithRoots()
    {
        try
        {
            for (int i = 0; i < 3; i++) WordsListBox.SelectedIndexChanged -= new EventHandler(WordsListBox_SelectedIndexChanged);

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    //SearchGroupBox.Text = " Search by Roots            ";
                    //SearchGroupBox.Refresh();
                    WordsListBoxLabel.Text = "000 (00)";
                    WordsListBoxLabel.ForeColor = Numbers.GetNumberTypeColor(0);
                    //ToolTip.SetToolTip(WordsListBoxLabel, "total (unique)");
                    WordsListBoxLabel.Refresh();

                    WordsListBox.BeginUpdate();
                    WordsListBox.Items.Clear();

                    m_auto_complete_mode = true;

                    string text = FindByTextTextBox.Text;

                    // to support multi root search take the last word a user is currently writing
                    string[] text_parts = text.Split();
                    if (text_parts.Length > 0)
                    {
                        text = text_parts[text_parts.Length - 1];
                    }

                    m_word_frequency_dictionary = new Dictionary<string, int>();
                    if (m_word_frequency_dictionary != null)
                    {
                        switch (m_client.SearchScope)
                        {
                            case SearchScope.Book:
                                {
                                    m_word_frequency_dictionary = m_client.Book.GetWordRoots(m_client.Book.Verses, text, m_text_location_in_word);
                                }
                                break;
                            case SearchScope.Selection:
                                {
                                    m_word_frequency_dictionary = m_client.Book.GetWordRoots(m_client.Selection.Verses, text, m_text_location_in_word);
                                }
                                break;
                            case SearchScope.Result:
                                {
                                    m_word_frequency_dictionary = m_client.Book.GetWordRoots(m_client.FoundVerses, text, m_text_location_in_word);
                                }
                                break;
                        }

                        if (m_word_frequency_dictionary != null)
                        {
                            // sort dictionary by value or key
                            List<KeyValuePair<string, int>> list = new List<KeyValuePair<string, int>>(m_word_frequency_dictionary);
                            if (m_sort_by_word_frequency)
                            {
                                list.Sort(
                                    delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                    {
                                        return nextPair.Value.CompareTo(firstPair.Value);
                                    }
                                );
                            }
                            else
                            {
                                list.Sort(
                                    delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                    {
                                        return firstPair.Key.CompareTo(nextPair.Key);
                                    }
                                );
                            }

                            int count = 0;
                            int total = 0;
                            foreach (KeyValuePair<string, int> pair in list)
                            {
                                //string value_str = found_words[key].ToString().PadRight(3, ' ');
                                //string key_str = key.PadLeft(10, ' ');
                                //string entry = String.Format("{0} {1}", value_str, key_str);
                                string entry = String.Format("{0,-3} {1,10}", pair.Value, pair.Key);
                                WordsListBox.Items.Add(entry);
                                total += pair.Value;
                                count++;
                            }

                            if (WordsListBox.Items.Count > 0)
                            {
                                WordsListBox.SelectedIndex = 0;
                            }
                            else
                            {
                                // if not a valid root, put word as is so we can find same rooted words
                                WordsListBox.Items.Add(text);
                            }
                            WordsListBoxLabel.Text = total.ToString() + " (" + count.ToString() + ")";
                            WordsListBoxLabel.ForeColor = Numbers.GetNumberTypeColor(total);
                            WordsListBoxLabel.Refresh();
                        }
                    }
                }
            }
        }
        finally
        {
            WordsListBox.EndUpdate();
            WordsListBox.SelectedIndexChanged += new EventHandler(WordsListBox_SelectedIndexChanged);
        }
    }
    private void PopulateWordsListBoxWithHighlightedWords()
    {
        try
        {
            for (int i = 0; i < 3; i++) WordsListBox.SelectedIndexChanged -= new EventHandler(WordsListBox_SelectedIndexChanged);

            if (m_client != null)
            {
                WordsListBox.BeginUpdate();
                WordsListBox.Items.Clear();

                m_auto_complete_mode = false;

                //CalculateCurrentText();
                string text = m_current_text;
                if (!String.IsNullOrEmpty(text))
                {
                    text = text.Replace("\n", " ");
                    text = text.Replace("\r", "");
                    text = text.Replace("\t", "");
                    text = text.Replace("_", "");
                    text = text.Replace(Constants.OPEN_BRACKET, "");
                    text = text.Replace(Constants.CLOSE_BRACKET, "");
                    foreach (char character in Constants.INDIAN_DIGITS)
                    {
                        text = text.Replace(character.ToString(), "");
                    }
                    foreach (char character in Constants.QURANMARKS)
                    {
                        text = text.Replace(character.ToString(), "");
                    }
                    foreach (char character in Constants.STOPMARKS)
                    {
                        text = text.Replace(character.ToString(), "");
                    }
                    while (text.Contains("  "))
                    {
                        text = text.Replace("  ", " ");
                    }
                    text = text.Trim();

                    if (!m_with_diacritics)
                    {
                        text = text.SimplifyTo(m_client.NumerologySystem.TextMode);
                    }

                    string[] words = text.Split();
                    m_word_frequency_dictionary = new Dictionary<string, int>();
                    if (m_word_frequency_dictionary != null)
                    {
                        foreach (string word in words)
                        {
                            if (m_word_frequency_dictionary.ContainsKey(word))
                            {
                                m_word_frequency_dictionary[word]++;
                            }
                            else
                            {
                                m_word_frequency_dictionary.Add(word, 1);
                            }
                        }

                        // sort dictionary by value or key
                        List<KeyValuePair<string, int>> list = new List<KeyValuePair<string, int>>(m_word_frequency_dictionary);
                        if (m_sort_by_word_frequency)
                        {
                            list.Sort(
                                delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                {
                                    return nextPair.Value.CompareTo(firstPair.Value);
                                }
                            );
                        }
                        else
                        {
                            list.Sort(
                                delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                {
                                    return firstPair.Key.CompareTo(nextPair.Key);
                                }
                            );
                        }

                        int count = 0;
                        int total = 0;
                        foreach (KeyValuePair<string, int> pair in list)
                        {
                            string entry = String.Format("{0,-3} {1,10}", pair.Value, pair.Key);
                            WordsListBox.Items.Add(entry);
                            total += pair.Value;
                            count++;
                        }

                        if (WordsListBox.Items.Count > 0)
                        {
                            WordsListBox.SelectedIndex = 0;
                        }
                        else
                        {
                            // if not a valid word, keep word as is
                        }

                        WordsListBoxLabel.Text = total.ToString() + " (" + count.ToString() + ")";
                        WordsListBoxLabel.ForeColor = Numbers.GetNumberTypeColor(total);
                        WordsListBoxLabel.Refresh();
                    }
                }
            }
        }
        finally
        {
            WordsListBox.EndUpdate();
            WordsListBox.SelectedIndexChanged += new EventHandler(WordsListBox_SelectedIndexChanged);
        }
    }
    private void DisplayWordFrequencies()
    {
        PopulateWordsListBoxWithHighlightedWords();
        EnableFindByTextControls();
        FindByTextControls_Enter(null, null);
    }
    private void DisplayWordVerses(string item_text)
    {
        if (Globals.EDITION == Edition.Ultimate)
        {
            if (!String.IsNullOrEmpty(item_text))
            {
                if (m_client != null)
                {
                    List<Verse> backup_found_verses = null;
                    List<Phrase> backup_found_phrases = null;
                    if (m_client.FoundVerses != null)
                    {
                        backup_found_verses = new List<Verse>(m_client.FoundVerses);
                    }
                    if (m_client.FoundPhrases != null)
                    {
                        backup_found_phrases = new List<Phrase>(m_client.FoundPhrases);
                    }

                    // get startup text from FindTextBox
                    string[] startup_words = FindByTextTextBox.Text.Split();
                    int count = startup_words.Length;
                    // ignore final incomplete word
                    if (!FindByTextTextBox.Text.EndsWith(" "))
                    {
                        count--;
                    }
                    string startup_text = "";
                    for (int i = 0; i < count; i++)
                    {
                        startup_text += startup_words[i] + " ";
                    }
                    if (startup_text.Length > 0)
                    {
                        startup_text = startup_text.Remove(startup_text.Length - 1, 1);
                    }

                    List<string> word_texts = new List<string>();
                    char[] separators = { ' ' };
                    string[] parts = item_text.Split(separators, StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length == 1)  // root
                    {
                        word_texts.Add(parts[0]);
                    }
                    else if (parts.Length == 2) // exact or proximity
                    {
                        word_texts.Add(parts[1]);
                    }

                    // setup search parameters
                    string text = "";
                    //string translation = Client.DEFAULT_TRANSLATION;

                    // update m_text_location_in_verse and m_text_location_in_word
                    UpdateFindByTextOptions();

                    List<Verse> total_verses = new List<Verse>();
                    if (word_texts.Count > 0)
                    {
                        foreach (string word_text in word_texts)
                        {
                            if (startup_text.Length > 0)
                            {
                                text = startup_text + " " + word_text;
                            }
                            else
                            {
                                text = word_text;
                            }

                            if (!String.IsNullOrEmpty(text))
                            {
                                switch (m_text_search_type)
                                {
                                    case TextSearchType.Exact:
                                        {
                                            m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_language_type, null, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, TextWordness.WholeWord, m_case_sensitive, m_with_diacritics, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                                        }
                                        break;
                                    case TextSearchType.Root:
                                        {
                                            m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                                        }
                                        break;
                                    case TextSearchType.Proximity:
                                        {
                                            m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_language_type, null, m_text_proximity_type, TextWordness.WholeWord, m_case_sensitive, m_with_diacritics);
                                        }
                                        break;
                                }

                                total_verses = total_verses.Union(m_client.FoundVerses);
                            }
                        }

                        int i = 0;
                        StringBuilder str = new StringBuilder();
                        foreach (Verse verse in total_verses)
                        {
                            i++;
                            if (i > 114) break;
                            str.AppendLine(verse.Text);
                        }
                        ToolTip.SetToolTip(WordsListBox, str.ToString());
                    }

                    if (backup_found_verses != null)
                    {
                        m_client.FoundVerses = backup_found_verses;
                    }
                    if (backup_found_phrases != null)
                    {
                        m_client.FoundPhrases = backup_found_phrases;
                    }
                }
            }
        }
    }
    private void FindSelectedWordsMenuItem_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                // get startup text from FindTextBox
                string[] startup_words = FindByTextTextBox.Text.Split();
                int count = startup_words.Length;
                // ignore final incomplete word
                if (!FindByTextTextBox.Text.EndsWith(" "))
                {
                    count--;
                }

                string startup_text = "";
                if (m_auto_complete_mode)
                {
                    for (int i = 0; i < count; i++)
                    {
                        startup_text += startup_words[i] + " ";
                    }
                    if (startup_text.Length > 0)
                    {
                        startup_text = startup_text.Remove(startup_text.Length - 1, 1);
                    }
                }

                // get selected word texts
                List<string> word_texts = new List<string>();
                if (WordsListBox.SelectedIndices.Count > 0)
                {
                    char[] separators = { ' ' };
                    foreach (object item in WordsListBox.SelectedItems)
                    {
                        string[] parts = item.ToString().Split(separators, StringSplitOptions.RemoveEmptyEntries);
                        if (parts.Length == 1)  // root
                        {
                            word_texts.Add(parts[0]);
                        }
                        else if (parts.Length == 2) // exact or proximity
                        {
                            word_texts.Add(parts[1]);
                        }
                    }
                }

                // setup search parameters
                string text = "";
                //string translation = Client.DEFAULT_TRANSLATION;

                // update m_text_location_in_verse and m_text_location_in_word
                UpdateFindByTextOptions();

                List<Phrase> total_phrases = new List<Phrase>();
                List<Verse> total_verses = new List<Verse>();
                if (word_texts.Count > 0)
                {
                    foreach (string word_text in word_texts)
                    {
                        if (startup_text.Length > 0)
                        {
                            text = startup_text + " " + word_text;
                        }
                        else
                        {
                            text = word_text;
                        }

                        if (!String.IsNullOrEmpty(text))
                        {
                            switch (m_text_search_type)
                            {
                                case TextSearchType.Exact:
                                    {
                                        if (FindByTextTextBox.Text.EndsWith(" "))
                                        {
                                            m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_language_type, null, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, TextWordness.Any, m_case_sensitive, m_with_diacritics, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                                        }
                                        else
                                        {
                                            m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_language_type, null, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, TextWordness.WholeWord, m_case_sensitive, m_with_diacritics, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                                        }
                                    }
                                    break;
                                case TextSearchType.Root:
                                    {
                                        m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                                    }
                                    break;
                                case TextSearchType.Proximity:
                                    {
                                        m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_language_type, null, m_text_proximity_type, TextWordness.Any, m_case_sensitive, m_with_diacritics);
                                    }
                                    break;
                            }

                            total_phrases = total_phrases.Union(m_client.FoundPhrases);
                            total_verses = total_verses.Union(m_client.FoundVerses);
                        }
                    }

                    // write final result to m_client
                    m_client.FoundPhrases = total_phrases;
                    m_client.FoundVerses = total_verses;
                }

                // display results
                if (m_client.FoundPhrases != null)
                {
                    int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                    if (m_client.FoundVerses != null)
                    {
                        int verse_count = m_client.FoundVerses.Count;
                        m_find_result_header = phrase_count + " " + L[l]["matches"] + " " + L[l]["in"] + " " + verse_count + ((verse_count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + text + " C_" + m_text_location_in_chapter.ToString() + " V_" + m_text_location_in_verse.ToString() + " W_" + m_text_location_in_word.ToString() + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                        DisplayFoundVerses(true, true);

                        //SearchResultTextBox.Focus();
                        //SearchResultTextBox.Refresh();

                        WordsListBoxLabel.Visible = false;
                        WordsListBox.Visible = false;
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void InspectWordFrequencies()
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            string text = FindByTextTextBox.Text;

            if (Directory.Exists(Globals.STATISTICS_FOLDER))
            {
                string filename = Globals.STATISTICS_FOLDER + "/" + ((m_text_search_type == TextSearchType.Root) ? "root_" : "") + text + ".txt";
                using (StreamWriter writer = new StreamWriter(filename, false, Encoding.Unicode))
                {
                    StringBuilder str = new StringBuilder();
                    str.AppendLine("-----------------");
                    str.AppendLine(((m_text_search_type == TextSearchType.Root) ? "Root" : "Word") + "\t" + "Frequency");
                    str.AppendLine("-----------------");

                    int count = 0;
                    int total = 0;
                    char[] separators = { ' ' };
                    if (WordsListBox.SelectedIndices.Count > 1)
                    {
                        count = WordsListBox.SelectedIndices.Count;
                        foreach (object item in WordsListBox.SelectedItems)
                        {
                            string[] parts = item.ToString().Split(separators, StringSplitOptions.RemoveEmptyEntries);
                            if (parts.Length == 2)
                            {
                                str.AppendLine(parts[1] + "\t" + parts[0]);
                                total += int.Parse(parts[0]);
                            }
                        }
                    }
                    else
                    {
                        count = WordsListBox.Items.Count;
                        foreach (object item in WordsListBox.Items)
                        {
                            string[] parts = item.ToString().Split(separators, StringSplitOptions.RemoveEmptyEntries);
                            if (parts.Length == 2)
                            {
                                str.AppendLine(parts[1] + "\t" + parts[0]);
                                total += int.Parse(parts[0]);
                            }
                        }
                    }
                    str.AppendLine("-----------------");
                    str.AppendLine("Count = " + count.ToString());
                    str.AppendLine("Total = " + total.ToString());

                    writer.Write(str.ToString());
                }

                // show file content after save
                FileHelper.DisplayFile(filename);
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Search Setup
    ///////////////////////////////////////////////////////////////////////////////
    private SearchType m_search_type = SearchType.Text; // named with private to indicate must set via Property, not directly by field
    private LanguageType m_language_type = LanguageType.RightToLeft;
    private void SearchScopeBookLabel_Click(object sender, EventArgs e)
    {
        m_client.SearchScope = SearchScope.Book;
        FindByTextTextBox_TextChanged(null, null);
    }
    private void SearchScopeSelectionLabel_Click(object sender, EventArgs e)
    {
        m_client.SearchScope = SearchScope.Selection;
        FindByTextTextBox_TextChanged(null, null);
    }
    private void SearchScopeResultLabel_Click(object sender, EventArgs e)
    {
        m_client.SearchScope = SearchScope.Result;
        FindByTextTextBox_TextChanged(null, null);
    }
    private void SearchGroupBox_Enter(object sender, EventArgs e)
    {
    }
    private void SearchGroupBox_Leave(object sender, EventArgs e)
    {
        this.AcceptButton = null;

        //if (L != null)
        //{
        //    if (!String.IsNullOrEmpty(l))
        //    {
        //        if (L[l].Count > 0)
        //        {
        //            ToolTip.SetToolTip(InspectChaptersLabel, L[l]["Inspect chapters"]);
        //            WordsListBoxLabel.Visible = false;
        //            WordsListBox.Visible = false;
        //        }
        //    }
        //}
    }
    private void ClearFindMatches()
    {
        PlayerStopLabel_Click(null, null);

        m_find_matches = new List<FindMatch>();
        m_find_match_index = -1;
    }
    private void UpdateFindByTextOptions()
    {
        if (FindByTextAtChapterAnyRadioButton.Checked)
        {
            m_text_location_in_chapter = TextLocationInChapter.Any;
        }
        else if (FindByTextAtChapterStartRadioButton.Checked)
        {
            m_text_location_in_chapter = TextLocationInChapter.AtStart;
        }
        else if (FindByTextAtChapterMiddleRadioButton.Checked)
        {
            m_text_location_in_chapter = TextLocationInChapter.AtMiddle;
        }
        else if (FindByTextAtChapterEndRadioButton.Checked)
        {
            m_text_location_in_chapter = TextLocationInChapter.AtEnd;
        }

        if (FindByTextAtVerseAnyRadioButton.Checked)
        {
            m_text_location_in_verse = TextLocationInVerse.Any;
        }
        else if (FindByTextAtVerseStartRadioButton.Checked)
        {
            m_text_location_in_verse = TextLocationInVerse.AtStart;
        }
        else if (FindByTextAtVerseMiddleRadioButton.Checked)
        {
            m_text_location_in_verse = TextLocationInVerse.AtMiddle;
        }
        else if (FindByTextAtVerseEndRadioButton.Checked)
        {
            m_text_location_in_verse = TextLocationInVerse.AtEnd;
        }

        if (FindByTextAtWordAnyRadioButton.Checked)
        {
            m_text_location_in_word = TextLocationInWord.Any;
        }
        else if (FindByTextAtWordStartRadioButton.Checked)
        {
            m_text_location_in_word = TextLocationInWord.AtStart;
        }
        else if (FindByTextAtWordMiddleRadioButton.Checked)
        {
            m_text_location_in_word = TextLocationInWord.AtMiddle;
        }
        else if (FindByTextAtWordEndRadioButton.Checked)
        {
            m_text_location_in_word = TextLocationInWord.AtEnd;
        }

        switch (FindByTextWordnessCheckBox.CheckState)
        {
            case CheckState.Checked:
                m_text_wordness = TextWordness.WholeWord;
                break;
            case CheckState.Indeterminate:
                m_text_wordness = TextWordness.PartOfWord;
                break;
            case CheckState.Unchecked:
                m_text_wordness = TextWordness.Any;
                break;
        }

        m_case_sensitive = FindByTextCaseSensitiveCheckBox.Checked;

        m_with_diacritics = FindByTextWithDiacriticsCheckBox.Checked;

        m_multiplicity = FindByTextMultiplicityNumericUpDown.Enabled ? (int)FindByTextMultiplicityNumericUpDown.Value : -1;
    }
    private int GetPhraseCount(List<Phrase> phrases)
    {
        int count = 0;
        foreach (Phrase phrase in phrases)
        {
            if (phrase != null)
            {
                if (!String.IsNullOrEmpty(phrase.Text))
                {
                    count++;
                }
            }
        }
        return count;
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Search By Text
    ///////////////////////////////////////////////////////////////////////////////
    private TextSearchType m_text_search_type = TextSearchType.Exact;
    private TextSearchBlockSize m_text_search_block_size = TextSearchBlockSize.Verse;
    private TextLocationInChapter m_text_location_in_chapter = TextLocationInChapter.Any;
    private TextLocationInVerse m_text_location_in_verse = TextLocationInVerse.Any;
    private TextLocationInWord m_text_location_in_word = TextLocationInWord.Any;
    private TextProximityType m_text_proximity_type = TextProximityType.AllWords;
    private TextWordness m_text_wordness = TextWordness.Any;
    private bool m_case_sensitive = false;
    private bool m_with_diacritics = false;
    private int m_multiplicity = -1;
    private NumberType m_multiplicity_number_type = NumberType.None;
    private ComparisonOperator m_multiplicity_comparison_operator = ComparisonOperator.Equal;
    private int m_multiplicity_remainder = -1;
    private void SetLanguageType(LanguageType language_type)
    {
        if (language_type == LanguageType.RightToLeft)
        {
            m_language_type = language_type;
        }
        else if (language_type == LanguageType.LeftToRight)
        {
            if (m_text_search_type == TextSearchType.Root)
            {
                m_language_type = LanguageType.RightToLeft;
            }
            else
            {
                m_language_type = language_type;
            }
        }
    }
    private void FindByTextExactSearchTypeLabel_Click(object sender, EventArgs e)
    {
        m_text_search_type = TextSearchType.Exact;
        PopulateWordsListBoxWithCurrentOrNextWords();
        FindByTextAtVerseAnyRadioButton.Checked = true;

        EnableFindByTextControls();
        UpdateKeyboard(m_client.NumerologySystem.TextMode);
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextProximitySearchTypeLabel_Click(object sender, EventArgs e)
    {
        m_text_search_type = TextSearchType.Proximity;
        PopulateWordsListBoxWithCurrentWords();
        FindByTextAllWordsRadioButton.Checked = true;

        EnableFindByTextControls();
        UpdateKeyboard(m_client.NumerologySystem.TextMode);
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextRootSearchTypeLabel_Click(object sender, EventArgs e)
    {
        m_text_search_type = TextSearchType.Root;
        PopulateWordsListBoxWithRoots();

        EnableFindByTextControls();
        UpdateKeyboard("Original");
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeVerseLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Verse;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeChapterLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Chapter;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizePageLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Page;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeStationLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Station;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizePartLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Part;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeGroupLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Group;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeHalfLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Half;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeQuarterLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Quarter;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeBowingLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Bowing;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextRadioButton_CheckedChanged(object sender, EventArgs e)
    {
        UpdateFindByTextOptions();
        PopulateWordsListBox();
    }
    private void FindByTextWithDiacriticsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                m_with_diacritics = FindByTextWithDiacriticsCheckBox.Checked;
                m_client.Book.WithDiacritics = m_with_diacritics;

                PopulateWordsListBox();

                LetterFrequencyWithDiacriticsCheckBox.Checked = FindByTextWithDiacriticsCheckBox.Checked;
                BuildLetterFrequencies();
                DisplayLetterFrequencies();
            }
        }
    }
    private void FindByTextWordnessCheckBox_CheckStateChanged(object sender, EventArgs e)
    {
        EnableFindByTextControls();
        UpdateFindByTextOptions();
        PopulateWordsListBox();

        if (PictureBox.Visible)
        {
            if (m_current_drawing_type == DrawingType.SearchTerms)
            {
                RedrawImage();
            }
        }
    }
    private void FindByTextCaseSensitiveCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        EnableFindByTextControls();
        UpdateFindByTextOptions();
        PopulateWordsListBox();
    }
    private void FindByTextMultiplicityCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        FindByTextMultiplicityComparisonOperatorLabel.Enabled = (FindByTextMultiplicityCheckBox.Enabled) && (FindByTextMultiplicityCheckBox.Checked);
        FindByTextMultiplicityNumericUpDown.Enabled = (FindByTextMultiplicityCheckBox.Enabled) && (FindByTextMultiplicityCheckBox.Checked);
        FindByTextMultiplicityNumberTypeLabel.Enabled = (FindByTextMultiplicityCheckBox.Enabled) && (FindByTextMultiplicityCheckBox.Checked);

        UpdateFindByTextOptions();
        PopulateWordsListBox();

        UpdateMultiplicityParameters();
    }
    private void UpdateMultiplicityParameters()
    {
        // 1. number types
        string multiplicity_symbol = FindByTextMultiplicityNumberTypeLabel.Enabled ? FindByTextMultiplicityNumberTypeLabel.Text : "";
        m_multiplicity_number_type =
            (multiplicity_symbol == "P") ? NumberType.Prime :
            (multiplicity_symbol == "AP") ? NumberType.AdditivePrime :
            (multiplicity_symbol == "XP") ? NumberType.NonAdditivePrime :
            (multiplicity_symbol == "C") ? NumberType.Composite :
            (multiplicity_symbol == "AC") ? NumberType.AdditiveComposite :
            (multiplicity_symbol == "XC") ? NumberType.NonAdditiveComposite :
            (multiplicity_symbol == "O") ? NumberType.Odd :
            (multiplicity_symbol == "E") ? NumberType.Even :
            (multiplicity_symbol == "^2") ? NumberType.Square :
            (multiplicity_symbol == "^3") ? NumberType.Cubic :
            (multiplicity_symbol == "^4") ? NumberType.Quartic :
            (multiplicity_symbol == "^5") ? NumberType.Quintic :
            (multiplicity_symbol == "^6") ? NumberType.Sextic :
            (multiplicity_symbol == "^7") ? NumberType.Septic :
            (multiplicity_symbol == "") ? NumberType.None :
                                           NumberType.Natural;

        // 2. numbers
        m_multiplicity = FindByTextMultiplicityNumericUpDown.Enabled ? (int)FindByTextMultiplicityNumericUpDown.Value : -1;

        // 3. comparison operators = ≠ < ≤ > ≥ ÷ !÷ Ʃ
        string multiplicity_operator_symbol = FindByTextMultiplicityComparisonOperatorLabel.Text;
        m_multiplicity_comparison_operator =
            (multiplicity_operator_symbol == "=") ? ComparisonOperator.Equal :
            (multiplicity_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
            (multiplicity_operator_symbol == "<") ? ComparisonOperator.LessThan :
            (multiplicity_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
            (multiplicity_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
            (multiplicity_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
            (multiplicity_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
            (multiplicity_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
            (multiplicity_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                     ComparisonOperator.Reserved;

        // 4. remainders for % comparison operator
        m_multiplicity_remainder = -1;
        if (m_multiplicity_comparison_operator == ComparisonOperator.DivisibleBy)
        {
            try
            {
                m_multiplicity_remainder = int.Parse(FindByTextMultiplicityNumberTypeLabel.Text);
            }
            catch
            {
                // keep as -1
            }
        }
    }
    private void FindByTextMultiplicityNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        UpdateMultiplicityNumberTypeLabelTags();

        UpdateFindByTextOptions();
        PopulateWordsListBox();
        if (FindByTextTextBox.Text.Length > 0)
        {
            FindByExact();
        }
        else
        {
            FindRepeatedPhrases();
        }
    }
    private void FindByTextControls_Enter(object sender, EventArgs e)
    {
        this.AcceptButton = FindByTextButton;

        FindByTextButton.Enabled = true;
        FindBySimilarityButton.Enabled = false;
        FindByNumbersButton.Enabled = false;
        FindByFrequencyButton.Enabled = false;

        if (m_text_search_type == TextSearchType.Root)
        {
            ToolTip.SetToolTip(InspectChaptersLabel, L[l]["Inspect root frequencies"]);
        }
        else
        {
            ToolTip.SetToolTip(InspectChaptersLabel, L[l]["Inspect word frequencies"]);
        }
        WordsListBoxLabel.Visible = true;
        WordsListBox.Visible = true;
        WordsListBoxLabel.BringToFront();
        WordsListBox.BringToFront();

        ResetFindByTextSearchTypeLabels();
        ResetFindByTextSearchBlockSizeLabels();
        ResetFindBySimilarityResultTypeLabels();
        ResetFindByNumbersResultTypeLabels();
        ResetFindByFrequencyResultTypeLabels();

        UpdateFindByNumbersResultType();

        switch (m_text_search_type)
        {
            case TextSearchType.Exact:
                {
                    FindByTextExactSearchTypeLabel.BackColor = Color.SteelBlue;
                    FindByTextExactSearchTypeLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchType.Proximity:
                {
                    FindByTextProximitySearchTypeLabel.BackColor = Color.SteelBlue;
                    FindByTextProximitySearchTypeLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchType.Root:
                {
                    FindByTextRootSearchTypeLabel.BackColor = Color.SteelBlue;
                    FindByTextRootSearchTypeLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            default:
                break;
        }

        switch (m_text_search_block_size)
        {
            case TextSearchBlockSize.Verse:
                {
                    FindByTextSearchBlockSizeVerseLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeVerseLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Chapter:
                {
                    FindByTextSearchBlockSizeChapterLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeChapterLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Page:
                {
                    FindByTextSearchBlockSizePageLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizePageLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Station:
                {
                    FindByTextSearchBlockSizeStationLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeStationLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Part:
                {
                    FindByTextSearchBlockSizePartLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizePartLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Group:
                {
                    FindByTextSearchBlockSizeGroupLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeGroupLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Half:
                {
                    FindByTextSearchBlockSizeHalfLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeHalfLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Quarter:
                {
                    FindByTextSearchBlockSizeQuarterLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeQuarterLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Bowing:
                {
                    FindByTextSearchBlockSizeBowingLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeBowingLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            default:
                break;
        }
    }
    private void FindByTextControls_Leave(object sender, EventArgs e)
    {
        NumericUpDown control = sender as NumericUpDown;
        if (control != null)
        {
            if (String.IsNullOrEmpty(control.Text))
            {
                control.Value = 0;
                control.Refresh();
            }
        }

        UpdateMultiplicityNumberTypeLabelTags();
    }
    private void FindByTextPanel_Leave(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);
    }
    private void FindByTextTextBox_Enter(object sender, EventArgs e)
    {
        FindByTextControls_Enter(null, null);
        FindByTextTextBox_TextChanged(null, null);
    }
    private void FindByTextTextBox_TextChanged(object sender, EventArgs e)
    {
        EnableFindByTextControls();

        PopulateWordsListBox();

        UpdateLanguageType(FindByTextTextBox.Text);

        UpdateSearchScope();

        if (PictureBox.Visible)
        {
            if (m_current_drawing_type == DrawingType.SearchTerms)
            {
                RedrawImage();
            }
        }
    }
    private void UpdateSearchScope()
    {
        SearchScopeBookLabel.BackColor = Color.DarkGray;
        SearchScopeBookLabel.BorderStyle = BorderStyle.None;
        SearchScopeSelectionLabel.BackColor = Color.DarkGray;
        SearchScopeSelectionLabel.BorderStyle = BorderStyle.None;
        SearchScopeResultLabel.BackColor = Color.DarkGray;
        SearchScopeResultLabel.BorderStyle = BorderStyle.None;

        switch (m_client.SearchScope)
        {
            case SearchScope.Book:
                {
                    SearchScopeBookLabel.BackColor = Color.SteelBlue;
                    SearchScopeBookLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case SearchScope.Selection:
                {
                    SearchScopeSelectionLabel.BackColor = Color.SteelBlue;
                    SearchScopeSelectionLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case SearchScope.Result:
                {
                    SearchScopeResultLabel.BackColor = Color.SteelBlue;
                    SearchScopeResultLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            default:
                break;
        }
    }
    private void FindByTextTextBox_KeyPress(object sender, KeyPressEventArgs e)
    {
        FixMicrosoft(sender, e);

        if (e.KeyChar == ' ')
        {
            // prevent double spaces
            if (FindByTextTextBox.SelectionStart > 0)
            {
                if (FindByTextTextBox.Text[FindByTextTextBox.SelectionStart - 1] == ' ')
                {
                    e.Handled = true;
                }
            }
        }
    }
    private void FindByTextTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (ModifierKeys == Keys.Control)
        {
            if (e.KeyCode == Keys.A)
            {
                if (sender is TextBoxBase)
                {
                    (sender as TextBoxBase).SelectAll();
                }
            }
        }
        else if ((e.KeyCode == Keys.Up) || (e.KeyCode == Keys.Down))
        {
            WordsListBox.Focus();
        }
    }
    private void FindByTextButton_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            switch (m_text_search_type)
            {
                case TextSearchType.Exact:
                    {
                        if (WordsListBox.SelectedIndices.Count > 1)
                        {
                            FindSelectedWordsMenuItem_Click(null, null);
                        }
                        else
                        {
                            FindByExact();
                        }
                    }
                    break;
                case TextSearchType.Proximity:
                    {
                        FindByProximity();
                    }
                    break;
                case TextSearchType.Root:
                    {
                        if (WordsListBox.SelectedIndices.Count > 1)
                        {
                            FindSelectedWordsMenuItem_Click(null, null);
                        }
                        else
                        {
                            FindByRoot();
                        }
                    }
                    break;
                default:
                    {
                        FindByExact();
                    }
                    break;
            }

            SearchGroupBox_Leave(null, null);
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void FindByExact()
    {
        if (m_client != null)
        {
            string text = FindByTextTextBox.Text;
            if (text.Length > 0)
            {
                ClearFindMatches();

                if (!String.IsNullOrEmpty(text))
                {
                    string translation = Client.DEFAULT_TRANSLATION;
                    if (m_show_all_translations)
                    {
                        translation = null; // all translations
                    }
                    else
                    {
                        if (TranslatorComboBox.SelectedItem != null)
                        {
                            translation = m_client.GetTranslationKey(TranslatorComboBox.SelectedItem.ToString());
                        }
                    }

                    UpdateFindByTextOptions();

                    //FindByExact(text, m_language_type, translation);
                    FindByExact(text, m_language_type, null); // find in all installed translations if not Arabic
                }
            }
        }
    }
    private void FindByExact(string text, LanguageType language_type, string translation)
    {
        m_search_type = SearchType.Text;

        if (m_client != null)
        {
            if (!String.IsNullOrEmpty(text))
            {
                m_client.FindPhrases(m_text_search_block_size, text, language_type, translation, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, m_text_wordness, m_case_sensitive, m_with_diacritics, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                if (m_client.FoundPhrases != null)
                {
                    string multiplicity_text = "";
                    if (m_multiplicity != -1)
                    {
                        if (m_multiplicity_number_type == NumberType.None)
                        {
                            if (m_multiplicity_comparison_operator == ComparisonOperator.DivisibleBy)
                            {
                                multiplicity_text = FindByTextMultiplicityComparisonOperatorLabel.Text + m_multiplicity + "r" + m_multiplicity_remainder;
                            }
                            else
                            {
                                if (m_multiplicity_comparison_operator == ComparisonOperator.Equal)
                                {
                                    multiplicity_text = "" + m_multiplicity;
                                }
                                else
                                {
                                    multiplicity_text = FindByTextMultiplicityComparisonOperatorLabel.Text + m_multiplicity;
                                }
                            }
                        }
                        else
                        {
                            multiplicity_text = m_multiplicity_number_type + " " + m_multiplicity;
                        }
                    }

                    if (m_client.FoundVerses != null)
                    {
                        int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                        string block_name = ((m_multiplicity_comparison_operator == ComparisonOperator.Equal) && (m_text_search_block_size != TextSearchBlockSize.Verse)) ? m_text_search_block_size.ToString() : "verse";
                        int block_count = ((m_multiplicity_comparison_operator == ComparisonOperator.Equal) && (m_text_search_block_size != TextSearchBlockSize.Verse)) ? phrase_count / Math.Abs(m_multiplicity) : m_client.FoundVerses.Count;
                        if (m_multiplicity == 0)
                        {
                            m_find_result_header = block_count + " " + ((block_count == 1) ? L[l][block_name] : (L[l][block_name] + "s")) + " " + L[l]["without"] + " " + text + " C_" + m_text_location_in_chapter.ToString() + " V_" + m_text_location_in_verse.ToString() + " W_" + m_text_location_in_word.ToString() + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                        }
                        else
                        {
                            m_find_result_header = phrase_count + " " + L[l]["matches"] + " " + L[l]["in"] + " " + block_count + " " + ((block_count == 1) ? L[l][block_name] : (L[l][block_name + "s"])) + " " + L[l]["with"] + " " + multiplicity_text + " " + text + " C_" + m_text_location_in_chapter.ToString() + " V_" + m_text_location_in_verse.ToString() + " W_" + m_text_location_in_word.ToString() + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                        }
                        DisplayFoundVerses(true, true);

                        //SearchResultTextBox.Focus();
                        //SearchResultTextBox.Refresh();

                        WordsListBoxLabel.Visible = false;
                        WordsListBox.Visible = false;
                    }
                }
            }
        }
    }
    private void FindByProximity()
    {
        if (m_client != null)
        {
            string text = FindByTextTextBox.Text;
            if (text.Length > 0)
            {
                string translation = Client.DEFAULT_TRANSLATION;
                if (m_show_all_translations)
                {
                    translation = null; // all translations
                }
                else
                {
                    if (TranslatorComboBox.SelectedItem != null)
                    {
                        translation = m_client.GetTranslationKey(TranslatorComboBox.SelectedItem.ToString());
                    }
                }

                if (FindByTextAllWordsRadioButton.Checked)
                {
                    m_text_proximity_type = TextProximityType.AllWords;
                }
                else if (FindByTextAnyWordRadioButton.Checked)
                {
                    m_text_proximity_type = TextProximityType.AnyWord;
                }

                //FindByProximity(text, m_language_type, translation, m_text_proximity_type);
                FindByProximity(text, m_language_type, null, m_text_proximity_type);
            }
        }
    }
    private void FindByProximity(string text, LanguageType language_type, string translation, TextProximityType text_proximity_type)
    {
        m_search_type = SearchType.Text;

        if (m_client != null)
        {
            if (!String.IsNullOrEmpty(text))
            {
                ClearFindMatches();

                m_client.FindPhrases(m_text_search_block_size, text, language_type, translation, text_proximity_type, m_text_wordness, m_case_sensitive, m_with_diacritics);
                if (m_client.FoundPhrases != null)
                {
                    if (m_client.FoundVerses != null)
                    {
                        int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                        string block_name = "verse";
                        //string block_name = ((m_multiplicity_comparison_operator == ComparisonOperator.Equal) && (m_text_search_block_size != TextSearchBlockSize.Verse)) ? m_text_search_block_size.ToString() : "verse";
                        int block_count = ((m_multiplicity_comparison_operator == ComparisonOperator.Equal) && (m_text_search_block_size != TextSearchBlockSize.Verse)) ? phrase_count / Math.Abs(m_multiplicity) : m_client.FoundVerses.Count;
                        m_find_result_header = phrase_count + " " + L[l]["matches"] + " " + L[l]["in"] + " " + block_count + " " + ((block_count == 1) ? L[l][block_name] : (L[l][block_name + "s"])) + " " + L[l]["with"] + " " + text_proximity_type.ToString() + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                        DisplayFoundVerses(true, true);

                        //SearchResultTextBox.Focus();
                        //SearchResultTextBox.Refresh();

                        WordsListBoxLabel.Visible = false;
                        WordsListBox.Visible = false;
                    }
                }
            }
        }
    }
    private void FindByRoot()
    {
        if (m_emlaaei_text) return;

        if (m_client != null)
        {
            ClearFindMatches();

            if (FindByTextTextBox.Text.Length > 0)
            {
                // get startup text from FindTextBox
                string[] startup_words = FindByTextTextBox.Text.Split();
                int count = startup_words.Length;

                string text = "";
                if (m_auto_complete_mode)
                {
                    for (int i = 0; i < count; i++)
                    {
                        text += startup_words[i] + " ";
                    }
                    text = text.Trim();
                }

                // update m_text_location_in_verse and m_text_location_in_word
                UpdateFindByTextOptions();

                List<Phrase> total_phrases = new List<Phrase>();
                List<Verse> total_verses = new List<Verse>();
                if (!String.IsNullOrEmpty(text))
                {
                    text = text.Trim();

                    m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);

                    total_phrases = total_phrases.Union(m_client.FoundPhrases);
                    total_verses = total_verses.Union(m_client.FoundVerses);

                    // write final result to m_client
                    m_client.FoundPhrases = total_phrases;
                    m_client.FoundVerses = total_verses;
                }

                // display results
                if (m_client.FoundPhrases != null)
                {
                    int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                    if (m_client.FoundVerses != null)
                    {
                        int verse_count = m_client.FoundVerses.Count;
                        m_find_result_header = phrase_count + " " + L[l]["matches"] + " " + L[l]["in"] + " " + verse_count + ((verse_count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + text + " C_" + m_text_location_in_chapter.ToString() + " V_" + m_text_location_in_verse.ToString() + " W_" + m_text_location_in_word.ToString() + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                        DisplayFoundVerses(true, true);

                        //SearchResultTextBox.Focus();
                        //SearchResultTextBox.Refresh();

                        WordsListBoxLabel.Visible = false;
                        WordsListBox.Visible = false;
                    }
                }
            }
        }
    }
    private void FindByRoot(string text)
    {
        if (m_emlaaei_text) return;

        m_search_type = SearchType.Text;

        if (m_client != null)
        {
            ClearFindMatches();

            if (!String.IsNullOrEmpty(text))
            {
                text = text.Trim();

                m_client.FindPhrases(m_text_search_block_size, text, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                if (m_client.FoundPhrases != null)
                {
                    string multiplicity_text = "";
                    if (m_multiplicity != -1)
                    {
                        if (m_multiplicity_number_type == NumberType.None)
                        {
                            if (m_multiplicity_comparison_operator == ComparisonOperator.DivisibleBy)
                            {
                                multiplicity_text = FindByTextMultiplicityComparisonOperatorLabel.Text + m_multiplicity + "r" + m_multiplicity_remainder;
                            }
                            else
                            {
                                if (m_multiplicity_comparison_operator == ComparisonOperator.Equal)
                                {
                                    multiplicity_text = "" + m_multiplicity;
                                }
                                else
                                {
                                    multiplicity_text = FindByTextMultiplicityComparisonOperatorLabel.Text + m_multiplicity;
                                }
                            }
                        }
                        else
                        {
                            multiplicity_text = m_multiplicity_number_type + " " + m_multiplicity;
                        }
                    }

                    int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                    string block_name = ((m_multiplicity_comparison_operator == ComparisonOperator.Equal) && (m_text_search_block_size != TextSearchBlockSize.Verse)) ? m_text_search_block_size.ToString() : "verse";
                    int block_count = ((m_multiplicity_comparison_operator == ComparisonOperator.Equal) && (m_text_search_block_size != TextSearchBlockSize.Verse)) ? phrase_count / Math.Abs(m_multiplicity) : m_client.FoundVerses.Count;
                    if (m_multiplicity == 0)
                    {
                        m_find_result_header = block_count + " " + ((block_count == 1) ? L[l][block_name] : (L[l][block_name + "s"])) + " " + L[l]["without"] + " " + multiplicity_text + " root " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                    }
                    else
                    {
                        m_find_result_header = phrase_count + " " + L[l]["matches"] + " " + L[l]["in"] + " " + block_count + " " + ((block_count == 1) ? L[l][block_name] : (L[l][block_name + "s"])) + " " + L[l]["with"] + " " + multiplicity_text + " " + L[l]["root"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                    }
                    DisplayFoundVerses(true, true);

                    //SearchResultTextBox.Focus();
                    //SearchResultTextBox.Refresh();
                }
            }
        }
    }
    private void FindByTextKeyboardLabel_Click(object sender, EventArgs e)
    {
        Control control = (sender as Control);
        if (control != null)
        {
            control.BackColor = Color.LightSteelBlue;
            control.Refresh();

            // prevent double spaces
            if (control == FindByTextSpaceLabel)
            {
                if (FindByTextTextBox.SelectionStart > 0)
                {
                    if (FindByTextTextBox.Text[FindByTextTextBox.SelectionStart - 1] == ' ')
                    {
                        return;
                    }
                }
            }

            string letter = control.Text[0].ToString();
            int pos = FindByTextTextBox.SelectionStart;
            int len = FindByTextTextBox.SelectionLength;
            if (pos > -1)
            {
                if (len > 0)
                {
                    FindByTextTextBox.Text = FindByTextTextBox.Text.Remove(pos, len);
                }
                else
                {
                    // do nothing
                }
                FindByTextTextBox.Text = FindByTextTextBox.Text.Insert(pos, letter);
                FindByTextTextBox.SelectionStart = pos + 1;
                FindByTextTextBox.Refresh();
            }

            Thread.Sleep(100);
            control.BackColor = Color.LightGray;
            control.Refresh();

            FindByTextKeyboardLabel_MouseEnter(sender, e);
            FindByTextControls_Enter(null, null);

            FindByTextTextBox.Focus();
        }
    }
    private void FindByTextBackspaceLabel_Click(object sender, EventArgs e)
    {
        Control control = (sender as Control);
        if (control != null)
        {
            control.BackColor = Color.LightSteelBlue;
            control.Refresh();

            int pos = FindByTextTextBox.SelectionStart;
            int len = FindByTextTextBox.SelectionLength;
            if ((len == 0) && (pos > 0))        // delete character prior to cursor
            {
                FindByTextTextBox.Text = FindByTextTextBox.Text.Remove(pos - 1, 1);
                FindByTextTextBox.SelectionStart = pos - 1;
            }
            else if ((len > 0) && (pos >= 0))   // delete current highlighted characters
            {
                FindByTextTextBox.Text = FindByTextTextBox.Text.Remove(pos, len);
                FindByTextTextBox.SelectionStart = pos;
            }
            else                  // nothing to delete
            {
            }
            FindByTextTextBox.Refresh();

            Thread.Sleep(100);
            control.BackColor = Color.LightGray;
            control.Refresh();

            FindByTextKeyboardLabel_MouseEnter(sender, e);
            FindByTextControls_Enter(null, null);

            FindByTextTextBox.Focus();
        }
    }
    private void FindByTextKeyboardLabel_MouseEnter(object sender, EventArgs e)
    {
        Control control = (sender as Control);
        if (control != null)
        {
            if (control == FindByTextBackspaceLabel)
            {
                control.BackColor = Color.DarkGray;
            }
            else
            {
                control.BackColor = Color.White;
            }
            control.Refresh();
        }
    }
    private void FindByTextKeyboardLabel_MouseLeave(object sender, EventArgs e)
    {
        Control control = (sender as Control);
        if (control != null)
        {
            control.BackColor = Color.LightGray;
            control.Refresh();
        }
    }
    private void FindByTextKeyboardModifierLabel_MouseLeave(object sender, EventArgs e)
    {
        Control control = (sender as Control);
        if (control != null)
        {
            control.BackColor = Color.Silver;
            control.Refresh();
        }
    }
    private void FindByTextOrLabel_MouseHover(object sender, EventArgs e)
    {
        char[] quran_healing_characters = { '♥' };
        char[] idhaar_characters = { 'ء', 'أ', 'إ', 'ح', 'خ', 'ع', 'غ', 'ه', 'ة', 'ى' };
        char[] wasl_characters = { 'ٱ' };
        char[] med_characters = { 'ا', 'آ' };
        char[] iqlaab_characters = { 'ب' };
        char[] idghaam_characters = { 'ر', 'ل' };
        char[] idghaam_ghunna_characters = { 'م', 'ن', 'و', 'ؤ', 'ي', 'ئ' };
        char[] ikhfaa_characters = { 'ت', 'ث', 'ج', 'د', 'ذ', 'ز', 'س', 'ش', 'ص', 'ض', 'ط', 'ظ', 'ف', 'ق', 'ك' };

        Control control = (sender as Control);
        if (control != null)
        {
            string character_sound = null;

            if (character_sound == null)
            {
                foreach (char c in med_characters)
                {
                    if (c == control.Text[0])
                    {
                        character_sound = "مدّ";
                        break;
                    }
                }
            }
            if (character_sound == null)
            {
                foreach (char c in wasl_characters)
                {
                    if (c == control.Text[0])
                    {
                        character_sound = "إيصال";
                        break;
                    }
                }
            }
            if (character_sound == null)
            {
                foreach (char c in iqlaab_characters)
                {
                    if (c == control.Text[0])
                    {
                        character_sound = "إقلاب";
                        break;
                    }
                }
            }
            if (character_sound == null)
            {
                foreach (char c in idghaam_ghunna_characters)
                {
                    if (c == control.Text[0])
                    {
                        character_sound = "إدغام بغنة";
                        break;
                    }
                }
            }
            if (character_sound == null)
            {
                foreach (char c in idghaam_characters)
                {
                    if (c == control.Text[0])
                    {
                        //character_sound = "إدغام بلا غنة";
                        character_sound = "إدغام";
                        break;
                    }
                }
            }
            if (character_sound == null)
            {
                foreach (char c in idhaar_characters)
                {
                    if (c == control.Text[0])
                    {
                        character_sound = "إظهار";
                        break;
                    }
                }
            }
            if (character_sound == null)
            {
                foreach (char c in ikhfaa_characters)
                {
                    if (c == control.Text[0])
                    {
                        //character_sound = "إخفاء بغنة";
                        character_sound = "إخفاء";
                        break;
                    }
                }
            }
            if (character_sound == null)
            {
                foreach (char c in quran_healing_characters)
                {
                    if (c == control.Text[0])
                    {
                        character_sound = "الشفاء بالقرءان \r\nإن شاء الله ";
                        break;
                    }
                }
            }

            int start = "FindByText".Length;
            int length = control.Name.Length - start - "Label".Length;
            ToolTip.SetToolTip(control, control.Name.Substring(start, length) + " " + character_sound);
        }
    }
    private void ResetFindByTextSearchTypeLabels()
    {
        FindByTextExactSearchTypeLabel.BackColor = Color.DarkGray;
        FindByTextExactSearchTypeLabel.BorderStyle = BorderStyle.None;
        FindByTextProximitySearchTypeLabel.BackColor = Color.DarkGray;
        FindByTextProximitySearchTypeLabel.BorderStyle = BorderStyle.None;
        FindByTextRootSearchTypeLabel.BackColor = Color.DarkGray;
        FindByTextRootSearchTypeLabel.BorderStyle = BorderStyle.None;
    }
    private void ResetFindByTextSearchBlockSizeLabels()
    {
        FindByTextSearchBlockSizeVerseLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeVerseLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizeChapterLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeChapterLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizePageLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizePageLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizeStationLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeStationLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizePartLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizePartLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizeGroupLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeGroupLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizeHalfLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeHalfLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizeQuarterLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeQuarterLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizeBowingLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeBowingLabel.BorderStyle = BorderStyle.None;
    }
    private void FindByTextMultiplicityComparisonOperatorLabel_Click(object sender, EventArgs e)
    {
        UpdateMultiplicityNumberTypeLabelTags();

        Control control = sender as Control;
        if (control != null)
        {
            if (UpdateComparisonOperator(control))
            {
                if (FindByTextMultiplicityComparisonOperatorLabel.Text == "÷")
                {
                    int remainder = 0;
                    FindByTextMultiplicityNumberTypeLabel.Tag = remainder;
                    FindByTextMultiplicityNumberTypeLabel.Text = remainder.ToString();
                    FindByTextMultiplicityNumberTypeLabel.ForeColor = Color.Black;
                    FindByTextMultiplicityNumberTypeLabel.Enabled = true;
                    ToolTip.SetToolTip(FindByTextMultiplicityNumberTypeLabel, L[l]["remainder"]);
                }
                else
                {
                    FindByTextMultiplicityNumberTypeLabel.Text = "";
                    ToolTip.SetToolTip(FindByTextMultiplicityNumberTypeLabel, null);
                }

                UpdateMultiplicityParameters();

                FindByTextControls_Enter(null, null);
            }
        }
    }
    private void FindByTextMultiplicityNumberTypeLabel_Click(object sender, EventArgs e)
    {
        UpdateMultiplicityNumberTypeLabelTags();

        Control control = sender as Control;
        if (control != null)
        {
            if (UpdateNumberType(control))
            {
                FindByTextMultiplicityComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                FindByTextMultiplicityNumericUpDown.Enabled = (control.Text == "");
                if (control.Text.Length > 0)
                {
                    FindByTextMultiplicityComparisonOperatorLabel.Text = "=";
                    FindByTextMultiplicityNumericUpDown.Value = -1;
                }
                else
                {
                    FindByTextMultiplicityNumericUpDown.Focus();
                }

                UpdateMultiplicityParameters();

                FindByTextControls_Enter(null, null);
            }
        }
    }
    private void UpdateMultiplicityNumberTypeLabelTags()
    {
        FindByTextMultiplicityNumberTypeLabel.Tag = (int)FindByTextMultiplicityNumericUpDown.Value;

        int number;
        if (int.TryParse(FindByTextMultiplicityNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByTextMultiplicityNumericUpDown.Value)
            {
                number = (int)FindByTextMultiplicityNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByTextMultiplicityNumberTypeLabel.Text = number.ToString();
            }
        }

        UpdateMultiplicityParameters();
    }
    private void FindByTextControl_EnabledChanged(object sender, EventArgs e)
    {
        Control control = sender as Control;
        if (control != null)
        {
            control.BackColor = (control.Enabled) ? SystemColors.Window : Color.LightGray;
        }
    }
    private void UpdateKeyboard(string text_mode)
    {
        // allow all letters in Root search type
        if (m_text_search_type == TextSearchType.Root) text_mode = "Original";

        FindByTextHamzaLabel.Visible = false;
        FindByTextTaaMarbootaLabel.Visible = false;
        FindByTextElfMaqsuraLabel.Visible = false;
        FindByTextElfWaslLabel.Visible = false;
        FindByTextHamzaAboveElfLabel.Visible = false;
        FindByTextHamzaBelowElfLabel.Visible = false;
        FindByTextHamzaAboveWawLabel.Visible = false;
        FindByTextHamzaAboveYaaLabel.Visible = false;
        FindByTextWithDiacriticsCheckBox.Visible = false;
        LetterFrequencyWithDiacriticsCheckBox.Visible = m_find_by_phrase_letter_frequency;

        if (text_mode == "Simplified28")
        {
            // do nothing
        }
        else if (text_mode == "Simplified29")
        {
            FindByTextHamzaLabel.Visible = true;
        }
        else if (text_mode == "Simplified30")
        {
            FindByTextTaaMarbootaLabel.Visible = true;
            FindByTextElfMaqsuraLabel.Visible = true;
        }
        else if (text_mode == "Simplified31")
        {
            FindByTextHamzaLabel.Visible = true;
            FindByTextTaaMarbootaLabel.Visible = true;
            FindByTextElfMaqsuraLabel.Visible = true;
        }
        else if (text_mode == "Simplified36")
        {
            FindByTextHamzaLabel.Visible = true;

            FindByTextTaaMarbootaLabel.Visible = true;
            FindByTextElfMaqsuraLabel.Visible = true;

            FindByTextElfWaslLabel.Visible = true;
            FindByTextHamzaAboveElfLabel.Visible = true;
            FindByTextHamzaBelowElfLabel.Visible = true;
            FindByTextHamzaAboveWawLabel.Visible = true;
            FindByTextHamzaAboveYaaLabel.Visible = true;
        }
        else if (text_mode == "Original")
        {
            FindByTextHamzaLabel.Visible = true;

            FindByTextTaaMarbootaLabel.Visible = true;
            FindByTextElfMaqsuraLabel.Visible = true;

            FindByTextElfWaslLabel.Visible = true;
            FindByTextHamzaAboveElfLabel.Visible = true;
            FindByTextHamzaBelowElfLabel.Visible = true;
            FindByTextHamzaAboveWawLabel.Visible = true;
            FindByTextHamzaAboveYaaLabel.Visible = true;
            FindByTextWithDiacriticsCheckBox.Visible = true;
            LetterFrequencyWithDiacriticsCheckBox.Visible = true;
        }
        else
        {
            // do nothing
        }
    }
    private void EnableFindByTextControls()
    {
        FindByTextExactSearchTypeLabel.BackColor = (m_text_search_type == TextSearchType.Exact) ? Color.SteelBlue : Color.DarkGray;
        FindByTextExactSearchTypeLabel.BorderStyle = (m_text_search_type == TextSearchType.Exact) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextProximitySearchTypeLabel.BackColor = (m_text_search_type == TextSearchType.Proximity) ? Color.SteelBlue : Color.DarkGray;
        FindByTextProximitySearchTypeLabel.BorderStyle = (m_text_search_type == TextSearchType.Proximity) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextRootSearchTypeLabel.BackColor = (m_text_search_type == TextSearchType.Root) ? Color.SteelBlue : Color.DarkGray;
        FindByTextRootSearchTypeLabel.BorderStyle = (m_text_search_type == TextSearchType.Root) ? BorderStyle.Fixed3D : BorderStyle.None;

        FindByTextSearchBlockSizeVerseLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Verse) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizeVerseLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Verse) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizeChapterLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Chapter) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizeChapterLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Chapter) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizePageLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Page) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizePageLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Page) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizeStationLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Station) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizeStationLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Station) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizePartLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Part) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizePartLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Part) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizeGroupLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Group) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizeGroupLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Group) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizeHalfLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Half) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizeHalfLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Half) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizeQuarterLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Quarter) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizeQuarterLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Quarter) ? BorderStyle.Fixed3D : BorderStyle.None;

        FindByTextAtChapterStartRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);
        FindByTextAtChapterMiddleRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);
        FindByTextAtChapterEndRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);
        FindByTextAtChapterAnyRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);

        FindByTextAtVerseStartRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);
        FindByTextAtVerseMiddleRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);
        FindByTextAtVerseEndRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);
        FindByTextAtVerseAnyRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);

        FindByTextAllWordsRadioButton.Enabled = (m_text_search_type == TextSearchType.Proximity);
        FindByTextAnyWordRadioButton.Enabled = (m_text_search_type == TextSearchType.Proximity)
                                                && (!FindByTextTextBox.Text.Contains("-"))
                                                && (!FindByTextTextBox.Text.Contains("+"));
        FindByTextPlusLabel.Visible = ((m_text_search_type == TextSearchType.Proximity) || (m_text_search_type == TextSearchType.Root));
        FindByTextMinusLabel.Visible = ((m_text_search_type == TextSearchType.Proximity) || (m_text_search_type == TextSearchType.Root));

        FindByTextWordnessCheckBox.Enabled = ((m_text_search_type == TextSearchType.Exact) || (m_text_search_type == TextSearchType.Proximity));

        FindByTextAtWordStartRadioButton.Enabled = ((m_text_search_type == TextSearchType.Exact) || (m_text_search_type == TextSearchType.Root));
        FindByTextAtWordMiddleRadioButton.Enabled = ((m_text_search_type == TextSearchType.Exact) || (m_text_search_type == TextSearchType.Root));
        FindByTextAtWordEndRadioButton.Enabled = ((m_text_search_type == TextSearchType.Exact) || (m_text_search_type == TextSearchType.Root));
        FindByTextAtWordAnyRadioButton.Enabled = ((m_text_search_type == TextSearchType.Exact) || (m_text_search_type == TextSearchType.Root));

        FindByTextMultiplicityCheckBox.Enabled = ((m_text_search_type == TextSearchType.Exact) || (m_text_search_type == TextSearchType.Root));
        FindByTextMultiplicityComparisonOperatorLabel.Enabled = (FindByTextMultiplicityCheckBox.Enabled) && (FindByTextMultiplicityCheckBox.Checked);
        FindByTextMultiplicityNumericUpDown.Enabled = (FindByTextMultiplicityCheckBox.Enabled) && (FindByTextMultiplicityCheckBox.Checked);
        FindByTextMultiplicityNumberTypeLabel.Enabled = (FindByTextMultiplicityCheckBox.Enabled) && (FindByTextMultiplicityCheckBox.Checked);

        FindByTextQuranHealingLabel.Enabled = (m_text_search_type == TextSearchType.Root);
        FindByTextCaseSensitiveCheckBox.Enabled = (m_language_type == LanguageType.LeftToRight);
    }
    private void FindByTextLabel_Click(object sender, EventArgs e)
    {
        FindRepeatedPhrases();
    }
    private void FindRepeatedPhrases()
    {
        if (m_client != null)
        {
            m_client.FilterChapters = null;
            ClearFindMatches(); // clear m_find_matches for F3 to work correctly in filtered result

            if (m_multiplicity > 0)
            {
                int phrase_word_count = m_multiplicity;
                m_client.FindRepeatedPhrases(phrase_word_count, m_with_diacritics);
                if (m_client.FoundPhrases != null)
                {
                    if (m_client.FoundVerses != null)
                    {
                        int phrase_count = GetPhraseCount(m_client.FoundPhrases) / 2;
                        int verse_count = ((m_multiplicity_comparison_operator == ComparisonOperator.Equal) && (m_text_search_block_size != TextSearchBlockSize.Verse)) ? phrase_count / Math.Abs(m_multiplicity) : m_client.FoundVerses.Count;

                        m_find_result_header = phrase_count + " " + L[l]["repeated phrases"] + " " + L[l]["in"] + " " + verse_count + " " + ((verse_count == 1) ? L[l]["verse"] : (L[l]["verses"])) + " " + L[l]["with diacritics"];

                        DisplayFoundVerses(true, true);

                        //SearchResultTextBox.Focus();
                        //SearchResultTextBox.Refresh();

                        WordsListBoxLabel.Visible = false;
                        WordsListBox.Visible = false;
                    }
                }
            }
        }
    }
    private void FindByTextQuranHealingLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            ClearFindMatches();

            if (FindByTextTextBox.Text.Length > 0)
            {
                // get startup text from FindTextBox
                string[] startup_words = FindByTextTextBox.Text.Split();
                int count = startup_words.Length;

                string text = "";
                if (m_auto_complete_mode)
                {
                    for (int i = 0; i < count; i++)
                    {
                        text += startup_words[i] + " ";
                    }
                    text = text.Trim();
                }

                // update m_text_location_in_verse and m_text_location_in_word
                UpdateFindByTextOptions();

                List<Phrase> total_phrases = new List<Phrase>();
                List<Verse> total_verses = new List<Verse>();
                if (!String.IsNullOrEmpty(text))
                {
                    text = text.Trim();

                    m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);

                    total_phrases = total_phrases.Union(m_client.FoundPhrases);
                    total_verses = total_verses.Union(m_client.FoundVerses);

                    // write final result to m_client
                    m_client.FoundPhrases = total_phrases;
                    m_client.FoundVerses = total_verses;
                }

                List<Verse> result = new List<Verse>();
                if (m_client.FoundVerses != null)
                {
                    foreach (Verse v in m_client.FoundVerses)
                    {
                        long value = m_client.CalculateValue(v);

                        Verse verse = m_client.Book.GetVerseByVerseNumber((int)value);
                        if (verse != null)
                        {
                            result.Add(verse);
                        }

                        if (ModifierKeys == Keys.Control)
                        {
                            verse = m_client.Book.GetVerseByWordNumber((int)value);
                            if (verse != null)
                            {
                                result.Add(verse);
                            }
                        }

                        if (ModifierKeys == Keys.Shift)
                        {
                            verse = m_client.Book.GetVerseByWordNumber((int)value);
                            if (verse != null)
                            {
                                result.Add(verse);
                            }

                            verse = m_client.Book.GetVerseByLetterNumber((int)value);
                            if (verse != null)
                            {
                                result.Add(verse);
                            }
                        }
                    }

                    // overwrite
                    m_client.FoundVerses = result;
                    m_client.FoundPhrases = null;
                }

                // display results
                if (m_client.FoundVerses != null)
                {
                    int verse_count = m_client.FoundVerses.Count;
                    m_find_result_header = verse_count + ((verse_count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + text + " C_" + m_text_location_in_chapter.ToString() + " V_" + m_text_location_in_verse.ToString() + " W_" + m_text_location_in_word.ToString() + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                    DisplayFoundVerses(false, true);

                    //SearchResultTextBox.Focus();
                    //SearchResultTextBox.Refresh();

                    WordsListBoxLabel.Visible = false;
                    WordsListBox.Visible = false;
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Search By Similarity
    ///////////////////////////////////////////////////////////////////////////////
    private SimilaritySearchSource m_similarity_search_source = SimilaritySearchSource.CurrentVerse;
    private void FindBySimilarityCurrentVerseTypeLabel_Click(object sender, EventArgs e)
    {
        m_similarity_search_source = SimilaritySearchSource.CurrentVerse;
        FindBySimilarityPercentageTrackBar.Value = 73;
        FindBySimilarityControls_Enter(null, null);
    }
    private void FindBySimilarityAllVersesTypeLabel_Click(object sender, EventArgs e)
    {
        m_similarity_search_source = SimilaritySearchSource.AllVerses;
        FindBySimilarityPercentageTrackBar.Value = 100;
        FindBySimilarityControls_Enter(null, null);
    }
    private void FindBySimilarityRadioButton_CheckedChanged(object sender, EventArgs e)
    {
        //if (m_similarity_search_source == SimilaritySearchSource.CurrentVerse)
        //{
        //    FindBySimilarityButton_Click(null, null);
        //}
    }
    private void FindBySimilarityPercentageTrackBar_ValueChanged(object sender, EventArgs e)
    {
        if (m_similarity_search_source == SimilaritySearchSource.CurrentVerse)
        {
            if (sender is TrackBar)
            {
                FindBySimilarity();
            }
        }
    }
    private void FindBySimilarityControls_Enter(object sender, EventArgs e)
    {
        this.AcceptButton = FindBySimilarityButton;

        FindByTextButton.Enabled = false;
        FindBySimilarityButton.Enabled = true;
        FindByNumbersButton.Enabled = false;
        FindByFrequencyButton.Enabled = false;

        ToolTip.SetToolTip(InspectChaptersLabel, L[l]["Inspect chapters"]);
        WordsListBoxLabel.Visible = false;
        WordsListBox.Visible = false;

        ResetFindByTextSearchBlockSizeLabels();
        ResetFindByTextSearchTypeLabels();
        ResetFindBySimilarityResultTypeLabels();
        ResetFindByNumbersResultTypeLabels();
        ResetFindByFrequencyResultTypeLabels();

        switch (m_similarity_search_source)
        {
            case SimilaritySearchSource.CurrentVerse:
                {
                    FindBySimilarityCurrentVerseTypeLabel.BackColor = Color.SteelBlue;
                    FindBySimilarityCurrentVerseTypeLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case SimilaritySearchSource.AllVerses:
                {
                    FindBySimilarityAllVersesTypeLabel.BackColor = Color.SteelBlue;
                    FindBySimilarityAllVersesTypeLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
        }
    }
    private void ResetFindBySimilarityResultTypeLabels()
    {
        FindBySimilarityCurrentVerseTypeLabel.BackColor = Color.DarkGray;
        FindBySimilarityCurrentVerseTypeLabel.BorderStyle = BorderStyle.None;
        FindBySimilarityAllVersesTypeLabel.BackColor = Color.DarkGray;
        FindBySimilarityAllVersesTypeLabel.BorderStyle = BorderStyle.None;
    }
    private void FindBySimilarityButton_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            FindBySimilarity();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void FindBySimilarity()
    {
        m_search_type = SearchType.Similarity;

        if (m_client != null)
        {
            ClearFindMatches();

            SimilarityMethod find_by_similarity_method = SimilarityMethod.SimilarText;
            if (FindBySimilarityTextRadioButton.Checked)
            {
                find_by_similarity_method = SimilarityMethod.SimilarText;
            }
            else if (FindBySimilarityWordsRadioButton.Checked)
            {
                find_by_similarity_method = SimilarityMethod.SimilarWords;
            }
            else if (FindBySimilarityFirstHalfRadioButton.Checked)
            {
                find_by_similarity_method = SimilarityMethod.SimilarFirstHalf;
            }
            else if (FindBySimilarityLastHalfRadioButton.Checked)
            {
                find_by_similarity_method = SimilarityMethod.SimilarLastHalf;
            }
            else if (FindBySimilarityFirstWordRadioButton.Checked)
            {
                find_by_similarity_method = SimilarityMethod.SimilarFirstWord;
            }
            else if (FindBySimilarityLastWordRadioButton.Checked)
            {
                find_by_similarity_method = SimilarityMethod.SimilarLastWord;
            }
            else
            {
                //
            }

            double similarity_percentage = (double)FindBySimilarityPercentageTrackBar.Value / 100.0D;

            string text = null;
            if (m_similarity_search_source == SimilaritySearchSource.CurrentVerse)
            {
                Verse verse = GetCurrentVerse();
                if (verse != null)
                {
                    if (verse.Chapter != null)
                    {
                        m_client.FindVerses(verse, find_by_similarity_method, similarity_percentage);
                        text = " to verse " + verse.Chapter.Name + " " + verse.NumberInChapter + " ";
                    }

                    if (m_client.FoundVerses != null)
                    {
                        int verse_count = m_client.FoundVerses.Count;
                        m_find_result_header = verse_count + ((verse_count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + find_by_similarity_method.ToString() + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];

                        DisplayFoundVerses(true, true);
                    }
                }
            }
            else if (m_similarity_search_source == SimilaritySearchSource.AllVerses)
            {
                m_client.FindVerses(find_by_similarity_method, similarity_percentage);
                text = null;

                if (m_client.FoundVerses != null)
                {
                    int verse_count = m_client.FoundVerses.Count;
                    m_find_result_header = verse_count + ((verse_count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + find_by_similarity_method.ToString() + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];

                    DisplayFoundVerseRanges(true, true);
                }
            }
            else
            {
                //
            }

            //SearchResultTextBox.Focus();
            //SearchResultTextBox.Refresh();
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Search By Numbers
    ///////////////////////////////////////////////////////////////////////////////
    private NumbersResultType m_numbers_result_type = NumbersResultType.Verses;
    private void FindByNumbersLabel_Click(object sender, EventArgs e)
    {
        FindByNumbersControls_Enter(null, null);
    }
    private NumberScope m_letter_number_scope = NumberScope.NumberInWord;
    private NumberScope m_word_number_scope = NumberScope.NumberInVerse;
    private NumberScope m_verse_number_scope = NumberScope.NumberInChapter;
    private NumberScope m_chapter_number_scope = NumberScope.Number;
    private void FindByNumbersNumberLabel_Click(object sender, EventArgs e)
    {
        FindByNumbersControls_Enter(null, null);

        switch (m_numbers_result_type)
        {
            case NumbersResultType.Letters:
                {
                    if (m_letter_number_scope == NumberScope.Number)
                    {
                        m_letter_number_scope = NumberScope.NumberInWord;
                    }
                    else if (m_letter_number_scope == NumberScope.NumberInWord)
                    {
                        m_letter_number_scope = NumberScope.NumberInVerse;
                    }
                    else if (m_letter_number_scope == NumberScope.NumberInVerse)
                    {
                        m_letter_number_scope = NumberScope.NumberInChapter;
                    }
                    else if (m_letter_number_scope == NumberScope.NumberInChapter)
                    {
                        m_letter_number_scope = NumberScope.Number;
                    }
                }
                break;
            case NumbersResultType.Words:
                {
                    if (m_word_number_scope == NumberScope.Number)
                    {
                        m_word_number_scope = NumberScope.NumberInVerse;
                    }
                    else if (m_word_number_scope == NumberScope.NumberInVerse)
                    {
                        m_word_number_scope = NumberScope.NumberInChapter;
                    }
                    else if (m_word_number_scope == NumberScope.NumberInChapter)
                    {
                        m_word_number_scope = NumberScope.Number;
                    }
                }
                break;
            case NumbersResultType.WordRanges:
                {
                }
                break;
            case NumbersResultType.Sentences:
                {
                }
                break;
            case NumbersResultType.Verses:
                {
                    if (m_verse_number_scope == NumberScope.Number)
                    {
                        m_verse_number_scope = NumberScope.NumberInChapter;
                    }
                    else if (m_verse_number_scope == NumberScope.NumberInChapter)
                    {
                        m_verse_number_scope = NumberScope.Number;
                    }
                }
                break;
            case NumbersResultType.VerseRanges:
                {
                }
                break;
            case NumbersResultType.Chapters:
                {
                    if (m_chapter_number_scope == NumberScope.Number)
                    {
                        m_chapter_number_scope = NumberScope.Number;
                    }
                }
                break;
            case NumbersResultType.ChapterRanges:
                {
                }
                break;
            default:
                break;
        }

        UpdateFindByNumbersResultType();
    }
    private void FindByNumbersResultTypeLettersLabel_Click(object sender, EventArgs e)
    {
        m_numbers_result_type = NumbersResultType.Letters;
        //                          num   Cs     Vs     Ws    Ls    uLs   value dsum  droot
        EnableFindByNumbersControls(true, false, false, false, false, false, true, true, true);
        FindByNumbersControls_Enter(null, null);
        ////ResetFindByNumbersResultTypeLabels(); // already called on FindByNumbersControls_Enter
        //ResetFindByNumbersComparisonOperatorLabels();
        //ResetFindByNumbersNumberTypeControl(FindByNumbersNumberNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersChaptersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersVersesNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersWordsNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersLettersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersUniqueLettersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueDigitSumNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueDigitalRootNumberTypeLabel);

        try
        {
            for (int i = 0; i < 3; i++) FindByNumbersNumberNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersChaptersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersVersesNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersWordsNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersLettersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersUniqueLettersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueDigitSumNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueDigitalRootNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);

            FindByNumbersNumberNumericUpDown.Value = 0;
            FindByNumbersChaptersNumericUpDown.Value = 0;
            FindByNumbersVersesNumericUpDown.Value = 0;
            FindByNumbersWordsNumericUpDown.Value = 0;
            FindByNumbersLettersNumericUpDown.Value = 1;
            FindByNumbersUniqueLettersNumericUpDown.Value = 0;
            //FindByNumbersValueNumericUpDown.Value = 0;
            //FindByNumbersValueDigitSumNumericUpDown.Value = 0;
            //FindByNumbersValueDigitalRootNumericUpDown.Value = 0;
        }
        finally
        {
            FindByNumbersNumberNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersChaptersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersVersesNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersWordsNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersLettersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersUniqueLettersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueDigitSumNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueDigitalRootNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        }

        FindByNumbersValueNumericUpDown.Focus();
    }
    private void FindByNumbersResultTypeWordsLabel_Click(object sender, EventArgs e)
    {
        m_numbers_result_type = NumbersResultType.Words;
        //                          num   Cs     Vs     Ws    Ls    uLs   value dsum  droot
        EnableFindByNumbersControls(true, false, false, true, true, true, true, true, true);
        FindByNumbersControls_Enter(null, null);
        ////ResetFindByNumbersResultTypeLabels(); // already called on FindByNumbersControls_Enter
        //ResetFindByNumbersComparisonOperatorLabels();
        //ResetFindByNumbersNumberTypeControl(FindByNumbersNumberNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersChaptersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersVersesNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersWordsNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersLettersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersUniqueLettersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueDigitSumNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueDigitalRootNumberTypeLabel);

        try
        {
            for (int i = 0; i < 3; i++) FindByNumbersNumberNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersChaptersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersVersesNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersWordsNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersLettersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersUniqueLettersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueDigitSumNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueDigitalRootNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);

            FindByNumbersNumberNumericUpDown.Value = 0;
            FindByNumbersChaptersNumericUpDown.Value = 0;
            FindByNumbersVersesNumericUpDown.Value = 0;
            FindByNumbersWordsNumericUpDown.Value = 1;
            FindByNumbersLettersNumericUpDown.Value = 0;
            FindByNumbersUniqueLettersNumericUpDown.Value = 0;
            //FindByNumbersValueNumericUpDown.Value = 0;
            //FindByNumbersValueDigitSumNumericUpDown.Value = 0;
            //FindByNumbersValueDigitalRootNumericUpDown.Value = 0;
        }
        finally
        {
            FindByNumbersNumberNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersChaptersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersVersesNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersWordsNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersLettersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersUniqueLettersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueDigitSumNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueDigitalRootNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        }

        FindByNumbersLettersNumericUpDown.Focus();
    }
    private void FindByNumbersResultTypeSentencesLabel_Click(object sender, EventArgs e)
    {
        m_numbers_result_type = NumbersResultType.Sentences;
        //                           num   Cs     Vs     Ws    Ls    uLs   value dsum  droot
        EnableFindByNumbersControls(true, false, false, true, true, true, true, true, true);
        FindByNumbersControls_Enter(null, null);
        ////ResetFindByNumbersResultTypeLabels(); // already called on FindByNumbersControls_Enter
        //ResetFindByNumbersComparisonOperatorLabels();
        //ResetFindByNumbersNumberTypeControl(FindByNumbersNumberNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersChaptersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersVersesNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersWordsNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersLettersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersUniqueLettersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueDigitSumNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueDigitalRootNumberTypeLabel);

        try
        {
            for (int i = 0; i < 3; i++) FindByNumbersNumberNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersChaptersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersVersesNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersWordsNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersLettersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersUniqueLettersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueDigitSumNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueDigitalRootNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);

            FindByNumbersNumberNumericUpDown.Value = 0;
            FindByNumbersChaptersNumericUpDown.Value = 0;
            FindByNumbersVersesNumericUpDown.Value = 0;
            FindByNumbersWordsNumericUpDown.Value = 0; // 0 not 1 for any number of words in sentence
            FindByNumbersLettersNumericUpDown.Value = 0;
            FindByNumbersUniqueLettersNumericUpDown.Value = 0;
            //FindByNumbersValueNumericUpDown.Value = 0;
            //FindByNumbersValueDigitSumNumericUpDown.Value = 0;
            //FindByNumbersValueDigitalRootNumericUpDown.Value = 0;
        }
        finally
        {
            FindByNumbersNumberNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersChaptersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersVersesNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersWordsNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersLettersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersUniqueLettersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueDigitSumNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueDigitalRootNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        }

        FindByNumbersWordsNumericUpDown.Focus();
    }
    private void FindByNumbersResultTypeVersesLabel_Click(object sender, EventArgs e)
    {
        m_numbers_result_type = NumbersResultType.Verses;
        //                           num   Cs     Vs    Ws    Ls    uLs   value dsum  droot
        EnableFindByNumbersControls(true, false, true, true, true, true, true, true, true);
        FindByNumbersControls_Enter(null, null);
        ////ResetFindByNumbersResultTypeLabels(); // already called on FindByNumbersControls_Enter
        //ResetFindByNumbersComparisonOperatorLabels();
        //ResetFindByNumbersNumberTypeControl(FindByNumbersNumberNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersChaptersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersVersesNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersWordsNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersLettersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersUniqueLettersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueDigitSumNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueDigitalRootNumberTypeLabel);

        try
        {
            for (int i = 0; i < 3; i++) FindByNumbersNumberNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersChaptersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersVersesNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersWordsNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersLettersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersUniqueLettersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueDigitSumNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueDigitalRootNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);

            FindByNumbersNumberNumericUpDown.Value = 0;
            FindByNumbersChaptersNumericUpDown.Value = 0;
            FindByNumbersVersesNumericUpDown.Value = 1;
            FindByNumbersWordsNumericUpDown.Value = 0;
            FindByNumbersLettersNumericUpDown.Value = 0;
            FindByNumbersUniqueLettersNumericUpDown.Value = 0;
            //FindByNumbersValueNumericUpDown.Value = 0;
            //FindByNumbersValueDigitSumNumericUpDown.Value = 0;
            //FindByNumbersValueDigitalRootNumericUpDown.Value = 0;
        }
        finally
        {
            FindByNumbersNumberNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersChaptersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersVersesNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersWordsNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersLettersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersUniqueLettersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueDigitSumNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueDigitalRootNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        }

        FindByNumbersWordsNumericUpDown.Focus();
    }
    private void FindByNumbersResultTypeChaptersLabel_Click(object sender, EventArgs e)
    {
        m_numbers_result_type = NumbersResultType.Chapters;
        //                           num   Cs    Vs    Ws    Ls    uLs   value dsum  droot
        EnableFindByNumbersControls(true, true, true, true, true, true, true, true, true);
        FindByNumbersControls_Enter(null, null);
        ////ResetFindByNumbersResultTypeLabels(); // already called on FindByNumbersControls_Enter
        //ResetFindByNumbersComparisonOperatorLabels();
        //ResetFindByNumbersNumberTypeControl(FindByNumbersNumberNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersChaptersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersVersesNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersWordsNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersLettersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersUniqueLettersNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueDigitSumNumberTypeLabel);
        //ResetFindByNumbersNumberTypeControl(FindByNumbersValueDigitalRootNumberTypeLabel);

        try
        {
            for (int i = 0; i < 3; i++) FindByNumbersNumberNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersChaptersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersVersesNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersWordsNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersLettersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersUniqueLettersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueDigitSumNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            for (int i = 0; i < 3; i++) FindByNumbersValueDigitalRootNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);

            FindByNumbersNumberNumericUpDown.Value = 0;
            FindByNumbersChaptersNumericUpDown.Value = 1;
            FindByNumbersVersesNumericUpDown.Value = 0;
            FindByNumbersWordsNumericUpDown.Value = 0;
            FindByNumbersLettersNumericUpDown.Value = 0;
            FindByNumbersUniqueLettersNumericUpDown.Value = 0;
            //FindByNumbersValueNumericUpDown.Value = 0;
            //FindByNumbersValueDigitSumNumericUpDown.Value = 0;
            //FindByNumbersValueDigitalRootNumericUpDown.Value = 0;
        }
        finally
        {
            FindByNumbersNumberNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersChaptersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersVersesNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersWordsNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersLettersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersUniqueLettersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueDigitSumNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
            FindByNumbersValueDigitalRootNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        }

        FindByNumbersVersesNumericUpDown.Focus();
    }
    private void EnableFindByNumbersControls(
                    bool enable_number,
                    bool enable_chapters,
                    bool enable_verses,
                    bool enable_words,
                    bool enable_letters,
                    bool enable_unique_letters,
                    bool enable_value,
                    bool enable_value_digit_sum,
                    bool enable_value_digital_root
                 )
    {
        bool no_number_type_comparison = ((FindByNumbersNumberNumberTypeLabel.Text.Length == 0) || ((FindByNumbersNumberNumberTypeLabel.Text.Length > 0) && Char.IsDigit(FindByNumbersNumberNumberTypeLabel.Text[0])));
        FindByNumbersNumberLabel.Enabled = enable_number;
        FindByNumbersNumberComparisonOperatorLabel.Enabled = enable_number && no_number_type_comparison;
        FindByNumbersNumberNumericUpDown.Enabled = enable_number && no_number_type_comparison;
        FindByNumbersNumberNumberTypeLabel.Enabled = enable_number;
        //if (enable_number == false)
        //{
        //    FindByNumbersNumberComparisonOperatorLabel.Text = "=";
        //    FindByNumbersNumberNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //    FindByNumbersNumberNumericUpDown.Value = 0;
        //    FindByNumbersNumberNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //}

        no_number_type_comparison = ((FindByNumbersChaptersNumberTypeLabel.Text.Length == 0) || ((FindByNumbersChaptersNumberTypeLabel.Text.Length > 0) && Char.IsDigit(FindByNumbersChaptersNumberTypeLabel.Text[0])));
        FindByNumbersChaptersLabel.Enabled = enable_chapters;
        FindByNumbersChaptersComparisonOperatorLabel.Enabled = enable_chapters && no_number_type_comparison;
        FindByNumbersChaptersNumericUpDown.Enabled = enable_chapters && no_number_type_comparison;
        FindByNumbersChaptersNumberTypeLabel.Enabled = enable_chapters;
        //if (enable_chapters == false)
        //{
        //    FindByNumbersChaptersComparisonOperatorLabel.Text = "=";
        //    FindByNumbersChaptersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //    FindByNumbersChaptersNumericUpDown.Value = 0;
        //    FindByNumbersChaptersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //}

        no_number_type_comparison = ((FindByNumbersVersesNumberTypeLabel.Text.Length == 0) || ((FindByNumbersVersesNumberTypeLabel.Text.Length > 0) && Char.IsDigit(FindByNumbersVersesNumberTypeLabel.Text[0])));
        FindByNumbersVersesLabel.Enabled = enable_verses;
        FindByNumbersVersesComparisonOperatorLabel.Enabled = enable_verses && no_number_type_comparison;
        FindByNumbersVersesNumericUpDown.Enabled = enable_verses && no_number_type_comparison;
        FindByNumbersVersesNumberTypeLabel.Enabled = enable_verses;
        //if (enable_verses == false)
        //{
        //    FindByNumbersVersesComparisonOperatorLabel.Text = "=";
        //    FindByNumbersVersesNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //    FindByNumbersVersesNumericUpDown.Value = 0;
        //    FindByNumbersVersesNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //}

        no_number_type_comparison = ((FindByNumbersWordsNumberTypeLabel.Text.Length == 0) || ((FindByNumbersWordsNumberTypeLabel.Text.Length > 0) && Char.IsDigit(FindByNumbersWordsNumberTypeLabel.Text[0])));
        FindByNumbersWordsLabel.Enabled = enable_words;
        FindByNumbersWordsComparisonOperatorLabel.Enabled = enable_words && no_number_type_comparison;
        FindByNumbersWordsNumericUpDown.Enabled = enable_words && no_number_type_comparison;
        FindByNumbersWordsNumberTypeLabel.Enabled = enable_words;
        //if (enable_words == false)
        //{
        //    FindByNumbersWordsComparisonOperatorLabel.Text = "=";
        //    FindByNumbersWordsNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //    FindByNumbersWordsNumericUpDown.Value = 0;
        //    FindByNumbersWordsNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //}

        no_number_type_comparison = ((FindByNumbersLettersNumberTypeLabel.Text.Length == 0) || ((FindByNumbersLettersNumberTypeLabel.Text.Length > 0) && Char.IsDigit(FindByNumbersLettersNumberTypeLabel.Text[0])));
        FindByNumbersLettersLabel.Enabled = enable_letters;
        FindByNumbersLettersComparisonOperatorLabel.Enabled = enable_letters && no_number_type_comparison;
        FindByNumbersLettersNumericUpDown.Enabled = enable_letters && no_number_type_comparison;
        FindByNumbersLettersNumberTypeLabel.Enabled = enable_letters;
        //if (enable_letters == false)
        //{
        //    FindByNumbersLettersComparisonOperatorLabel.Text = "=";
        //    FindByNumbersLettersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //    FindByNumbersLettersNumericUpDown.Value = 0;
        //    FindByNumbersLettersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //}

        no_number_type_comparison = ((FindByNumbersUniqueLettersNumberTypeLabel.Text.Length == 0) || ((FindByNumbersUniqueLettersNumberTypeLabel.Text.Length > 0) && Char.IsDigit(FindByNumbersUniqueLettersNumberTypeLabel.Text[0])));
        FindByNumbersUniqueLettersLabel.Enabled = enable_unique_letters;
        FindByNumbersUniqueLettersComparisonOperatorLabel.Enabled = enable_unique_letters && no_number_type_comparison;
        FindByNumbersUniqueLettersNumericUpDown.Enabled = enable_unique_letters && no_number_type_comparison;
        FindByNumbersUniqueLettersNumberTypeLabel.Enabled = enable_unique_letters;
        //if (enable_unique_letters == false)
        //{
        //    FindByNumbersUniqueLettersComparisonOperatorLabel.Text = "=";
        //    FindByNumbersUniqueLettersNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //    FindByNumbersUniqueLettersNumericUpDown.Value = 0;
        //    FindByNumbersUniqueLettersNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //}

        no_number_type_comparison = ((FindByNumbersValueNumberTypeLabel.Text.Length == 0) || ((FindByNumbersValueNumberTypeLabel.Text.Length > 0) && Char.IsDigit(FindByNumbersValueNumberTypeLabel.Text[0])));
        FindByNumbersValueLabel.Enabled = enable_value;
        FindByNumbersValueComparisonOperatorLabel.Enabled = enable_value && no_number_type_comparison;
        FindByNumbersValueNumericUpDown.Enabled = enable_value && no_number_type_comparison;
        FindByNumbersValueNumberTypeLabel.Enabled = enable_value;
        //if (enable_value == false)
        //{
        //    FindByNumbersValueComparisonOperatorLabel.Text = "=";
        //    FindByNumbersValueNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //    FindByNumbersValueNumericUpDown.Value = 0;
        //    FindByNumbersValueNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //}

        no_number_type_comparison = ((FindByNumbersValueDigitSumNumberTypeLabel.Text.Length == 0) || ((FindByNumbersValueDigitSumNumberTypeLabel.Text.Length > 0) && Char.IsDigit(FindByNumbersValueDigitSumNumberTypeLabel.Text[0])));
        FindByNumbersValueDigitSumLabel.Enabled = enable_value_digit_sum;
        FindByNumbersValueDigitSumComparisonOperatorLabel.Enabled = enable_value_digit_sum && no_number_type_comparison;
        FindByNumbersValueDigitSumNumericUpDown.Enabled = enable_value_digit_sum && no_number_type_comparison;
        FindByNumbersValueDigitSumNumberTypeLabel.Enabled = enable_value_digit_sum;
        //if (enable_value == false)
        //{
        //    FindByNumbersValueDigitSumComparisonOperatorLabel.Text = "=";
        //    FindByNumbersValueDigitSumNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //    FindByNumbersValueDigitSumNumericUpDown.Value = 0;
        //    FindByNumbersValueDigitSumNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //}

        no_number_type_comparison = ((FindByNumbersValueDigitalRootNumberTypeLabel.Text.Length == 0) || ((FindByNumbersValueDigitalRootNumberTypeLabel.Text.Length > 0) && Char.IsDigit(FindByNumbersValueDigitalRootNumberTypeLabel.Text[0])));
        FindByNumbersValueDigitalRootLabel.Enabled = enable_value_digital_root;
        FindByNumbersValueDigitalRootComparisonOperatorLabel.Enabled = enable_value_digital_root && no_number_type_comparison;
        FindByNumbersValueDigitalRootNumericUpDown.Enabled = enable_value_digital_root && no_number_type_comparison;
        FindByNumbersValueDigitalRootNumberTypeLabel.Enabled = enable_value_digital_root;
        //if (enable_value == false)
        //{
        //    FindByNumbersValueDigitalRootComparisonOperatorLabel.Text = "=";
        //    FindByNumbersValueDigitalRootNumericUpDown.ValueChanged -= new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //    FindByNumbersValueDigitalRootNumericUpDown.Value = 0;
        //    FindByNumbersValueDigitalRootNumericUpDown.ValueChanged += new EventHandler(FindByNumbersNumericUpDown_ValueChanged);
        //}
    }
    private void ResetFindByNumbersControls()
    {
        FindByNumbersNumberComparisonOperatorLabel.Text = "=";
        FindByNumbersNumberNumericUpDown.Value = 0;
        FindByNumbersNumberNumberTypeLabel.Text = null;

        FindByNumbersChaptersComparisonOperatorLabel.Text = "=";
        FindByNumbersChaptersNumericUpDown.Value = 0;
        FindByNumbersChaptersNumberTypeLabel.Text = null;

        FindByNumbersVersesComparisonOperatorLabel.Text = "=";
        FindByNumbersVersesNumericUpDown.Value = 0;
        FindByNumbersVersesNumberTypeLabel.Text = null;

        FindByNumbersWordsComparisonOperatorLabel.Text = "=";
        FindByNumbersWordsNumericUpDown.Value = 0;
        FindByNumbersWordsNumberTypeLabel.Text = null;

        FindByNumbersLettersComparisonOperatorLabel.Text = "=";
        FindByNumbersLettersNumericUpDown.Value = 0;
        FindByNumbersLettersNumberTypeLabel.Text = null;

        FindByNumbersUniqueLettersComparisonOperatorLabel.Text = "=";
        FindByNumbersUniqueLettersNumericUpDown.Value = 0;
        FindByNumbersUniqueLettersNumberTypeLabel.Text = null;

        FindByNumbersValueComparisonOperatorLabel.Text = "=";
        FindByNumbersValueNumericUpDown.Value = 0;
        FindByNumbersValueNumberTypeLabel.Text = null;

        FindByNumbersValueDigitSumComparisonOperatorLabel.Text = "=";
        FindByNumbersValueDigitSumNumericUpDown.Value = 0;
        FindByNumbersValueDigitSumNumberTypeLabel.Text = null;

        FindByNumbersValueDigitalRootComparisonOperatorLabel.Text = "=";
        FindByNumbersValueDigitalRootNumericUpDown.Value = 0;
        FindByNumbersValueDigitalRootNumberTypeLabel.Text = null;
    }
    private void ResetFindByNumbersNumberTypeControl(Control control)
    {
        if (control != null)
        {
            control.Text = null;
            control.ForeColor = Color.Black;
            ToolTip.SetToolTip(control, null);
        }
    }
    private void ResetFindByNumbersResultTypeLabels()
    {
        FindByNumbersResultTypeLettersLabel.Text = "L";
        FindByNumbersResultTypeLettersLabel.BackColor = Color.DarkGray;
        FindByNumbersResultTypeLettersLabel.BorderStyle = BorderStyle.None;

        FindByNumbersResultTypeWordsLabel.Text = "W";
        FindByNumbersResultTypeWordsLabel.BackColor = Color.DarkGray;
        FindByNumbersResultTypeWordsLabel.BorderStyle = BorderStyle.None;

        FindByNumbersResultTypeSentencesLabel.Text = "S";
        FindByNumbersResultTypeSentencesLabel.BackColor = Color.DarkGray;
        FindByNumbersResultTypeSentencesLabel.BorderStyle = BorderStyle.None;

        FindByNumbersResultTypeVersesLabel.Text = "V";
        FindByNumbersResultTypeVersesLabel.BackColor = Color.DarkGray;
        FindByNumbersResultTypeVersesLabel.BorderStyle = BorderStyle.None;

        FindByNumbersResultTypeChaptersLabel.Text = "C";
        FindByNumbersResultTypeChaptersLabel.BackColor = Color.DarkGray;
        FindByNumbersResultTypeChaptersLabel.BorderStyle = BorderStyle.None;
    }
    private void ResetFindByNumbersComparisonOperatorLabels()
    {
        FindByNumbersNumberComparisonOperatorLabel.Text = "=";
        FindByNumbersChaptersComparisonOperatorLabel.Text = "=";
        FindByNumbersVersesComparisonOperatorLabel.Text = "=";
        FindByNumbersWordsComparisonOperatorLabel.Text = "=";
        FindByNumbersLettersComparisonOperatorLabel.Text = "=";
        FindByNumbersUniqueLettersComparisonOperatorLabel.Text = "=";
        FindByNumbersValueComparisonOperatorLabel.Text = "=";
        FindByNumbersValueDigitSumComparisonOperatorLabel.Text = "=";
        FindByNumbersValueDigitalRootComparisonOperatorLabel.Text = "=";
    }
    private void UpdateFindByNumbersResultType()
    {
        // toggle between normal and range types
        switch (m_numbers_result_type)
        {
            case NumbersResultType.Words:
            case NumbersResultType.WordRanges:
                {
                    if ((FindByNumbersWordsNumericUpDown.Value == 1) && (FindByNumbersWordsNumberTypeLabel.Text.Length == 0))
                    {
                        m_numbers_result_type = NumbersResultType.Words;
                    }
                    else if ((FindByNumbersWordsNumericUpDown.Value > 1) || (FindByNumbersWordsNumberTypeLabel.Text.Length > 0))
                    {
                        m_numbers_result_type = NumbersResultType.WordRanges;
                    }
                }
                break;
            case NumbersResultType.Sentences:
                {
                    m_numbers_result_type = NumbersResultType.Sentences;
                }
                break;
            case NumbersResultType.Verses:
            case NumbersResultType.VerseRanges:
                {
                    if ((FindByNumbersVersesNumericUpDown.Value == 1) && (FindByNumbersVersesNumberTypeLabel.Text.Length == 0))
                    {
                        m_numbers_result_type = NumbersResultType.Verses;
                    }
                    else if ((FindByNumbersVersesNumericUpDown.Value > 1) || (FindByNumbersVersesNumberTypeLabel.Text.Length > 0))
                    {
                        m_numbers_result_type = NumbersResultType.VerseRanges;
                    }
                }
                break;
            case NumbersResultType.Chapters:
            case NumbersResultType.ChapterRanges:
                {
                    if ((FindByNumbersChaptersNumericUpDown.Value == 1) && (FindByNumbersChaptersNumberTypeLabel.Text.Length == 0))
                    {
                        m_numbers_result_type = NumbersResultType.Chapters;
                    }
                    else if ((FindByNumbersChaptersNumericUpDown.Value > 1) || (FindByNumbersChaptersNumberTypeLabel.Text.Length > 0))
                    {
                        m_numbers_result_type = NumbersResultType.ChapterRanges;
                    }
                }
                break;
            default:
                break;
        }

        if (L != null)
        {
            if (L.ContainsKey(l))
            {
                switch (m_numbers_result_type)
                {
                    case NumbersResultType.Letters:
                        {
                            FindByNumbersResultTypeLettersLabel.Text = "L";
                            ToolTip.SetToolTip(FindByNumbersResultTypeLettersLabel, L[l]["find letters"]);
                            switch (m_letter_number_scope)
                            {
                                case NumberScope.Number:
                                    FindByNumbersNumberLabel.Text = L[l]["number"];
                                    break;
                                case NumberScope.NumberInChapter:
                                    FindByNumbersNumberLabel.Text = L[l]["in chapter"];
                                    break;
                                case NumberScope.NumberInVerse:
                                    FindByNumbersNumberLabel.Text = L[l]["in verse"];
                                    break;
                                case NumberScope.NumberInWord:
                                    FindByNumbersNumberLabel.Text = L[l]["in word"];
                                    break;
                                default:
                                    break;
                            }
                            ToolTip.SetToolTip(FindByNumbersNumberLabel, L[l]["letter number"]);
                        }
                        break;
                    case NumbersResultType.Words:
                        {
                            FindByNumbersResultTypeWordsLabel.Text = "W";
                            ToolTip.SetToolTip(FindByNumbersResultTypeWordsLabel, L[l]["find words"]);
                            switch (m_word_number_scope)
                            {
                                case NumberScope.Number:
                                    FindByNumbersNumberLabel.Text = L[l]["number"];
                                    break;
                                case NumberScope.NumberInChapter:
                                    FindByNumbersNumberLabel.Text = L[l]["in chapter"];
                                    break;
                                case NumberScope.NumberInVerse:
                                    FindByNumbersNumberLabel.Text = L[l]["in verse"];
                                    break;
                                default:
                                    break;
                            }
                            ToolTip.SetToolTip(FindByNumbersNumberLabel, L[l]["word number"]);
                        }
                        break;
                    case NumbersResultType.WordRanges:
                        {
                            FindByNumbersResultTypeWordsLabel.Text = "-W-";
                            ToolTip.SetToolTip(FindByNumbersResultTypeWordsLabel, L[l]["find word ranges"]);
                            FindByNumbersNumberLabel.Text = L[l]["sum"];
                            ToolTip.SetToolTip(FindByNumbersNumberLabel, L[l]["sum of word numbers"]);
                        }
                        break;
                    case NumbersResultType.Sentences:
                        {
                            FindByNumbersResultTypeSentencesLabel.Text = "S";
                            ToolTip.SetToolTip(FindByNumbersResultTypeVersesLabel, L[l]["find sentences"]);
                            FindByNumbersNumberLabel.Text = L[l]["number"];
                            ToolTip.SetToolTip(FindByNumbersNumberLabel, L[l]["sentence number"]);
                        }
                        break;
                    case NumbersResultType.Verses:
                        {
                            FindByNumbersResultTypeVersesLabel.Text = "V";
                            ToolTip.SetToolTip(FindByNumbersResultTypeVersesLabel, L[l]["find verses"]);
                            switch (m_verse_number_scope)
                            {
                                case NumberScope.Number:
                                    FindByNumbersNumberLabel.Text = L[l]["number"];
                                    break;
                                case NumberScope.NumberInChapter:
                                    FindByNumbersNumberLabel.Text = L[l]["in chapter"];
                                    break;
                                default:
                                    break;
                            }
                            ToolTip.SetToolTip(FindByNumbersNumberLabel, L[l]["verse number"]);
                        }
                        break;
                    case NumbersResultType.VerseRanges:
                        {
                            FindByNumbersResultTypeVersesLabel.Text = "-V-";
                            ToolTip.SetToolTip(FindByNumbersResultTypeVersesLabel, L[l]["find verse ranges"]);
                            FindByNumbersNumberLabel.Text = L[l]["sum"];
                            ToolTip.SetToolTip(FindByNumbersNumberLabel, L[l]["sum of verse numbers"]);
                        }
                        break;
                    case NumbersResultType.Chapters:
                        {
                            FindByNumbersResultTypeChaptersLabel.Text = "C";
                            ToolTip.SetToolTip(FindByNumbersResultTypeChaptersLabel, L[l]["find chapters"]);
                            switch (m_chapter_number_scope)
                            {
                                case NumberScope.Number:
                                    FindByNumbersNumberLabel.Text = L[l]["number"];
                                    break;
                                default:
                                    break;
                            }
                            ToolTip.SetToolTip(FindByNumbersNumberLabel, L[l]["chapter number"]);
                        }
                        break;
                    case NumbersResultType.ChapterRanges:
                        {
                            FindByNumbersResultTypeChaptersLabel.Text = "-C-";
                            ToolTip.SetToolTip(FindByNumbersResultTypeChaptersLabel, L[l]["find chapter ranges"]);
                            FindByNumbersNumberLabel.Text = L[l]["sum"];
                            ToolTip.SetToolTip(FindByNumbersNumberLabel, L[l]["sum of chapter numbers"]);
                        }
                        break;
                    default:
                        {
                        }
                        break;
                }
            }
        }
        FindByNumbersNumberLabel.Refresh();
    }
    private bool UpdateComparisonOperator(Control control)
    {
        if (control == null) return false;

        if (L != null)
        {
            if (L.ContainsKey(l))
            {
                if (ModifierKeys == Keys.Shift)
                {
                    if (control.Text == "=")
                    {
                        control.Text = "Ʃ";
                        ToolTip.SetToolTip(control, L[l]["equals to sum"]);
                    }
                    else if (control.Text == "Ʃ")
                    {
                        control.Text = "!÷";
                        ToolTip.SetToolTip(control, L[l]["indivisible by"]);
                    }
                    else if (control.Text == "!÷")
                    {
                        control.Text = "÷";
                        ToolTip.SetToolTip(control, L[l]["divisible by"]);
                    }
                    else if (control.Text == "÷")
                    {
                        control.Text = "≥";
                        ToolTip.SetToolTip(control, L[l]["greater or equals to"]);
                    }
                    else if (control.Text == "≥")
                    {
                        control.Text = ">";
                        ToolTip.SetToolTip(control, L[l]["greater than"]);
                    }
                    else if (control.Text == ">")
                    {
                        control.Text = "≤";
                        ToolTip.SetToolTip(control, L[l]["less or equals to"]);
                    }
                    else if (control.Text == "≤")
                    {
                        control.Text = "<";
                        ToolTip.SetToolTip(control, L[l]["less than"]);
                    }
                    else if (control.Text == "<")
                    {
                        control.Text = "≠";
                        ToolTip.SetToolTip(control, L[l]["not equals to"]);
                    }
                    else if (control.Text == "≠")
                    {
                        control.Text = "=";
                        ToolTip.SetToolTip(control, L[l]["equals to"]);
                    }
                    else
                    {
                        // do nothing
                    }
                }
                else
                {
                    if (control.Text == "=")
                    {
                        control.Text = "≠";
                        ToolTip.SetToolTip(control, L[l]["not equals to"]);
                    }
                    else if (control.Text == "≠")
                    {
                        control.Text = "<";
                        ToolTip.SetToolTip(control, L[l]["less than"]);
                    }
                    else if (control.Text == "<")
                    {
                        control.Text = "≤";
                        ToolTip.SetToolTip(control, L[l]["less or equals to"]);
                    }
                    else if (control.Text == "≤")
                    {
                        control.Text = ">";
                        ToolTip.SetToolTip(control, L[l]["greater than"]);
                    }
                    else if (control.Text == ">")
                    {
                        control.Text = "≥";
                        ToolTip.SetToolTip(control, L[l]["greater or equals to"]);
                    }
                    else if (control.Text == "≥")
                    {
                        control.Text = "÷";
                        ToolTip.SetToolTip(control, L[l]["divisible by"]);
                    }
                    else if (control.Text == "÷")
                    {
                        control.Text = "!÷";
                        ToolTip.SetToolTip(control, L[l]["indivisible by"]);
                    }
                    else if (control.Text == "!÷")
                    {
                        control.Text = "Ʃ";
                        ToolTip.SetToolTip(control, L[l]["equals to sum"]);
                    }
                    else if (control.Text == "Ʃ")
                    {
                        control.Text = "=";
                        ToolTip.SetToolTip(control, L[l]["equals to"]);
                    }
                    else
                    {
                        // do nothing
                    }
                }
            }
        }
        return true;
    }
    private bool UpdateNumberType(Control control)
    {
        if (control == null) return false;

        // inc/dec remainder
        int remainder;
        if (int.TryParse(control.Text, out remainder))
        {
            if (control.Tag != null)
            {
                int max;
                if (int.TryParse(control.Tag.ToString(), out max))
                {
                    int max_remainder = max - 1;
                    if (max_remainder < -1) max_remainder = -1;

                    if (ModifierKeys != Keys.Shift)
                    {
                        remainder++;
                        if (remainder > max_remainder) remainder = -1;
                    }
                    else
                    {
                        remainder--;
                        if (remainder < -1) remainder = max_remainder;
                    }

                    control.Text = remainder.ToString();
                }
            }
            return false;
        }
        else
        {
            if (L != null)
            {
                if (L.ContainsKey(l))
                {
                    if (ModifierKeys != Keys.Shift)
                    {
                        if (control.Text == "")
                        {
                            control.Text = "#";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            string text = null;
                            switch (m_numbers_result_type)
                            {
                                case NumbersResultType.Letters: { text = L[l]["letter number"]; break; }
                                case NumbersResultType.Words: { text = L[l]["word number"]; break; }
                                case NumbersResultType.Verses: { text = L[l]["verse number"]; break; }
                                case NumbersResultType.Chapters: { text = L[l]["chapter number"]; break; }
                                default: { text = L[l]["number"]; break; }
                            }
                            ToolTip.SetToolTip(control, text);
                        }
                        else if (control.Text == "#")
                        {
                            control.Text = "P";
                            control.ForeColor = Numbers.GetNumberTypeColor(19L);
                            ToolTip.SetToolTip(control, L[l]["prime = divisible by itself only"]);
                        }
                        else if (control.Text == "P")
                        {
                            control.Text = "AP";
                            control.ForeColor = Numbers.GetNumberTypeColor(47L);
                            ToolTip.SetToolTip(control, L[l]["additive prime = prime with a prime digit sum"]);
                        }
                        else if (control.Text == "AP")
                        {
                            control.Text = "XP";
                            control.ForeColor = Numbers.GetNumberTypeColor(19L);
                            ToolTip.SetToolTip(control, L[l]["non-additive prime = prime with a non-prime digit sum"]);
                        }
                        else if (control.Text == "XP")
                        {
                            control.Text = "C";
                            control.ForeColor = Numbers.GetNumberTypeColor(14L);
                            ToolTip.SetToolTip(control, L[l]["composite = divisible by itself and others"]);
                        }
                        else if (control.Text == "C")
                        {
                            control.Text = "AC";
                            control.ForeColor = Numbers.GetNumberTypeColor(114L);
                            ToolTip.SetToolTip(control, L[l]["additive composite = composite with a composite digit sum"]);
                        }
                        else if (control.Text == "AC")
                        {
                            control.Text = "XC";
                            control.ForeColor = Numbers.GetNumberTypeColor(25L);
                            ToolTip.SetToolTip(control, L[l]["non-additive composite = composite with a non-composite digit sum"]);
                        }
                        else if (control.Text == "XC")
                        {
                            control.Text = "O";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["odd number"]);
                        }
                        else if (control.Text == "O")
                        {
                            control.Text = "E";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["even number"]);
                        }
                        else if (control.Text == "E")
                        {
                            control.Text = "^2";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["square number"]);
                        }
                        else if (control.Text == "^2")
                        {
                            control.Text = "^3";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["cubic number"]);
                        }
                        else if (control.Text == "^3")
                        {
                            control.Text = "^4";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["quartic number"]);
                        }
                        else if (control.Text == "^4")
                        {
                            control.Text = "^5";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["quintic number"]);
                        }
                        else if (control.Text == "^5")
                        {
                            control.Text = "^6";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["sextic number"]);
                        }
                        else if (control.Text == "^6")
                        {
                            control.Text = "^7";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["septic number"]);
                        }
                        else if (control.Text == "^7")
                        {
                            control.Text = "";
                            control.ForeColor = control.BackColor;
                            ToolTip.SetToolTip(control, "");
                        }
                    }
                    else // if (ModifierKeys == Keys.Shift)
                    {
                        if (control.Text == "")
                        {
                            control.Text = "^7";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["septic number"]);
                        }
                        else if (control.Text == "^7")
                        {
                            control.Text = "^6";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["sextic number"]);
                        }
                        else if (control.Text == "^6")
                        {
                            control.Text = "^5";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["quartic number"]);
                        }
                        else if (control.Text == "^5")
                        {
                            control.Text = "^4";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["quartic number"]);
                        }
                        else if (control.Text == "^4")
                        {
                            control.Text = "^3";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["cubic number"]);
                        }
                        else if (control.Text == "^3")
                        {
                            control.Text = "^2";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["square number"]);
                        }
                        else if (control.Text == "^2")
                        {
                            control.Text = "E";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["even number"]);
                        }
                        else if (control.Text == "E")
                        {
                            control.Text = "O";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            ToolTip.SetToolTip(control, L[l]["odd number"]);
                        }
                        else if (control.Text == "O")
                        {
                            control.Text = "XC";
                            control.ForeColor = Numbers.GetNumberTypeColor(25L);
                            ToolTip.SetToolTip(control, L[l]["non-additive composite = composite with a non-composite digit sum"]);
                        }
                        else if (control.Text == "XC")
                        {
                            control.Text = "AC";
                            control.ForeColor = Numbers.GetNumberTypeColor(114L);
                            ToolTip.SetToolTip(control, L[l]["additive composite = composite with a composite digit sum"]);
                        }
                        else if (control.Text == "AC")
                        {
                            control.Text = "C";
                            control.ForeColor = Numbers.GetNumberTypeColor(14L);
                            ToolTip.SetToolTip(control, L[l]["composite = divisible by itself and others"]);
                        }
                        else if (control.Text == "C")
                        {
                            control.Text = "XP";
                            control.ForeColor = Numbers.GetNumberTypeColor(19L);
                            ToolTip.SetToolTip(control, L[l]["non-additive prime = prime with a non-prime digit sum"]);
                        }
                        else if (control.Text == "XP")
                        {
                            control.Text = "AP";
                            control.ForeColor = Numbers.GetNumberTypeColor(47L);
                            ToolTip.SetToolTip(control, L[l]["additive prime = prime with a prime digit sum"]);
                        }
                        else if (control.Text == "AP")
                        {
                            control.Text = "P";
                            control.ForeColor = Numbers.GetNumberTypeColor(19L);
                            ToolTip.SetToolTip(control, L[l]["prime = divisible by itself only"]);
                        }
                        else if (control.Text == "P")
                        {
                            control.Text = "#";
                            control.ForeColor = Numbers.GetNumberTypeColor(0L);
                            string text = null;
                            switch (m_numbers_result_type)
                            {
                                case NumbersResultType.Letters: { text = L[l]["letter number"]; break; }
                                case NumbersResultType.Words: { text = L[l]["word number"]; break; }
                                case NumbersResultType.Verses: { text = L[l]["verse number"]; break; }
                                case NumbersResultType.Chapters: { text = L[l]["chapter number"]; break; }
                                default: { text = L[l]["number"]; break; }
                            }
                            ToolTip.SetToolTip(control, text);
                        }
                        else if (control.Text == "#")
                        {
                            control.Text = "";
                            control.ForeColor = control.BackColor;
                            ToolTip.SetToolTip(control, "");
                        }
                    }
                }
            }
            return true;
        }
    }
    private void FindByNumbersComparisonOperatorLabel_Click(object sender, EventArgs e)
    {
        UpdateNumberTypeLabelTags();

        if (L != null)
        {
            if (L.ContainsKey(l))
            {
                Control control = sender as Control;
                if (control != null)
                {
                    if (UpdateComparisonOperator(control))
                    {
                        if (control == FindByNumbersNumberComparisonOperatorLabel)
                        {
                            if (FindByNumbersNumberComparisonOperatorLabel.Text == "÷")
                            {
                                int remainder = 0;
                                FindByNumbersNumberNumberTypeLabel.Tag = remainder;
                                FindByNumbersNumberNumberTypeLabel.Text = remainder.ToString();
                                FindByNumbersNumberNumberTypeLabel.ForeColor = Color.Black;
                                FindByNumbersNumberNumberTypeLabel.Enabled = true;
                                ToolTip.SetToolTip(FindByNumbersNumberNumberTypeLabel, L[l]["remainder"]);
                            }
                            else
                            {
                                FindByNumbersNumberNumberTypeLabel.Text = "";
                                ToolTip.SetToolTip(FindByNumbersNumberNumberTypeLabel, null);
                            }
                        }
                        else if (control == FindByNumbersChaptersComparisonOperatorLabel)
                        {
                            if (FindByNumbersChaptersComparisonOperatorLabel.Text == "÷")
                            {
                                int remainder = 0;
                                FindByNumbersChaptersNumberTypeLabel.Tag = remainder;
                                FindByNumbersChaptersNumberTypeLabel.Text = remainder.ToString();
                                FindByNumbersChaptersNumberTypeLabel.ForeColor = Color.Black;
                                FindByNumbersChaptersNumberTypeLabel.Enabled = true;
                                ToolTip.SetToolTip(FindByNumbersChaptersNumberTypeLabel, L[l]["remainder"]);
                            }
                            else
                            {
                                FindByNumbersChaptersNumberTypeLabel.Text = "";
                                ToolTip.SetToolTip(FindByNumbersChaptersNumberTypeLabel, null);
                            }
                        }
                        else if (control == FindByNumbersVersesComparisonOperatorLabel)
                        {
                            if (FindByNumbersVersesComparisonOperatorLabel.Text == "÷")
                            {
                                int remainder = 0;
                                FindByNumbersVersesNumberTypeLabel.Tag = remainder;
                                FindByNumbersVersesNumberTypeLabel.Text = remainder.ToString();
                                FindByNumbersVersesNumberTypeLabel.ForeColor = Color.Black;
                                FindByNumbersVersesNumberTypeLabel.Enabled = true;
                                ToolTip.SetToolTip(FindByNumbersVersesNumberTypeLabel, L[l]["remainder"]);
                            }
                            else
                            {
                                FindByNumbersVersesNumberTypeLabel.Text = "";
                                ToolTip.SetToolTip(FindByNumbersVersesNumberTypeLabel, null);
                            }
                        }
                        else if (control == FindByNumbersWordsComparisonOperatorLabel)
                        {
                            if (FindByNumbersWordsComparisonOperatorLabel.Text == "÷")
                            {
                                int remainder = 0;
                                FindByNumbersWordsNumberTypeLabel.Tag = remainder;
                                FindByNumbersWordsNumberTypeLabel.Text = remainder.ToString();
                                FindByNumbersWordsNumberTypeLabel.ForeColor = Color.Black;
                                FindByNumbersWordsNumberTypeLabel.Enabled = true;
                                ToolTip.SetToolTip(FindByNumbersWordsNumberTypeLabel, L[l]["remainder"]);
                            }
                            else
                            {
                                FindByNumbersWordsNumberTypeLabel.Text = "";
                                ToolTip.SetToolTip(FindByNumbersWordsNumberTypeLabel, null);
                            }
                        }
                        else if (control == FindByNumbersLettersComparisonOperatorLabel)
                        {
                            if (FindByNumbersLettersComparisonOperatorLabel.Text == "÷")
                            {
                                int remainder = 0;
                                FindByNumbersLettersNumberTypeLabel.Tag = remainder;
                                FindByNumbersLettersNumberTypeLabel.Text = remainder.ToString();
                                FindByNumbersLettersNumberTypeLabel.ForeColor = Color.Black;
                                FindByNumbersLettersNumberTypeLabel.Enabled = true;
                                ToolTip.SetToolTip(FindByNumbersLettersNumberTypeLabel, L[l]["remainder"]);
                            }
                            else
                            {
                                FindByNumbersLettersNumberTypeLabel.Text = "";
                                ToolTip.SetToolTip(FindByNumbersLettersNumberTypeLabel, null);
                            }
                        }
                        else if (control == FindByNumbersUniqueLettersComparisonOperatorLabel)
                        {
                            if (FindByNumbersUniqueLettersComparisonOperatorLabel.Text == "÷")
                            {
                                int remainder = 0;
                                FindByNumbersUniqueLettersNumberTypeLabel.Tag = remainder;
                                FindByNumbersUniqueLettersNumberTypeLabel.Text = remainder.ToString();
                                FindByNumbersUniqueLettersNumberTypeLabel.ForeColor = Color.Black;
                                FindByNumbersUniqueLettersNumberTypeLabel.Enabled = true;
                                ToolTip.SetToolTip(FindByNumbersUniqueLettersNumberTypeLabel, L[l]["remainder"]);
                            }
                            else
                            {
                                FindByNumbersUniqueLettersNumberTypeLabel.Text = "";
                                ToolTip.SetToolTip(FindByNumbersUniqueLettersNumberTypeLabel, null);
                            }
                        }
                        else if (control == FindByNumbersValueComparisonOperatorLabel)
                        {
                            if (FindByNumbersValueComparisonOperatorLabel.Text == "÷")
                            {
                                int remainder = 0;
                                FindByNumbersValueNumberTypeLabel.Tag = remainder;
                                FindByNumbersValueNumberTypeLabel.Text = remainder.ToString();
                                FindByNumbersValueNumberTypeLabel.ForeColor = Color.Black;
                                FindByNumbersValueNumberTypeLabel.Enabled = true;
                                ToolTip.SetToolTip(FindByNumbersValueNumberTypeLabel, L[l]["remainder"]);
                            }
                            else
                            {
                                FindByNumbersValueNumberTypeLabel.Text = "";
                                ToolTip.SetToolTip(FindByNumbersValueNumberTypeLabel, null);
                            }
                        }
                        else if (control == FindByNumbersValueDigitSumComparisonOperatorLabel)
                        {
                            if (FindByNumbersValueDigitSumComparisonOperatorLabel.Text == "÷")
                            {
                                int remainder = 0;
                                FindByNumbersValueDigitSumNumberTypeLabel.Tag = remainder;
                                FindByNumbersValueDigitSumNumberTypeLabel.Text = remainder.ToString();
                                FindByNumbersValueDigitSumNumberTypeLabel.ForeColor = Color.Black;
                                FindByNumbersValueDigitSumNumberTypeLabel.Enabled = true;
                                ToolTip.SetToolTip(FindByNumbersValueDigitSumNumberTypeLabel, L[l]["remainder"]);
                            }
                            else
                            {
                                FindByNumbersValueDigitSumNumberTypeLabel.Text = "";
                                ToolTip.SetToolTip(FindByNumbersValueDigitSumNumberTypeLabel, null);
                            }
                        }
                        else if (control == FindByNumbersValueDigitalRootComparisonOperatorLabel)
                        {
                            if (FindByNumbersValueDigitalRootComparisonOperatorLabel.Text == "÷")
                            {
                                int remainder = 0;
                                FindByNumbersValueDigitalRootNumberTypeLabel.Tag = remainder;
                                FindByNumbersValueDigitalRootNumberTypeLabel.Text = remainder.ToString();
                                FindByNumbersValueDigitalRootNumberTypeLabel.ForeColor = Color.Black;
                                FindByNumbersValueDigitalRootNumberTypeLabel.Enabled = true;
                                ToolTip.SetToolTip(FindByNumbersValueDigitalRootNumberTypeLabel, L[l]["remainder"]);
                            }
                            else
                            {
                                FindByNumbersValueDigitalRootNumberTypeLabel.Text = "";
                                ToolTip.SetToolTip(FindByNumbersValueDigitalRootNumberTypeLabel, null);
                            }
                        }
                        else
                        {
                            // do nothing
                        }

                        FindByNumbersControls_Enter(null, null);
                    }
                }
            }
        }

        UpdateFindByNumbersResultType();
        // some operations take too long and may frustrate user
        if (
            (m_numbers_result_type != NumbersResultType.WordRanges) &&
            (m_numbers_result_type != NumbersResultType.VerseRanges) &&
            (m_numbers_result_type != NumbersResultType.ChapterRanges)
           )
        {
            //FindByNumbers();
        }
    }
    private void FindByNumbersNumberTypeLabel_Click(object sender, EventArgs e)
    {
        UpdateNumberTypeLabelTags();

        Control control = sender as Control;
        if (control != null)
        {
            if (UpdateNumberType(control))
            {
                if (control == FindByNumbersNumberNumberTypeLabel)
                {
                    FindByNumbersNumberComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersNumberNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersNumberComparisonOperatorLabel.Text = "=";
                        FindByNumbersNumberNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersNumberNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersChaptersNumberTypeLabel)
                {
                    FindByNumbersChaptersComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersChaptersNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersChaptersComparisonOperatorLabel.Text = "=";
                        FindByNumbersChaptersNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersChaptersNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersVersesNumberTypeLabel)
                {
                    FindByNumbersVersesComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersVersesNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersVersesComparisonOperatorLabel.Text = "=";
                        FindByNumbersVersesNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersVersesNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersWordsNumberTypeLabel)
                {
                    FindByNumbersWordsComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersWordsNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersWordsComparisonOperatorLabel.Text = "=";
                        FindByNumbersWordsNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersWordsNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersLettersNumberTypeLabel)
                {
                    FindByNumbersLettersComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersLettersNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersLettersComparisonOperatorLabel.Text = "=";
                        FindByNumbersLettersNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersLettersNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersUniqueLettersNumberTypeLabel)
                {
                    FindByNumbersUniqueLettersComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersUniqueLettersNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersUniqueLettersComparisonOperatorLabel.Text = "=";
                        FindByNumbersUniqueLettersNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersUniqueLettersNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersValueNumberTypeLabel)
                {
                    FindByNumbersValueComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersValueNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersValueComparisonOperatorLabel.Text = "=";
                        FindByNumbersValueNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersValueNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersValueDigitSumNumberTypeLabel)
                {
                    FindByNumbersValueDigitSumComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersValueDigitSumNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersValueDigitSumComparisonOperatorLabel.Text = "=";
                        FindByNumbersValueDigitSumNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersValueDigitSumNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersValueDigitalRootNumberTypeLabel)
                {
                    FindByNumbersValueDigitalRootComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersValueDigitalRootNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersValueDigitalRootComparisonOperatorLabel.Text = "=";
                        FindByNumbersValueDigitalRootNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersValueDigitalRootNumericUpDown.Focus();
                    }
                }
                else
                {
                    // do nothing
                }

                FindByNumbersControls_Enter(null, null);
            }
        }

        UpdateFindByNumbersResultType();
        // some operations take too long and may frustrate user
        if (
            (m_numbers_result_type != NumbersResultType.WordRanges) &&
            (m_numbers_result_type != NumbersResultType.VerseRanges) &&
            (m_numbers_result_type != NumbersResultType.ChapterRanges)
           )
        {
            //FindByNumbers();
        }
    }
    private void FindByNumbersControl_EnabledChanged(object sender, EventArgs e)
    {
        Control control = sender as Control;
        if (control != null)
        {
            control.BackColor = (control.Enabled) ? SystemColors.Window : Color.LightGray;
        }
    }
    private void FindByNumbersControls_Enter(object sender, EventArgs e)
    {
        this.AcceptButton = FindByNumbersButton;

        FindByTextButton.Enabled = false;
        FindBySimilarityButton.Enabled = false;
        FindByNumbersButton.Enabled = true;
        FindByFrequencyButton.Enabled = false;

        ToolTip.SetToolTip(InspectChaptersLabel, L[l]["Inspect chapters"]);
        WordsListBoxLabel.Visible = false;
        WordsListBox.Visible = false;

        ResetFindByTextSearchBlockSizeLabels();
        ResetFindByTextSearchTypeLabels();
        ResetFindBySimilarityResultTypeLabels();
        ResetFindByNumbersResultTypeLabels();
        ResetFindByFrequencyResultTypeLabels();

        UpdateFindByNumbersResultType();

        switch (m_numbers_result_type)
        {
            case NumbersResultType.Letters:
                {
                    FindByNumbersResultTypeLettersLabel.BackColor = Color.SteelBlue;
                    FindByNumbersResultTypeLettersLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case NumbersResultType.Words:
            case NumbersResultType.WordRanges:
                {
                    FindByNumbersResultTypeWordsLabel.BackColor = Color.SteelBlue;
                    FindByNumbersResultTypeWordsLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case NumbersResultType.Sentences:
                {
                    FindByNumbersResultTypeSentencesLabel.BackColor = Color.SteelBlue;
                    FindByNumbersResultTypeSentencesLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case NumbersResultType.Verses:
            case NumbersResultType.VerseRanges:
                {
                    FindByNumbersResultTypeVersesLabel.BackColor = Color.SteelBlue;
                    FindByNumbersResultTypeVersesLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case NumbersResultType.Chapters:
            case NumbersResultType.ChapterRanges:
                {
                    FindByNumbersResultTypeChaptersLabel.BackColor = Color.SteelBlue;
                    FindByNumbersResultTypeChaptersLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            default:
                break;
        }
    }
    private void FindByNumbersNumericUpDown_Leave(object sender, EventArgs e)
    {
        NumericUpDown control = sender as NumericUpDown;
        if (control != null)
        {
            if (String.IsNullOrEmpty(control.Text))
            {
                control.Value = 0;
                control.Refresh();
            }
        }

        UpdateNumberTypeLabelTags();
    }
    private void FindByNumbersNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        UpdateFindByNumbersResultType();

        UpdateNumberTypeLabelTags();

        // some operations take too long and may frustrate user
        if (
            (sender is NumericUpDown) &&
            (m_numbers_result_type != NumbersResultType.Letters) &&
            (m_numbers_result_type != NumbersResultType.WordRanges) &&
            (m_numbers_result_type != NumbersResultType.VerseRanges) &&
            (m_numbers_result_type != NumbersResultType.ChapterRanges)
           )
        {
            FindByNumbers();
        }
    }
    private void UpdateNumberTypeLabelTags()
    {
        FindByNumbersNumberNumberTypeLabel.Tag = (int)FindByNumbersNumberNumericUpDown.Value;
        FindByNumbersChaptersNumberTypeLabel.Tag = (int)FindByNumbersChaptersNumericUpDown.Value;
        FindByNumbersVersesNumberTypeLabel.Tag = (int)FindByNumbersVersesNumericUpDown.Value;
        FindByNumbersWordsNumberTypeLabel.Tag = (int)FindByNumbersWordsNumericUpDown.Value;
        FindByNumbersLettersNumberTypeLabel.Tag = (int)FindByNumbersLettersNumericUpDown.Value;
        FindByNumbersUniqueLettersNumberTypeLabel.Tag = (int)FindByNumbersUniqueLettersNumericUpDown.Value;
        FindByNumbersValueNumberTypeLabel.Tag = (int)FindByNumbersValueNumericUpDown.Value;

        int number;
        if (int.TryParse(FindByNumbersNumberNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersNumberNumericUpDown.Value)
            {
                number = (int)FindByNumbersNumberNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersNumberNumberTypeLabel.Text = number.ToString();
            }
        }

        if (int.TryParse(FindByNumbersChaptersNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersChaptersNumericUpDown.Value)
            {
                number = (int)FindByNumbersChaptersNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersChaptersNumberTypeLabel.Text = number.ToString();
            }
        }

        if (int.TryParse(FindByNumbersVersesNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersVersesNumericUpDown.Value)
            {
                number = (int)FindByNumbersVersesNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersVersesNumberTypeLabel.Text = number.ToString();
            }
        }

        if (int.TryParse(FindByNumbersWordsNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersWordsNumericUpDown.Value)
            {
                number = (int)FindByNumbersWordsNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersWordsNumberTypeLabel.Text = number.ToString();
            }
        }

        if (int.TryParse(FindByNumbersLettersNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersLettersNumericUpDown.Value)
            {
                number = (int)FindByNumbersLettersNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersLettersNumberTypeLabel.Text = number.ToString();
            }
        }

        if (int.TryParse(FindByNumbersUniqueLettersNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersUniqueLettersNumericUpDown.Value)
            {
                number = (int)FindByNumbersUniqueLettersNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersUniqueLettersNumberTypeLabel.Text = number.ToString();
            }
        }

        if (int.TryParse(FindByNumbersValueNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersValueNumericUpDown.Value)
            {
                number = (int)FindByNumbersValueNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersValueNumericUpDown.Text = number.ToString();
            }
        }
    }
    private void FindByNumbersButton_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            FindByNumbers();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void FindByNumbers()
    {
        m_search_type = SearchType.Numbers;

        if (m_client != null)
        {
            ClearFindMatches();

            // 1. number types
            string number_symbol = FindByNumbersNumberNumberTypeLabel.Enabled ? FindByNumbersNumberNumberTypeLabel.Text : "";
            NumberType number_number_type =
                (number_symbol == "P") ? NumberType.Prime :
                (number_symbol == "AP") ? NumberType.AdditivePrime :
                (number_symbol == "XP") ? NumberType.NonAdditivePrime :
                (number_symbol == "C") ? NumberType.Composite :
                (number_symbol == "AC") ? NumberType.AdditiveComposite :
                (number_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (number_symbol == "O") ? NumberType.Odd :
                (number_symbol == "E") ? NumberType.Even :
                (number_symbol == "^2") ? NumberType.Square :
                (number_symbol == "^3") ? NumberType.Cubic :
                (number_symbol == "^4") ? NumberType.Quartic :
                (number_symbol == "^5") ? NumberType.Quintic :
                (number_symbol == "^6") ? NumberType.Sextic :
                (number_symbol == "^7") ? NumberType.Septic :
                (number_symbol == "#") ? NumberType.Natural :
                (number_symbol == "") ? NumberType.None :
                                        NumberType.None;
            string chapter_count_symbol = FindByNumbersChaptersNumberTypeLabel.Enabled ? FindByNumbersChaptersNumberTypeLabel.Text : "";
            NumberType chapter_count_number_type =
                (chapter_count_symbol == "P") ? NumberType.Prime :
                (chapter_count_symbol == "AP") ? NumberType.AdditivePrime :
                (chapter_count_symbol == "XP") ? NumberType.NonAdditivePrime :
                (chapter_count_symbol == "C") ? NumberType.Composite :
                (chapter_count_symbol == "AC") ? NumberType.AdditiveComposite :
                (chapter_count_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (chapter_count_symbol == "O") ? NumberType.Odd :
                (chapter_count_symbol == "E") ? NumberType.Even :
                (chapter_count_symbol == "^2") ? NumberType.Square :
                (chapter_count_symbol == "^3") ? NumberType.Cubic :
                (chapter_count_symbol == "^4") ? NumberType.Quartic :
                (chapter_count_symbol == "^5") ? NumberType.Quintic :
                (chapter_count_symbol == "^6") ? NumberType.Sextic :
                (chapter_count_symbol == "^7") ? NumberType.Septic :
                (chapter_count_symbol == "#") ? NumberType.Natural :
                (chapter_count_symbol == "") ? NumberType.None :
                                               NumberType.None;
            string verse_count_symbol = FindByNumbersVersesNumberTypeLabel.Enabled ? FindByNumbersVersesNumberTypeLabel.Text : "";
            NumberType verse_count_number_type =
                (verse_count_symbol == "P") ? NumberType.Prime :
                (verse_count_symbol == "AP") ? NumberType.AdditivePrime :
                (verse_count_symbol == "XP") ? NumberType.NonAdditivePrime :
                (verse_count_symbol == "C") ? NumberType.Composite :
                (verse_count_symbol == "AC") ? NumberType.AdditiveComposite :
                (verse_count_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (verse_count_symbol == "O") ? NumberType.Odd :
                (verse_count_symbol == "E") ? NumberType.Even :
                (verse_count_symbol == "^2") ? NumberType.Square :
                (verse_count_symbol == "^3") ? NumberType.Cubic :
                (verse_count_symbol == "^4") ? NumberType.Quartic :
                (verse_count_symbol == "^5") ? NumberType.Quintic :
                (verse_count_symbol == "^6") ? NumberType.Sextic :
                (verse_count_symbol == "^7") ? NumberType.Septic :
                (verse_count_symbol == "#") ? NumberType.Natural :
                (verse_count_symbol == "") ? NumberType.None :
                                             NumberType.None;
            string word_count_symbol = FindByNumbersWordsNumberTypeLabel.Enabled ? FindByNumbersWordsNumberTypeLabel.Text : "";
            NumberType word_count_number_type =
                (word_count_symbol == "P") ? NumberType.Prime :
                (word_count_symbol == "AP") ? NumberType.AdditivePrime :
                (word_count_symbol == "XP") ? NumberType.NonAdditivePrime :
                (word_count_symbol == "C") ? NumberType.Composite :
                (word_count_symbol == "AC") ? NumberType.AdditiveComposite :
                (word_count_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (word_count_symbol == "O") ? NumberType.Odd :
                (word_count_symbol == "E") ? NumberType.Even :
                (word_count_symbol == "^2") ? NumberType.Square :
                (word_count_symbol == "^3") ? NumberType.Cubic :
                (word_count_symbol == "^4") ? NumberType.Quartic :
                (word_count_symbol == "^5") ? NumberType.Quintic :
                (word_count_symbol == "^6") ? NumberType.Sextic :
                (word_count_symbol == "^7") ? NumberType.Septic :
                (word_count_symbol == "#") ? NumberType.Natural :
                (word_count_symbol == "") ? NumberType.None :
                                            NumberType.None;
            string letter_count_symbol = FindByNumbersLettersNumberTypeLabel.Enabled ? FindByNumbersLettersNumberTypeLabel.Text : "";
            NumberType letter_count_number_type =
                (letter_count_symbol == "P") ? NumberType.Prime :
                (letter_count_symbol == "AP") ? NumberType.AdditivePrime :
                (letter_count_symbol == "XP") ? NumberType.NonAdditivePrime :
                (letter_count_symbol == "C") ? NumberType.Composite :
                (letter_count_symbol == "AC") ? NumberType.AdditiveComposite :
                (letter_count_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (letter_count_symbol == "O") ? NumberType.Odd :
                (letter_count_symbol == "E") ? NumberType.Even :
                (letter_count_symbol == "^2") ? NumberType.Square :
                (letter_count_symbol == "^3") ? NumberType.Cubic :
                (letter_count_symbol == "^4") ? NumberType.Quartic :
                (letter_count_symbol == "^5") ? NumberType.Quintic :
                (letter_count_symbol == "^6") ? NumberType.Sextic :
                (letter_count_symbol == "^7") ? NumberType.Septic :
                (letter_count_symbol == "#") ? NumberType.Natural :
                (letter_count_symbol == "") ? NumberType.None :
                                              NumberType.None;
            string unique_letter_count_symbol = FindByNumbersUniqueLettersNumberTypeLabel.Enabled ? FindByNumbersUniqueLettersNumberTypeLabel.Text : "";
            NumberType unique_letter_count_number_type =
                (unique_letter_count_symbol == "P") ? NumberType.Prime :
                (unique_letter_count_symbol == "AP") ? NumberType.AdditivePrime :
                (unique_letter_count_symbol == "XP") ? NumberType.NonAdditivePrime :
                (unique_letter_count_symbol == "C") ? NumberType.Composite :
                (unique_letter_count_symbol == "AC") ? NumberType.AdditiveComposite :
                (unique_letter_count_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (unique_letter_count_symbol == "O") ? NumberType.Odd :
                (unique_letter_count_symbol == "E") ? NumberType.Even :
                (unique_letter_count_symbol == "^2") ? NumberType.Square :
                (unique_letter_count_symbol == "^3") ? NumberType.Cubic :
                (unique_letter_count_symbol == "^4") ? NumberType.Quartic :
                (unique_letter_count_symbol == "^5") ? NumberType.Quintic :
                (unique_letter_count_symbol == "^6") ? NumberType.Sextic :
                (unique_letter_count_symbol == "^7") ? NumberType.Septic :
                (unique_letter_count_symbol == "#") ? NumberType.Natural :
                (unique_letter_count_symbol == "") ? NumberType.None :
                                                     NumberType.None;
            string value_symbol = FindByNumbersValueNumberTypeLabel.Enabled ? FindByNumbersValueNumberTypeLabel.Text : "";
            NumberType value_number_type =
                (value_symbol == "P") ? NumberType.Prime :
                (value_symbol == "AP") ? NumberType.AdditivePrime :
                (value_symbol == "XP") ? NumberType.NonAdditivePrime :
                (value_symbol == "C") ? NumberType.Composite :
                (value_symbol == "AC") ? NumberType.AdditiveComposite :
                (value_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (value_symbol == "O") ? NumberType.Odd :
                (value_symbol == "E") ? NumberType.Even :
                (value_symbol == "^2") ? NumberType.Square :
                (value_symbol == "^3") ? NumberType.Cubic :
                (value_symbol == "^4") ? NumberType.Quartic :
                (value_symbol == "^5") ? NumberType.Quintic :
                (value_symbol == "^6") ? NumberType.Sextic :
                (value_symbol == "^7") ? NumberType.Septic :
                (value_symbol == "#") ? NumberType.Natural :
                (value_symbol == "") ? NumberType.None :
                                       NumberType.None;

            string value_digit_sum_symbol = FindByNumbersValueDigitSumNumberTypeLabel.Enabled ? FindByNumbersValueDigitSumNumberTypeLabel.Text : "";
            NumberType value_digit_sum_number_type =
                (value_digit_sum_symbol == "P") ? NumberType.Prime :
                (value_digit_sum_symbol == "AP") ? NumberType.AdditivePrime :
                (value_digit_sum_symbol == "XP") ? NumberType.NonAdditivePrime :
                (value_digit_sum_symbol == "C") ? NumberType.Composite :
                (value_digit_sum_symbol == "AC") ? NumberType.AdditiveComposite :
                (value_digit_sum_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (value_digit_sum_symbol == "O") ? NumberType.Odd :
                (value_digit_sum_symbol == "E") ? NumberType.Even :
                (value_digit_sum_symbol == "^2") ? NumberType.Square :
                (value_digit_sum_symbol == "^3") ? NumberType.Cubic :
                (value_digit_sum_symbol == "^4") ? NumberType.Quartic :
                (value_digit_sum_symbol == "^5") ? NumberType.Quintic :
                (value_digit_sum_symbol == "^6") ? NumberType.Sextic :
                (value_digit_sum_symbol == "^7") ? NumberType.Septic :
                (value_digit_sum_symbol == "#") ? NumberType.Natural :
                (value_digit_sum_symbol == "") ? NumberType.None :
                                                 NumberType.None;
            string value_digital_root_symbol = FindByNumbersValueDigitalRootNumberTypeLabel.Enabled ? FindByNumbersValueDigitalRootNumberTypeLabel.Text : "";
            NumberType value_digital_root_number_type =
                (value_digital_root_symbol == "P") ? NumberType.Prime :
                (value_digital_root_symbol == "AP") ? NumberType.AdditivePrime :
                (value_digital_root_symbol == "XP") ? NumberType.NonAdditivePrime :
                (value_digital_root_symbol == "C") ? NumberType.Composite :
                (value_digital_root_symbol == "AC") ? NumberType.AdditiveComposite :
                (value_digital_root_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (value_digital_root_symbol == "O") ? NumberType.Odd :
                (value_digital_root_symbol == "E") ? NumberType.Even :
                (value_digital_root_symbol == "^2") ? NumberType.Square :
                (value_digital_root_symbol == "^3") ? NumberType.Cubic :
                (value_digital_root_symbol == "^4") ? NumberType.Quartic :
                (value_digital_root_symbol == "^5") ? NumberType.Quintic :
                (value_digital_root_symbol == "^6") ? NumberType.Sextic :
                (value_digital_root_symbol == "^7") ? NumberType.Septic :
                (value_digital_root_symbol == "#") ? NumberType.Natural :
                (value_digital_root_symbol == "") ? NumberType.None :
                                                    NumberType.None;

            // 2. numbers
            int number = FindByNumbersNumberNumericUpDown.Enabled ? (int)FindByNumbersNumberNumericUpDown.Value : 0;
            int chapter_count = FindByNumbersChaptersNumericUpDown.Enabled ? (int)FindByNumbersChaptersNumericUpDown.Value : 0;
            int verse_count = FindByNumbersVersesNumericUpDown.Enabled ? (int)FindByNumbersVersesNumericUpDown.Value : 0;
            int word_count = FindByNumbersWordsNumericUpDown.Enabled ? (int)FindByNumbersWordsNumericUpDown.Value : 0;
            int letter_count = FindByNumbersLettersNumericUpDown.Enabled ? (int)FindByNumbersLettersNumericUpDown.Value : 0;
            int unique_letter_count = FindByNumbersUniqueLettersNumericUpDown.Enabled ? (int)FindByNumbersUniqueLettersNumericUpDown.Value : 0;
            long value = FindByNumbersValueNumericUpDown.Enabled ? (int)FindByNumbersValueNumericUpDown.Value : 0;
            int value_digit_sum = FindByNumbersValueDigitSumNumericUpDown.Enabled ? (int)FindByNumbersValueDigitSumNumericUpDown.Value : 0;
            int value_digital_root = FindByNumbersValueDigitalRootNumericUpDown.Enabled ? (int)FindByNumbersValueDigitalRootNumericUpDown.Value : 0;

            // 3. comparison operators = ≠ < ≤ > ≥ ÷ !÷ Ʃ
            string number_operator_symbol = FindByNumbersNumberComparisonOperatorLabel.Text;
            ComparisonOperator number_comparison_operator =
                (number_operator_symbol == "=") ? ComparisonOperator.Equal :
                (number_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (number_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (number_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (number_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (number_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (number_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (number_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (number_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                  ComparisonOperator.Reserved;
            string chapter_count_operator_symbol = FindByNumbersChaptersComparisonOperatorLabel.Text;
            ComparisonOperator chapter_count_comparison_operator =
                (chapter_count_operator_symbol == "=") ? ComparisonOperator.Equal :
                (chapter_count_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (chapter_count_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (chapter_count_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (chapter_count_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (chapter_count_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (chapter_count_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (chapter_count_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (chapter_count_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                         ComparisonOperator.Reserved;
            string verse_count_operator_symbol = FindByNumbersVersesComparisonOperatorLabel.Text;
            ComparisonOperator verse_count_comparison_operator =
                (verse_count_operator_symbol == "=") ? ComparisonOperator.Equal :
                (verse_count_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (verse_count_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (verse_count_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (verse_count_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (verse_count_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (verse_count_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (verse_count_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (verse_count_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                       ComparisonOperator.Reserved;
            string word_count_operator_symbol = FindByNumbersWordsComparisonOperatorLabel.Text;
            ComparisonOperator word_count_comparison_operator =
                (word_count_operator_symbol == "=") ? ComparisonOperator.Equal :
                (word_count_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (word_count_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (word_count_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (word_count_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (word_count_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (word_count_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (word_count_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (word_count_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                      ComparisonOperator.Reserved;
            string letter_count_operator_symbol = FindByNumbersLettersComparisonOperatorLabel.Text;
            ComparisonOperator letter_count_comparison_operator =
                (letter_count_operator_symbol == "=") ? ComparisonOperator.Equal :
                (letter_count_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (letter_count_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (letter_count_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (letter_count_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (letter_count_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (letter_count_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (letter_count_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (letter_count_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                        ComparisonOperator.Reserved;
            string unique_letter_count_operator_symbol = FindByNumbersUniqueLettersComparisonOperatorLabel.Text;
            ComparisonOperator unique_letter_count_comparison_operator =
                (unique_letter_count_operator_symbol == "=") ? ComparisonOperator.Equal :
                (unique_letter_count_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (unique_letter_count_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (unique_letter_count_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (unique_letter_count_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (unique_letter_count_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (unique_letter_count_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (unique_letter_count_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (unique_letter_count_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                               ComparisonOperator.Reserved;
            string value_operator_symbol = FindByNumbersValueComparisonOperatorLabel.Text;
            ComparisonOperator value_comparison_operator =
                (value_operator_symbol == "=") ? ComparisonOperator.Equal :
                (value_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (value_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (value_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (value_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (value_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (value_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (value_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (value_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                 ComparisonOperator.Reserved;
            string value_digit_sum_operator_symbol = FindByNumbersValueDigitSumComparisonOperatorLabel.Text;
            ComparisonOperator value_digit_sum_comparison_operator =
                (value_digit_sum_operator_symbol == "=") ? ComparisonOperator.Equal :
                (value_digit_sum_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (value_digit_sum_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (value_digit_sum_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (value_digit_sum_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (value_digit_sum_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (value_digit_sum_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (value_digit_sum_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (value_digit_sum_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                           ComparisonOperator.Reserved;
            string value_digital_root_operator_symbol = FindByNumbersValueDigitalRootComparisonOperatorLabel.Text;
            ComparisonOperator value_digital_root_comparison_operator =
                (value_digital_root_operator_symbol == "=") ? ComparisonOperator.Equal :
                (value_digital_root_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (value_digital_root_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (value_digital_root_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (value_digital_root_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (value_digital_root_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (value_digital_root_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (value_digital_root_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (value_digital_root_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                              ComparisonOperator.Reserved;

            // 4. remainders for % comparison operator
            int number_remainder = -1;
            if (number_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    number_remainder = int.Parse(FindByNumbersNumberNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int chapter_count_remainder = -1;
            if (chapter_count_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    chapter_count_remainder = int.Parse(FindByNumbersChaptersNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int verse_count_remainder = -1;
            if (verse_count_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    verse_count_remainder = int.Parse(FindByNumbersVersesNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int word_count_remainder = -1;
            if (word_count_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    word_count_remainder = int.Parse(FindByNumbersWordsNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int letter_count_remainder = -1;
            if (letter_count_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    letter_count_remainder = int.Parse(FindByNumbersLettersNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int unique_letter_count_remainder = -1;
            if (unique_letter_count_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    unique_letter_count_remainder = int.Parse(FindByNumbersUniqueLettersNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int value_remainder = -1;
            if (value_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    value_remainder = int.Parse(FindByNumbersValueNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int value_digit_sum_remainder = -1;
            if (value_digit_sum_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    value_digit_sum_remainder = int.Parse(FindByNumbersValueDigitSumNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int value_digital_root_remainder = -1;
            if (value_digital_root_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    value_digital_root_remainder = int.Parse(FindByNumbersValueDigitalRootNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }


            string text = null;
            text += L[l]["number"] + number_operator_symbol + ((number > 0) ? number.ToString() : ((number_number_type != NumberType.None) ? FindByNumbersNumberNumberTypeLabel.Text : "*")) + " ";

            if (
                (m_numbers_result_type == NumbersResultType.ChapterRanges)
               )
            {
                text += L[l]["chapters"] + chapter_count_operator_symbol + ((chapter_count > 0) ? chapter_count.ToString() : ((chapter_count_number_type != NumberType.None) ? FindByNumbersChaptersNumberTypeLabel.Text : "*")) + " ";
            }

            if (
                (m_numbers_result_type == NumbersResultType.Chapters) ||
                (m_numbers_result_type == NumbersResultType.ChapterRanges) ||
                (m_numbers_result_type == NumbersResultType.VerseRanges)
               )
            {
                text += L[l]["verses"] + verse_count_operator_symbol + ((verse_count > 0) ? verse_count.ToString() : ((verse_count_number_type != NumberType.None) ? FindByNumbersVersesNumberTypeLabel.Text : "*")) + " ";
            }

            if (
                (m_numbers_result_type == NumbersResultType.Chapters) ||
                (m_numbers_result_type == NumbersResultType.ChapterRanges) ||
                (m_numbers_result_type == NumbersResultType.Verses) ||
                (m_numbers_result_type == NumbersResultType.VerseRanges) ||
                (m_numbers_result_type == NumbersResultType.Sentences) ||
                (m_numbers_result_type == NumbersResultType.WordRanges)
               )
            {
                text += L[l]["words"] + word_count_operator_symbol + ((word_count > 0) ? word_count.ToString() : ((word_count_number_type != NumberType.None) ? FindByNumbersWordsNumberTypeLabel.Text : "*")) + " ";
            }

            text += L[l]["letters"] + letter_count_operator_symbol + ((letter_count > 0) ? letter_count.ToString() : ((letter_count_number_type != NumberType.None) ? FindByNumbersLettersNumberTypeLabel.Text : "*")) + " ";
            text += L[l]["unique"] + unique_letter_count_operator_symbol + ((unique_letter_count > 0) ? unique_letter_count.ToString() : ((unique_letter_count_number_type != NumberType.None) ? FindByNumbersUniqueLettersNumberTypeLabel.Text : "*")) + " ";
            text += L[l]["value"] + value_operator_symbol + ((value > 0) ? value.ToString() : ((value_number_type != NumberType.None) ? FindByNumbersValueNumberTypeLabel.Text : "*")) + " ";
            text += L[l]["digit sum"] + value_digit_sum_operator_symbol + ((value_digit_sum > 0) ? value_digit_sum.ToString() : ((value_digit_sum_number_type != NumberType.None) ? FindByNumbersValueDigitSumNumberTypeLabel.Text : "*")) + " ";
            text += L[l]["digital root"] + value_digital_root_operator_symbol + ((value_digital_root > 0) ? value_digital_root.ToString() : ((value_digital_root_number_type != NumberType.None) ? FindByNumbersValueDigitalRootNumberTypeLabel.Text : "*")) + "";

            NumberQuery query = new NumberQuery();

            query.Number = number;
            query.ChapterCount = chapter_count;
            query.VerseCount = verse_count;
            query.WordCount = word_count;
            query.LetterCount = letter_count;
            query.UniqueLetterCount = unique_letter_count;
            query.Value = value;
            query.ValueDigitSum = value_digit_sum;
            query.ValueDigitalRoot = value_digital_root;

            query.NumberNumberType = number_number_type;
            query.ChapterCountNumberType = chapter_count_number_type;
            query.VerseCountNumberType = verse_count_number_type;
            query.WordCountNumberType = word_count_number_type;
            query.LetterCountNumberType = letter_count_number_type;
            query.UniqueLetterCountNumberType = unique_letter_count_number_type;
            query.ValueNumberType = value_number_type;
            query.ValueDigitSumNumberType = value_digit_sum_number_type;
            query.ValueDigitalRootNumberType = value_digital_root_number_type;

            query.NumberComparisonOperator = number_comparison_operator;
            query.ChapterCountComparisonOperator = chapter_count_comparison_operator;
            query.VerseCountComparisonOperator = verse_count_comparison_operator;
            query.WordCountComparisonOperator = word_count_comparison_operator;
            query.LetterCountComparisonOperator = letter_count_comparison_operator;
            query.UniqueLetterCountComparisonOperator = unique_letter_count_comparison_operator;
            query.ValueComparisonOperator = value_comparison_operator;
            query.ValueDigitSumComparisonOperator = value_digit_sum_comparison_operator;
            query.ValueDigitalRootComparisonOperator = value_digital_root_comparison_operator;

            query.NumberRemainder = number_remainder;
            query.ChapterCountRemainder = chapter_count_remainder;
            query.VerseCountRemainder = verse_count_remainder;
            query.WordCountRemainder = word_count_remainder;
            query.LetterCountRemainder = letter_count_remainder;
            query.UniqueLetterCountRemainder = unique_letter_count_remainder;
            query.ValueRemainder = value_remainder;
            query.ValueDigitSumRemainder = value_digit_sum_remainder;
            query.ValueDigitalRootRemainder = value_digital_root_remainder;

            if (query.IsValid(m_numbers_result_type))
            {
                int match_count = -1;
                switch (m_numbers_result_type)
                {
                    case NumbersResultType.Letters:
                        {
                            query.NumberScope = m_letter_number_scope;
                            match_count = m_client.FindLetters(query);
                            if (m_client.FoundLetters != null)
                            {
                                if (m_client.FoundVerses != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " " + L[l]["letter"] : " " + L[l]["words"]) + " " + L[l]["in"] + " " + m_client.FoundVerses.Count + ((m_client.FoundVerses.Count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                                    DisplayFoundVerses(true, true);
                                }
                            }
                        }
                        break;
                    case NumbersResultType.Words:
                        {
                            query.NumberScope = m_word_number_scope;
                            match_count = m_client.FindWords(query);
                            if (m_client.FoundWords != null)
                            {
                                if (m_client.FoundVerses != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " " + L[l]["word"] : " " + L[l]["words"]) + " " + L[l]["in"] + " " + m_client.FoundVerses.Count + ((m_client.FoundVerses.Count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                                    DisplayFoundVerses(true, true);
                                }
                            }
                        }
                        break;
                    case NumbersResultType.WordRanges:
                        {
                            query.NumberScope = m_word_number_scope;
                            match_count = m_client.FindWordRanges(query);
                            if (m_client.FoundWordRanges != null)
                            {
                                if (m_client.FoundVerses != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " " + L[l]["word range"] : " " + L[l]["word ranges"]) + " " + L[l]["in"] + " " + m_client.FoundVerses.Count + ((m_client.FoundVerses.Count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                                    DisplayFoundVerses(true, true);
                                }
                            }
                        }
                        break;
                    case NumbersResultType.Sentences:
                        {
                            query.NumberScope = NumberScope.Number;
                            match_count = m_client.FindSentences(query);
                            if (m_client.FoundSentences != null)
                            {
                                m_find_result_header = match_count + ((match_count == 1) ? " " + L[l]["sentence"] : " " + L[l]["sentences"]) + " " + L[l]["with"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                                DisplayFoundVerses(true, true);
                            }
                        }
                        break;
                    case NumbersResultType.Verses:
                        {
                            query.NumberScope = m_verse_number_scope;
                            match_count = m_client.FindVerses(query);
                            if (m_client.FoundVerses != null)
                            {
                                m_find_result_header = match_count + ((match_count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                                DisplayFoundVerses(true, true);
                            }
                        }
                        break;
                    case NumbersResultType.VerseRanges:
                        {
                            query.NumberScope = m_verse_number_scope;
                            match_count = m_client.FindVerseRanges(query);
                            if (m_client.FoundVerseRanges != null)
                            {
                                m_find_result_header = match_count + ((match_count == 1) ? " " + L[l]["verse range"] : " " + L[l]["verse ranges"]) + " " + L[l]["with"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                                DisplayFoundVerseRanges(true, true);
                            }
                        }
                        break;
                    case NumbersResultType.Chapters:
                        {
                            query.NumberScope = m_chapter_number_scope;
                            match_count = m_client.FindChapters(query);
                            if (m_client.FoundChapters != null)
                            {
                                m_find_result_header = match_count + ((match_count == 1) ? " " + L[l]["chapter"] : " " + L[l]["chapters"]) + " " + L[l]["with"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                                DisplayFoundChapters(true, true);
                            }
                        }
                        break;
                    case NumbersResultType.ChapterRanges:
                        {
                            query.NumberScope = m_chapter_number_scope;
                            match_count = m_client.FindChapterRanges(query);
                            if (m_client.FoundChapterRanges != null)
                            {
                                m_find_result_header = match_count + ((match_count == 1) ? " " + L[l]["chapter range"] : " " + L[l]["chapter ranges"]) + " " + L[l]["with"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                                DisplayFoundChapterRanges(true, true);
                            }
                        }
                        break;
                    default:
                        break;
                }
            }

            //SearchResultTextBox.Focus();
            //SearchResultTextBox.Refresh();
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Search By Letter Frequency Sum
    ///////////////////////////////////////////////////////////////////////////////
    private FrequencyResultType m_frequency_result_type = FrequencyResultType.Chapters;
    private void FindByFrequencyResultTypeWordsLabel_Click(object sender, EventArgs e)
    {
        ResetFindByFrequencyResultTypeLabels();
        m_frequency_result_type = FrequencyResultType.Words;
        FindByFrequencyControls_Enter(null, null);
    }
    private void FindByFrequencyResultTypeSentencesLabel_Click(object sender, EventArgs e)
    {
        ResetFindByFrequencyResultTypeLabels();
        m_frequency_result_type = FrequencyResultType.Sentences;
        FindByFrequencyControls_Enter(null, null);
    }
    private void FindByFrequencyResultTypeVersesLabel_Click(object sender, EventArgs e)
    {
        ResetFindByFrequencyResultTypeLabels();
        m_frequency_result_type = FrequencyResultType.Verses;
        FindByFrequencyControls_Enter(null, null);
    }
    private void FindByFrequencyResultTypeChaptersLabel_Click(object sender, EventArgs e)
    {
        ResetFindByFrequencyResultTypeLabels();
        m_frequency_result_type = FrequencyResultType.Chapters;
        FindByFrequencyControls_Enter(null, null);
    }
    private FrequencySearchType m_frequency_search_type = FrequencySearchType.DuplicateLetters;
    private void FindByFrequencySearchTypeDuplicateLettersLabel_Click(object sender, EventArgs e)
    {
        ResetFindByFrequencyResultTypeLabels();
        m_frequency_search_type = FrequencySearchType.DuplicateLetters;
        FindByFrequencyControls_Enter(null, null);

        BuildLetterFrequencies();
        DisplayLetterFrequencies();
    }
    private void FindByFrequencySearchTypeUniqueLettersLabel_Click(object sender, EventArgs e)
    {
        ResetFindByFrequencyResultTypeLabels();
        m_frequency_search_type = FrequencySearchType.UniqueLetters;
        FindByFrequencyControls_Enter(null, null);

        BuildLetterFrequencies();
        DisplayLetterFrequencies();
    }

    private bool m_find_by_phrase_letter_frequency = false;
    private string m_phrase_text = "";
    private void FindByFrequencyPhraseCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_find_by_phrase_letter_frequency = !m_find_by_phrase_letter_frequency;
        UpdateKeyboard(m_client.NumerologySystem.TextMode);

        ResetFindByFrequencyResultTypeLabels();
        m_frequency_result_type = (m_find_by_phrase_letter_frequency) ? FrequencyResultType.Sentences : FrequencyResultType.Chapters;
        FindByFrequencyControls_Enter(null, null);

        int shift = (m_dpi_x == 120.0F) ? 42 : 52;

        if (m_find_by_phrase_letter_frequency)
        {
            for (int i = 0; i < 3; i++) FindByFrequencyPhraseTextBox.TextChanged -= new EventHandler(FindByFrequencyPhraseTextBox_TextChanged);
            FindByFrequencyPhraseTextBox.Text = m_phrase_text;
            FindByFrequencyPhraseTextBox.TextChanged += new EventHandler(FindByFrequencyPhraseTextBox_TextChanged);

            FindByFrequencySumLabel.Top += shift;
            FindByFrequencySumComparisonOperatorLabel.Top += shift;
            FindByFrequencySumNumericUpDown.Top += shift;
            FindByFrequencySumNumberTypeLabel.Top += shift;
            LetterFrequencyListView.Top += shift;
            LetterFrequencyListView.Height -= shift;

            FindByFrequencySumLabel.BackColor = Color.Pink;
            LetterFrequencyListView.BackColor = Color.Pink;
            //LetterFrequencyListView.FullRowSelect = true;
            LetterFrequencyPanel.BackColor = Color.Pink;
            LetterFrequencyPanel.Refresh();
        }
        else
        {
            for (int i = 0; i < 3; i++) FindByFrequencyPhraseTextBox.TextChanged -= new EventHandler(FindByFrequencyPhraseTextBox_TextChanged);
            FindByFrequencyPhraseTextBox.Text = "";
            FindByFrequencyPhraseTextBox.TextChanged += new EventHandler(FindByFrequencyPhraseTextBox_TextChanged);

            FindByFrequencySumLabel.Top -= shift;
            FindByFrequencySumComparisonOperatorLabel.Top -= shift;
            FindByFrequencySumNumericUpDown.Top -= shift;
            FindByFrequencySumNumberTypeLabel.Top -= shift;
            LetterFrequencyListView.Top -= shift;
            LetterFrequencyListView.Height += shift;

            FindByFrequencySumLabel.BackColor = Color.LightSteelBlue;
            LetterFrequencyListView.BackColor = Color.LightSteelBlue;
            //LetterFrequencyListView.FullRowSelect = false;
            LetterFrequencyPanel.BackColor = Color.LightSteelBlue;
            LetterFrequencyPanel.Refresh();
        }

        FindByFrequencyLinkLabel.Visible = m_find_by_phrase_letter_frequency;
        UpdateFindByFrequencyButtonToolTip();
        FindByFrequencyButton.Enabled = ((m_find_by_phrase_letter_frequency) && (m_phrase_text.Length > 0));

        RebuildLetterFrequencies();
    }
    private void ResetFindByFrequencyResultTypeLabels()
    {
        FindByFrequencyResultTypeWordsLabel.BackColor = Color.DarkGray;
        FindByFrequencyResultTypeWordsLabel.BorderStyle = BorderStyle.None;

        FindByFrequencyResultTypeSentencesLabel.BackColor = Color.DarkGray;
        FindByFrequencyResultTypeSentencesLabel.BorderStyle = BorderStyle.None;

        FindByFrequencyResultTypeVersesLabel.BackColor = Color.DarkGray;
        FindByFrequencyResultTypeVersesLabel.BorderStyle = BorderStyle.None;

        FindByFrequencyResultTypeChaptersLabel.BackColor = Color.DarkGray;
        FindByFrequencyResultTypeChaptersLabel.BorderStyle = BorderStyle.None;

        FindByFrequencySearchTypeDuplicateLettersLabel.BackColor = Color.DarkGray;
        FindByFrequencySearchTypeDuplicateLettersLabel.BorderStyle = BorderStyle.None;

        FindByFrequencySearchTypeUniqueLettersLabel.BackColor = Color.DarkGray;
        FindByFrequencySearchTypeUniqueLettersLabel.BorderStyle = BorderStyle.None;
    }
    private void FindByFrequencyControl_EnabledChanged(object sender, EventArgs e)
    {
        Control control = sender as Control;
        if (control != null)
        {
            control.BackColor = (control.Enabled) ? SystemColors.Window : Color.LightGray;
        }
    }
    private void FindByFrequencyComparisonOperatorLabel_Click(object sender, EventArgs e)
    {
        UpdateSumNumberTypeLabelTag();

        Control control = sender as Control;
        if (control != null)
        {
            if (UpdateComparisonOperator(control))
            {
                if (control == FindByFrequencySumComparisonOperatorLabel)
                {
                    if (FindByFrequencySumComparisonOperatorLabel.Text == "÷")
                    {
                        int remainder = 0;
                        FindByFrequencySumNumberTypeLabel.Tag = remainder;
                        FindByFrequencySumNumberTypeLabel.Text = remainder.ToString();
                        FindByFrequencySumNumberTypeLabel.ForeColor = Color.Black;
                        FindByFrequencySumNumberTypeLabel.Enabled = true;
                        ToolTip.SetToolTip(FindByFrequencySumNumberTypeLabel, L[l]["remainder"]);
                    }
                    else
                    {
                        FindByFrequencySumNumberTypeLabel.Text = "";
                        ToolTip.SetToolTip(FindByFrequencySumNumberTypeLabel, null);
                    }
                }

                FindByFrequencyControls_Enter(null, null);
            }
        }
    }
    private void FindByFrequencyNumberTypeLabel_Click(object sender, EventArgs e)
    {
        UpdateSumNumberTypeLabelTag();

        Control control = sender as Control;
        if (control != null)
        {
            if (UpdateNumberType(control))
            {
                if (control == FindByFrequencySumNumberTypeLabel)
                {
                    FindByFrequencySumComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByFrequencySumNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByFrequencySumComparisonOperatorLabel.Text = "=";
                        FindByFrequencySumNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByFrequencySumNumericUpDown.Focus();
                    }
                }
                else
                {
                    // do nothing
                }

                FindByFrequencyControls_Enter(null, null);
            }
        }
    }
    private void FindByFrequencyControls_Enter(object sender, EventArgs e)
    {
        this.AcceptButton = FindByFrequencyButton;

        FindByTextButton.Enabled = false;
        FindBySimilarityButton.Enabled = false;
        FindByNumbersButton.Enabled = false;
        FindByFrequencyButton.Enabled = ((m_find_by_phrase_letter_frequency) && (m_phrase_text.Length > 0))
                                        ||
                                        ((!m_find_by_phrase_letter_frequency) && (LetterFrequencyListView.SelectedIndices.Count > 0));

        ToolTip.SetToolTip(InspectChaptersLabel, L[l]["Inspect chapters"]);
        WordsListBoxLabel.Visible = false;
        WordsListBox.Visible = false;

        ResetFindByTextSearchBlockSizeLabels();
        ResetFindByTextSearchTypeLabels();
        ResetFindBySimilarityResultTypeLabels();
        ResetFindByNumbersResultTypeLabels();
        ResetFindByFrequencyResultTypeLabels();

        switch (m_frequency_result_type)
        {
            case FrequencyResultType.Words:
                {
                    FindByFrequencyResultTypeWordsLabel.BackColor = Color.SteelBlue;
                    FindByFrequencyResultTypeWordsLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case FrequencyResultType.Sentences:
                {
                    FindByFrequencyResultTypeSentencesLabel.BackColor = Color.SteelBlue;
                    FindByFrequencyResultTypeSentencesLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case FrequencyResultType.Verses:
                {
                    FindByFrequencyResultTypeVersesLabel.BackColor = Color.SteelBlue;
                    FindByFrequencyResultTypeVersesLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case FrequencyResultType.Chapters:
                {
                    FindByFrequencyResultTypeChaptersLabel.BackColor = Color.SteelBlue;
                    FindByFrequencyResultTypeChaptersLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
        }

        switch (m_frequency_search_type)
        {
            case FrequencySearchType.DuplicateLetters:
                {
                    FindByFrequencySearchTypeDuplicateLettersLabel.BackColor = Color.PaleVioletRed;
                    FindByFrequencySearchTypeDuplicateLettersLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case FrequencySearchType.UniqueLetters:
                {
                    FindByFrequencySearchTypeUniqueLettersLabel.BackColor = Color.PaleVioletRed;
                    FindByFrequencySearchTypeUniqueLettersLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
        }
    }
    private void FindByFrequencySumNumericUpDown_Leave(object sender, EventArgs e)
    {
        NumericUpDown control = sender as NumericUpDown;
        if (control != null)
        {
            if (String.IsNullOrEmpty(control.Text))
            {
                control.Value = 0;
                control.Refresh();
            }
        }

        UpdateSumNumberTypeLabelTag();
    }
    private void FindByFrequencyPhraseLabel_Click(object sender, EventArgs e)
    {
        LinkLabel_Click(sender, null);
    }
    private void FindByFrequencyPhraseTextBox_TextChanged(object sender, EventArgs e)
    {
        m_phrase_text = FindByFrequencyPhraseTextBox.Text;
        FindByFrequencyButton.Enabled = (m_phrase_text.Length > 0);

        BuildLetterFrequencies();
        DisplayLetterFrequencies();
    }

    // simulate SelectionChanged
    private string m_current_phrase = "";
    private void RebuildLetterFrequencies()
    {
        if (FindByFrequencyPhraseTextBox.SelectionLength == 0)
        {
            // factorize MainText value, not LetterFrequencySum
            CalculateCurrentValue();
        }

        BuildLetterFrequencies();
        DisplayLetterFrequencies();
    }
    private void FindByFrequencyPhraseTextBox_KeyUp(object sender, KeyEventArgs e)
    {
        RebuildLetterFrequencies();
    }
    private void FindByFrequencyPhraseTextBox_MouseMove(object sender, MouseEventArgs e)
    {
        if (MouseButtons == MouseButtons.Left)
        {
            RebuildLetterFrequencies();
        }
    }
    private void FindByFrequencyPhraseTextBox_MouseUp(object sender, MouseEventArgs e)
    {
        RebuildLetterFrequencies();
    }
    private void FindByFrequencySumNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        UpdateSumNumberTypeLabelTag();

        if (sender is NumericUpDown)
        {
            FindByFrequencySum();
        }
    }
    private void UpdateSumNumberTypeLabelTag()
    {
        FindByFrequencySumNumberTypeLabel.Tag = (int)FindByFrequencySumNumericUpDown.Value;

        int number;
        if (int.TryParse(FindByFrequencySumNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByFrequencySumNumericUpDown.Value)
            {
                number = (int)FindByFrequencySumNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByFrequencySumNumberTypeLabel.Text = number.ToString();
            }
        }
    }
    private void UpdateFindByFrequencyButtonToolTip()
    {
        string tooltip = ToolTip.GetToolTip(FindByFrequencyButton);
        if (tooltip != null)
        {
            if (m_find_by_phrase_letter_frequency)
            {
                tooltip = tooltip.Replace("selected", "phrase");
            }
            else
            {
                tooltip = tooltip.Replace("phrase", "selected");
            }
        }
        ToolTip.SetToolTip(FindByFrequencyButton, tooltip);
    }
    private void FindByFrequencyButton_EnabledChanged(object sender, EventArgs e)
    {
        UpdateFindByFrequencyButtonToolTip();
    }
    private void FindByFrequencyButton_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            FindByFrequencySum();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void FindByFrequencySum()
    {
        m_search_type = SearchType.Frequency;

        if (m_client != null)
        {
            ClearFindMatches();

            // 1. number types
            string sum_number_type_symbol = FindByFrequencySumNumberTypeLabel.Enabled ? FindByFrequencySumNumberTypeLabel.Text : "";
            NumberType sum_number_type =
                (sum_number_type_symbol == "P") ? NumberType.Prime :
                (sum_number_type_symbol == "AP") ? NumberType.AdditivePrime :
                (sum_number_type_symbol == "XP") ? NumberType.NonAdditivePrime :
                (sum_number_type_symbol == "C") ? NumberType.Composite :
                (sum_number_type_symbol == "AC") ? NumberType.AdditiveComposite :
                (sum_number_type_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (sum_number_type_symbol == "O") ? NumberType.Odd :
                (sum_number_type_symbol == "E") ? NumberType.Even :
                (sum_number_type_symbol == "^2") ? NumberType.Square :
                (sum_number_type_symbol == "^3") ? NumberType.Cubic :
                (sum_number_type_symbol == "^4") ? NumberType.Quartic :
                (sum_number_type_symbol == "^5") ? NumberType.Quintic :
                (sum_number_type_symbol == "^6") ? NumberType.Sextic :
                (sum_number_type_symbol == "^7") ? NumberType.Septic :
                (sum_number_type_symbol == "") ? NumberType.None :
                                             NumberType.Natural;

            // 2. numbers
            int sum = FindByFrequencySumNumericUpDown.Enabled ? (int)FindByFrequencySumNumericUpDown.Value : 0;

            // 3. comparison operators = ≠ < ≤ > ≥ ÷ !÷ Ʃ
            string sum_comparison_operator_symbol = FindByFrequencySumComparisonOperatorLabel.Text;
            ComparisonOperator sum_comparison_operator =
                (sum_comparison_operator_symbol == "=") ? ComparisonOperator.Equal :
                (sum_comparison_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (sum_comparison_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (sum_comparison_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (sum_comparison_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (sum_comparison_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (sum_comparison_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (sum_comparison_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (sum_comparison_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                          ComparisonOperator.Reserved;

            // 4. remainders for % comparison operator
            int sum_remainder = -1;
            if (sum_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    sum_remainder = int.Parse(FindByFrequencySumNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }

            bool phrase_search = false;
            string phrase = "";
            if (FindByFrequencyPhraseTextBox.Text.Length > 0)
            {
                if (FindByFrequencyPhraseTextBox.SelectionLength > 0)
                {
                    phrase = FindByFrequencyPhraseTextBox.SelectedText.Trim();
                }
                else
                {
                    phrase = FindByFrequencyPhraseTextBox.Text.Trim();
                }
                phrase_search = true;
            }
            else
            {
                if (LetterFrequencyListView.SelectedIndices.Count > 0)
                {
                    foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
                    {
                        phrase += item.SubItems[1].Text;
                    }
                }
                phrase_search = false;
            }

            if (!String.IsNullOrEmpty(phrase))
            {
                if (phrase.IsArabic())
                {
                    string text = null;
                    text += phrase + " " + L[l]["letters"] + sum_comparison_operator_symbol + ((sum > 0) ? sum.ToString() : ((sum_number_type != NumberType.None) ? FindByFrequencySumNumberTypeLabel.Text : "*"))
                        + (phrase_search ? ((m_frequency_search_type == FrequencySearchType.DuplicateLetters) ? " " + L[l]["with"] + " " : L[l]["without"] + " ") + L[l]["duplicates"] : "");

                    switch (m_frequency_result_type)
                    {
                        case FrequencyResultType.Words:
                            {
                                int match_count = m_client.FindWords(phrase, sum, sum_number_type, sum_comparison_operator, sum_remainder, m_frequency_search_type, m_with_diacritics);
                                if (m_client.FoundWords != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " " + L[l]["word"] : " " + L[l]["words"]) + " " + L[l]["with"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                                    DisplayFoundVerses(true, true);
                                }
                            }
                            break;
                        case FrequencyResultType.Sentences:
                            {
                                int match_count = m_client.FindSentences(phrase, sum, sum_number_type, sum_comparison_operator, sum_remainder, m_frequency_search_type, m_with_diacritics);
                                if (m_client.FoundSentences != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " " + L[l]["sentence"] : " " + L[l]["sentences"]) + " " + L[l]["with"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                                    DisplayFoundVerses(true, true);
                                }
                            }
                            break;
                        case FrequencyResultType.Verses:
                            {
                                int match_count = m_client.FindVerses(phrase, sum, sum_number_type, sum_comparison_operator, sum_remainder, m_frequency_search_type, m_with_diacritics);
                                if (m_client.FoundVerses != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " " + L[l]["verse"] : " " + L[l]["verses"]) + " " + L[l]["with"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                                    DisplayFoundVerses(true, true);
                                }
                            }
                            break;
                        case FrequencyResultType.Chapters:
                            {
                                int match_count = m_client.FindChapters(phrase, sum, sum_number_type, sum_comparison_operator, sum_remainder, m_frequency_search_type, m_with_diacritics);
                                if (m_client.FoundChapters != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " " + L[l]["chapter"] : " " + L[l]["chapters"]) + " " + L[l]["with"] + " " + text + " " + L[l]["in"] + " " + L[l][m_client.SearchScope.ToString()];
                                    DisplayFoundChapters(true, true);
                                }
                            }
                            break;
                    }
                }
            }

            //SearchResultTextBox.Focus();
            //SearchResultTextBox.Refresh();
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Display Search Results
    ///////////////////////////////////////////////////////////////////////////////
    private struct FindMatch
    {
        public int Start;
        public int Length;
    }
    // F3 and Shift+F3 Goto next/previous matches
    private List<FindMatch> m_find_matches = null;
    private void BuildFindMatch(int start, int length)
    {
        // build text_selections list for F3 and Shift+F3
        if (m_find_matches != null)
        {
            FindMatch find_match = new FindMatch();
            find_match.Start = start;
            find_match.Length = length;
            m_find_matches.Add(find_match);
        }
    }
    private int m_find_match_index = -1;
    private void GotoPreviousFindMatch()
    {
        if (m_find_matches != null)
        {
            m_find_match_index = -1;
            for (int i = 0; i < m_find_matches.Count; i++)
            {
                if (m_find_matches[i].Start > SearchResultTextBox.SelectionStart)
                {
                    m_find_match_index = i - 1;
                    break;
                }
            }
        }
    }
    private void GotoNextFindMatch()
    {
        if (m_find_matches != null)
        {
            m_find_match_index = m_find_matches.Count;
            for (int i = m_find_matches.Count - 1; i >= 0; i--)
            {
                if (m_find_matches[i].Start < SearchResultTextBox.SelectionStart)
                {
                    m_find_match_index = i + 1;
                    break;
                }
            }
        }
    }
    private void SelectNextFindMatch()
    {
        if (m_found_verses_displayed)
        {
            if (m_find_matches != null)
            {
                if (m_find_matches.Count > 0)
                {
                    // find the index prior to the current cursor postion
                    GotoPreviousFindMatch();
                    m_find_match_index++;

                    // round robin
                    if (m_find_match_index == m_find_matches.Count)
                    {
                        m_find_match_index = 0;
                    }

                    // find next match
                    if ((m_find_match_index >= 0) && (m_find_match_index < m_find_matches.Count))
                    {
                        int start = m_find_matches[m_find_match_index].Start;
                        int length = m_find_matches[m_find_match_index].Length;
                        if ((start >= 0) && (start < SearchResultTextBox.Text.Length))
                        {
                            SearchResultTextBox.Select(start, length);
                            SearchResultTextBox.SelectionColor = Color.Red;
                        }
                    }
                }
            }
        }
        UpdateFindMatchCaption();
    }
    private void SelectPreviousFindMatch()
    {
        if (m_found_verses_displayed)
        {
            if (m_find_matches != null)
            {
                if (m_find_matches.Count > 0)
                {
                    // find the index after the current cursor postion
                    GotoNextFindMatch();
                    m_find_match_index--;

                    // round robin
                    if (m_find_match_index < 0)
                    {
                        m_find_match_index = m_find_matches.Count - 1;
                    }

                    // find previous match
                    if ((m_find_match_index >= 0) && (m_find_match_index < m_find_matches.Count))
                    {
                        int start = m_find_matches[m_find_match_index].Start;
                        int length = m_find_matches[m_find_match_index].Length;
                        if ((start >= 0) && (start < SearchResultTextBox.Text.Length))
                        {
                            SearchResultTextBox.Select(start, length);
                            SearchResultTextBox.SelectionColor = Color.Red;
                        }
                    }
                }
            }
        }
        UpdateFindMatchCaption();
    }
    private void UpdateFindMatchCaption()
    {
        string caption = this.Text;
        int pos = caption.IndexOf(CAPTION_SEPARATOR);
        if (pos > -1)
        {
            caption = caption.Substring(0, pos);
        }

        if (m_found_verses_displayed)
        {
            if (m_find_matches != null)
            {
                caption += CAPTION_SEPARATOR + " " + L[l]["Match"] + " " + ((m_find_match_index + 1) + "/" + m_find_matches.Count);
            }
        }
        else
        {
            //caption += CAPTION_SEPARATOR;
        }

        this.Text = caption;
    }

    private string m_find_result_header = null;
    private void UpdateHeaderLabel()
    {
        if (m_client != null)
        {
            string text = "";
            int number = 0;

            if (m_found_verses_displayed)
            {
                if (m_find_result_header != null)
                {
                    text = m_find_result_header;

                    string[] parts = m_find_result_header.Split();
                    if (parts.Length > 0)
                    {
                        if (int.TryParse(parts[0], out number))
                        {
                            // do nothing
                        }
                    }
                }
            }
            else
            {
                Verse verse = GetCurrentVerse();
                if (verse != null)
                {
                    if (verse.Chapter != null)
                    {
                        //text = L[l]["Chapter"] + "   " + verse.Chapter.SortedNumber + ": " + L[l][verse.Chapter.TransliteratedName] + "   "
                        text = L[l][verse.Chapter.TransliteratedName] + " "
                             + ((l == "Arabic") ? "     " : verse.Chapter.Name + "     ")
                             + L[l]["Verse"] + " " + verse.NumberInChapter //+ "/" + verse.Chapter.Verses.Count + "   "
                            //+ L[l]["Station"] + " " + ((verse.Station != null) ? verse.Station.Number : -1) + "   "
                            //+ L[l]["Part"] + " " + ((verse.Part != null) ? verse.Part.Number : -1) + "   "
                            //+ L[l]["Group"] + " " + ((verse.Group != null) ? verse.Group.Number : -1) + "   "
                            //+ L[l]["Half"] + " " + ((verse.Half != null) ? verse.Half.Number : -1) + "   "
                            //+ L[l]["Quarter"] + " " + ((verse.Quarter != null) ? verse.Quarter.Number : -1) + "   "
                            //+ L[l]["Bowing"] + " " + ((verse.Bowing != null) ? verse.Bowing.Number : -1) + "   "
                             + "     "
                             + L[l]["Page"] + " " + ((verse.Page != null) ? verse.Page.Number : -1)
                        ;

                        number = verse.NumberInChapter;
                    }
                }
            }

            HeaderLabel.Text = text;
            HeaderLabel.ForeColor = Numbers.GetNumberTypeColor(number);
            HeaderLabel.Refresh();
        }
    }

    private RichTextBoxEx m_active_textbox = null;
    private bool m_found_verses_displayed = false;
    private void SwitchToMainTextBox()
    {
        if (m_active_textbox != null)
        {
            if (m_found_verses_displayed)
            {
                m_found_verses_displayed = false;
                PopulateChaptersListBox();
            }

            // in all cases
            SearchResultTextBox.Visible = false;
            MainTextBox.Visible = true;
            m_active_textbox = MainTextBox;

            CalculateCurrentValue();
            BuildLetterFrequencies();
            DisplayLetterFrequencies();
            DisplayCurrentPositions();

            UpdateWordWrapLabel(m_active_textbox.WordWrap);
            ValuesSequenceTextBox.WordWrap = m_active_textbox.WordWrap;
            CVWLSequenceTextBox.WordWrap = m_active_textbox.WordWrap;
            DNASequenceTextBox.WordWrap = m_active_textbox.WordWrap;

            DisplayChapterRevelationInfo();

            GoldenRatioScopeLabel.Visible = true;
            GoldenRatioTypeLabel.Visible = true;
            GoldenRatioOrderLabel.Visible = true;
            GoldenRatioScopeLabel.Refresh();
            GoldenRatioOrderLabel.Refresh();

            this.Text = Application.ProductName + " | " + GetSelectionSummary();
        }
    }
    private void SwitchToSearchResultTextBox()
    {
        if (m_active_textbox != null)
        {
            // allow subsequent Finds to update chapter list, and browse history
            m_found_verses_displayed = true;
            PopulateChaptersListBox();

            // in all cases
            MainTextBox.Visible = false;
            SearchResultTextBox.Visible = true;
            m_active_textbox = SearchResultTextBox;

            CalculateCurrentValue();
            BuildLetterFrequencies();
            DisplayLetterFrequencies();
            DisplayCurrentPositions();

            UpdateWordWrapLabel(m_active_textbox.WordWrap);
            ValuesSequenceTextBox.WordWrap = m_active_textbox.WordWrap;
            CVWLSequenceTextBox.WordWrap = m_active_textbox.WordWrap;
            DNASequenceTextBox.WordWrap = m_active_textbox.WordWrap;

            GoldenRatioScopeLabel.Visible = false;
            GoldenRatioTypeLabel.Visible = false;
            GoldenRatioOrderLabel.Visible = false;
            GoldenRatioScopeLabel.Refresh();
            GoldenRatioOrderLabel.Refresh();

            this.Text = Application.ProductName + " | " + GetSelectionSummary();
            UpdateFindMatchCaption();
        }
    }

    private int[] m_matches_per_chapter = null;
    private void DisplayFoundVerses(bool add_to_history, bool colorize_chapters_by_matches)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.FoundVerses != null)
                {
                    TranslationTextBox.Text = null;
                    ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
                    ZoomOutLabel.Enabled = (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));

                    StringBuilder phrase_texts = new StringBuilder();
                    if (colorize_chapters_by_matches)
                    {
                        if (m_client.Book != null)
                        {
                            m_matches_per_chapter = new int[m_client.Book.Chapters.Count];
                            if ((m_client.FoundPhrases != null) && (m_client.FoundPhrases.Count > 0))
                            {
                                foreach (Phrase phrase in m_client.FoundPhrases)
                                {
                                    if (phrase != null)
                                    {
                                        phrase_texts.AppendLine(phrase.Text);

                                        if (phrase.Verse != null)
                                        {
                                            if (phrase.Verse.Chapter != null)
                                            {
                                                m_matches_per_chapter[phrase.Verse.Chapter.SortedNumber - 1]++;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                foreach (Verse verse in m_client.FoundVerses)
                                {
                                    if (verse != null)
                                    {
                                        if (verse.Chapter != null)
                                        {
                                            m_matches_per_chapter[verse.Chapter.SortedNumber - 1]++;
                                        }
                                    }
                                }
                            }
                        }

                        SwitchToSearchResultTextBox();
                    }

                    for (int i = 0; i < 3; i++) SearchResultTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                    for (int i = 0; i < 3; i++) SearchResultTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                    SearchResultTextBox.BeginUpdate();

                    StringBuilder str = new StringBuilder();
                    foreach (Verse verse in m_client.FoundVerses)
                    {
                        if (verse != null)
                        {
                            str.Append(verse.ArabicAddress + "\t" + verse.Text + "\n");
                        }
                    }
                    if (str.Length > 1)
                    {
                        str.Remove(str.Length - 1, 1);
                    }
                    m_current_text = str.ToString();

                    m_user_text_mode = false;
                    m_selection_mode = true;
                    UpdateHeaderLabel();
                    SearchResultTextBox.Text = m_current_text;
                    SearchResultTextBox.Refresh();
                    GenerateSentencesLabel.Visible = false;
                    DuplicateLettersCheckBox.Visible = false;

                    if (phrase_texts.Length > 0)
                    {
                        m_current_text = phrase_texts.ToString(); // must be assigned here
                        CalculateCurrentValue();
                        m_current_text = phrase_texts.ToString(); // must be restored again
                    }
                    else
                    {
                        CalculateCurrentValue();
                    }

                    // phrase statistics
                    if (m_client.FoundPhrases != null)
                    {
                        if (m_client.FoundPhrases.Count > 0)
                        {
                            CalcLaatePhraseStatistics();
                        }
                    }

                    BuildLetterFrequencies();
                    DisplayLetterFrequencies();

                    if (m_client.FoundPhrases != null)
                    {
                        ColorizePhrases();
                        BuildFindMatches();
                        HighlightVerses();
                    }

                    m_current_found_verse_index = 0;
                    DisplayCurrentPositions();

                    DisplayTranslations(m_client.FoundVerses);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();

                    if (add_to_history)
                    {
                        AddSearchHistoryItem();
                    }

                    m_current_found_verse_index = 0;
                    RealignFoundMatchedToStart();

                    BookmarkTextBox.Enabled = false;
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            if (PictureBox.Visible)
            {
                PictureBox.Visible = false;
            }
            SearchResultTextBox.EndUpdate();
            SearchResultTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            SearchResultTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
            this.Cursor = Cursors.Default;
        }
    }
    private void CalcLaatePhraseStatistics()
    {
        if (m_client != null)
        {
            if (m_client.FoundPhrases != null)
            {
                StringBuilder phrase_str = new StringBuilder();
                int word_count = 0;
                int letter_count = 0;
                long value = 0L;
                foreach (Phrase phrase in m_client.FoundPhrases)
                {
                    if (phrase != null)
                    {
                        phrase_str.AppendLine(phrase.Text);
                        word_count += phrase.Text.Split(' ').Length;
                        string phrase_nospaces = phrase.Text.SimplifyTo(m_client.NumerologySystem.TextMode).Replace(" ", "");
                        letter_count += phrase_nospaces.Length;
                        value += m_client.CalculateValueUserText(phrase.Text);
                    }
                }

                WordsTextBox.Text = Radix.Encode(word_count, m_radix);
                WordsTextBox.ForeColor = Numbers.GetNumberTypeColor(WordsTextBox.Text, m_radix);
                WordsTextBox.BackColor = (Numbers.Compare(word_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
                WordsTextBox.Refresh();
                DecimalWordsTextBox.Text = word_count.ToString();
                DecimalWordsTextBox.ForeColor = Numbers.GetNumberTypeColor(word_count);
                DecimalWordsTextBox.Visible = (m_radix != DEFAULT_RADIX);
                DecimalWordsTextBox.Refresh();
                LettersTextBox.Text = Radix.Encode(letter_count, m_radix);
                LettersTextBox.ForeColor = Numbers.GetNumberTypeColor(LettersTextBox.Text, m_radix);
                LettersTextBox.BackColor = (Numbers.Compare(letter_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
                LettersTextBox.Refresh();
                DecimalLettersTextBox.Text = letter_count.ToString();
                DecimalLettersTextBox.ForeColor = Numbers.GetNumberTypeColor(letter_count);
                DecimalLettersTextBox.Visible = (m_radix != DEFAULT_RADIX);
                DecimalLettersTextBox.Refresh();
                ValueTextBox.Text = Radix.Encode(value, m_radix);
                ValueTextBox.ForeColor = Numbers.GetNumberTypeColor(value);
                ValueTextBox.SelectionStart = ValueTextBox.Text.Length;
                ValueTextBox.SelectionLength = 0;
                ValueTextBox.Refresh();
                DecimalValueTextBox.Text = value.ToString();
                DecimalValueTextBox.Visible = (m_radix != DEFAULT_RADIX);
                DecimalValueTextBox.ForeColor = Numbers.GetNumberTypeColor(value);
                DecimalValueTextBox.Refresh();
                FactorizeValue(value, true);
            }
        }
    }
    private void DisplayFoundVerseRanges(bool add_to_history, bool colorize_chapters_by_matches)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.FoundVerseRanges != null)
                {
                    TranslationTextBox.Text = null;
                    ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
                    ZoomOutLabel.Enabled = (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));

                    if (colorize_chapters_by_matches)
                    {
                        if (m_client.Book != null)
                        {
                            m_matches_per_chapter = new int[m_client.Book.Chapters.Count];
                            foreach (List<Verse> range in m_client.FoundVerseRanges)
                            {
                                foreach (Verse verse in range)
                                {
                                    if (verse != null)
                                    {
                                        if (verse.Chapter != null)
                                        {
                                            m_matches_per_chapter[verse.Chapter.SortedNumber - 1]++;
                                        }
                                    }
                                }
                            }
                        }

                        SwitchToSearchResultTextBox();
                    }

                    for (int i = 0; i < 3; i++) SearchResultTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                    for (int i = 0; i < 3; i++) SearchResultTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                    SearchResultTextBox.BeginUpdate();

                    List<Verse> verses = new List<Verse>();
                    foreach (List<Verse> range in m_client.FoundVerseRanges)
                    {
                        verses.AddRange(range);
                    }

                    StringBuilder str = new StringBuilder();
                    foreach (Verse verse in verses)
                    {
                        if (verse != null)
                        {
                            str.Append(verse.ArabicAddress + "\t" + verse.Text + "\n");
                        }
                    }
                    if (str.Length > 1)
                    {
                        str.Remove(str.Length - 1, 1);
                    }
                    m_current_text = str.ToString();

                    m_user_text_mode = false;
                    m_selection_mode = true;
                    UpdateHeaderLabel();
                    SearchResultTextBox.Text = m_current_text;
                    SearchResultTextBox.Refresh();
                    GenerateSentencesLabel.Visible = false;
                    DuplicateLettersCheckBox.Visible = false;

                    CalculateCurrentValue();

                    BuildLetterFrequencies();
                    DisplayLetterFrequencies();

                    ColorizeVerseRanges(); // too slow

                    m_current_found_verse_index = 0;
                    DisplayCurrentPositions();

                    DisplayTranslations(verses);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();

                    if (add_to_history)
                    {
                        AddSearchHistoryItem();
                    }

                    m_current_found_verse_index = 0;
                    RealignFoundMatchedToStart();

                    BookmarkTextBox.Enabled = false;
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            if (PictureBox.Visible)
            {
                PictureBox.Visible = false;
            }
            SearchResultTextBox.EndUpdate();
            SearchResultTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            SearchResultTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
            this.Cursor = Cursors.Default;
        }
    }
    private void DisplayFoundChapters(bool add_to_history, bool colorize_chapters_by_matches)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.FoundChapters != null)
                {
                    TranslationTextBox.Text = null;
                    ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
                    ZoomOutLabel.Enabled = (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));

                    if (colorize_chapters_by_matches)
                    {
                        if (m_client.Book != null)
                        {
                            m_matches_per_chapter = new int[m_client.Book.Chapters.Count];
                            foreach (Chapter chapter in m_client.FoundChapters)
                            {
                                if (chapter != null)
                                {
                                    m_matches_per_chapter[chapter.SortedNumber - 1]++;
                                }
                            }
                        }

                        SwitchToSearchResultTextBox();
                    }

                    for (int i = 0; i < 3; i++) ChaptersListBox.SelectedIndexChanged -= new EventHandler(ChaptersListBox_SelectedIndexChanged);
                    if (m_client.FoundChapters.Count > 0)
                    {
                        ChaptersListBox.SelectedIndices.Clear();
                        foreach (Chapter chapter in m_client.FoundChapters)
                        {
                            if (((chapter.SortedNumber - 1) >= 0) && ((chapter.SortedNumber - 1) < ChaptersListBox.Items.Count))
                            {
                                ChaptersListBox.SelectedIndices.Add(chapter.SortedNumber - 1);
                            }
                        }
                    }
                    else
                    {
                        ChaptersListBox.SelectedIndices.Clear();
                    }
                    ChaptersListBox.SelectedIndexChanged += new EventHandler(ChaptersListBox_SelectedIndexChanged);
                    UpdateSelection();

                    for (int i = 0; i < 3; i++) SearchResultTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                    for (int i = 0; i < 3; i++) SearchResultTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                    SearchResultTextBox.BeginUpdate();

                    StringBuilder str = new StringBuilder();
                    foreach (Chapter chapter in m_client.FoundChapters)
                    {
                        foreach (Verse verse in chapter.Verses)
                        {
                            if (verse != null)
                            {
                                str.Append(verse.ArabicAddress + "\t" + verse.Text + "\n");
                            }
                        }
                    }
                    if (str.Length > 1)
                    {
                        str.Remove(str.Length - 1, 1);
                    }
                    m_current_text = str.ToString();

                    m_user_text_mode = false;
                    m_selection_mode = true;
                    UpdateHeaderLabel();
                    SearchResultTextBox.Text = m_current_text;
                    SearchResultTextBox.Refresh();
                    GenerateSentencesLabel.Visible = false;
                    DuplicateLettersCheckBox.Visible = false;

                    CalculateCurrentValue();

                    BuildLetterFrequencies();
                    DisplayLetterFrequencies();

                    //ColorizeChapters(); // too too slow

                    m_current_found_verse_index = 0;
                    DisplayCurrentPositions();

                    List<Verse> verses = new List<Verse>();
                    foreach (Chapter chapter in m_client.FoundChapters)
                    {
                        verses.AddRange(chapter.Verses);
                    }
                    DisplayTranslations(verses);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();

                    if (add_to_history)
                    {
                        AddSearchHistoryItem();
                    }

                    m_current_found_verse_index = 0;
                    RealignFoundMatchedToStart();

                    BookmarkTextBox.Enabled = false;
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            if (PictureBox.Visible)
            {
                PictureBox.Visible = false;
            }
            SearchResultTextBox.EndUpdate();
            SearchResultTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            SearchResultTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
            this.Cursor = Cursors.Default;
        }
    }
    private void DisplayFoundChapterRanges(bool add_to_history, bool colorize_chapters_by_matches)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.FoundChapterRanges != null)
                {
                    TranslationTextBox.Text = null;
                    ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
                    ZoomOutLabel.Enabled = (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));

                    if (colorize_chapters_by_matches)
                    {
                        if (m_client.Book != null)
                        {
                            m_matches_per_chapter = new int[m_client.Book.Chapters.Count];
                            foreach (List<Chapter> range in m_client.FoundChapterRanges)
                            {
                                foreach (Chapter chapter in range)
                                {
                                    if (chapter != null)
                                    {
                                        m_matches_per_chapter[chapter.SortedNumber - 1]++;
                                    }
                                }
                            }
                        }

                        SwitchToSearchResultTextBox();
                    }

                    for (int i = 0; i < 3; i++) ChaptersListBox.SelectedIndexChanged -= new EventHandler(ChaptersListBox_SelectedIndexChanged);
                    if (m_client.FoundChapterRanges.Count > 0)
                    {
                        ChaptersListBox.SelectedIndices.Clear();
                        foreach (List<Chapter> range in m_client.FoundChapterRanges)
                        {
                            foreach (Chapter chapter in range)
                            {
                                if (((chapter.SortedNumber - 1) >= 0) && ((chapter.SortedNumber - 1) < ChaptersListBox.Items.Count))
                                {
                                    ChaptersListBox.SelectedIndices.Add(chapter.SortedNumber - 1);
                                }
                            }
                        }
                    }
                    else
                    {
                        ChaptersListBox.SelectedIndices.Clear();
                    }
                    ChaptersListBox.SelectedIndexChanged += new EventHandler(ChaptersListBox_SelectedIndexChanged);
                    UpdateSelection();

                    for (int i = 0; i < 3; i++) SearchResultTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                    for (int i = 0; i < 3; i++) SearchResultTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                    SearchResultTextBox.BeginUpdate();

                    List<Verse> verses = new List<Verse>();
                    foreach (List<Chapter> range in m_client.FoundChapterRanges)
                    {
                        foreach (Chapter chapter in range)
                        {
                            verses.AddRange(chapter.Verses);
                        }
                    }

                    StringBuilder str = new StringBuilder();
                    foreach (Verse verse in verses)
                    {
                        if (verse != null)
                        {
                            str.Append(verse.ArabicAddress + "\t" + verse.Text + "\n");
                        }
                    }
                    m_current_text = str.ToString();

                    m_user_text_mode = false;
                    m_selection_mode = true;
                    UpdateHeaderLabel();
                    SearchResultTextBox.Text = m_current_text;
                    SearchResultTextBox.Refresh();
                    GenerateSentencesLabel.Visible = false;
                    DuplicateLettersCheckBox.Visible = false;

                    CalculateCurrentValue();

                    BuildLetterFrequencies();
                    DisplayLetterFrequencies();

                    //ColorizeChapterRanges(); // too too slow

                    m_current_found_verse_index = 0;
                    DisplayCurrentPositions();

                    DisplayTranslations(verses);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();

                    if (add_to_history)
                    {
                        AddSearchHistoryItem();
                    }

                    m_current_found_verse_index = 0;
                    RealignFoundMatchedToStart();

                    BookmarkTextBox.Enabled = false;
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            if (PictureBox.Visible)
            {
                PictureBox.Visible = false;
            }
            SearchResultTextBox.EndUpdate();
            SearchResultTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            SearchResultTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
            this.Cursor = Cursors.Default;
        }
    }

    private void BuildFindMatches()
    {
        if (m_client != null)
        {
            if (m_client.FoundPhrases != null)
            {
                foreach (Phrase phrase in m_client.FoundPhrases)
                {
                    if (phrase != null)
                    {
                        if (phrase.Verse != null)
                        {
                            int start = GetPhrasePositionInRichTextBox(phrase);
                            if ((start >= 0) && (start < SearchResultTextBox.Text.Length))
                            {
                                if (phrase.Text != null)
                                {
                                    int length = phrase.Text.Length;
                                    BuildFindMatch(start, length);
                                }
                            }
                        }
                    }
                }
            }
        }
        UpdateFindMatchCaption();
    }
    private void ColorizePhrases()
    {
        if (m_client != null)
        {
            if (m_client.FoundPhrases != null)
            {
                foreach (Phrase phrase in m_client.FoundPhrases)
                {
                    if (phrase != null)
                    {
                        if (phrase.Verse != null)
                        {
                            int start = GetPhrasePositionInRichTextBox(phrase);
                            if ((start >= 0) && (start < SearchResultTextBox.Text.Length))
                            {
                                if (phrase.Text != null)
                                {
                                    int extra = 0;
                                    foreach (char c in phrase.Text)
                                    {
                                        if ((Constants.STOPMARKS.Contains(c)) || (Constants.QURANMARKS.Contains(c)))
                                        {
                                            extra += 2;
                                        }
                                    }
                                    int length = phrase.Text.Length + extra;
                                    SearchResultTextBox.Select(start, length);
                                    SearchResultTextBox.SelectionColor = Color.Red;
                                }
                            }
                        }
                    }
                }

                UpdateFindMatchCaption();
            }
        }
    }
    private Dictionary<Verse, Color> m_found_verse_backcolors = new Dictionary<Verse, Color>();
    private void HighlightVerses()
    {
        try
        {
            for (int i = 0; i < 3; i++) SearchResultTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
            for (int i = 0; i < 3; i++) SearchResultTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
            SearchResultTextBox.BeginUpdate();
            SearchResultTextBox.ClearHighlight();

            if (m_client != null)
            {
                m_found_verse_backcolors.Clear();

                Dictionary<Verse, int> phrases_per_verse_dictionary = new Dictionary<Verse, int>();
                if (m_client.FoundPhrases != null)
                {
                    if (m_client.FoundVerses != null)
                    {
                        if (m_client.FoundPhrases.Count >= m_client.FoundVerses.Count)
                        {
                            foreach (Phrase phrase in m_client.FoundPhrases)
                            {
                                if (phrase != null)
                                {
                                    if (phrases_per_verse_dictionary.ContainsKey(phrase.Verse))
                                    {
                                        phrases_per_verse_dictionary[phrase.Verse]++;
                                    }
                                    else
                                    {
                                        phrases_per_verse_dictionary.Add(phrase.Verse, 1);
                                    }
                                }
                            }

                            foreach (Verse verse in m_client.FoundVerses)
                            {
                                int start = GetVerseDisplayStart(verse);
                                int length = GetVerseDisplayLength(verse);
                                if (phrases_per_verse_dictionary.ContainsKey(verse))
                                {
                                    int match_count = phrases_per_verse_dictionary[verse];

                                    // use color shading to represent match_count visually
                                    if (match_count > 1)
                                    {
                                        int red = 255;
                                        int green = 255;
                                        int blue = 255;
                                        green -= ((match_count - 1) * 8);
                                        if (green < 0)
                                        {
                                            red += green;
                                            green = 0;
                                        }
                                        if (red < 0)
                                        {
                                            blue += red;
                                            red = 0;
                                        }
                                        if (blue < 0)
                                        {
                                            blue = 0;
                                        }
                                        m_found_verse_backcolors.Add(verse, Color.FromArgb(red, green, blue));
                                    }
                                    else
                                    {
                                        m_found_verse_backcolors.Add(verse, SearchResultTextBox.BackColor);
                                    }
                                    SearchResultTextBox.Highlight(start, length - 1, m_found_verse_backcolors[verse]);
                                }
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            SearchResultTextBox.EndUpdate();
            SearchResultTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            SearchResultTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
        }
    }
    private void ColorizeVerseRanges()
    {
        if (m_client != null)
        {
            if (m_client.FoundVerseRanges != null)
            {
                if (m_client.FoundVerseRanges.Count > 0)
                {
                    bool colorize = true; // colorize ranges alternatively

                    int line_index = 0;
                    foreach (List<Verse> range in m_client.FoundVerseRanges)
                    {
                        colorize = !colorize; // alternate colorization of ranges

                        int start = SearchResultTextBox.GetLinePosition(line_index);
                        int length = 0;
                        foreach (Verse verse in range)
                        {
                            length += SearchResultTextBox.Lines[line_index].Length + 1; // "\n"
                            line_index++;
                        }
                        SearchResultTextBox.Select(start, length);
                        SearchResultTextBox.SelectionColor = colorize ? Color.Blue : Color.Navy;
                    }
                }
            }
        }

        //FIX to reset SelectionColor
        SearchResultTextBox.Select(0, 1);
        SearchResultTextBox.SelectionColor = Color.Navy;
        SearchResultTextBox.Select(0, 0);
        SearchResultTextBox.SelectionColor = Color.Navy;
    }
    private void ColorizeChapters()
    {
        if (m_client != null)
        {
            if (m_client.FoundChapters != null)
            {
                if (m_client.FoundChapters.Count > 0)
                {
                    bool colorize = true; // colorize chapters alternatively

                    int line_index = 0;
                    foreach (Chapter chapter in m_client.FoundChapters)
                    {
                        if (chapter != null)
                        {
                            colorize = !colorize; // alternate colorization of chapters

                            int start = SearchResultTextBox.GetLinePosition(line_index);
                            int length = 0;
                            foreach (Verse verse in chapter.Verses)
                            {
                                length += SearchResultTextBox.Lines[line_index].Length + 1; // "\n"
                                line_index++;
                            }
                            SearchResultTextBox.Select(start, length);
                            SearchResultTextBox.SelectionColor = colorize ? Color.Blue : Color.Navy;
                        }
                    }
                }
            }
        }

        //FIX to reset SelectionColor
        SearchResultTextBox.Select(0, 1);
        SearchResultTextBox.SelectionColor = Color.Navy;
        SearchResultTextBox.Select(0, 0);
        SearchResultTextBox.SelectionColor = Color.Navy;
    }
    private void ColorizeChapterRanges()
    {
        if (m_client != null)
        {
            if (m_client.FoundChapterRanges != null)
            {
                if (m_client.FoundChapterRanges.Count > 0)
                {
                    bool colorize = true; // colorize ranges alternatively

                    int line_index = 0;
                    foreach (List<Chapter> range in m_client.FoundChapterRanges)
                    {
                        if (range != null)
                        {
                            colorize = !colorize; // alternate colorization of ranges

                            int start = SearchResultTextBox.GetLinePosition(line_index);
                            int length = 0;
                            foreach (Chapter chapter in range)
                            {
                                foreach (Verse verse in chapter.Verses)
                                {
                                    length += SearchResultTextBox.Lines[line_index].Length + 1; // "\n"
                                    line_index++;
                                }
                            }
                            SearchResultTextBox.Select(start, length);
                            SearchResultTextBox.SelectionColor = colorize ? Color.Blue : Color.Navy;
                        }
                    }
                }
            }
        }

        //FIX to reset SelectionColor
        SearchResultTextBox.Select(0, 1);
        SearchResultTextBox.SelectionColor = Color.Navy;
        SearchResultTextBox.Select(0, 0);
        SearchResultTextBox.SelectionColor = Color.Navy;
    }

    private void InspectVersesLabel_Click(object sender, EventArgs e)
    {
        if (m_client == null) return;
        if (m_client.NumerologySystem == null) return;
        if (m_client.Book == null) return;
        if (m_client.Selection == null) return;

        string result = null;
        string filename = null;
        if (m_found_verses_displayed)
        {
            switch (m_numbers_result_type)
            {
                case NumbersResultType.Letters:
                    {
                        result = DisplayLetterInformation(m_client.FoundLetters);
                    }
                    break;
                case NumbersResultType.Words:
                case NumbersResultType.WordRanges:
                    {
                        result = DisplayWordInformation(m_client.FoundWords);
                    }
                    break;
                case NumbersResultType.Sentences:
                    {
                        result = DisplayVerseInformation(m_client.FoundVerses); // Sentence and Phrase don't know about Words
                    }
                    break;
                case NumbersResultType.Verses:
                case NumbersResultType.VerseRanges:
                    {
                        result = DisplayVerseInformation(m_client.FoundVerses);
                    }
                    break;
                case NumbersResultType.Chapters:
                case NumbersResultType.ChapterRanges:
                    {
                        List<Chapter> chapters = m_client.Book.GetChapters(m_client.FoundVerses);
                        if (chapters != null)
                        {
                            result = DisplayChapterInformation(chapters);
                        }
                    }
                    break;
            }
            filename = m_client.NumerologySystem.Name + "_" + m_find_result_header.Replace(" ", "_").Replace("*", "") + Globals.OUTPUT_FILE_EXT;
        }
        else
        {
            List<Verse> verses = m_client.Selection.Verses;
            if (verses != null)
            {
                result = DisplayVerseInformation(verses);
            }

            StringBuilder str = new StringBuilder();
            str.Append(m_client.Selection.Scope.ToString());
            if (m_client.Selection.Scope == SelectionScope.Chapter)
            {
                foreach (Chapter chapter in m_client.Selection.Chapters)
                {
                    str.Append("." + chapter.SortedNumber);
                }
                if (str.Length > 100)
                {
                    str.Remove(100, str.Length - 100);
                    int pos = str.ToString().LastIndexOf('.');
                    if (pos > -1)
                    {
                        str.Remove(pos, str.Length - pos);
                    }

                    if (str[str.Length - 1] == '.')
                    {
                        str.Append("..");
                    }
                    else
                    {
                        str.Append("...");
                    }
                }
            }
            else
            {
                foreach (int index in m_client.Selection.Indexes)
                {
                    str.Append("." + (index + 1).ToString());
                }
            }

            filename = m_client.NumerologySystem.Name + "_" + "VersesOf" + str.ToString() + Globals.OUTPUT_FILE_EXT;
        }
        if (Directory.Exists(Globals.STATISTICS_FOLDER))
        {
            string path = Globals.STATISTICS_FOLDER + "/" + filename;
            FileHelper.SaveText(path, result);
            FileHelper.DisplayFile(path);
        }
    }
    private string DisplayChapterInformation(List<Chapter> chapters)
    {
        if (m_client == null) return null;
        if (chapters == null) return null;

        StringBuilder str = new StringBuilder();

        str.Append("#" + "\t" + "Name" + (m_found_verses_displayed ? "\t" + FindByTextTextBox.Text : "") + "\t" + "Chapter" + "\t" + "Verses" + "\t" + "Words" + "\t" + "Letters" + "\t" + "Value" + "\t");
        NumerologySystem numerology_system = m_client.NumerologySystem;
        if (numerology_system != null)
        {
            if (numerology_system.LetterValues.Keys.Count > 0)
            {
                foreach (char key in numerology_system.LetterValues.Keys)
                {
                    str.Append(key.ToString() + "\t");
                }
                if (str.Length > 1)
                {
                    str.Remove(str.Length - 1, 1); // \t
                }
                str.Append("\r\n");
            }

            int count = 0;
            int sum = 0;
            int chapter_sum = 0;
            int verse_sum = 0;
            int word_sum = 0;
            int letter_sum = 0;
            long value_sum = 0L;
            foreach (Chapter chapter in chapters)
            {
                count++;
                sum += count;
                chapter_sum += chapter.SortedNumber;
                verse_sum += chapter.Verses.Count;
                word_sum += chapter.WordCount;
                letter_sum += chapter.LetterCount;
                long value = m_client.CalculateValue(chapter);
                value_sum += value;

                str.Append(count + "\t");
                str.Append(chapter.Name + "\t");
                if (m_found_verses_displayed)
                {
                    int index = chapter.SortedNumber - 1;
                    if (m_matches_per_chapter != null)
                    {
                        if ((index >= 0) && (index < m_matches_per_chapter.Length))
                        {
                            int match_count = m_matches_per_chapter[index];
                            str.Append(match_count + "\t");
                        }
                    }
                }
                str.Append(chapter.SortedNumber.ToString() + "\t");
                str.Append(chapter.Verses.Count.ToString() + "\t");
                str.Append(chapter.WordCount.ToString() + "\t");
                str.Append(chapter.LetterCount.ToString() + "\t");
                str.Append(value.ToString() + "\t");
                if (numerology_system.LetterValues.Keys.Count > 0)
                {
                    foreach (char key in numerology_system.LetterValues.Keys)
                    {
                        str.Append(chapter.GetLetterFrequency(key) + "\t");
                    }
                    if (str.Length > 1)
                    {
                        str.Remove(str.Length - 1, 1); // \t
                    }
                    str.Append("\r\n");
                }
            }
            if (str.Length > 2)
            {
                str.Remove(str.Length - 2, 2);
            }

            str.Append("\r\n");
            str.AppendLine(sum + "\t" + "Sum" + "\t" + chapter_sum + "\t" + verse_sum + "\t" + word_sum + "\t" + letter_sum + "\t" + value_sum);
        }
        return str.ToString();
    }
    private string DisplayVerseInformation(List<Verse> verses)
    {
        if (m_client == null) return null;
        if (verses == null) return null;

        StringBuilder str = new StringBuilder();

        str.Append("#" + "\t" + "Number" + "\t" + "Name" + "\t" + "Chapter" + "\t" + "Verse" + "\t" + "Words" + "\t" + "Letters" + "\t" + "Value" + "\t");

        NumerologySystem numerology_system = m_client.NumerologySystem;
        if (numerology_system != null)
        {
            foreach (char key in numerology_system.LetterValues.Keys)
            {
                str.Append(key.ToString() + "\t");
            }
            str.Append("Text");
            str.Append("\r\n");

            int count = 0;
            int sum = 0;
            int verse_sum = 0;
            int chapter_sum = 0;
            int chapter_verse_sum = 0;
            int word_sum = 0;
            int letter_sum = 0;
            long value_sum = 0L;
            foreach (Verse verse in verses)
            {
                count++;
                sum += count;
                verse_sum += verse.Number;
                chapter_sum += verse.Chapter.SortedNumber;
                chapter_verse_sum += verse.NumberInChapter;
                word_sum += verse.Words.Count;
                letter_sum += verse.LetterCount;
                long value = m_client.CalculateValue(verse);
                value_sum += value;

                str.Append(count.ToString() + "\t");
                str.Append(verse.Number.ToString() + "\t");
                str.Append(verse.Chapter.Name.ToString() + "\t");
                str.Append(verse.Chapter.SortedNumber.ToString() + "\t");
                str.Append(verse.NumberInChapter.ToString() + "\t");
                str.Append(verse.Words.Count.ToString() + "\t");
                str.Append(verse.LetterCount.ToString() + "\t");
                str.Append(value.ToString() + "\t");

                foreach (char character in numerology_system.LetterValues.Keys)
                {
                    if (Constants.INDIAN_DIGITS.Contains(character)) continue;
                    if (Constants.STOPMARKS.Contains(character)) continue;
                    if (Constants.QURANMARKS.Contains(character)) continue;
                    if (Constants.OPEN_BRACKET[0] == character) continue;
                    if (Constants.CLOSE_BRACKET[0] == character) continue;
                    str.Append(verse.GetLetterFrequency(character).ToString() + "\t");
                }

                str.Append(verse.Text);

                str.Append("\r\n");
            }
            if (str.Length > 2)
            {
                str.Remove(str.Length - 2, 2);
            }

            str.Append("\r\n");
            str.AppendLine(sum + "\t" + verse_sum + "\t" + "Sum" + "\t" + chapter_sum + "\t" + chapter_verse_sum + "\t" + word_sum + "\t" + letter_sum + "\t" + value_sum);
        }
        return str.ToString();
    }
    private string DisplayWordInformation(List<Word> words)
    {
        if (words == null) return null;

        StringBuilder str = new StringBuilder();
        if (words.Count > 0)
        {
            str.Append
            (
                "Address" + "\t" +
                "Name" + "\t" +
                "Chapter" + "\t" +
                "Verse" + "\t" +
                "Word" + "\t" +
                "Text" + "\t" +
                "Transliteration" + "\t" +
                "Roots" + "\t" +
                "Meaning" + "\t" +
                "Occurrence" + "\t" +
                "Frequency" + "\t" +
                "Letters" + "\r\n"
            );

            foreach (Word word in words)
            {
                List<string> roots = word.Roots;
                StringBuilder roots_str = new StringBuilder();
                if (roots.Count > 0)
                {
                    foreach (string root in roots)
                    {
                        roots_str.Append(root + "|");
                    }
                    roots_str.Remove(roots_str.Length - 1, 1);
                }

                str.Append
                (
                    word.Address + "\t" +
                    word.Verse.Chapter.Name + "\t" +
                    word.Verse.Chapter.SortedNumber + "\t" +
                    word.Verse.NumberInChapter + "\t" +
                    word.NumberInVerse + "\t" +
                    word.Text + "\t" +
                    word.Transliteration + "\t" +
                    roots_str + "\t" +
                    word.Meaning + "\t" +
                    word.Occurrence + "\t" +
                    word.Frequency + "\t" +
                    word.Letters.Count + "\r\n"
                );
            }
        }
        return str.ToString();
    }
    private string DisplayLetterInformation(List<Letter> letters)
    {
        if (letters == null) return null;

        StringBuilder str = new StringBuilder();
        if (letters.Count > 0)
        {
            str.Append
            (
                "Address" + "\t" +
                "Name" + "\t" +
                "Chapter" + "\t" +
                "Verse" + "\t" +
                "Word" + "\t" +
                "Letter" + "\t" +
                "Text" + "\r\n"
            );

            foreach (Letter letter in letters)
            {
                str.Append
                (
                    letter.Address + "\t" +
                    letter.Word.Verse.Chapter.Name.ToString() + "\t" +
                    letter.Word.Verse.Chapter.SortedNumber.ToString() + "\t" +
                    letter.Word.Verse.NumberInChapter.ToString() + "\t" +
                    letter.Word.NumberInVerse.ToString() + "\t" +
                    letter.NumberInWord.ToString() + "\t" +
                    letter.ToString() + "\r\n"
                );
            }
        }
        return str.ToString();
    }

    private int GetPhrasePositionInRichTextBox(Phrase phrase)
    {
        if (phrase == null) return 0;

        if (m_client != null)
        {
            if (m_client.FoundVerses != null)
            {
                int char_index = 0;
                foreach (Verse verse in m_client.FoundVerses)
                {
                    if (verse != null)
                    {
                        if (phrase.Verse.Number == verse.Number)
                        {
                            return (char_index + verse.Address.Length + 1 + phrase.Position);
                        }
                        char_index += GetVerseDisplayLength(verse);
                    }
                }
            }
        }
        return -1;
    }
    private void RealignFoundMatchedToStart()
    {
        try
        {
            SearchResultTextBox.SelectionChanged -= MainTextBox_SelectionChanged;

            if (m_client != null)
            {
                if (m_found_verses_displayed)
                {
                    int start = 0;
                    // scroll to beginning to show complete verse address because in Arabic, pos=0 is after the first number :(
                    if (m_client.FoundVerses != null)
                    {
                        if (m_client.FoundVerses.Count > 0)
                        {
                            Verse verse = m_client.FoundVerses[0];
                            if (verse != null)
                            {
                                if (verse.Chapter != null)
                                {
                                    if (verse.Chapter != null)
                                    {
                                        start = verse.Chapter.SortedNumber.ToString().Length;
                                    }
                                }
                            }
                        }

                        // re-align to text start
                        if ((start >= 0) && (start < SearchResultTextBox.Text.Length))
                        {
                            SearchResultTextBox.ScrollToCaret();    // must be called first
                            SearchResultTextBox.Select(start, 0);   // must be called second
                        }
                    }
                }
            }
        }
        finally
        {
            SearchResultTextBox.SelectionChanged += MainTextBox_SelectionChanged;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region User History
    ///////////////////////////////////////////////////////////////////////////////
    private void AddSearchHistoryItem()
    {
        if (m_client != null)
        {
            if (m_client.FoundVerses != null)
            {
                if (m_client.FoundVerses.Count > 0)
                {
                    SearchHistoryItem item = new SearchHistoryItem();
                    item.SearchType = m_search_type;
                    item.NumbersResultType = m_numbers_result_type;
                    item.Text = (m_search_type == SearchType.Numbers) ? null : FindByTextTextBox.Text;
                    item.LanguageType = m_language_type;

                    if (TranslatorComboBox.SelectedItem != null)
                    {
                        item.Translation = TranslatorComboBox.SelectedItem.ToString();
                    }

                    item.Verses = new List<Verse>(m_client.FoundVerses);
                    if (m_client.FoundPhrases == null)
                    {
                        item.Phrases = null;
                    }
                    else
                    {
                        item.Phrases = new List<Phrase>(m_client.FoundPhrases);
                    }
                    item.Header = m_find_result_header;
                    m_client.AddHistoryItem(item);
                    UpdateBrowseHistoryButtons();
                }
            }
        }
    }
    private void AddBrowseHistoryItem()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Selection != null)
                {
                    BrowseHistoryItem item = new BrowseHistoryItem(m_client.Selection.Book, m_client.Selection.Scope, m_client.Selection.Indexes);
                    if (item != null)
                    {
                        m_client.AddHistoryItem(item);
                        UpdateBrowseHistoryButtons();
                    }
                }
            }
        }
    }
    private void BrowseHistoryBackwardButton_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            object item = m_client.GotoPreviousHistoryItem();
            if (item != null)
            {
                if (item is SearchHistoryItem)
                {
                    if (m_find_matches != null)
                    {
                        m_find_matches.Clear(); // to reset Matched count
                    }
                }
                else if (item is BrowseHistoryItem)
                {
                    UpdateChaptersListBox();
                }

                DisplayBrowseHistoryItem(item);
                UpdateBrowseHistoryButtons();
            }
        }

        this.AcceptButton = null;
    }
    private void BrowseHistoryForwardButton_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            object item = m_client.GotoNextHistoryItem();
            if (item != null)
            {
                if (item is SearchHistoryItem)
                {
                    if (m_find_matches != null)
                    {
                        m_find_matches.Clear(); // to reset Matched count
                    }
                }
                else if (item is BrowseHistoryItem)
                {
                    UpdateChaptersListBox();
                }

                DisplayBrowseHistoryItem(item);
                UpdateBrowseHistoryButtons();
            }
        }

        this.AcceptButton = null;
    }
    private void BrowseHistoryDeleteLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            PlayerStopLabel_Click(null, null);

            m_client.DeleteCurrentHistoryItem();
            if (m_client.HistoryItems.Count == 0) // no item to display
            {
                DisplaySelection(false);
            }
            else // there is an item to display
            {
                object item = m_client.CurrentHistoryItem;
                if (item != null)
                {
                    UpdateChaptersListBox();

                    DisplayBrowseHistoryItem(item);
                }
            }

            UpdateBrowseHistoryButtons();
        }
    }
    private void BrowseHistoryClearLabel_Click(object sender, EventArgs e)
    {
        if (MessageBox.Show(
            L[l]["Delete all browse history?"],
            Application.ProductName,
            MessageBoxButtons.YesNo,
            MessageBoxIcon.Question) == DialogResult.Yes)
        {
            if (m_client != null)
            {
                PlayerStopLabel_Click(null, null);

                m_client.ClearHistoryItems();
                DisplaySelection(false);

                FindByTextTextBox.Text = null;

                ToolTip.SetToolTip(InspectChaptersLabel, L[l]["Inspect chapters"]);
                WordsListBoxLabel.Visible = false;
                WordsListBox.Visible = false;

                UpdateChaptersListBox();

                UpdateBrowseHistoryButtons();
            }
        }
    }
    private void DisplayBrowseHistoryItem(object item)
    {
        if (m_client != null)
        {
            PlayerStopLabel_Click(null, null);

            if (item != null)
            {
                SearchHistoryItem search_history_item = item as SearchHistoryItem;
                if (search_history_item != null)
                {
                    FindByTextTextBox.Text = search_history_item.Text;
                    m_find_result_header = search_history_item.Header;
                    m_language_type = search_history_item.LanguageType;

                    TranslatorComboBox.SelectedItem = search_history_item.Translation;

                    m_client.FilterChapters = null;
                    if (search_history_item.Phrases != null)
                    {
                        m_client.FoundPhrases = new List<Phrase>(search_history_item.Phrases);
                    }
                    else
                    {
                        m_client.FoundPhrases = null;
                    }
                    m_client.FoundVerses = new List<Verse>(search_history_item.Verses);

                    if (!String.IsNullOrEmpty(search_history_item.Text))
                    {
                        FindByTextTextBox.SelectionStart = search_history_item.Text.Length;
                        DisplayFoundVerses(false, true);
                    }
                    else
                    {
                        // no NumberQuery is saved so we cannot colorize ranges
                        // so just display all verses and let user re-run search if they need colorization
                        //switch (search_history_item.NumbersResultType)
                        //{
                        //    case NumbersResultType.Letters:
                        //    case NumbersResultType.Words:
                        //    case NumbersResultType.WordRanges:
                        //    case NumbersResultType.Verses:
                        //        DisplayFoundVerses(false);
                        //        break;
                        //    case NumbersResultType.VerseRanges:
                        //        DisplayFoundVerseRanges(false);
                        //        break;
                        //    case NumbersResultType.Chapters:
                        //        DisplayFoundChapters(false);
                        //        break;
                        //    case NumbersResultType.ChapterRanges:
                        //        DisplayFoundChapterRanges(false);
                        //        break;
                        //}

                        // for now use:
                        DisplayFoundVerses(false, true);
                    }
                }
                else
                {
                    BrowseHistoryItem selection_history_item = item as BrowseHistoryItem;
                    if (selection_history_item != null)
                    {
                        m_client.Selection = new Selection(selection_history_item.Book, selection_history_item.Scope, selection_history_item.Indexes);
                        DisplaySelection(false);
                    }
                }

                //SearchResultTextBox.Focus();
                //SearchResultTextBox.Refresh();
            }
        }
    }
    private void UpdateBrowseHistoryButtons()
    {
        if (m_client != null)
        {
            if (m_client.HistoryItems != null)
            {
                BrowseHistoryBackwardButton.Enabled = (m_client.HistoryItems.Count > 0) && (m_client.HistoryItemIndex > 0);
                BrowseHistoryForwardButton.Enabled = (m_client.HistoryItems.Count >= 0) && (m_client.HistoryItemIndex < m_client.HistoryItems.Count - 1);
                BrowseHistoryDeleteLabel.Enabled = (m_client.HistoryItems.Count > 0);
                BrowseHistoryClearLabel.Enabled = (m_client.HistoryItems.Count > 0);
                BrowseHistoryClearLabel.BackColor = (m_client.HistoryItems.Count > 0) ? Color.LightCoral : SystemColors.ControlLight;
                BrowseHistoryCounterLabel.Text = (m_client.HistoryItemIndex + 1).ToString() + " / " + m_client.HistoryItems.Count.ToString();

                if (m_client.HistoryItems.Count == 0)
                {
                    SearchResultTextBox.Text = "";
                    SearchResultTextBox.Refresh();
                    GenerateSentencesLabel.Visible = false;
                    DuplicateLettersCheckBox.Visible = false;

                    m_find_result_header = "";
                    UpdateHeaderLabel();
                }
            }
        }
    }
    private void BrowseHistoryCounterLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.HistoryItems != null)
            {
                if (m_client.HistoryItems.Count > 0)
                {
                    DisplayBrowseHistoryItem(m_client.CurrentHistoryItem);
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Value Systems
    ///////////////////////////////////////////////////////////////////////////////
    private bool m_show_add_controls = false;
    private void ValueLabel_Click(object sender, EventArgs e)
    {
        int shift = (m_dpi_x == 120.0F) ? 142 : 114;

        m_show_add_controls = !m_show_add_controls;

        int pos = ValueLabel.Text.IndexOf(" ");
        string s = ValueLabel.Text.Substring(pos + 1);
        if (m_show_add_controls)
        {
            ValueLabel.Text = "-- " + s;
            ToolTip.SetToolTip(ValueLabel, L[l]["Hide value-added positions and distances"]);
            ValuePanel.Height += shift;
            ValueNavigatorPanel.Top += shift;
            LetterFrequencyPanel.Top += shift;
            LetterFrequencyPanel.Height -= shift;
        }
        else
        {
            ValueLabel.Text = "+ " + s;
            ToolTip.SetToolTip(ValueLabel, L[l]["Show value-added positions and distances"]);
            ValuePanel.Height -= shift;
            ValueNavigatorPanel.Top -= shift;
            LetterFrequencyPanel.Top -= shift;
            LetterFrequencyPanel.Height += shift;
        }
    }
    private void AddToControlCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.NumerologySystem != null)
                {
                    bool is_checked = (sender as CheckBox).Checked;

                    // Letter value modifiers
                    if (sender == AddToLetterLNumberCheckBox)
                    {
                        m_client.NumerologySystem.AddToLetterLNumber = is_checked;
                    }
                    else if (sender == AddToLetterWNumberCheckBox)
                    {
                        m_client.NumerologySystem.AddToLetterWNumber = is_checked;
                    }
                    else if (sender == AddToLetterVNumberCheckBox)
                    {
                        m_client.NumerologySystem.AddToLetterVNumber = is_checked;
                    }
                    else if (sender == AddToLetterCNumberCheckBox)
                    {
                        m_client.NumerologySystem.AddToLetterCNumber = is_checked;
                    }
                    else if (sender == AddToLetterLDistanceCheckBox)
                    {
                        m_client.NumerologySystem.AddToLetterLDistance = is_checked;
                    }
                    else if (sender == AddToLetterWDistanceCheckBox)
                    {
                        m_client.NumerologySystem.AddToLetterWDistance = is_checked;
                    }
                    else if (sender == AddToLetterVDistanceCheckBox)
                    {
                        m_client.NumerologySystem.AddToLetterVDistance = is_checked;
                    }
                    else if (sender == AddToLetterCDistanceCheckBox)
                    {
                        m_client.NumerologySystem.AddToLetterCDistance = is_checked;
                    }
                    // Word value modifiers
                    else if (sender == AddToWordWNumberCheckBox)
                    {
                        m_client.NumerologySystem.AddToWordWNumber = is_checked;
                    }
                    else if (sender == AddToWordVNumberCheckBox)
                    {
                        m_client.NumerologySystem.AddToWordVNumber = is_checked;
                    }
                    else if (sender == AddToWordCNumberCheckBox)
                    {
                        m_client.NumerologySystem.AddToWordCNumber = is_checked;
                    }
                    else if (sender == AddToWordWDistanceCheckBox)
                    {
                        m_client.NumerologySystem.AddToWordWDistance = is_checked;
                    }
                    else if (sender == AddToWordVDistanceCheckBox)
                    {
                        m_client.NumerologySystem.AddToWordVDistance = is_checked;
                    }
                    else if (sender == AddToWordCDistanceCheckBox)
                    {
                        m_client.NumerologySystem.AddToWordCDistance = is_checked;
                    }
                    // Verse value modifiers
                    else if (sender == AddToVerseVNumberCheckBox)
                    {
                        m_client.NumerologySystem.AddToVerseVNumber = is_checked;
                    }
                    else if (sender == AddToVerseCNumberCheckBox)
                    {
                        m_client.NumerologySystem.AddToVerseCNumber = is_checked;
                    }
                    else if (sender == AddToVerseVDistanceCheckBox)
                    {
                        m_client.NumerologySystem.AddToVerseVDistance = is_checked;
                    }
                    else if (sender == AddToVerseCDistanceCheckBox)
                    {
                        m_client.NumerologySystem.AddToVerseCDistance = is_checked;
                    }
                    // Chapter value modifier
                    else if (sender == AddToChapterCNumberCheckBox)
                    {
                        m_client.NumerologySystem.AddToChapterCNumber = is_checked;
                    }

                    CalculateCurrentValue();
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void AddPositionsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                m_client.NumerologySystem.AddPositions = AddPositionsCheckBox.Checked;
                EnableDisableAddToCheckBoxes();

                CalculateCurrentValue();
            }
        }
    }
    private void AddDistancesToPreviousCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                m_client.NumerologySystem.AddDistancesToPrevious = AddDistancesToPreviousCheckBox.Checked;
                EnableDisableAddToCheckBoxes();

                CalculateCurrentValue();
            }
        }
    }
    private void AddDistancesToNextCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                m_client.NumerologySystem.AddDistancesToNext = AddDistancesToNextCheckBox.Checked;
                EnableDisableAddToCheckBoxes();

                CalculateCurrentValue();
            }
        }
    }
    private void AddDistancesWithinChaptersCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.NumerologySystem != null)
                {
                    m_client.NumerologySystem.AddDistancesWithinChapters = AddDistancesWithinChaptersCheckBox.Checked;
                    if (m_client.Book != null)
                    {
                        m_client.Book.SetupDistances(m_client.NumerologySystem.AddDistancesWithinChapters);
                    }

                    CalculateCurrentValue();
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void EnableDisableAddToCheckBoxes()
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            for (int i = 0; i < 3; i++) AddToLetterLNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterWNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterVNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterCNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterLDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterWDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterVDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterCDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToWordWNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToWordVNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToWordCNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToWordWDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToWordVDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToWordCDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToVerseVNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToVerseCNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToVerseVDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToVerseCDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToChapterCNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);

            bool is_enabled = m_client.NumerologySystem.AddPositions;
            AddToLetterLNumberCheckBox.Enabled = is_enabled;
            AddToLetterWNumberCheckBox.Enabled = is_enabled;
            AddToLetterVNumberCheckBox.Enabled = is_enabled;
            AddToLetterCNumberCheckBox.Enabled = is_enabled;
            AddToWordWNumberCheckBox.Enabled = is_enabled;
            AddToWordVNumberCheckBox.Enabled = is_enabled;
            AddToWordCNumberCheckBox.Enabled = is_enabled;
            AddToVerseVNumberCheckBox.Enabled = is_enabled;
            AddToVerseCNumberCheckBox.Enabled = is_enabled;
            AddToChapterCNumberCheckBox.Enabled = is_enabled;

            is_enabled = m_client.NumerologySystem.AddDistancesToPrevious || m_client.NumerologySystem.AddDistancesToNext;
            AddToLetterLDistanceCheckBox.Enabled = is_enabled;
            AddToLetterWDistanceCheckBox.Enabled = is_enabled;
            AddToLetterVDistanceCheckBox.Enabled = is_enabled;
            AddToLetterCDistanceCheckBox.Enabled = is_enabled;
            AddToWordWDistanceCheckBox.Enabled = is_enabled;
            AddToWordVDistanceCheckBox.Enabled = is_enabled;
            AddToWordCDistanceCheckBox.Enabled = is_enabled;
            AddToVerseVDistanceCheckBox.Enabled = is_enabled;
            AddToVerseCDistanceCheckBox.Enabled = is_enabled;
        }
        finally
        {
            for (int i = 0; i < 3; i++) AddToLetterLNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterWNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterVNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterCNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterLDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterWDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterVDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToLetterCDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToWordWNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToWordVNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToWordCNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToWordWDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToWordVDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToWordCDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToVerseVNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToVerseCNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToVerseVDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToVerseCDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
            for (int i = 0; i < 3; i++) AddToChapterCNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);

            this.Cursor = Cursors.Default;
        }
    }

    private void LoadNumerologySystem(string numerology_system_name)
    {
        if (m_client != null)
        {
            m_client.LoadNumerologySystem(numerology_system_name);

            if (m_client.NumerologySystem != null)
            {
                StringBuilder str = new StringBuilder();
                foreach (char c in m_client.NumerologySystem.Keys)
                {
                    str.AppendLine(c.ToString() + "\t" + m_client.NumerologySystem[c].ToString());
                }
                ToolTip.SetToolTip(EditNumerologySystemLabel, str.ToString());

                UpdateNumerologySystem();
            }
        }
    }
    private void UpdateNumerologySystem()
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                // copy from gui controls to client
                m_client.NumerologySystem.AddToLetterLNumber = AddToLetterLNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterWNumber = AddToLetterWNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterVNumber = AddToLetterVNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterCNumber = AddToLetterCNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterLDistance = AddToLetterLDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterWDistance = AddToLetterWDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterVDistance = AddToLetterVDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterCDistance = AddToLetterCDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToWordWNumber = AddToWordWNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToWordVNumber = AddToWordVNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToWordCNumber = AddToWordCNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToWordWDistance = AddToWordWDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToWordVDistance = AddToWordVDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToWordCDistance = AddToWordCDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToVerseVNumber = AddToVerseVNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToVerseCNumber = AddToVerseCNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToVerseVDistance = AddToVerseVDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToVerseCDistance = AddToVerseCDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToChapterCNumber = AddToChapterCNumberCheckBox.Checked;

                m_client.NumerologySystem.AddDistancesToPrevious = AddDistancesToPreviousCheckBox.Checked;
                m_client.NumerologySystem.AddDistancesToNext = AddDistancesToNextCheckBox.Checked;
                m_client.NumerologySystem.AddDistancesWithinChapters = AddDistancesWithinChaptersCheckBox.Checked;
                if (m_client.Book != null)
                {
                    m_client.Book.SetupDistances(m_client.NumerologySystem.AddDistancesWithinChapters);
                }
            }
        }
    }
    private void UpdateNumerologySystemControls()
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                try
                {
                    for (int i = 0; i < 3; i++) AddToLetterLNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterWNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterVNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterCNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterLDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterWDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterVDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterCDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToWordWNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToWordVNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToWordCNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToWordWDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToWordVDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToWordCDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToVerseVNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToVerseCNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToVerseVDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToVerseCDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToChapterCNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddPositionsCheckBox.CheckedChanged -= new EventHandler(AddPositionsCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddDistancesToPreviousCheckBox.CheckedChanged -= new EventHandler(AddDistancesToPreviousCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddDistancesToNextCheckBox.CheckedChanged -= new EventHandler(AddDistancesToNextCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddDistancesWithinChaptersCheckBox.CheckedChanged -= new EventHandler(AddDistancesWithinChaptersCheckBox_CheckedChanged);

                    // copy from client to gui controls
                    AddToLetterLNumberCheckBox.Checked = m_client.NumerologySystem.AddToLetterLNumber;
                    AddToLetterWNumberCheckBox.Checked = m_client.NumerologySystem.AddToLetterWNumber;
                    AddToLetterVNumberCheckBox.Checked = m_client.NumerologySystem.AddToLetterVNumber;
                    AddToLetterCNumberCheckBox.Checked = m_client.NumerologySystem.AddToLetterCNumber;
                    AddToLetterLDistanceCheckBox.Checked = m_client.NumerologySystem.AddToLetterLDistance;
                    AddToLetterWDistanceCheckBox.Checked = m_client.NumerologySystem.AddToLetterWDistance;
                    AddToLetterVDistanceCheckBox.Checked = m_client.NumerologySystem.AddToLetterVDistance;
                    AddToLetterCDistanceCheckBox.Checked = m_client.NumerologySystem.AddToLetterCDistance;
                    AddToWordWNumberCheckBox.Checked = m_client.NumerologySystem.AddToWordWNumber;
                    AddToWordVNumberCheckBox.Checked = m_client.NumerologySystem.AddToWordVNumber;
                    AddToWordCNumberCheckBox.Checked = m_client.NumerologySystem.AddToWordCNumber;
                    AddToWordWDistanceCheckBox.Checked = m_client.NumerologySystem.AddToWordWDistance;
                    AddToWordVDistanceCheckBox.Checked = m_client.NumerologySystem.AddToWordVDistance;
                    AddToWordCDistanceCheckBox.Checked = m_client.NumerologySystem.AddToWordCDistance;
                    AddToVerseVNumberCheckBox.Checked = m_client.NumerologySystem.AddToVerseVNumber;
                    AddToVerseCNumberCheckBox.Checked = m_client.NumerologySystem.AddToVerseCNumber;
                    AddToVerseVDistanceCheckBox.Checked = m_client.NumerologySystem.AddToVerseVDistance;
                    AddToVerseCDistanceCheckBox.Checked = m_client.NumerologySystem.AddToVerseCDistance;
                    AddToChapterCNumberCheckBox.Checked = m_client.NumerologySystem.AddToChapterCNumber;
                    AddPositionsCheckBox.Checked = m_client.NumerologySystem.AddPositions;
                    AddDistancesToPreviousCheckBox.Checked = m_client.NumerologySystem.AddDistancesToPrevious;
                    AddDistancesToNextCheckBox.Checked = m_client.NumerologySystem.AddDistancesToNext;
                    AddDistancesWithinChaptersCheckBox.Checked = m_client.NumerologySystem.AddDistancesWithinChapters;
                }
                finally
                {
                    AddToLetterLNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterWNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterVNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterCNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterLDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterWDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterVDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterCDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToWordWNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToWordVNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToWordCNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToWordWDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToWordVDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToWordCDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToVerseVNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToVerseCNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToVerseVDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToVerseCDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToChapterCNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddPositionsCheckBox.CheckedChanged += new EventHandler(AddPositionsCheckBox_CheckedChanged);
                    AddDistancesToPreviousCheckBox.CheckedChanged += new EventHandler(AddDistancesToPreviousCheckBox_CheckedChanged);
                    AddDistancesToNextCheckBox.CheckedChanged += new EventHandler(AddDistancesToNextCheckBox_CheckedChanged);
                    AddDistancesWithinChaptersCheckBox.CheckedChanged += new EventHandler(AddDistancesWithinChaptersCheckBox_CheckedChanged);
                }
            }
        }
    }
    private void UpdateNumerologySystemComboBoxs()
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                try
                {
                    for (int i = 0; i < 3; i++) TextModeComboBox.SelectedIndexChanged -= new EventHandler(TextModeComboBox_SelectedIndexChanged);
                    for (int i = 0; i < 3; i++) NumerologySystemComboBox.SelectedIndexChanged -= new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);

                    TextModeComboBox.SelectedItem = m_client.NumerologySystem.TextMode;
                    PopulateNumerologySystemComboBox();

                    for (int i = 0; i < 3; i++) NumerologySystemComboBox.SelectedIndexChanged -= new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);
                    NumerologySystemComboBox.SelectedItem = m_client.NumerologySystem.LetterOrder + "_" + m_client.NumerologySystem.LetterValue;

                    UpdateKeyboard(m_client.NumerologySystem.TextMode);
                }
                finally
                {
                    TextModeComboBox.SelectedIndexChanged += new EventHandler(TextModeComboBox_SelectedIndexChanged);
                    NumerologySystemComboBox.SelectedIndexChanged += new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Value Calculations
    ///////////////////////////////////////////////////////////////////////////////
    private void PopulateTextModeComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) TextModeComboBox.SelectedIndexChanged -= new EventHandler(TextModeComboBox_SelectedIndexChanged);

            if (m_client != null)
            {
                if (m_client.LoadedNumerologySystems != null)
                {
                    TextModeComboBox.BeginUpdate();

                    TextModeComboBox.Items.Clear();
                    foreach (NumerologySystem numerology_system in m_client.LoadedNumerologySystems.Values)
                    {
                        string[] parts = numerology_system.Name.Split('_');
                        if (parts != null)
                        {
                            if (parts.Length == 3)
                            {
                                string text_mode = parts[0];
                                if (!TextModeComboBox.Items.Contains(text_mode))
                                {
                                    TextModeComboBox.Items.Add(text_mode);
                                }
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            TextModeComboBox.EndUpdate();
            TextModeComboBox.SelectedIndexChanged += new EventHandler(TextModeComboBox_SelectedIndexChanged);
        }
    }
    private void PopulateNumerologySystemComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) NumerologySystemComboBox.SelectedIndexChanged -= new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);

            if (m_client != null)
            {
                if (m_client.LoadedNumerologySystems != null)
                {
                    NumerologySystemComboBox.BeginUpdate();

                    if (TextModeComboBox.SelectedItem != null)
                    {
                        string text_mode = TextModeComboBox.SelectedItem.ToString();

                        NumerologySystemComboBox.Items.Clear();
                        foreach (NumerologySystem numerology_system in m_client.LoadedNumerologySystems.Values)
                        {
                            string[] parts = numerology_system.Name.Split('_');
                            if (parts != null)
                            {
                                if (parts.Length == 3)
                                {
                                    if (parts[0] == text_mode)
                                    {
                                        string valuation_system = parts[1] + "_" + parts[2];
                                        if (!NumerologySystemComboBox.Items.Contains(valuation_system))
                                        {
                                            NumerologySystemComboBox.Items.Add(valuation_system);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            NumerologySystemComboBox.EndUpdate();
            NumerologySystemComboBox.SelectedIndexChanged += new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);
        }
    }
    private void TextModeComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (m_client != null)
            {
                if (m_client.NumerologySystem != null)
                {
                    string backup_valuation_system = null;
                    if (NumerologySystemComboBox.SelectedItem != null)
                    {
                        backup_valuation_system = NumerologySystemComboBox.SelectedItem.ToString();
                    }

                    BuildSimplifiedBookAndDisplaySelection();

                    PopulateNumerologySystemComboBox();
                    if (NumerologySystemComboBox.Items.Count > 0)
                    {
                        if (backup_valuation_system != null)
                        {
                            if (NumerologySystemComboBox.Items.Contains(backup_valuation_system))
                            {
                                NumerologySystemComboBox.SelectedItem = backup_valuation_system;
                            }
                            else
                            {
                                NumerologySystemComboBox.SelectedIndex = 0;
                            }
                        }
                        else
                        {
                            NumerologySystemComboBox.SelectedIndex = 0;
                        }
                    }
                    else
                    {
                        NumerologySystemComboBox.SelectedIndex = -1;
                    }
                }
            }
        }
        finally
        {
            UpdateKeyboard(m_client.NumerologySystem.TextMode);
            UpdateTextModeOptions();
        }
    }
    private void UpdateTextModeOptions()
    {
        if (TextModeComboBox.SelectedItem != null)
        {
            try
            {
                for (int i = 0; i < 3; i++) WithBismAllahCheckBox.CheckedChanged -= new EventHandler(WithBismAllahCheckBox_CheckedChanged);
                for (int i = 0; i < 3; i++) WawAsWordCheckBox.CheckedChanged -= new EventHandler(WawAsWordCheckBox_CheckedChanged);
                for (int i = 0; i < 3; i++) ShaddaAsLetterCheckBox.CheckedChanged -= new EventHandler(ShaddaAsLetterCheckBox_CheckedChanged);

                UpdateEmlaaeiLabel();

                string text_mode = TextModeComboBox.SelectedItem.ToString();
                if (text_mode == "Original")
                {
                    m_with_bism_Allah = true;
                    m_waw_as_word = false;
                    m_shadda_as_letter = false;
                }
                WithBismAllahCheckBox.Checked = m_with_bism_Allah;
                WawAsWordCheckBox.Checked = m_waw_as_word;
                ShaddaAsLetterCheckBox.Checked = m_shadda_as_letter;

                WithBismAllahCheckBox.Enabled = (text_mode != "Original");
                WawAsWordCheckBox.Enabled = (text_mode != "Original");
                ShaddaAsLetterCheckBox.Enabled = (text_mode != "Original");

                WithBismAllahCheckBox.Refresh();
                WawAsWordCheckBox.Refresh();
                ShaddaAsLetterCheckBox.Refresh();
            }
            finally
            {
                WithBismAllahCheckBox.CheckedChanged += new EventHandler(WithBismAllahCheckBox_CheckedChanged);
                WawAsWordCheckBox.CheckedChanged += new EventHandler(WawAsWordCheckBox_CheckedChanged);
                ShaddaAsLetterCheckBox.CheckedChanged += new EventHandler(ShaddaAsLetterCheckBox_CheckedChanged);
            }
        }
    }
    private void TextModeComboBox_DropDown(object sender, EventArgs e)
    {
        TextModeComboBox.DropDownHeight = StatisticsGroupBox.Height - TextModeComboBox.Top - TextModeComboBox.Height - 1;
    }
    private bool m_emlaaei_text = false;
    private bool m_with_bism_Allah = true;
    private bool m_waw_as_word = false;
    private bool m_shadda_as_letter = false;
    private void EmlaaeiTextLabel_Click(object sender, EventArgs e)
    {
        m_emlaaei_text = !m_emlaaei_text;
        BuildSimplifiedBookAndDisplaySelection();
        UpdateEmlaaeiLabel();
    }
    private void UpdateEmlaaeiLabel()
    {
        if (m_emlaaei_text)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "stop.png"))
            {
                EmlaaeiTextLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "stop.png");
                ToolTip.SetToolTip(EmlaaeiTextLabel, L[l]["Emlaaei Text"]);
            }
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "go.png"))
            {
                EmlaaeiTextLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "go.png");
                ToolTip.SetToolTip(EmlaaeiTextLabel, L[l]["Uthmani Text"]);
            }
        }

        FindByTextRootSearchTypeLabel.Enabled = !m_emlaaei_text;
        m_text_search_type = TextSearchType.Exact;
        RelatedWordsButton.Enabled = !m_emlaaei_text;
    }
    private void WithBismAllahCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_with_bism_Allah = WithBismAllahCheckBox.Checked;
        BuildSimplifiedBookAndDisplaySelection();
    }
    private void WawAsWordCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_waw_as_word = WawAsWordCheckBox.Checked;
        BuildSimplifiedBookAndDisplaySelection();
    }
    private void ShaddaAsLetterCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_shadda_as_letter = ShaddaAsLetterCheckBox.Checked;
        BuildSimplifiedBookAndDisplaySelection();
    }
    private void BuildSimplifiedBookAndDisplaySelection()
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (TextModeComboBox.SelectedItem != null)
            {
                string text_mode = TextModeComboBox.SelectedItem.ToString();

                if (m_client != null)
                {
                    if (m_client.Book != null)
                    {
                        //// ALWAYS rebuild book to support dynamic editing of SimplificationRules
                        //// uncomment to ONLY rebuild on changes to these variables
                        ////if ((m_client.Book.TextMode != text_mode) ||
                        ////    (m_client.Book.WithBismAllah != m_with_bism_Allah) ||
                        ////    (m_client.Book.WawAsWord != m_waw_as_word) ||
                        ////    (m_client.Book.ShaddaAsLetter != m_shadda_as_letter)
                        ////   )
                        {
                            if (text_mode == "Original")
                            {
                                m_with_bism_Allah = true;
                                m_waw_as_word = false;
                                m_shadda_as_letter = false;
                            }

                            m_client.BuildSimplifiedBook(text_mode, m_with_bism_Allah, m_waw_as_word, m_shadda_as_letter, m_emlaaei_text);

                            bool backup_found_verses_displayed = m_found_verses_displayed;

                            if ((Chapter.SortMethod == ChapterSortMethod.ByCompilation) && (Chapter.SortOrder == ChapterSortOrder.Ascending))
                            {
                                DisplaySelection(false);
                            }
                            else
                            {
                                // book is already created in Compilation Ascending order
                                Chapter.SortMethod = ChapterSortMethod.ByCompilation;
                                Chapter.SortOrder = ChapterSortOrder.Ascending;
                                Chapter.PinChapter1 = false;
                                m_chapter_sort_method = Chapter.SortMethod;
                                m_chapter_sort_order = Chapter.SortOrder;
                                m_pin_chapter1 = Chapter.PinChapter1;
                                UpdateChapterSortControls();
                                DisplaySortedChapters();
                            }

                            // re-display search result if that was shown when text_mode was changed
                            if (backup_found_verses_displayed)
                            {
                                DisplayFoundVerses(false, false);

                                //SearchResultTextBox.Focus();
                                //SearchResultTextBox.Refresh();
                            }

                            if (text_mode == "Original")
                            {
                                ApplyFont(m_quran_font);
                                FontLabel.Enabled = true;
                            }
                            else
                            {
                                ApplyFont("Courier New", 12.0F);
                                FontLabel.Enabled = false;
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void NumerologySystemComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            for (int i = 0; i < 3; i++) NumerologySystemComboBox.SelectedIndexChanged -= new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.NumerologySystem != null)
                    {
                        if (TextModeComboBox.SelectedItem != null)
                        {
                            if (NumerologySystemComboBox.SelectedItem != null)
                            {
                                string text_mode = TextModeComboBox.SelectedItem.ToString();
                                string valuation_system = NumerologySystemComboBox.SelectedItem.ToString();
                                string numerology_system_name = text_mode + "_" + valuation_system;

                                LoadNumerologySystem(numerology_system_name);

                                CalculateCurrentValue();

                                //BuildLetterFrequencies();
                                //DisplayLetterFrequencies();

                                // re-sort chapters if sorted by Value
                                if (Chapter.SortMethod == ChapterSortMethod.ByValue)
                                {
                                    if (m_client.Book != null)
                                    {
                                        m_client.Book.SortChapters(m_chapter_sort_method, m_chapter_sort_order, m_pin_chapter1);

                                        // display chapters in new order
                                        DisplaySortedChapters();
                                    }
                                }

                                if (m_golden_ratio_scope != GoldenRatioScope.None)
                                {
                                    if (m_golden_ratio_type == GoldenRatioType.Value)
                                    {
                                        if (text_mode == "Original")
                                        {
                                            ColorizeGoldenRatiosInOriginalText();
                                        }
                                        else
                                        {
                                            ColorizeGoldenRatiosInSimplifiedText();
                                        }
                                    }
                                }

                                RedrawImage();

                                switch (m_search_type)
                                {
                                    case SearchType.Text: { this.AcceptButton = FindByTextButton; break; }
                                    case SearchType.Numbers: { this.AcceptButton = FindByNumbersButton; break; }
                                    case SearchType.Similarity: { this.AcceptButton = FindBySimilarityButton; break; }
                                    case SearchType.Frequency: { this.AcceptButton = FindByFrequencyButton; break; }
                                    default: { this.AcceptButton = FindByTextButton; break; }
                                }
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            NumerologySystemComboBox.SelectedIndexChanged += new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);
            this.Cursor = Cursors.Default;
        }
    }
    private void NumerologySystemComboBox_DropDown(object sender, EventArgs e)
    {
        NumerologySystemComboBox.DropDownHeight = StatisticsGroupBox.Height - NumerologySystemComboBox.Top - NumerologySystemComboBox.Height - 1;
        //NumerologySystemComboBox.DropDownWidth = StatisticsGroupBox.Width - NumerologySystemComboBox.Left - 1;
    }
    private void EditNumerologySystemLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                // display the NumerologySystem file for live editing using ISubscriber
                string filename = Globals.VALUES_FOLDER + "/" + m_client.NumerologySystem.Name + ".txt";
                FileHelper.DisplayFile(filename);
            }
        }
        NumerologySystemComboBox.Focus();
    }

    private bool m_user_text_mode = false;
    private List<Verse> m_current_verses = null;
    private Letter m_current_start_letter = null;
    private Letter m_current_end_letter = null;
    private void CalculateCurrentValue()
    {
        if (m_active_textbox != null)
        {
            if (m_client != null)
            {
                CalculateCurrentText();
                if (!String.IsNullOrEmpty(m_current_text))
                {
                    if (m_user_text_mode)
                    {
                        if (UserTextTextBox.SelectionLength == 0) // get text at current line
                        {
                            CalculateUserTextValue(m_caret_position);
                        }
                        else // get current selected text
                        {
                            m_current_text = UserTextTextBox.SelectedText;
                        }
                        CalculateValueAndDisplayFactors(m_current_text);
                    }
                    else
                    {
                        if (m_selection_mode)
                        {
                            CalculateAndDisplayCounts();
                            CalculateValueAndDisplayFactors();
                        }
                        else // cursor inside line OR some text is highlighted
                        {
                            if (m_active_textbox.SelectionLength == 0) // cursor inside line
                            {
                                if (m_translation_readonly)
                                {
                                    Verse verse = GetCurrentVerse();
                                    if (verse != null)
                                    {
                                        if (m_total_chapter_counts)
                                        {
                                            CalculateAndDisplayCounts();
                                        }
                                        else
                                        {
                                            CalculateAndDisplayCounts(verse);
                                        }
                                        CalculateValueAndDisplayFactors(verse);
                                    }
                                }
                                else // edit mode so user can paste any text they like to calculate its value
                                {
                                    CalculateValueAndDisplayFactors(m_current_text);
                                }
                            }
                            else // some text is highlighted
                            {
                                CalculateSelectedTextValue();
                            }
                        }
                    }
                }
            }
        }
    }
    private void CalculateCurrentText()
    {
        if (m_active_textbox != null)
        {
            if (m_user_text_mode)
            {
                if (UserTextTextBox.SelectionLength == 0) // get text at current line
                {
                    CalculateUserTextValue(m_caret_position);
                }
                else // get current selected text
                {
                    m_current_text = UserTextTextBox.SelectedText;
                }
            }
            else
            {
                if (m_selection_mode)
                {
                    m_current_text = m_active_textbox.Text;
                }
                else
                {
                    if (m_active_textbox.SelectionLength == 0) // get text at current line
                    {
                        Verse verse = GetCurrentVerse();
                        if (verse != null)
                        {
                            m_current_text = verse.Text;
                        }
                        else
                        {
                            m_current_text = "";
                        }
                    }
                    else // get current selected text
                    {
                        m_current_text = m_active_textbox.SelectedText;
                    }
                }

                if (!String.IsNullOrEmpty(m_current_text))
                {
                    m_current_text = RemoveVerseAddresses(m_current_text);
                    m_current_text = RemoveVerseEndMarks(m_current_text);
                    m_current_text = m_current_text.Trim();
                    m_current_text = m_current_text.Replace("\n", "\r\n");
                }
            }
        }
    }
    private void CalculateSelectedTextValue()
    {
        if (m_active_textbox != null)
        {
            if (m_client != null)
            {
                string selected_text = m_active_textbox.SelectedText;

                int first_char = m_active_textbox.SelectionStart;
                int last_char = m_active_textbox.SelectionStart + m_active_textbox.SelectionLength - 1;

                // skip any \n at beginning of selected text
                // skip any Endmark at beginning of selected text
                while (
                       (selected_text.Length > 0) &&
                        (
                          (selected_text[0] == '\n') ||
                          (selected_text[0] == '\r') ||
                          (selected_text[0] == '\t') ||
                          (selected_text[0] == '_') ||
                          (selected_text[0] == ' ') ||
                          (selected_text[0] == Constants.OPEN_BRACKET[0]) ||
                          (selected_text[0] == Constants.CLOSE_BRACKET[0]) ||
                          Constants.INDIAN_DIGITS.Contains(selected_text[0]) ||
                          Constants.STOPMARKS.Contains(selected_text[0]) ||
                          Constants.QURANMARKS.Contains(selected_text[0])
                        )
                      )
                {
                    selected_text = selected_text.Remove(0, 1);
                    first_char++;
                }

                // skip any \n at end of selected text
                // skip any Endmark at end of selected text
                while (
                       (selected_text.Length > 0) &&
                        (
                          (selected_text[selected_text.Length - 1] == '\n') ||
                          (selected_text[selected_text.Length - 1] == '\r') ||
                          (selected_text[selected_text.Length - 1] == '\t') ||
                          (selected_text[selected_text.Length - 1] == '_') ||
                          (selected_text[selected_text.Length - 1] == ' ') ||
                          (selected_text[selected_text.Length - 1] == Constants.OPEN_BRACKET[0]) ||
                          (selected_text[selected_text.Length - 1] == Constants.CLOSE_BRACKET[0]) ||
                          (selected_text[selected_text.Length - 1] == ' ') ||
                          Constants.INDIAN_DIGITS.Contains(selected_text[selected_text.Length - 1]) ||
                          Constants.STOPMARKS.Contains(selected_text[selected_text.Length - 1]) ||
                          Constants.QURANMARKS.Contains(selected_text[selected_text.Length - 1])
                        )
                      )
                {
                    selected_text = selected_text.Remove(selected_text.Length - 1);
                    last_char--;
                }

                m_current_verses = new List<Verse>();
                Verse first_verse = GetVerseAtChar(first_char);
                if (first_verse != null)
                {
                    Verse last_verse = GetVerseAtChar(last_char);
                    if (last_verse != null)
                    {
                        List<Verse> verses = null;
                        if (m_found_verses_displayed)
                        {
                            verses = m_client.FoundVerses;
                        }
                        else
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }

                        if (verses != null)
                        {
                            int first_verse_index = GetVerseIndex(first_verse);
                            int last_verse_index = GetVerseIndex(last_verse);
                            for (int i = first_verse_index; i <= last_verse_index; i++)
                            {
                                m_current_verses.Add(verses[i]);
                            }

                            m_current_start_letter = GetLetterAtChar(first_char);
                            if (m_current_start_letter != null)
                            {
                                m_current_end_letter = GetLetterAtChar(last_char);
                                if (m_current_end_letter != null)
                                {
                                    // calculate and display verse_number_sum, word_number_sum, letter_number_sum
                                    CalculateAndDisplayCounts(m_current_verses, m_current_start_letter, m_current_end_letter);

                                    // calculate Letters value
                                    CalculateValueAndDisplayFactors(m_current_verses, m_current_start_letter, m_current_end_letter);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    private string RemoveVerseAddresses(string text)
    {
        if (string.IsNullOrEmpty(text)) return null;

        string[] lines = text.Split('\n');
        StringBuilder str = new StringBuilder();
        foreach (string line in lines)
        {
            if (line.Length > 0)
            {
                string[] line_parts = line.Split('\t'); // (TAB delimited)
                if (line_parts.Length > 1) // has address
                {
                    str.Append(line_parts[1] + "\n");  // remove verse address
                }
                else if (line_parts.Length > 0)
                {
                    str.Append(line_parts[0] + "\n");  // leave it as it is
                }
            }
        }
        if (str.Length > 1)
        {
            str.Remove(str.Length - 1, 1);
        }
        return str.ToString();
    }
    private string RemoveVerseEndMarks(string text)
    {
        // RTL script misplaces brackets
        return text; // for now

        //if (string.IsNullOrEmpty(text)) return null;
        //while (text.Contains(Verse.OPEN_BRACKET) || text.Contains(Verse.CLOSE_BRACKET))
        //{
        //    int start = text.IndexOf(Verse.OPEN_BRACKET);
        //    int end = text.IndexOf(Verse.CLOSE_BRACKET);
        //    if ((start >= 0) && (end >= 0))
        //    {
        //        if (start < end)
        //        {
        //            text = text.Remove(start, (end - start) + 1); // remove space after it
        //        }
        //        else // Arabic script misplaces brackets
        //        {
        //            text = text.Remove(end, (start - end) + 1); // remove space after it
        //        }
        //    }
        //}
        //return text;
    }

    // used for non-Quran text
    private void CalculateValueAndDisplayFactors(string user_text)
    {
        if (m_client != null)
        {
            long value = m_client.CalculateValueUserText(user_text);
            FactorizeValue(value, false);
        }
    }
    // used for Quran text only
    private void CalculateValueAndDisplayFactors(Verse verse)
    {
        if (m_client != null)
        {
            long value = m_client.CalculateValue(verse);
            FactorizeValue(value, false);
        }
    }
    private void CalculateValueAndDisplayFactors()
    {
        if (m_client != null)
        {
            List<Verse> verses = null;

            if (m_found_verses_displayed)
            {
                verses = m_client.FoundVerses;
            }
            else
            {
                if (m_client.Selection != null)
                {
                    if (m_client.Selection.Verses != null)
                    {
                        verses = m_client.Selection.Verses;
                    }
                }
            }

            long value = m_client.CalculateValue(verses);
            FactorizeValue(value, false);
        }
    }
    private void CalculateValueAndDisplayFactors(Chapter chapter)
    {
        if (m_client != null)
        {
            long value = m_client.CalculateValue(chapter);
            FactorizeValue(value, false);
        }
    }
    private void CalculateValueAndDisplayFactors(List<Verse> verses, Letter start_letter, Letter end_letter)
    {
        if (m_client != null)
        {
            long value = m_client.CalculateValue(verses, start_letter, end_letter);
            FactorizeValue(value, false);
        }
    }

    private void ValueTextBox_TextChanged(object sender, EventArgs e)
    {
        //int digits = Numbers.DigitCount(ValueTextBox.Text, m_radix);
        //ValueInspectLabel.Text = digits.ToString();

        int digit_sum = Numbers.DigitSum(ValueTextBox.Text);
        DigitSumTextBox.Text = digit_sum.ToString();
        DigitSumTextBox.ForeColor = Numbers.GetNumberTypeColor(digit_sum);
        DigitSumTextBox.Refresh();

        int digital_root = Numbers.DigitalRoot(ValueTextBox.Text);
        DigitalRootTextBox.Text = digital_root.ToString();
        DigitalRootTextBox.ForeColor = Numbers.GetNumberTypeColor(digital_root);
        DigitalRootTextBox.Refresh();
    }
    private void ValueTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (ModifierKeys == Keys.Control)
        {
            if (e.KeyCode == Keys.A)
            {
                if (sender is TextBoxBase)
                {
                    (sender as TextBoxBase).SelectAll();
                }
            }
        }
        else if (e.KeyCode == Keys.Up)
        {
            IncrementValue();
        }
        else if (e.KeyCode == Keys.Down)
        {
            DecrementValue();
        }
        else if (e.KeyCode == Keys.Enter)
        {
            CalculateExpression();
        }
        else
        {
            ValueTextBox.ForeColor = Color.DarkGray;
        }
    }
    private void IncrementValue()
    {
        long value = 0L;
        if (long.TryParse(ValueTextBox.Text, out value))
        {
            if (value < long.MaxValue) value++;
            ValueTextBox.Text = value.ToString();
            FactorizeValue(value, true);
            ValueLabel.Text = (m_show_add_controls ? "-- " : "+ ") + "↑";
        }
    }
    private void DecrementValue()
    {
        long value = 0L;
        if (long.TryParse(ValueTextBox.Text, out value))
        {
            if (value > 0) value--;
            ValueTextBox.Text = value.ToString();
            FactorizeValue(value, true);
            ValueLabel.Text = (m_show_add_controls ? "-- " : "+ ") + "↓";
        }
    }
    private void CalculateExpression()
    {
        if (m_client != null)
        {
            string expression = ValueTextBox.Text;

            long value = 0L;
            if (long.TryParse(expression, out value))
            {
                m_double_value = (double)value;
                FactorizeValue(value, true);
                ValueLabel.Text = (m_show_add_controls ? "-- " : "+ ") + L[l]["Number"];
            }
            else if (expression.IsArabic() || ((m_radix <= 10) && expression.IsEnglish()))
            {
                m_double_value = m_client.CalculateValueUserText(expression);
                value = (long)Math.Round(m_double_value);
                FactorizeValue(value, true); // direct text enty
                ValueLabel.Text = (m_show_add_controls ? "-- " : "+ ") + L[l]["Text"];
            }
            else if ((m_radix == 10) && (expression.ToUpper().ContainsInside("C")))
            {
                string[] parts = expression.ToUpper().Split('C');
                if (parts.Length == 2)
                {
                    int n = 0; int.TryParse(parts[0], out n);
                    int k = 0; int.TryParse(parts[1], out k);
                    BigInteger combinations = Numbers.NChooseK(n, k);
                    ValueTextBox.Text = combinations.ToString();
                    FactorizeValue((long)combinations, true);
                    ValueLabel.Text = (m_show_add_controls ? "-- " : "+ ") + L[l]["nCk"];
                }
            }
            else
            {
                m_double_value = DoCalculateExpression(expression, m_radix);
                value = (long)Math.Round(m_double_value);
                FactorizeValue(value, true);
                ValueLabel.Text = (m_show_add_controls ? "-- " : "+ ") + L[l]["Math"];
            }

            // if result has fraction, display it as is
            // PrimeFactorsTextBox_DoubleClick will toggle it back to long
            if (m_double_value != value)
            {
                PrimeFactorsTextBox.Text = m_double_value.ToString();
            }
        }
    }
    private double m_double_value = 0.0D;
    private string CalculateExpression(string expression, long radix)
    {
        try
        {
            return Evaluator.Evaluate(expression, radix);
        }
        catch
        {
            return expression;
        }
    }
    private double DoCalculateExpression(string expression, long radix)
    {
        double result = 0D;
        if (m_client != null)
        {
            try
            {
                result = Radix.Decode(expression, radix);
                this.ToolTip.SetToolTip(this.ValueTextBox, result.ToString());
            }
            catch // if expression
            {
                string text = CalculateExpression(expression, radix);
                this.ToolTip.SetToolTip(this.ValueTextBox, text); // display the decimal expansion

                try
                {
                    result = double.Parse(text);
                }
                catch
                {
                    try
                    {
                        result = m_client.CalculateValueUserText(expression);
                    }
                    catch // text
                    {
                        //result = m_client.CalculateValue(expression);
                    }
                }
            }
        }
        return result;
    }
    private void FactorizeValue(long value, bool overwrite)
    {
        try
        {
            DigitSumTextBox.Text = "";
            DigitalRootTextBox.Text = "";
            PrimeFactorsTextBox.Text = "";
            NthNumberTextBox.Text = "";
            NthAdditiveNumberTextBox.Text = "";
            NthNonAdditiveNumberTextBox.Text = "";
            SquareSumTextBox.Text = "";
            SquareDiffTextBox.Text = "";
            Nth4nPlus1NumberTextBox.Text = "";
            PCIndexChainL2RTextBox.Text = "";
            PCIndexChainR2LTextBox.Text = "";
            CPIndexChainL2RTextBox.Text = "";
            CPIndexChainR2LTextBox.Text = "";
            IndexChainLengthTextBox.Text = "";
            DigitSumTextBox.Refresh();
            DigitalRootTextBox.Refresh();
            PrimeFactorsTextBox.Refresh();
            NthNumberTextBox.Refresh();
            NthAdditiveNumberTextBox.Refresh();
            NthNonAdditiveNumberTextBox.Refresh();
            SquareSumTextBox.Refresh();
            SquareDiffTextBox.Refresh();
            NumberKindIndexTextBox.Text = "";
            NumberKindIndexTextBox.Refresh();
            SumOfDivisorsTextBox.Text = "";
            SumOfDivisorsTextBox.Refresh();
            SumOfProperDivisorsTextBox.Text = "";
            SumOfProperDivisorsTextBox.Refresh();
            PCIndexChainL2RTextBox.Refresh();
            PCIndexChainR2LTextBox.Refresh();
            CPIndexChainL2RTextBox.Refresh();
            CPIndexChainR2LTextBox.Refresh();
            IndexChainLengthTextBox.Refresh();

            // if there is a math expression, add to it, don't overwrite it
            if (!overwrite &&
                 (
                   (ValueTextBox.Text.EndsWith("+")) ||
                   (ValueTextBox.Text.EndsWith("-")) ||
                   (ValueTextBox.Text.EndsWith("*")) ||
                   (ValueTextBox.Text.EndsWith("/")) ||
                   (ValueTextBox.Text.EndsWith("^")) ||
                   (ValueTextBox.Text.EndsWith("%"))
                 )
               )
            {
                ValueTextBox.Text += Radix.Encode(value, m_radix);

                ValueTextBox.SelectionLength = 0;
                ValueTextBox.SelectionStart = ValueTextBox.Text.Length;
                // focus so user can continue with +, -, *, /, ^, %, Enter
                ValueTextBox.Focus();
            }
            else
            {
                ValueTextBox.Text = Radix.Encode(value, m_radix);
                ValueTextBox.ForeColor = Numbers.GetNumberTypeColor(value);
                ValueTextBox.SelectionStart = ValueTextBox.Text.Length;
                ValueTextBox.SelectionLength = 0;
                ValueTextBox.Refresh();

                DecimalValueTextBox.Text = value.ToString();
                DecimalValueTextBox.Visible = (m_radix != DEFAULT_RADIX);
                DecimalValueTextBox.ForeColor = Numbers.GetNumberTypeColor(value);
                DecimalValueTextBox.Refresh();

                DigitSumTextBox.Text = Numbers.DigitSum(value).ToString();
                DigitSumTextBox.ForeColor = Numbers.GetNumberTypeColor(Numbers.DigitSum(value));
                DigitSumTextBox.Refresh();

                DigitalRootTextBox.Text = Numbers.DigitalRoot(value).ToString();
                DigitalRootTextBox.ForeColor = Numbers.GetNumberTypeColor(Numbers.DigitalRoot(value));
                DigitalRootTextBox.Refresh();

                string factors_str = Numbers.FactorizeToString(value);
                PrimeFactorsTextBox.Text = factors_str;
                PrimeFactorsTextBox.BackColor = (Numbers.Compare(value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
                PrimeFactorsTextBox.Refresh();

                int nth_number_index = 0;
                int nth_additive_number_index = 0;
                int nth_non_additive_number_index = 0;
                if (Numbers.IsPrime(value))
                {
                    m_index_type = IndexType.Prime;
                    nth_number_index = Numbers.PrimeIndexOf(value) + 1;
                    nth_additive_number_index = Numbers.AdditivePrimeIndexOf(value) + 1;
                    nth_non_additive_number_index = Numbers.NonAdditivePrimeIndexOf(value) + 1;
                    NthNumberTextBox.BackColor = (nth_additive_number_index > 0) ? Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.AdditivePrime] : Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.NonAdditivePrime];
                    NthAdditiveNumberTextBox.BackColor = Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.AdditivePrime];
                    NthNonAdditiveNumberTextBox.BackColor = Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.NonAdditivePrime];
                    ToolTip.SetToolTip(NthNumberTextBox, L[l]["Prime index"]);
                    ToolTip.SetToolTip(NthAdditiveNumberTextBox, L[l]["Additive prime index"]);
                    ToolTip.SetToolTip(NthNonAdditiveNumberTextBox, L[l]["Non-additive prime index"]);
                }
                else // any other index type will be treated as IndexNumberType.Composite
                {
                    m_index_type = IndexType.Composite;
                    nth_number_index = Numbers.CompositeIndexOf(value) + 1;
                    nth_additive_number_index = Numbers.AdditiveCompositeIndexOf(value) + 1;
                    nth_non_additive_number_index = Numbers.NonAdditiveCompositeIndexOf(value) + 1;
                    NthNumberTextBox.BackColor = (nth_additive_number_index > 0) ? Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.AdditiveComposite] : Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.NonAdditiveComposite];
                    NthAdditiveNumberTextBox.BackColor = Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.AdditiveComposite];
                    NthNonAdditiveNumberTextBox.BackColor = Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.NonAdditiveComposite];
                    ToolTip.SetToolTip(NthNumberTextBox, L[l]["Composite index"]);
                    ToolTip.SetToolTip(NthAdditiveNumberTextBox, L[l]["Additive composite index"]);
                    ToolTip.SetToolTip(NthNonAdditiveNumberTextBox, L[l]["Non-additive composite index"]);
                }
                NthNumberTextBox.Text = (nth_number_index > 0) ? nth_number_index.ToString() : "";
                NthNumberTextBox.ForeColor = Numbers.GetNumberTypeColor(nth_number_index);
                NthNumberTextBox.Refresh();
                NthAdditiveNumberTextBox.Text = (nth_additive_number_index > 0) ? nth_additive_number_index.ToString() : "";
                NthAdditiveNumberTextBox.ForeColor = Numbers.GetNumberTypeColor(nth_additive_number_index);
                NthAdditiveNumberTextBox.Refresh();
                NthNonAdditiveNumberTextBox.Text = (nth_non_additive_number_index > 0) ? nth_non_additive_number_index.ToString() : "";
                NthNonAdditiveNumberTextBox.ForeColor = Numbers.GetNumberTypeColor(nth_non_additive_number_index);
                NthNonAdditiveNumberTextBox.Refresh();

                string squares1_str = "";
                string squares2_str = "";
                int _4nplus1_index = -1;
                if (Numbers.IsUnit(value) || Numbers.IsPrime(value))
                {
                    squares1_str = Numbers.Get4nPlus1EqualsSumOfTwoSquares(value);
                    squares2_str = Numbers.Get4nPlus1EqualsDiffOfTwoTrivialSquares(value);
                    _4nplus1_index = Numbers.Prime4nPlus1IndexOf(value) + 1;
                }
                else //if composite
                {
                    squares1_str = Numbers.Get4nPlus1EqualsDiffOfTwoSquares(value);
                    squares2_str = Numbers.Get4nPlus1EqualsDiffOfTwoTrivialSquares(value);
                    _4nplus1_index = Numbers.Composite4nPlus1IndexOf(value) + 1;
                }
                //long n = 0L;
                //if (squares1_str.StartsWith("4×")) // 4n+1
                //{
                //    int start = "4×".Length;
                //    int end = squares1_str.IndexOf("+");
                //    string text = squares1_str.Substring(start, end - start);
                //    n = Radix.Decode(text, 10L);
                //}
                SquareSumTextBox.Text = squares1_str;
                //SquareSumTextBox.ForeColor = Numbers.GetNumberTypeColor(n);
                SquareSumTextBox.Refresh();
                SquareDiffTextBox.Text = squares2_str;
                //SquareDiffTextBox.ForeColor = Numbers.GetNumberTypeColor(n);
                SquareDiffTextBox.Refresh();
                Nth4nPlus1NumberTextBox.Text = (_4nplus1_index > 0) ? _4nplus1_index.ToString() : "";
                Nth4nPlus1NumberTextBox.ForeColor = Numbers.GetNumberTypeColor(_4nplus1_index);
                if (Nth4nPlus1NumberTextBox.Text == "")
                {
                    Nth4nPlus1NumberTextBox.BackColor = SystemColors.ControlLight;
                }
                else
                {
                    if (Numbers.IsPrime(value))
                    {
                        Nth4nPlus1NumberTextBox.BackColor = (nth_additive_number_index > 0) ? Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.AdditivePrime] : Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.NonAdditivePrime];
                    }
                    else // any other index type will be treated as IndexNumberType.Composite
                    {
                        Nth4nPlus1NumberTextBox.BackColor = (nth_additive_number_index > 0) ? Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.AdditiveComposite] : Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.NonAdditiveComposite];
                    }
                }
                Nth4nPlus1NumberTextBox.Refresh();

                UpdateNumberKind(value);
                UpdateSumOfDivisors(value);

                PCIndexChainL2RTextBox.Text = DecimalPCIndexChainL2R(value).ToString();
                PCIndexChainL2RTextBox.ForeColor = Numbers.GetNumberTypeColor(DecimalPCIndexChainL2R(value));
                PCIndexChainL2RTextBox.Refresh();
                PCIndexChainR2LTextBox.Text = DecimalPCIndexChainR2L(value).ToString();
                PCIndexChainR2LTextBox.ForeColor = Numbers.GetNumberTypeColor(DecimalPCIndexChainR2L(value));
                PCIndexChainR2LTextBox.Refresh();
                CPIndexChainL2RTextBox.Text = DecimalCPIndexChainL2R(value).ToString();
                CPIndexChainL2RTextBox.ForeColor = Numbers.GetNumberTypeColor(DecimalCPIndexChainL2R(value));
                CPIndexChainL2RTextBox.Refresh();
                CPIndexChainR2LTextBox.Text = DecimalCPIndexChainR2L(value).ToString();
                CPIndexChainR2LTextBox.ForeColor = Numbers.GetNumberTypeColor(DecimalCPIndexChainR2L(value));
                CPIndexChainR2LTextBox.Refresh();
                IndexChainLengthTextBox.Text = IndexChainLength(value).ToString();
                //IndexChainLengthTextBox.ForeColor = Numbers.GetNumberTypeColor(IndexChainLength(value));
                IndexChainLengthTextBox.Refresh();

                // update the ValueNavigator fields
                UpdateValueNavigator(value);
            }

            ValueLabel.Text = (m_show_add_controls ? "-- " : "+ ") + (m_user_text_mode ? L[l]["User"] : L[l]["Value"]);

            ////TODO: freeze program if comes from Position
            //ValueTextBox.SelectionLength = 0;
            //ValueTextBox.SelectionStart = ValueTextBox.Text.Length;
            //// focus so user can continue with +, -, *, /, ^, %, Enter
            //ValueTextBox.Focus();
        }
        catch //(Exception ex)
        {
            //MessageBox.Show(ex.Message, Application.ProductName);
        }
    }
    private void FactorizeNumber(Label control)
    {
        if (control != null)
        {
            long value = 0L;
            string[] parts = control.Text.Split(' ');
            for (int i = 0; i < parts.Length; i++)
            {
                if ((!m_found_verses_displayed) && (control == HeaderLabel))
                {
                    if (parts[i].Contains(L[l]["Verse"]))
                    {
                        int pos = parts[i].IndexOf(L[l]["Verse"]);
                        if ((i + 1) < parts.Length)
                        {
                            if (long.TryParse(parts[i + 1], out value))
                            {
                                break;
                            }
                        }
                    }
                }
                else if (control == WordsListBoxLabel)
                {
                    if (long.TryParse(parts[0], out value))
                    {
                        break;
                    }
                }
                else
                {
                    if (long.TryParse(parts[i], out value))
                    {
                        break;
                    }
                    else
                    {
                        double d = 0D;
                        if (double.TryParse(parts[i + 1], out d))
                        {
                            value = (long)d;
                            break;
                        }
                    }
                }
            }
            FactorizeValue(value, false);
        }
    }
    private void FactorizeNumber(TextBox control)
    {
        if (control != null)
        {
            if (control != ValueTextBox)
            {
                long value = 0L;
                try
                {
                    string text = control.Text;
                    if (!String.IsNullOrEmpty(text))
                    {
                        if (control.Name.StartsWith("LetterFrequency"))
                        {
                            value = Math.Abs((long)double.Parse(text));
                        }
                        else if (control.Name.StartsWith("Decimal"))
                        {
                            value = Radix.Decode(text, 10L);
                        }
                        else if (text.StartsWith(SUM_SYMBOL))
                        {
                            text = text.Substring(SUM_SYMBOL.Length, text.Length - SUM_SYMBOL.Length);
                            value = Radix.Decode(text, 10L);
                        }
                        else if (text.StartsWith("4×")) // 4n+1
                        {
                            int start = "4×".Length;
                            int end = text.IndexOf("+");
                            text = text.Substring(start, end - start);
                            value = Radix.Decode(text, 10L);
                        }
                        else
                        {
                            value = Radix.Decode(text, m_radix);
                        }
                    }

                    FactorizeValue(value, false);
                }
                catch
                {
                    //value = -1L; // error
                }
            }
        }
    }
    private void UpdateNumberKind(long value)
    {
        m_number_kind = Numbers.GetNumberKind(value);
        int number_kind_index = 0;
        switch (m_number_kind)
        {
            case NumberKind.Deficient:
                {
                    number_kind_index = Numbers.DeficientIndexOf(value) + 1;
                    NumberKindIndexTextBox.BackColor = Numbers.NUMBER_KIND_COLORS[0];
                }
                break;
            case NumberKind.Perfect:
                {
                    number_kind_index = Numbers.PerfectIndexOf(value) + 1;
                    NumberKindIndexTextBox.BackColor = Numbers.NUMBER_KIND_COLORS[1];
                }
                break;
            case NumberKind.Abundant:
                {
                    number_kind_index = Numbers.AbundantIndexOf(value) + 1;
                    NumberKindIndexTextBox.BackColor = Numbers.NUMBER_KIND_COLORS[2];
                }
                break;
            default:
                {
                    number_kind_index = 0;
                    NumberKindIndexTextBox.BackColor = SystemColors.Control;
                }
                break;
        }
        NumberKindIndexTextBox.Text = number_kind_index.ToString();
        NumberKindIndexTextBox.ForeColor = Numbers.GetNumberTypeColor(number_kind_index);
        switch (m_number_kind)
        {
            case NumberKind.Abundant:
                ToolTip.SetToolTip(NumberKindIndexTextBox, L[l]["Abundant number index"]);
                break;
            case NumberKind.Perfect:
                ToolTip.SetToolTip(NumberKindIndexTextBox, L[l]["Perfect number index"]);
                break;
            case NumberKind.Deficient:
                ToolTip.SetToolTip(NumberKindIndexTextBox, L[l]["Deficient number index"]);
                break;
        }
        NumberKindIndexTextBox.Refresh();
    }
    private void DisplayPerfectNumbersLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            string filename = Globals.NUMBERS_FOLDER + "/" + "perfect_numbers.txt";
            FileHelper.DisplayFile(filename);
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DisplayAbundantNumbersLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            string filename = Globals.NUMBERS_FOLDER + "/" + "abundant_numbers.txt";
            using (StreamWriter writer = new StreamWriter(filename, false, Encoding.Unicode))
            {
                StringBuilder str = new StringBuilder();

                str.AppendLine("----------------------------------------");
                str.AppendLine("Abundant numbers are those with the sum of their proper divisors greater than themselves.");
                str.AppendLine("----------------------------------------");
                str.AppendLine("#" + "\t" + "Number");
                str.AppendLine("----------------------------------------");

                for (int i = 0; i < Numbers.Abundants.Count; i++)
                {
                    str.AppendLine((i + 1).ToString() + "\t" + Numbers.Abundants[i]);
                }
                str.AppendLine("----------------------------------------");

                writer.WriteLine(str.ToString());
            }

            // show file content after save
            FileHelper.DisplayFile(filename);
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DisplayDeficientNumbersLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            string filename = Globals.NUMBERS_FOLDER + "/" + "deficient_numbers.txt";
            using (StreamWriter writer = new StreamWriter(filename, false, Encoding.Unicode))
            {
                StringBuilder str = new StringBuilder();

                str.AppendLine("----------------------------------------");
                str.AppendLine("Deficient numbers are those with the sum of their proper divisors less than themselves.");
                str.AppendLine("----------------------------------------");
                str.AppendLine("#" + "\t" + "Number");
                str.AppendLine("----------------------------------------");

                for (int i = 0; i < Numbers.Deficients.Count; i++)
                {
                    str.AppendLine((i + 1).ToString() + "\t" + Numbers.Deficients[i]);
                }
                str.AppendLine("----------------------------------------");

                writer.WriteLine(str.ToString());
            }

            // show file content after save
            FileHelper.DisplayFile(filename);
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void UpdateSumOfDivisors(long value)
    {
        long sum_of_divisors = Numbers.SumOfDivisors(value);
        string divisors = Numbers.GetDivisorsString(value);
        SumOfDivisorsTextBox.Text = sum_of_divisors.ToString();
        SumOfDivisorsTextBox.ForeColor = Numbers.GetNumberTypeColor(sum_of_divisors);
        SumOfDivisorsTextBox.Refresh();
        ToolTip.SetToolTip(SumOfDivisorsTextBox, L[l]["Sum of divisors"] + "\r\n" + divisors + " = " + sum_of_divisors);

        long sum_of_proper_divisors = Numbers.SumOfProperDivisors(value);
        string proper_divisors = Numbers.GetProperDivisorsString(value);
        SumOfProperDivisorsTextBox.Text = sum_of_proper_divisors.ToString();
        SumOfProperDivisorsTextBox.ForeColor = Numbers.GetNumberTypeColor(sum_of_proper_divisors);
        SumOfProperDivisorsTextBox.Refresh();
        ToolTip.SetToolTip(SumOfProperDivisorsTextBox, L[l]["Sum of proper divisors"] + "\r\n" + proper_divisors + " = " + sum_of_proper_divisors);
    }

    private long DecimalPCIndexChainL2R(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return -1L;

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Append("0");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Append("1");
            }
            else // number is too large
            {
                return 0L;
            }
            number = index;
        }

        try
        {
            return Convert.ToInt64(str.ToString(), 2);
        }
        catch
        {
            return -1L;
        }
    }
    private long DecimalPCIndexChainR2L(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return -1L;

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "0");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "1");
            }
            else // number is too large
            {
                return 0L;
            }
            number = index;
        }

        try
        {
            return Convert.ToInt64(str.ToString(), 2);
        }
        catch
        {
            return -1L;
        }
    }
    private long DecimalCPIndexChainL2R(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return -1L;

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Append("1");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Append("0");
            }
            else // number is too large
            {
                return 0L;
            }
            number = index;
        }

        try
        {
            return Convert.ToInt64(str.ToString(), 2);
        }
        catch
        {
            return -1L;
        }
    }
    private long DecimalCPIndexChainR2L(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return -1L;

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "1");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "0");
            }
            else // number is too large
            {
                return 0L;
            }
            number = index;
        }

        try
        {
            return Convert.ToInt64(str.ToString(), 2);
        }
        catch
        {
            return -1L;
        }
    }
    private int IndexChainLength(long number)
    {
        if (number <= 1L) return 0;

        int length = 0;
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                length++;
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                length++;
            }
            else // number is too large
            {
                return 0;
            }
            number = index;
        }
        return length;
    }
    private string BinaryPCIndexChainL2R(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Append("0");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Append("1");
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string BinaryPCIndexChainR2L(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "0");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "1");
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string BinaryCPIndexChainL2R(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Append("1");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Append("0");
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string BinaryCPIndexChainR2L(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "1");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "0");
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string GetPCIndexChainL2R(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            if (str.Length > 0)
            {
                str.Append("-");
            }

            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Append("P" + index.ToString());
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Append("C" + index.ToString());
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string GetPCIndexChainR2L(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            if (str.Length > 0)
            {
                str.Insert(0, "-");
            }

            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "P" + index.ToString());
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "C" + index.ToString());
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string GetCPIndexChainL2R(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            if (str.Length > 0)
            {
                str.Append("-");
            }

            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Append("P" + index.ToString());
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Append("C" + index.ToString());
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string GetCPIndexChainR2L(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            if (str.Length > 0)
            {
                str.Insert(0, "-");
            }

            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "P" + index.ToString());
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "C" + index.ToString());
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private void NumberIndexChain(long number)
    {
        string filename = "NumberIndexChain" + "_" + number + ".txt";
        StringBuilder str = new StringBuilder();
        int length = IndexChainLength(number);
        str.AppendLine(number.ToString() + "\t" + length.ToString() + "\t" + GetPCIndexChainL2R(number));
        m_client.SaveNumberIndexChain(filename, number, length, str.ToString());
    }
    private void NumbersOfIndexChainLength(int length)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            string filename = "PIndexChainLength" + "_" + length + ".txt";
            StringBuilder str = new StringBuilder();
            long running_total = 0L;
            for (int i = 0; i < Numbers.Primes.Count; i++)
            {
                long number = Numbers.Primes[i];
                int len = IndexChainLength(number);
                if (len == length)
                {
                    running_total += number;
                    str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
                }
            }
            m_client.SaveIndexChainLength(filename, NumberType.Prime, length, str.ToString());

            filename = "APIndexChainLength" + "_" + length + ".txt";
            str = new StringBuilder();
            running_total = 0L;
            for (int i = 0; i < Numbers.AdditivePrimes.Count; i++)
            {
                long number = Numbers.AdditivePrimes[i];
                int len = IndexChainLength(number);
                if (len == length)
                {
                    running_total += number;
                    str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
                }
            }
            m_client.SaveIndexChainLength(filename, NumberType.AdditivePrime, length, str.ToString());

            filename = "XPIndexChainLength" + "_" + length + ".txt";
            str = new StringBuilder();
            running_total = 0L;
            for (int i = 0; i < Numbers.NonAdditivePrimes.Count; i++)
            {
                long number = Numbers.NonAdditivePrimes[i];
                int len = IndexChainLength(number);
                if (len == length)
                {
                    running_total += number;
                    str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
                }
            }
            m_client.SaveIndexChainLength(filename, NumberType.NonAdditivePrime, length, str.ToString());

            filename = "CIndexChainLength" + "_" + length + ".txt";
            str = new StringBuilder();
            running_total = 0L;
            for (int i = 0; i < Numbers.Composites.Count; i++)
            {
                long number = Numbers.Composites[i];
                int len = IndexChainLength(number);
                if (len == length)
                {
                    running_total += number;
                    str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
                }
            }
            m_client.SaveIndexChainLength(filename, NumberType.Composite, length, str.ToString());

            filename = "ACIndexChainLength" + "_" + length + ".txt";
            str = new StringBuilder();
            running_total = 0L;
            for (int i = 0; i < Numbers.AdditiveComposites.Count; i++)
            {
                long number = Numbers.AdditiveComposites[i];
                int len = IndexChainLength(number);
                if (len == length)
                {
                    running_total += number;
                    str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
                }
            }
            m_client.SaveIndexChainLength(filename, NumberType.AdditiveComposite, length, str.ToString());

            filename = "XCIndexChainLength" + "_" + length + ".txt";
            str = new StringBuilder();
            running_total = 0L;
            for (int i = 0; i < Numbers.NonAdditiveComposites.Count; i++)
            {
                long number = Numbers.NonAdditiveComposites[i];
                int len = IndexChainLength(number);
                if (len == length)
                {
                    running_total += number;
                    str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
                }
            }
            m_client.SaveIndexChainLength(filename, NumberType.NonAdditiveComposite, length, str.ToString());

            filename = "NIndexChainLength" + "_" + length + ".txt";
            str = new StringBuilder();
            running_total = 0L;
            for (int i = 0; i < int.MaxValue / 1024; i++)
            {
                int len = IndexChainLength(i);
                if (len == length)
                {
                    long number = i;
                    running_total += number;
                    str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
                }
            }
            m_client.SaveIndexChainLength(filename, NumberType.Natural, length, str.ToString());
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }

    private void UpdateValueNavigator(long value)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                //VerseByVerseNumberLabel.Text = "---:---";
                //ToolTip.SetToolTip(VerseByVerseNumberLabel, null);
                //VerseByVerseNumberLabel.Refresh();

                //VerseByWordNumberLabel.Text = "---:---";
                //ToolTip.SetToolTip(VerseByWordNumberLabel, null);
                //VerseByWordNumberLabel.Refresh();

                //VerseByLetterNumberLabel.Text = "---:---";
                //ToolTip.SetToolTip(VerseByLetterNumberLabel, null);
                //VerseByLetterNumberLabel.Refresh();

                Verse verse = m_client.Book.GetVerseByVerseNumber((int)value);
                if (verse != null)
                {
                    VerseByVerseNumberLabel.Text = verse.Address;
                    ToolTip.SetToolTip(VerseByVerseNumberLabel, L[l]["Verse number = "] + ValueTextBox.Text + "\r\n" + verse.Text);
                }

                verse = m_client.Book.GetVerseByWordNumber((int)value);
                if (verse != null)
                {
                    VerseByWordNumberLabel.Text = verse.Address;
                    ToolTip.SetToolTip(VerseByWordNumberLabel, L[l]["Verse with word number = "] + ValueTextBox.Text + "\r\n" + verse.Text);
                }

                verse = m_client.Book.GetVerseByLetterNumber((int)value);
                if (verse != null)
                {
                    VerseByLetterNumberLabel.Text = verse.Address;
                    ToolTip.SetToolTip(VerseByLetterNumberLabel, L[l]["Verse with letter number = "] + ValueTextBox.Text + "\r\n" + verse.Text);
                }
            }
        }
    }
    private IndexType m_index_type = IndexType.Prime;
    private void NthNumberTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Up)
        {
            Control control = (sender as TextBoxBase);
            if (control != null)
            {
                IncrementValue(control);
            }
        }
        else if (e.KeyCode == Keys.Down)
        {
            Control control = (sender as TextBoxBase);
            if (control != null)
            {
                DecrementValue(control);
            }
        }
        else if (e.KeyCode == Keys.Enter)
        {
            try
            {
                long number = -1L;
                Control control = (sender as TextBoxBase);
                if (control != null)
                {
                    int index = int.Parse(control.Text) - 1;
                    control.ForeColor = Numbers.GetNumberTypeColor(index);
                    if (m_index_type == IndexType.Prime)
                    {
                        number = Numbers.Primes[index];
                    }
                    else // any other index type will be treated as IndexNumberType.Composite
                    {
                        number = Numbers.Composites[index];
                    }
                    FactorizeValue(number, true);
                }
            }
            catch
            {
                FactorizeValue(0L, true);
            }
        }
    }
    private void NthAdditiveNumberTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Up)
        {
            Control control = (sender as TextBoxBase);
            if (control != null)
            {
                IncrementValue(control);
            }
        }
        else if (e.KeyCode == Keys.Down)
        {
            Control control = (sender as TextBoxBase);
            if (control != null)
            {
                DecrementValue(control);
            }
        }
        else if (e.KeyCode == Keys.Enter)
        {
            try
            {
                long number = -1L;
                Control control = (sender as TextBoxBase);
                if (control != null)
                {
                    int index = int.Parse(control.Text) - 1;
                    control.ForeColor = Numbers.GetNumberTypeColor(index);
                    if (m_index_type == IndexType.Prime)
                    {
                        number = Numbers.AdditivePrimes[index];
                    }
                    else // any other index type will be treated as IndexNumberType.Composite
                    {
                        number = Numbers.AdditiveComposites[index];
                    }
                    FactorizeValue(number, true);
                }
            }
            catch
            {
                FactorizeValue(0L, true);
            }
        }
    }
    private void NthNonAdditiveNumberTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Up)
        {
            Control control = (sender as TextBoxBase);
            if (control != null)
            {
                IncrementValue(control);
            }
        }
        else if (e.KeyCode == Keys.Down)
        {
            Control control = (sender as TextBoxBase);
            if (control != null)
            {
                DecrementValue(control);
            }
        }
        else if (e.KeyCode == Keys.Enter)
        {
            try
            {
                long number = -1L;
                Control control = (sender as TextBoxBase);
                if (control != null)
                {
                    int index = int.Parse(control.Text) - 1;
                    control.ForeColor = Numbers.GetNumberTypeColor(index);
                    if (m_index_type == IndexType.Prime)
                    {
                        number = Numbers.NonAdditivePrimes[index];
                    }
                    else // any other index type will be treated as IndexNumberType.Composite
                    {
                        number = Numbers.NonAdditiveComposites[index];
                    }
                    FactorizeValue(number, true);
                }
            }
            catch
            {
                FactorizeValue(0L, true);
            }
        }
    }
    private void Nth4nPlus1NumberTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Up)
        {
            IncrementValue(sender as TextBoxBase);
        }
        else if (e.KeyCode == Keys.Down)
        {
            DecrementValue(sender as TextBoxBase);
        }
        else if (e.KeyCode == Keys.Enter)
        {
            try
            {
                long number = -1L;
                Control control = (sender as TextBoxBase);
                if (control != null)
                {
                    int index = int.Parse(control.Text) - 1;
                    control.ForeColor = Numbers.GetNumberTypeColor(index);
                    if (m_index_type == IndexType.Prime)
                    {
                        number = Numbers.Primes4nPlus1[index];
                    }
                    else // any other index type will be treated as IndexNumberType.Composite
                    {
                        number = Numbers.Composites4nPlus1[index];
                    }
                    FactorizeValue(number, true);
                }
            }
            catch
            {
                FactorizeValue(0L, true);
            }
        }
    }
    private void IncrementValue(Control control)
    {
        if (control is TextBoxBase)
        {
            long number = 0L;
            if (long.TryParse(control.Text, out number))
            {
                if (number < long.MaxValue) number++;
                control.Text = number.ToString();
                SendKeys.Send("{Enter}");
            }
        }
    }
    private void DecrementValue(Control control)
    {
        if (control is TextBoxBase)
        {
            long number = 0L;
            if (long.TryParse(control.Text, out number))
            {
                if (number > 0) number--;
                control.Text = number.ToString();
                SendKeys.Send("{Enter}");
            }
        }
    }

    private NumberKind m_number_kind = NumberKind.Deficient;
    private void NumberKindIndexTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Up)
        {
            Control control = (sender as TextBoxBase);
            if (control != null)
            {
                IncrementValue(control);
            }
        }
        else if (e.KeyCode == Keys.Down)
        {
            Control control = (sender as TextBoxBase);
            if (control != null)
            {
                DecrementValue(control);
            }
        }
        else if (e.KeyCode == Keys.Enter)
        {
            try
            {
                long number = -1L;
                Control control = (sender as TextBoxBase);
                if (control != null)
                {
                    int index = int.Parse(control.Text) - 1;
                    switch (m_number_kind)
                    {
                        case NumberKind.Deficient:
                            {
                                number = Numbers.Deficients[index];
                            }
                            break;
                        case NumberKind.Perfect:
                            {
                                number = Numbers.Perfects[index];
                            }
                            break;
                        case NumberKind.Abundant:
                            {
                                number = Numbers.Abundants[index];
                            }
                            break;
                        default:
                            {
                            }
                            break;
                    }
                    FactorizeValue(number, true);
                }
            }
            catch
            {
                FactorizeValue(0L, true);
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Value Display
    ///////////////////////////////////////////////////////////////////////////////
    private long m_radix = DEFAULT_RADIX;
    private void RadixValueLabel_Click(object sender, EventArgs e)
    {
        try
        {
            // get values in current radix
            int chapter_count = (int)Radix.Decode(ChaptersTextBox.Text, m_radix);
            int verse_count = (int)Radix.Decode(VersesTextBox.Text, m_radix);
            int word_count = (int)Radix.Decode(WordsTextBox.Text, m_radix);
            int letter_count = (int)Radix.Decode(LettersTextBox.Text, m_radix);
            ////int chapter_number_sum = (int)Radix.Decode(ChapterNumberSumTextBox.Text.Split()[1], m_radix);
            ////int verse_number_sum = (int)Radix.Decode(VerseNumberSumTextBox.Text.Split()[1], m_radix);
            ////int word_number_sum = (int)Radix.Decode(WordNumberSumTextBox.Text.Split()[1], m_radix);
            ////int letter_number_sum = (int)Radix.Decode(LetterNumberSumTextBox.Text.Split()[1], m_radix);
            //int chapter_number_sum = int.Parse(ChapterNumberSumTextBox.Text.Split()[1]);
            //int verse_number_sum = int.Parse(VerseNumberSumTextBox.Text.Split()[1]);
            //int word_number_sum = int.Parse(WordNumberSumTextBox.Text.Split()[1]);
            //int letter_number_sum = int.Parse(LetterNumberSumTextBox.Text.Split()[1]);
            long value = Radix.Decode(ValueTextBox.Text, m_radix);

            // toggle radix
            if (m_radix == DEFAULT_RADIX)
            {
                m_radix = RADIX_NINTEEN;
            }
            else
            {
                m_radix = DEFAULT_RADIX;
            }
            RadixValueLabel.Text = m_radix.ToString();

            // display values in next radix
            //DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
            DisplayCounts(chapter_count, verse_count, word_count, letter_count, -1, -1, -1, -1); // -1 means don't change what is displayed
            FactorizeValue(value, true);
        }
        catch
        {
            // log exception
        }
    }
    private void RadixValueLabel_TextChanged(object sender, EventArgs e)
    {

    }
    private void RadixValueUpLabel_Click(object sender, EventArgs e)
    {
        try
        {
            // get values in current radix
            int chapter_count = (int)Radix.Decode(ChaptersTextBox.Text, m_radix);
            int verse_count = (int)Radix.Decode(VersesTextBox.Text, m_radix);
            int word_count = (int)Radix.Decode(WordsTextBox.Text, m_radix);
            int letter_count = (int)Radix.Decode(LettersTextBox.Text, m_radix);
            ////int chapter_number_sum = (int)Radix.Decode(ChapterNumberSumTextBox.Text.Split()[1], m_radix);
            ////int verse_number_sum = (int)Radix.Decode(VerseNumberSumTextBox.Text.Split()[1], m_radix);
            ////int word_number_sum = (int)Radix.Decode(WordNumberSumTextBox.Text.Split()[1], m_radix);
            ////int letter_number_sum = (int)Radix.Decode(LetterNumberSumTextBox.Text.Split()[1], m_radix);
            //int chapter_number_sum = int.Parse(ChapterNumberSumTextBox.Text.Split()[1]);
            //int verse_number_sum = int.Parse(VerseNumberSumTextBox.Text.Split()[1]);
            //int word_number_sum = int.Parse(WordNumberSumTextBox.Text.Split()[1]);
            //int letter_number_sum = int.Parse(LetterNumberSumTextBox.Text.Split()[1]);
            long value = Radix.Decode(ValueTextBox.Text, m_radix);

            // increment radix
            m_radix++;
            if (m_radix > Radix.DIGITS.Length) m_radix = 2;
            RadixValueLabel.Text = m_radix.ToString();

            // display values in next radix
            //DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
            DisplayCounts(chapter_count, verse_count, word_count, letter_count, -1, -1, -1, -1); // -1 means don't change what is displayed
            FactorizeValue(value, true);
        }
        catch
        {
            // log exception
        }
    }
    private void RadixValueDownLabel_Click(object sender, EventArgs e)
    {
        try
        {
            // get values in current radix
            int chapter_count = (int)Radix.Decode(ChaptersTextBox.Text, m_radix);
            int verse_count = (int)Radix.Decode(VersesTextBox.Text, m_radix);
            int word_count = (int)Radix.Decode(WordsTextBox.Text, m_radix);
            int letter_count = (int)Radix.Decode(LettersTextBox.Text, m_radix);
            ////int chapter_number_sum = (int)Radix.Decode(ChapterNumberSumTextBox.Text.Split()[1], m_radix);
            ////int verse_number_sum = (int)Radix.Decode(VerseNumberSumTextBox.Text.Split()[1], m_radix);
            ////int word_number_sum = (int)Radix.Decode(WordNumberSumTextBox.Text.Split()[1], m_radix);
            ////int letter_number_sum = (int)Radix.Decode(LetterNumberSumTextBox.Text.Split()[1], m_radix);
            //int chapter_number_sum = int.Parse(ChapterNumberSumTextBox.Text.Split()[1]);
            //int verse_number_sum = int.Parse(VerseNumberSumTextBox.Text.Split()[1]);
            //int word_number_sum = int.Parse(WordNumberSumTextBox.Text.Split()[1]);
            //int letter_number_sum = int.Parse(LetterNumberSumTextBox.Text.Split()[1]);
            long value = Radix.Decode(ValueTextBox.Text, m_radix);

            // increment radix
            m_radix--;
            if (m_radix < 2) m_radix = Radix.DIGITS.Length;
            RadixValueLabel.Text = m_radix.ToString();

            // display values in next radix
            //DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
            DisplayCounts(chapter_count, verse_count, word_count, letter_count, -1, -1, -1, -1); // -1 means don't change what is displayed
            FactorizeValue(value, true);
        }
        catch
        {
            // log exception
        }
    }
    private long m_divisor = DEFAULT_DIVISOR;
    private void DivisorValueLabel_Click(object sender, EventArgs e)
    {
        m_divisor = DEFAULT_DIVISOR;
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private void DivisorValueLabel_TextChanged(object sender, EventArgs e)
    {
        UpdateBackColorsByDivisor();
    }
    private void DivisorValueUpLabel_Click(object sender, EventArgs e)
    {
        m_divisor++;
        if (m_divisor > MAX_DIVISOR) m_divisor = MIN_DIVISOR;
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private void DivisorValueUpLabel_DoubleClick(object sender, EventArgs e)
    {
        m_divisor += 10;
        if (m_divisor > MAX_DIVISOR) m_divisor = MIN_DIVISOR;
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private System.Windows.Forms.Timer DivisorUpTimer = null;
    private void DivisorValueUpLabel_MouseDown(object sender, MouseEventArgs e)
    {
        if (e.Button == MouseButtons.Left)
        {
            if (DivisorUpTimer == null)
            {
                DivisorUpTimer = new System.Windows.Forms.Timer();
                DivisorUpTimer.Interval = 300;
                DivisorUpTimer.Tick += new EventHandler(DivisorUpTimer_Tick);
            }

            if (!DivisorUpTimer.Enabled)
            { // e.Clicks = 1
                DivisorUpTimer.Start();
            }
            else
            { // e.Clicks = 2
                DivisorUpTimer.Stop();

                // double-click event handler
                DivisorValueUpLabel_DoubleClick(sender, e);
            }
        }
    }
    private void DivisorUpTimer_Tick(object sender, EventArgs e)
    {
        DivisorUpTimer.Stop();

        // single-click event handler
        DivisorValueUpLabel_Click(sender, e);
    }
    private void DivisorValueDownLabel_Click(object sender, EventArgs e)
    {
        m_divisor--;
        if (m_divisor < MIN_DIVISOR) m_divisor = MAX_DIVISOR;
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private void DivisorValueDownLabel_DoubleClick(object sender, EventArgs e)
    {
        m_divisor -= 10;
        if (m_divisor < MIN_DIVISOR) m_divisor = MAX_DIVISOR;
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private System.Windows.Forms.Timer DivisorDownTimer = null;
    private void DivisorValueDownLabel_MouseDown(object sender, MouseEventArgs e)
    {
        if (e.Button == MouseButtons.Left)
        {
            if (DivisorDownTimer == null)
            {
                DivisorDownTimer = new System.Windows.Forms.Timer();
                DivisorDownTimer.Interval = 300;
                DivisorDownTimer.Tick += new EventHandler(DivisorDownTimer_Tick);
            }

            if (!DivisorDownTimer.Enabled)
            { // e.Clicks = 1
                DivisorDownTimer.Start();
            }
            else
            { // e.Clicks = 2
                DivisorDownTimer.Stop();

                // double-click event handler
                DivisorValueDownLabel_DoubleClick(sender, e);
            }
        }
    }
    private void DivisorDownTimer_Tick(object sender, EventArgs e)
    {
        DivisorDownTimer.Stop();

        // single-click event handler
        DivisorValueDownLabel_Click(sender, e);
    }
    private void UpdateBackColorsByDivisor()
    {
        try
        {
            Verse verse = GetVerseAtCursor();
            if (verse != null)
            {
                UpdateVersePositions(verse);
            }

            long value = long.Parse(ValueTextBox.Text);
            PrimeFactorsTextBox.BackColor = (Numbers.Compare(value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            PrimeFactorsTextBox.Refresh();

            int chapter_count = int.Parse(ChaptersTextBox.Text);
            ChaptersTextBox.BackColor = (Numbers.Compare(chapter_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            ChaptersTextBox.Refresh();

            int verse_count = int.Parse(VersesTextBox.Text);
            VersesTextBox.BackColor = (Numbers.Compare(verse_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            VersesTextBox.Refresh();

            int word_count = int.Parse(WordsTextBox.Text);
            WordsTextBox.BackColor = (Numbers.Compare(word_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            WordsTextBox.Refresh();

            int letter_count = int.Parse(LettersTextBox.Text);
            LettersTextBox.BackColor = (Numbers.Compare(letter_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            LettersTextBox.Refresh();

            string chapter_number_sum_text = ChapterNumberSumTextBox.Text.Substring(1);
            int chapter_number_sum = int.Parse(chapter_number_sum_text);
            ChapterNumberSumTextBox.BackColor = (Numbers.Compare(chapter_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            ChapterNumberSumTextBox.Refresh();

            string verse_number_sum_text = VerseNumberSumTextBox.Text.Substring(1);
            int verse_number_sum = int.Parse(verse_number_sum_text);
            VerseNumberSumTextBox.BackColor = (Numbers.Compare(verse_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            VerseNumberSumTextBox.Refresh();

            string word_number_sum_text = WordNumberSumTextBox.Text.Substring(1);
            int word_number_sum = int.Parse(word_number_sum_text);
            WordNumberSumTextBox.BackColor = (Numbers.Compare(word_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            WordNumberSumTextBox.Refresh();

            string letter_number_sum_text = LetterNumberSumTextBox.Text.Substring(1);
            int letter_number_sum = int.Parse(letter_number_sum_text);
            LetterNumberSumTextBox.BackColor = (Numbers.Compare(letter_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            LetterNumberSumTextBox.Refresh();

            UpdateMathsChapterVerseSums();
            UpdateMathsChapterVerseSums();
        }
        catch
        {
            // ignore
        }
    }
    private bool m_total_chapter_counts = false;
    private void TotalChapterCountsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_total_chapter_counts = TotalChapterCountsCheckBox.Checked;
        CalculateCurrentValue();
    }
    private void CalculateAndDisplayCounts(string user_text)
    {
        if (!String.IsNullOrEmpty(user_text))
        {
            if (m_client != null)
            {
                ChapterNumberSumTextBox.Text = "";
                VerseNumberSumTextBox.Text = "";
                WordNumberSumTextBox.Text = "";
                LetterNumberSumTextBox.Text = "";

                if (!user_text.IsArabic())  // eg English
                {
                    user_text = user_text.ToUpper();
                }

                // in all cases
                if (m_client.NumerologySystem != null)
                {
                    // simplify all text_modes
                    user_text = user_text.SimplifyTo(m_client.NumerologySystem.TextMode);
                    user_text = user_text.Replace("_", "");
                    user_text = user_text.Replace("\t", "");
                    while (user_text.Contains("  "))
                    {
                        user_text = user_text.Replace("  ", " ");
                    }
                    user_text = user_text.Replace("\r\n", "\n");

                    int chapter_count = 1;
                    int verse_count = 1;
                    int word_count = 1;
                    int letter_count = 0;
                    foreach (char c in user_text)
                    {
                        if (c == '\n')
                        {
                            verse_count++;
                            if (letter_count > 0)
                            {
                                word_count++;
                            }
                        }
                        else if (c == ' ')
                        {
                            word_count++;
                        }
                        else
                        {
                            letter_count++;
                        }
                    }
                    DisplayCounts(chapter_count, verse_count, word_count, letter_count, -1, -1, -1, -1); // -1 means don't change what is displayed
                    DisplayMathsChapterVerseSums(null);     // reset C, V, C+V, C-V, C×V, C÷V, etc.
                }
            }
        }
        else
        {
            DisplayCounts(0, 0, 0, 0, -1, -1, -1, -1); // -1 means don't change what is displayed
            DisplayMathsChapterVerseSums(null);     // reset C, V, C+V, C-V, C×V, C÷V, etc.
        }
    }
    private void CalculateAndDisplayCounts(Verse verse)
    {
        if (verse != null)
        {
            if (m_total_chapter_counts)
            {
                CalculateAndDisplayCountsTotal(verse);
            }
            else
            {
                CalculateAndDisplayCountsLocal(verse);
            }
        }
    }
    private void CalculateAndDisplayCountsLocal(Verse verse)
    {
        if (verse != null)
        {
            int chapter_count = 1;
            int verse_count = 1;
            int word_count = verse.Words.Count;
            int letter_count = verse.LetterCount;
            int chapter_number_sum = verse.Chapter.SortedNumber;
            int verse_number_sum = verse.NumberInChapter;
            int word_number_sum = 0;
            int letter_number_sum = 0;

            if (verse.Words != null)
            {
                foreach (Word word in verse.Words)
                {
                    word_number_sum += word.NumberInVerse;
                    if ((word.Letters != null) && (word.Letters.Count > 0))
                    {
                        foreach (Letter letter in word.Letters)
                        {
                            letter_number_sum += letter.NumberInWord;
                        }
                    }
                }
            }
            DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
            DisplayMathsChapterVerseSums(new List<Verse>() { verse }); // update C, V, C+V, C-V, C×V, C÷V, etc.
        }
    }
    private void CalculateAndDisplayCountsTotal(Verse verse)
    {
        if (verse != null)
        {
            int chapter_count = 1;
            int verse_count = 0;
            int word_count = 0;
            int letter_count = 0;
            int chapter_number_sum = 0;
            int verse_number_sum = 0;
            int word_number_sum = 0;
            int letter_number_sum = 0;

            Chapter chapter = verse.Chapter;
            if (chapter != null)
            {
                chapter_number_sum += chapter.SortedNumber;
                verse_count += chapter.Verses.Count;

                foreach (Verse v in chapter.Verses)
                {
                    word_count += v.Words.Count;
                    letter_count += v.LetterCount;

                    verse_number_sum += v.NumberInChapter;
                    if (v.Words != null)
                    {
                        foreach (Word word in v.Words)
                        {
                            word_number_sum += word.NumberInVerse;
                            if ((word.Letters != null) && (word.Letters.Count > 0))
                            {
                                foreach (Letter letter in word.Letters)
                                {
                                    letter_number_sum += letter.NumberInWord;
                                }
                            }
                        }
                    }
                }
            }

            DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
            DisplayMathsChapterVerseSums(new List<Verse>() { verse }); // update C, V, C+V, C-V, C×V, C÷V, etc.
        }
    }
    private void CalculateAndDisplayCounts()
    {
        if (m_total_chapter_counts)
        {
            CalculateAndDisplayCountsTotal();
        }
        else
        {
            CalculateAndDisplayCountsLocal();
        }
    }
    private void CalculateAndDisplayCountsLocal()
    {
        List<Verse> verses = null;
        if (m_found_verses_displayed)
        {
            if (m_client != null)
            {
                verses = m_client.FoundVerses;
            }
        }
        else
        {
            if (m_client != null)
            {
                if (m_client.Selection != null)
                {
                    if (m_client.Selection.Verses != null)
                    {
                        verses = m_client.Selection.Verses;
                    }
                }
            }
        }

        if (verses != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    List<Chapter> chapters = m_client.Book.GetChapters(verses);
                    if (chapters != null)
                    {
                        int chapter_count = chapters.Count;
                        int verse_count = verses.Count;
                        int word_count = 0;
                        int letter_count = 0;
                        int chapter_number_sum = 0;
                        int verse_number_sum = 0;
                        int word_number_sum = 0;
                        int letter_number_sum = 0;
                        foreach (Chapter chapter in chapters)
                        {
                            if (chapter != null)
                            {
                                chapter_number_sum += chapter.SortedNumber;
                            }
                        }

                        foreach (Verse verse in verses)
                        {
                            word_count += verse.Words.Count;
                            letter_count += verse.LetterCount;

                            verse_number_sum += verse.NumberInChapter;
                            if (verse.Words != null)
                            {
                                foreach (Word word in verse.Words)
                                {
                                    word_number_sum += word.NumberInVerse;
                                    if ((word.Letters != null) && (word.Letters.Count > 0))
                                    {
                                        foreach (Letter letter in word.Letters)
                                        {
                                            letter_number_sum += letter.NumberInWord;
                                        }
                                    }
                                }
                            }
                        }
                        DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
                        DisplayMathsChapterVerseSums(verses); // update C, V, C+V, C-V, C×V, C÷V, etc.

                        DisplayTranslations(verses); // display translations for selected verses
                        DisplaySymmetry();
                        DisplayCVWLSequence();
                        DisplayValuesSequence();
                        DisplayDNASequence();
                    }
                }
            }
        }
    }
    private void CalculateAndDisplayCountsTotal()
    {
        List<Verse> verses = null;
        if (m_found_verses_displayed)
        {
            if (m_client != null)
            {
                verses = m_client.FoundVerses;
            }
        }
        else
        {
            if (m_client != null)
            {
                if (m_client.Selection != null)
                {
                    if (m_client.Selection.Verses != null)
                    {
                        verses = m_client.Selection.Verses;
                    }
                }
            }
        }

        if (verses != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    List<Chapter> chapters = m_client.Book.GetChapters(verses);
                    if (chapters != null)
                    {
                        int chapter_count = chapters.Count;
                        int verse_count = 0;
                        int word_count = 0;
                        int letter_count = 0;
                        int chapter_number_sum = 0;
                        int verse_number_sum = 0;
                        int word_number_sum = 0;
                        int letter_number_sum = 0;
                        foreach (Chapter chapter in chapters)
                        {
                            if (chapter != null)
                            {
                                chapter_number_sum += chapter.SortedNumber;
                                verse_count += chapter.Verses.Count;

                                foreach (Verse verse in chapter.Verses)
                                {
                                    word_count += verse.Words.Count;
                                    letter_count += verse.LetterCount;

                                    verse_number_sum += verse.NumberInChapter;
                                    if (verse.Words != null)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            word_number_sum += word.NumberInVerse;
                                            if ((word.Letters != null) && (word.Letters.Count > 0))
                                            {
                                                foreach (Letter letter in word.Letters)
                                                {
                                                    letter_number_sum += letter.NumberInWord;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
                        DisplayMathsChapterVerseSums(verses); // update C, V, C+V, C-V, C×V, C÷V, etc.

                        DisplayTranslations(verses); // display translations for selected verses
                        DisplaySymmetry();
                        DisplayCVWLSequence();
                        DisplayValuesSequence();
                        DisplayDNASequence();
                    }
                }
            }
        }
    }
    private void CalculateAndDisplayCounts(List<Verse> verses, Letter start_letter, Letter end_letter)
    {
        CalculateAndDisplayCounts(verses, start_letter, end_letter, 0, 0);
    }
    private void CalculateAndDisplayCounts(List<Verse> verses, Letter start_letter, Letter end_letter, int stopmarks, int quranmarks)
    {
        if (verses != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    List<Chapter> chapters = m_client.Book.GetChapters(verses);
                    if (chapters != null)
                    {
                        int chapter_count = chapters.Count;
                        int verse_count = verses.Count;
                        int word_count = 0;
                        int letter_count = stopmarks + quranmarks;
                        int chapter_number_sum = 0;
                        int verse_number_sum = 0;
                        int word_number_sum = 0;
                        int letter_number_sum = 0;
                        foreach (Chapter chapter in chapters)
                        {
                            if (chapter != null)
                            {
                                chapter_number_sum += chapter.SortedNumber;
                            }
                        }

                        if (verses.Count == 1)
                        {
                            ///////////////////////////
                            // Verse's Middle Part
                            ///////////////////////////
                            Verse verse = verses[0];
                            if (verse != null)
                            {
                                verse_number_sum += verse.NumberInChapter;

                                if (verse.Words != null)
                                {
                                    foreach (Word word in verse.Words)
                                    {
                                        if (word != null)
                                        {
                                            if ((word.Letters != null) && (word.Letters.Count > 0))
                                            {
                                                if (word.Letters[word.Letters.Count - 1].NumberInVerse < start_letter.NumberInVerse) continue;
                                                if (word.Letters[0].NumberInVerse > end_letter.NumberInVerse) break;
                                                word_count++;
                                                word_number_sum += word.NumberInVerse;

                                                foreach (Letter letter in word.Letters)
                                                {
                                                    if (letter != null)
                                                    {
                                                        if (letter.NumberInVerse < start_letter.NumberInVerse) continue;
                                                        if (letter.NumberInVerse > end_letter.NumberInVerse) break;
                                                        letter_count++;
                                                        letter_number_sum += letter.NumberInWord;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (verses.Count == 2)
                        {
                            ///////////////////////////
                            // First Verse's Last Part
                            ///////////////////////////
                            Verse first_verse = verses[0];
                            if (first_verse != null)
                            {
                                verse_number_sum += first_verse.NumberInChapter;

                                if (first_verse.Words != null)
                                {
                                    foreach (Word word in first_verse.Words)
                                    {
                                        if (word != null)
                                        {
                                            if ((word.Letters != null) && (word.Letters.Count > 0))
                                            {
                                                if (word.Letters[word.Letters.Count - 1].NumberInVerse < start_letter.NumberInVerse) continue;
                                                word_count++;
                                                word_number_sum += word.NumberInVerse;

                                                foreach (Letter letter in word.Letters)
                                                {
                                                    if (letter != null)
                                                    {
                                                        if (letter.NumberInVerse < start_letter.NumberInVerse) continue;
                                                        letter_count++;
                                                        letter_number_sum += letter.NumberInWord;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            /////////////////////////////
                            // Final Verse's Start Part
                            /////////////////////////////
                            Verse final_verse = verses[1];
                            if (final_verse != null)
                            {
                                verse_number_sum += final_verse.NumberInChapter;

                                if (final_verse.Words != null)
                                {
                                    foreach (Word word in final_verse.Words)
                                    {
                                        if (word != null)
                                        {
                                            if ((word.Letters != null) && (word.Letters.Count > 0))
                                            {
                                                if (word.Letters[0].NumberInVerse > end_letter.NumberInVerse) break;
                                                word_count++;
                                                word_number_sum += word.NumberInVerse;

                                                foreach (Letter letter in word.Letters)
                                                {
                                                    if (letter != null)
                                                    {
                                                        if (letter.NumberInVerse > end_letter.NumberInVerse) break;
                                                        letter_count++;
                                                        letter_number_sum += letter.NumberInWord;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (verses.Count > 2)
                        {
                            ///////////////////////////
                            // First Verse's Last Part
                            ///////////////////////////
                            Verse first_verse = verses[0];
                            if (first_verse != null)
                            {
                                verse_number_sum += first_verse.NumberInChapter;

                                if (first_verse.Words != null)
                                {
                                    foreach (Word word in first_verse.Words)
                                    {
                                        if (word != null)
                                        {
                                            if ((word.Letters != null) && (word.Letters.Count > 0))
                                            {
                                                if (word.Letters[word.Letters.Count - 1].NumberInVerse < start_letter.NumberInVerse) continue;
                                                word_count++;
                                                word_number_sum += word.NumberInVerse;

                                                foreach (Letter letter in word.Letters)
                                                {
                                                    if (letter != null)
                                                    {
                                                        if (letter.NumberInVerse < start_letter.NumberInVerse) continue;
                                                        letter_count++;
                                                        letter_number_sum += letter.NumberInWord;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            ///////////////////////////
                            // Middle Verses
                            ///////////////////////////
                            for (int i = 1; i < verses.Count - 1; i++)
                            {
                                Verse verse = verses[i];
                                if (verse != null)
                                {
                                    verse_number_sum += verse.NumberInChapter;

                                    if (verse.Words != null)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            word_count++;
                                            word_number_sum += word.NumberInVerse;

                                            if (word != null)
                                            {
                                                if ((word.Letters != null) && (word.Letters.Count > 0))
                                                {
                                                    foreach (Letter letter in word.Letters)
                                                    {
                                                        if (letter != null)
                                                        {
                                                            letter_count++;
                                                            letter_number_sum += letter.NumberInWord;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            ///////////////////////////
                            // Final Verse's Start Part
                            ///////////////////////////
                            Verse final_verse = verses[verses.Count - 1];
                            if (final_verse != null)
                            {
                                verse_number_sum += final_verse.NumberInChapter;

                                if (final_verse.Words != null)
                                {
                                    foreach (Word word in final_verse.Words)
                                    {
                                        if (word != null)
                                        {
                                            if ((word.Letters != null) && (word.Letters.Count > 0))
                                            {
                                                if (word.Letters[0].NumberInVerse > end_letter.NumberInVerse) break;
                                                word_count++;
                                                word_number_sum += word.NumberInVerse;

                                                foreach (Letter letter in word.Letters)
                                                {
                                                    if (letter != null)
                                                    {
                                                        if (letter.NumberInVerse > end_letter.NumberInVerse) break;
                                                        letter_count++;
                                                        letter_number_sum += letter.NumberInWord;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else // verses.Count == 0
                        {
                            // do nothing
                        }
                        DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
                        DisplayMathsChapterVerseSums(verses); // update C, V, C+V, C-V, C×V, C÷V, etc.

                        DisplayTranslations(verses); // display translations for selected verses
                        DisplaySymmetry();
                        DisplayCVWLSequence();
                        DisplayValuesSequence();
                        DisplayDNASequence();
                    }
                }
            }
        }
    }
    private void DisplayCounts(int chapter_count, int verse_count, int word_count, int letter_count, int chapter_number_sum, int verse_number_sum, int word_number_sum, int letter_number_sum)
    {
        DisplayCounts(chapter_count, verse_count, word_count, letter_count);

        if (chapter_number_sum != -1)
        {
            //ChapterNumberSumTextBox.Text = SUM_SYMBOL + Radix.Encode(chapter_number_sum, m_radix);
            //ChapterNumberSumTextBox.ForeColor = Numbers.GetNumberTypeColor(ChapterNumberSumTextBox.Text.Split()[1], m_radix);
            ChapterNumberSumTextBox.Text = SUM_SYMBOL + chapter_number_sum.ToString();
            ChapterNumberSumTextBox.ForeColor = Numbers.GetNumberTypeColor(chapter_number_sum);
            ChapterNumberSumTextBox.BackColor = (Numbers.Compare(chapter_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            ChapterNumberSumTextBox.Refresh();
        }

        if (verse_number_sum != -1)
        {
            //VerseNumberSumTextBox.Text = SUM_SYMBOL + Radix.Encode(verse_number_sum, m_radix);
            //VerseNumberSumTextBox.ForeColor = Numbers.GetNumberTypeColor(VerseNumberSumTextBox.Text.Split()[1], m_radix);
            VerseNumberSumTextBox.Text = SUM_SYMBOL + verse_number_sum.ToString();
            VerseNumberSumTextBox.ForeColor = Numbers.GetNumberTypeColor(verse_number_sum);
            VerseNumberSumTextBox.BackColor = (Numbers.Compare(verse_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            VerseNumberSumTextBox.Refresh();
        }

        if (word_number_sum != -1)
        {
            //WordNumberSumTextBox.Text = SUM_SYMBOL + Radix.Encode(word_number_sum, m_radix);
            //WordNumberSumTextBox.ForeColor = Numbers.GetNumberTypeColor(WordNumberSumTextBox.Text.Split()[1], m_radix);
            WordNumberSumTextBox.Text = SUM_SYMBOL + word_number_sum.ToString();
            WordNumberSumTextBox.ForeColor = Numbers.GetNumberTypeColor(word_number_sum);
            WordNumberSumTextBox.BackColor = (Numbers.Compare(word_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            WordNumberSumTextBox.Refresh();
        }

        if (letter_number_sum != -1)
        {
            //LetterNumberSumTextBox.Text = SUM_SYMBOL + Radix.Encode(letter_number_sum, m_radix);
            //LetterNumberSumTextBox.ForeColor = Numbers.GetNumberTypeColor(LetterNumberSumTextBox.Text.Split()[1], m_radix);
            LetterNumberSumTextBox.Text = SUM_SYMBOL + letter_number_sum.ToString();
            LetterNumberSumTextBox.ForeColor = Numbers.GetNumberTypeColor(letter_number_sum);
            LetterNumberSumTextBox.BackColor = (Numbers.Compare(letter_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            LetterNumberSumTextBox.Refresh();
        }
    }
    private void DisplayCounts(int chapter_count, int verse_count, int word_count, int letter_count)
    {
        ChaptersTextBox.Text = Radix.Encode(chapter_count, m_radix);
        ChaptersTextBox.ForeColor = Numbers.GetNumberTypeColor(ChaptersTextBox.Text, m_radix);
        ChaptersTextBox.BackColor = (Numbers.Compare(chapter_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
        ChaptersTextBox.Refresh();

        DecimalChaptersTextBox.Text = chapter_count.ToString();
        DecimalChaptersTextBox.ForeColor = Numbers.GetNumberTypeColor(chapter_count);
        DecimalChaptersTextBox.Visible = (m_radix != DEFAULT_RADIX);
        DecimalChaptersTextBox.Refresh();

        VersesTextBox.Text = Radix.Encode(verse_count, m_radix);
        VersesTextBox.ForeColor = Numbers.GetNumberTypeColor(VersesTextBox.Text, m_radix);
        VersesTextBox.BackColor = (Numbers.Compare(verse_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
        VersesTextBox.Refresh();

        DecimalVersesTextBox.Text = verse_count.ToString();
        DecimalVersesTextBox.ForeColor = Numbers.GetNumberTypeColor(verse_count);
        DecimalVersesTextBox.Visible = (m_radix != DEFAULT_RADIX);
        DecimalVersesTextBox.Refresh();

        WordsTextBox.Text = Radix.Encode(word_count, m_radix);
        WordsTextBox.ForeColor = Numbers.GetNumberTypeColor(WordsTextBox.Text, m_radix);
        WordsTextBox.BackColor = (Numbers.Compare(word_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
        WordsTextBox.Refresh();

        DecimalWordsTextBox.Text = word_count.ToString();
        DecimalWordsTextBox.ForeColor = Numbers.GetNumberTypeColor(word_count);
        DecimalWordsTextBox.Visible = (m_radix != DEFAULT_RADIX);
        DecimalWordsTextBox.Refresh();

        LettersTextBox.Text = Radix.Encode(letter_count, m_radix);
        LettersTextBox.ForeColor = Numbers.GetNumberTypeColor(LettersTextBox.Text, m_radix);
        LettersTextBox.BackColor = (Numbers.Compare(letter_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
        LettersTextBox.Refresh();

        DecimalLettersTextBox.Text = letter_count.ToString();
        DecimalLettersTextBox.ForeColor = Numbers.GetNumberTypeColor(letter_count);
        DecimalLettersTextBox.Visible = (m_radix != DEFAULT_RADIX);
        DecimalLettersTextBox.Refresh();
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Value Navigator
    ///////////////////////////////////////////////////////////////////////////////
    private Stack<int> m_navigation_undo_stack = new Stack<int>();
    private Stack<int> m_navigation_redo_stack = new Stack<int>();
    private void VerseFromNumerologyValue_Click(object sender, EventArgs e)
    {
        string verse_address = (sender as Label).Text;
        if ((verse_address.Length > 0) && (verse_address != "---:---"))
        {
            Verse verse = GetCurrentVerse();
            if (verse != null)
            {
                int current_verse_number = verse.Number;
                m_navigation_undo_stack.Push(current_verse_number);
                m_navigation_redo_stack.Clear();
                DisplayVerse(verse_address);
            }
        }
    }
    private void DisplayVerse(Verse verse)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (verse != null)
                {
                    if (verse.Chapter != null)
                    {
                        int chapter_number = verse.Chapter.SortedNumber;
                        int verse_number_in_chapter = verse.NumberInChapter;
                        int verse_number = m_client.Book.GetVerseNumber(chapter_number, verse_number_in_chapter);
                        if ((verse_number >= VerseNumericUpDown.Minimum) && (verse_number <= VerseNumericUpDown.Maximum))
                        {
                            VerseNumericUpDown.Focus();
                            VerseNumericUpDown.Value = verse_number;
                        }
                    }
                }
            }
        }
    }
    private void DisplayVerse(string verse_address)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                int chapter_number = 0;
                int verse_number_in_chapter = 0;
                int verse_number = 0;

                string[] parts = verse_address.Split(':');
                if (parts.Length == 2)
                {
                    try
                    {
                        chapter_number = int.Parse(parts[0]);
                        verse_number_in_chapter = int.Parse(parts[1]);
                        verse_number = m_client.Book.GetVerseNumber(chapter_number, verse_number_in_chapter);
                        if ((verse_number >= VerseNumericUpDown.Minimum) && (verse_number <= VerseNumericUpDown.Maximum))
                        {
                            Verse verse = m_client.Book.GetVerseByVerseNumber(verse_number);
                            if (verse != null)
                            {
                                DisplayVerse(verse);
                            }
                        }
                    }
                    catch
                    {
                        // ---:--- or any non-numeric text
                        return;
                    }
                }
                UndoValueNavigationLabel.ForeColor = (m_navigation_undo_stack.Count > 0) ? Color.Yellow : Color.LightGray;
                RedoValueNavigationLabel.ForeColor = (m_navigation_redo_stack.Count > 0) ? Color.Yellow : Color.LightGray;
            }
        }
    }
    private void UndoGotoVerse()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Book.Verses != null)
                {
                    if (m_navigation_undo_stack.Count > 0)
                    {
                        Verse verse = GetCurrentVerse();
                        if (verse != null)
                        {
                            int current_verse_number = verse.Number;
                            m_navigation_redo_stack.Push(current_verse_number);
                            int verse_number = m_navigation_undo_stack.Pop();
                            string verse_address = m_client.Book.Verses[verse_number - 1].Address;
                            DisplayVerse(verse_address);
                        }
                    }
                }
            }
        }
    }
    private void RedoGotoVerse()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Book.Verses != null)
                {
                    if (m_navigation_redo_stack.Count > 0)
                    {
                        Verse verse = GetCurrentVerse();
                        if (verse != null)
                        {
                            int current_verse_number = verse.Number;
                            m_navigation_undo_stack.Push(current_verse_number);
                            int verse_number = m_navigation_redo_stack.Pop();
                            string verse_address = m_client.Book.Verses[verse_number - 1].Address;
                            DisplayVerse(verse_address);
                        }
                    }
                }
            }
        }
    }
    private void UndoValueNavigationLabel_Click(object sender, EventArgs e)
    {
        UndoGotoVerse();
    }
    private void RedoValueNavigationLabel_Click(object sender, EventArgs e)
    {
        RedoGotoVerse();
    }
    private void ValueNavigatorControls_Enter(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);
        this.AcceptButton = null;
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Value Drawings
    ///////////////////////////////////////////////////////////////////////////////
    //public enum DrawingShape { Lines, Spiral, SquareSpiral, Square, HGoldenRect, VGoldenRect, Cube };
    private enum DrawingType { LetterValues, WordValues, WordLengths, SearchTerms, AllahWords, WithAllahWords, Primes, AdditivePrimes, NonAdditivePrimes, GeneratePrimeDrawings };
    private DrawingShape m_drawing_shape = DrawingShape.Lines;
    private DrawingType m_current_drawing_type = DrawingType.LetterValues;
    private Bitmap m_bitmap = null;
    private void PictureBox_MouseHover(object sender, EventArgs e)
    {
        PictureBox.Focus(); // to enable zooming
    }
    private void PictureBox_MouseMove(object sender, MouseEventArgs e)
    {
        if (m_drawing_shape == DrawingShape.Lines)
        {
            int page_index = e.Y - PictureBox.Image_Y;
            int position = PictureBox.Width - (e.X - PictureBox.Image_X) - 1;

            if (m_client != null)
            {
                List<Verse> verses = null;
                switch (m_client.SearchScope)
                {
                    case SearchScope.Book:
                        {
                            if (m_client.Book != null)
                            {
                                verses = m_client.Book.Verses;
                            }
                        }
                        break;
                    case SearchScope.Selection:
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }
                        break;
                    case SearchScope.Result:
                        {
                            verses = m_client.FoundVerses;
                        }
                        break;
                }

                if (verses != null)
                {
                    List<Page> pages = new List<Page>();
                    if (pages != null)
                    {
                        foreach (Verse verse in verses)
                        {
                            if (!pages.Contains(verse.Page))
                            {
                                pages.Add(verse.Page);
                            }
                        }

                        if ((page_index >= 0) && (page_index < pages.Count))
                        {
                            Page found_page = pages[page_index];

                            List<Letter> page_letters = new List<Letter>();
                            foreach (Verse verse in found_page.Verses)
                            {
                                if (verse != null)
                                {
                                    foreach (Word word in verse.Words)
                                    {
                                        if (word != null)
                                        {
                                            page_letters.AddRange(word.Letters);
                                            page_letters.Add(null); // space
                                        }
                                    }
                                }
                            }

                            if (page_letters != null)
                            {
                                if ((position >= 0) && (position < page_letters.Count))
                                {
                                    Letter found_letter = page_letters[position];
                                    if (found_letter != null) // not space
                                    {
                                        Word word = found_letter.Word;
                                        if (word != null)
                                        {
                                            this.Text = Application.ProductName + " | " + "Chapter " + word.Verse.Chapter.SortedNumber;
                                            // diplay word info at application caption
                                            this.Text += SPACE_GAP +
                                            (
                                                word.Verse.Chapter.Name + SPACE_GAP +
                                                "verse " + word.Verse.NumberInChapter + "-" + word.Verse.Number + SPACE_GAP +
                                                "word " + word.NumberInVerse + "-" + word.NumberInChapter + "-" + word.Number + SPACE_GAP +
                                                word.Transliteration + SPACE_GAP +
                                                word.Text + SPACE_GAP +
                                                word.Meaning + SPACE_GAP +
                                                word.Occurrence.ToString() + "/" + word.Frequency.ToString()
                                            );

                                            ToolTip.SetToolTip(PictureBox, GetWordInformation(word));
                                        }
                                        else
                                        {
                                            ToolTip.SetToolTip(PictureBox, null);
                                        }
                                    }
                                    else
                                    {
                                        ToolTip.SetToolTip(PictureBox, null);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
            ToolTip.SetToolTip(PictureBox, null);
        }
    }
    private void ChangeDrawingShapeLabel_Click(object sender, EventArgs e)
    {
        if (ModifierKeys == Keys.Shift)
        {
            GotoPreviousShape();
        }
        else
        {
            GotoNextShape();
        }
        ToolTip.SetToolTip(ChangeDrawingShapeLabel, m_drawing_shape.ToString());

        // update graphs as we move between selections
        if (PictureBox.Visible)
        {
            RedrawImage();
        }
    }
    private void GotoNextShape()
    {
        switch (m_drawing_shape)
        {
            case DrawingShape.Lines:
                {
                    m_drawing_shape = DrawingShape.Spiral;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "spiral.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "spiral.png");
                    }
                }
                break;
            case DrawingShape.Spiral:
                {
                    m_drawing_shape = DrawingShape.SquareSpiral;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "squarespiral.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "squarespiral.png");
                    }
                }
                break;
            case DrawingShape.SquareSpiral:
                {
                    m_drawing_shape = DrawingShape.Square;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "square.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "square.png");
                    }
                }
                break;
            case DrawingShape.Square:
                {
                    m_drawing_shape = DrawingShape.HGoldenRect;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "hgoldenrect.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "hgoldenrect.png");
                    }
                }
                break;
            case DrawingShape.HGoldenRect:
                {
                    m_drawing_shape = DrawingShape.VGoldenRect;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "vgoldenrect.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "vgoldenrect.png");
                    }
                }
                break;
            case DrawingShape.VGoldenRect:
                {
                    m_drawing_shape = DrawingShape.Cube;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "cube.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "cube.png");
                    }
                }
                break;
            case DrawingShape.Cube:
                {
                    m_drawing_shape = DrawingShape.Lines;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "lines.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "lines.png");
                    }

                }
                break;
        }
        DrawSearchTermsLabel.Image = ChangeDrawingShapeLabel.Image;
    }
    private void GotoPreviousShape()
    {
        switch (m_drawing_shape)
        {
            case DrawingShape.Lines:
                {
                    m_drawing_shape = DrawingShape.Cube;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "cube.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "cube.png");
                        DrawSearchTermsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "cube.png");
                    }
                }
                break;
            case DrawingShape.Spiral:
                {
                    m_drawing_shape = DrawingShape.Lines;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "lines.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "lines.png");
                        DrawSearchTermsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "lines.png");
                    }
                }
                break;
            case DrawingShape.SquareSpiral:
                {
                    m_drawing_shape = DrawingShape.Spiral;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "spiral.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "spiral.png");
                        DrawSearchTermsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "spiral.png");
                    }
                }
                break;
            case DrawingShape.Square:
                {
                    m_drawing_shape = DrawingShape.SquareSpiral;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "squarespiral.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "squarespiral.png");
                        DrawSearchTermsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "squarespiral.png");
                    }
                }
                break;
            case DrawingShape.HGoldenRect:
                {
                    m_drawing_shape = DrawingShape.Square;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "square.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "square.png");
                        DrawSearchTermsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "square.png");
                    }
                }
                break;
            case DrawingShape.VGoldenRect:
                {
                    m_drawing_shape = DrawingShape.HGoldenRect;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "hgoldenrect.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "hgoldenrect.png");
                        DrawSearchTermsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "hgoldenrect.png");
                    }
                }
                break;
            case DrawingShape.Cube:
                {
                    m_drawing_shape = DrawingShape.VGoldenRect;
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "vgoldenrect.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "vgoldenrect.png");
                        DrawSearchTermsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "vgoldenrect.png");
                    }
                }
                break;
        }
    }
    private void DrawLetterValuesLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                switch (m_client.SearchScope)
                {
                    case SearchScope.Book:
                        {
                            if (m_client.Book != null)
                            {
                                verses = m_client.Book.Verses;
                            }
                        }
                        break;
                    case SearchScope.Selection:
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }
                        break;
                    case SearchScope.Result:
                        {
                            verses = m_client.FoundVerses;
                        }
                        break;
                }

                if (verses != null)
                {
                    ShowPictureBox();
                    m_current_drawing_type = DrawingType.LetterValues;
                    HeaderLabel.Text = m_current_drawing_type.ToString();
                    HeaderLabel.ForeColor = Numbers.GetNumberTypeColor(0L);
                    HeaderLabel.Refresh();

                    m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
                    if (m_bitmap != null)
                    {
                        this.PictureBox.Image = m_bitmap;

                        List<long> values = m_client.CalculateLetterValues(verses);
                        if (m_drawing_shape == DrawingShape.Cube)
                        {
                            // cubic-root
                            int width = (int)Math.Floor(Math.Pow(values.Count + 1, 1.0D / 3.0D));
                            int height = width;
                            int layers = width;

                            for (int n = 0; n < layers; n++)
                            {
                                int value_index = n * (width * height);
                                int value_count = (width * height);
                                Drawing.DrawValues(m_bitmap, values.GetRange(value_index, value_count), Color.Pink, m_drawing_shape);
                                PictureBox.Refresh();
                                Thread.Sleep(100);
                            }
                        }
                        else
                        {
                            Drawing.DrawValues(m_bitmap, values, Color.Pink, m_drawing_shape);
                            PictureBox.Refresh();
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message);
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawWordValuesLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                switch (m_client.SearchScope)
                {
                    case SearchScope.Book:
                        {
                            if (m_client.Book != null)
                            {
                                verses = m_client.Book.Verses;
                            }
                        }
                        break;
                    case SearchScope.Selection:
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }
                        break;
                    case SearchScope.Result:
                        {
                            verses = m_client.FoundVerses;
                        }
                        break;
                }

                if (verses != null)
                {
                    ShowPictureBox();
                    m_current_drawing_type = DrawingType.WordValues;
                    HeaderLabel.Text = m_current_drawing_type.ToString();
                    HeaderLabel.ForeColor = Numbers.GetNumberTypeColor(0L);
                    HeaderLabel.Refresh();

                    m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
                    if (m_bitmap != null)
                    {
                        this.PictureBox.Image = m_bitmap;

                        List<long> values = m_client.CalculateWordValues(verses);
                        if (m_drawing_shape == DrawingShape.Cube)
                        {
                            // cubic-root
                            int width = (int)Math.Floor(Math.Pow(values.Count + 1, 1.0D / 3.0D));
                            int height = width;
                            int layers = width;

                            for (int n = 0; n < layers; n++)
                            {
                                int value_index = n * (width * height);
                                int value_count = (width * height);
                                Drawing.DrawValues(m_bitmap, values.GetRange(value_index, value_count), Color.Pink, m_drawing_shape);
                                PictureBox.Refresh();
                            }
                        }
                        else
                        {
                            Drawing.DrawValues(m_bitmap, values, Color.Pink, m_drawing_shape);
                            PictureBox.Refresh();
                        }
                    }
                }
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawSearchTermsLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                switch (m_client.SearchScope)
                {
                    case SearchScope.Book:
                        {
                            if (m_client.Book != null)
                            {
                                verses = m_client.Book.Verses;
                            }
                        }
                        break;
                    case SearchScope.Selection:
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }
                        break;
                    case SearchScope.Result:
                        {
                            verses = m_client.FoundVerses;
                        }
                        break;
                }

                if (verses != null)
                {
                    ShowPictureBox();
                    m_current_drawing_type = DrawingType.SearchTerms;

                    m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
                    if (m_bitmap != null)
                    {
                        this.PictureBox.Image = m_bitmap;

                        int count = 0;
                        int given_word_count = 0;
                        string text = FindByTextTextBox.Text.Trim().Simplify29();
                        text = text.Replace("  ", " ");
                        string[] terms = text.Split(' ');

                        List<Page> pages = new List<Page>();
                        if (pages != null)
                        {
                            foreach (Verse verse in verses)
                            {
                                if (!pages.Contains(verse.Page))
                                {
                                    pages.Add(verse.Page);
                                }
                            }

                            List<List<long>> valuess = new List<List<long>>();
                            foreach (Page page in pages)
                            {
                                List<Word> words = new List<Word>();
                                foreach (Verse verse in page.Verses)
                                {
                                    words.AddRange(verse.Words);
                                }

                                List<long> values = new List<long>();
                                foreach (Word word in words)
                                {
                                    bool found = false;
                                    for (int i = 0; i < terms.Length; i++)
                                    {
                                        if (m_text_wordness == TextWordness.WholeWord)
                                        {
                                            if (word.Text.Simplify29() == terms[i])
                                            {
                                                values.Add(i + 1L);
                                                given_word_count++;
                                                found = true;
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            if (word.Text.Simplify29().Contains(terms[i]))
                                            {
                                                values.Add(i + 1L);
                                                given_word_count++;
                                                found = true;
                                                break;
                                            }
                                        }
                                    }
                                    if (!found)
                                    {
                                        values.Add(0L);
                                    }
                                    count++;
                                }
                                valuess.Add(values);
                            }

                            List<List<long>> lengthss = new List<List<long>>();
                            foreach (Page page in pages)
                            {
                                List<Word> words = new List<Word>();
                                foreach (Verse verse in page.Verses)
                                {
                                    words.AddRange(verse.Words);
                                }

                                List<long> lengths = new List<long>();
                                foreach (Word word in words)
                                {
                                    lengths.Add(word.Letters.Count);
                                }
                                lengthss.Add(lengths);
                            }

                            Dictionary<long, Color> colors = new Dictionary<long, Color>();
                            colors.Add(0L, Color.FromArgb(32, 32, 32));
                            colors.Add(1L, Color.Pink);
                            colors.Add(2L, Color.LightBlue);
                            colors.Add(3L, Color.Lime);
                            colors.Add(4L, Color.Green);
                            colors.Add(5L, Color.Blue);
                            colors.Add(6L, Color.Purple);
                            colors.Add(7L, Color.White);
                            if (m_drawing_shape == DrawingShape.Lines)
                            {
                                Drawing.DrawPageLines(m_bitmap, lengthss, valuess, colors);
                            }
                            else
                            {
                                List<long> list = new List<long>();
                                foreach (List<long> values in valuess)
                                {
                                    list.AddRange(values);
                                }
                                Drawing.DrawPoints(m_bitmap, list, colors, m_drawing_shape);
                            }
                            PictureBox.Refresh();
                        }

                        StringBuilder str = new StringBuilder();
                        str.Append(text + " words = " + given_word_count);
                        HeaderLabel.Text = str.ToString();
                        HeaderLabel.ForeColor = Numbers.GetNumberTypeColor(given_word_count);
                        HeaderLabel.Refresh();

                        str.Length = 0;
                        str.AppendLine("Quran words\t= " + count);
                        str.AppendLine(text + " words\t= " + given_word_count);
                    }
                }
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawWordAllahLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                switch (m_client.SearchScope)
                {
                    case SearchScope.Book:
                        {
                            if (m_client.Book != null)
                            {
                                verses = m_client.Book.Verses;
                            }
                        }
                        break;
                    case SearchScope.Selection:
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }
                        break;
                    case SearchScope.Result:
                        {
                            verses = m_client.FoundVerses;
                        }
                        break;
                }

                if (verses != null)
                {
                    ShowPictureBox();
                    m_current_drawing_type = DrawingType.AllahWords;

                    List<long> values = new List<long>();
                    m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
                    if (m_bitmap != null)
                    {
                        this.PictureBox.Image = m_bitmap;

                        int count = 0;
                        int Allah_word_count = 0;

                        foreach (Verse verse in verses)
                        {
                            foreach (Word word in verse.Words)
                            {
                                // always simplify29 for Allah word comparison
                                string simplified_text = word.Text.Simplify29();

                                if (simplified_text == "الله")
                                {
                                    values.Add(1L);
                                    Allah_word_count++;
                                }
                                else
                                {
                                    values.Add(0L);
                                }
                                count++;
                            }
                        }

                        StringBuilder str = new StringBuilder();
                        str.Append("Allah words = " + Allah_word_count);
                        HeaderLabel.Text = str.ToString();
                        HeaderLabel.ForeColor = Numbers.GetNumberTypeColor(Allah_word_count);
                        HeaderLabel.Refresh();

                        str.Length = 0;
                        str.AppendLine("Quran words\t= " + count);
                        str.AppendLine("Allah words\t= " + Allah_word_count);
                    }

                    Dictionary<long, Color> colors = new Dictionary<long, Color>();
                    colors.Add(0L, Color.FromArgb(32, 32, 32));
                    colors.Add(1L, Color.Pink);
                    if (m_drawing_shape == DrawingShape.Lines)
                    {
                        FindByTextTextBox.Text = "الله";
                        DrawSearchTermsLabel_Click(null, null);
                    }
                    else
                    {
                        Drawing.DrawPoints(m_bitmap, values, colors, m_drawing_shape);
                    }
                    PictureBox.Refresh();
                }
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawWordsWithAllahLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                switch (m_client.SearchScope)
                {
                    case SearchScope.Book:
                        {
                            if (m_client.Book != null)
                            {
                                verses = m_client.Book.Verses;
                            }
                        }
                        break;
                    case SearchScope.Selection:
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }
                        break;
                    case SearchScope.Result:
                        {
                            verses = m_client.FoundVerses;
                        }
                        break;
                }

                if (verses != null)
                {
                    ShowPictureBox();
                    m_current_drawing_type = DrawingType.WithAllahWords;

                    List<long> values = new List<long>();
                    m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
                    if (m_bitmap != null)
                    {
                        this.PictureBox.Image = m_bitmap;

                        int count = 0;
                        int Allah_word_count = 0;
                        int with_Allah_word_count = 0;
                        int with_lillah_word_count = 0;

                        foreach (Verse verse in verses)
                        {
                            foreach (Word word in verse.Words)
                            {
                                // always simplify29 for Allah word comparison
                                string simplified_text = word.Text.Simplify29();

                                if (simplified_text == "الله") // "Allah"
                                {
                                    values.Add(1);
                                    Allah_word_count++;
                                }
                                else if ( // Prefix"Allah", Prefix"Allah"Suffix, "Allah"Suffix
                                          (simplified_text.Contains("الله")) &&        // +Allah+ words
                                          (!simplified_text.Contains("اللهو")) &&   // 1 word
                                          (!simplified_text.Contains("اللهب"))      // 1 word
                                        )
                                {
                                    values.Add(2L);
                                    with_Allah_word_count++;
                                }
                                else if ( // Prefix"Lillah", Prefix"Lillah"Suffix, "Lillah"Suffix
                                          (simplified_text.Contains("لله")) &&        // +LiAllah+
                                          (!simplified_text.Contains("اللهو")) &&   // 1 words
                                          (!simplified_text.Contains("اللهب")) &&   // 1 words
                                          (!simplified_text.Contains("ضلله")) &&    // 8 words
                                          (!simplified_text.Contains("ظلله")) &&    // 3 words
                                          (!simplified_text.Contains("كلله")) &&    // 2 words
                                          (!simplified_text.Contains("خلله")) &&    // 5 words
                                          (!simplified_text.Contains("سلله")) &&    // 2 words
                                          (!simplified_text.Contains("للهدي"))      // 1 word
                                        )
                                {
                                    values.Add(3L);
                                    with_lillah_word_count++;
                                }
                                else
                                {
                                    values.Add(0L);
                                }
                                count++;
                            }
                        }

                        StringBuilder str = new StringBuilder();
                        str.Append("Allah words = " + Allah_word_count + " | ");
                        str.Append("+Allah+ = " + with_Allah_word_count + " | ");
                        str.Append("+Lillah+ = " + with_lillah_word_count + " | ");
                        str.Append("Total = " + (Allah_word_count + with_Allah_word_count + with_lillah_word_count));
                        HeaderLabel.Text = str.ToString();
                        HeaderLabel.ForeColor = Numbers.GetNumberTypeColor((Allah_word_count + with_Allah_word_count + with_lillah_word_count));
                        HeaderLabel.Refresh();

                        str.Length = 0;
                        str.AppendLine("Quran words\t= " + count);
                        str.AppendLine("Allah words\t= " + Allah_word_count);
                        str.AppendLine("Words with Allah\t= " + with_Allah_word_count + "\t  " + "No اللهو اللهب");
                        str.AppendLine("Words with Lillah\t= " + with_lillah_word_count + "\t  " + "No اللهو اللهب خلله كللة ضللة ظلله سللة للهدى");
                        str.AppendLine("All Allah words\t= " + (Allah_word_count + with_Allah_word_count + with_lillah_word_count));
                        str.AppendLine();
                        str.AppendLine("Excluding:");
                        str.AppendLine("2:16  الضللة");
                        str.AppendLine("2:175 الضللة");
                        str.AppendLine("4:44  الضللة");
                        str.AppendLine("4:12  كللة");
                        str.AppendLine("4:176 الكللة");
                        str.AppendLine("6:39  يضلله");
                        str.AppendLine("7:30  الضللة");
                        str.AppendLine("7:61  ضللة");
                        str.AppendLine("13:15 وظللهم");
                        str.AppendLine("16:36 الضللة");
                        str.AppendLine("16:48 ظلله");
                        str.AppendLine("17:91 خللها");
                        str.AppendLine("18:33 خللهما");
                        str.AppendLine("19:75 الضللة");
                        str.AppendLine("23:12 سللة");
                        str.AppendLine("24:43 خلله");
                        str.AppendLine("27:61 خللها");
                        str.AppendLine("30:48 خلله");
                        str.AppendLine("32:8  سللة");
                        str.AppendLine("62:11 اللهو");
                        str.AppendLine("76:14 ظللها");
                        str.AppendLine("77:31 اللهب");
                        str.AppendLine("92:12 للهدى");
                    }

                    Dictionary<long, Color> colors = new Dictionary<long, Color>();
                    colors.Add(0L, Color.FromArgb(32, 32, 32));
                    colors.Add(1L, Color.Pink);
                    colors.Add(2L, Color.LightBlue);
                    colors.Add(3L, Color.Lime);
                    if (m_drawing_shape == DrawingShape.Lines)
                    {
                        FindByTextTextBox.Text = "الله لله";
                        DrawSearchTermsLabel_Click(null, null);
                    }
                    else
                    {
                        Drawing.DrawPoints(m_bitmap, values, colors, m_drawing_shape);
                    }
                    PictureBox.Refresh();
                }
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DisplayWordsWithAllahLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            string filename = Globals.HELP_FOLDER + "/" + "AllahWords.txt";
            FileHelper.DisplayFile(filename);
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawPrimesLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            ShowPictureBox();
            m_current_drawing_type = DrawingType.Primes;
            HeaderLabel.Text = m_current_drawing_type.ToString();
            HeaderLabel.ForeColor = Numbers.GetNumberTypeColor(0L);
            HeaderLabel.Refresh();

            m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
            if (m_bitmap != null)
            {
                this.PictureBox.Image = m_bitmap;

                int width = (m_bitmap.Width > m_bitmap.Height) ? m_bitmap.Width : m_bitmap.Height;
                int height = width;
                int max = width * height;
                List<long> values = new List<long>(max);
                for (int i = 0; i < max; i++)
                {
                    if (Numbers.IsAdditivePrime(i + 1))
                    {
                        values.Add(2L);
                    }
                    else if (Numbers.IsNonAdditivePrime(i + 1))
                    {
                        values.Add(1L);
                    }
                    else
                    {
                        values.Add(0L);
                    }
                }

                Dictionary<long, Color> colors = new Dictionary<long, Color>();
                colors.Add(0L, Color.FromArgb(32, 32, 32));
                colors.Add(1L, Color.Pink);
                colors.Add(2L, Color.LightBlue);
                Drawing.DrawPoints(m_bitmap, values, colors, m_drawing_shape);
                PictureBox.Refresh();
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawAdditivePrimesLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            ShowPictureBox();
            m_current_drawing_type = DrawingType.AdditivePrimes;
            HeaderLabel.Text = m_current_drawing_type.ToString();
            HeaderLabel.ForeColor = Numbers.GetNumberTypeColor(0L);
            HeaderLabel.Refresh();

            m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
            if (m_bitmap != null)
            {
                this.PictureBox.Image = m_bitmap;

                int width = (m_bitmap.Width > m_bitmap.Height) ? m_bitmap.Width : m_bitmap.Height;
                int height = width;
                int max = width * height;
                List<long> values = new List<long>(max);
                for (int i = 0; i < max; i++)
                {
                    if (Numbers.IsAdditivePrime(i + 1))
                    {
                        values.Add(2L);
                    }
                    else
                    {
                        values.Add(0L);
                    }
                }

                Dictionary<long, Color> colors = new Dictionary<long, Color>();
                colors.Add(0L, Color.FromArgb(32, 32, 32));
                colors.Add(1L, Color.Pink);
                colors.Add(2L, Color.LightBlue);
                Drawing.DrawPoints(m_bitmap, values, colors, m_drawing_shape);
                PictureBox.Refresh();
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawNonAdditivePrimesLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            ShowPictureBox();
            m_current_drawing_type = DrawingType.NonAdditivePrimes;
            HeaderLabel.Text = m_current_drawing_type.ToString();
            HeaderLabel.ForeColor = Numbers.GetNumberTypeColor(0L);
            HeaderLabel.Refresh();

            m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
            if (m_bitmap != null)
            {
                this.PictureBox.Image = m_bitmap;

                int width = (m_bitmap.Width > m_bitmap.Height) ? m_bitmap.Width : m_bitmap.Height;
                int height = width;
                int max = width * height;
                List<long> values = new List<long>(max);
                for (int i = 0; i < max; i++)
                {
                    if (Numbers.IsNonAdditivePrime(i + 1))
                    {
                        values.Add(1L);
                    }
                    else
                    {
                        values.Add(0L);
                    }
                }

                Dictionary<long, Color> colors = new Dictionary<long, Color>();
                colors.Add(0L, Color.FromArgb(32, 32, 32));
                colors.Add(1L, Color.Pink);
                colors.Add(2L, Color.LightBlue);
                Drawing.DrawPoints(m_bitmap, values, colors, m_drawing_shape);
                PictureBox.Refresh();
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void GeneratePrimeDrawingsLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            m_current_drawing_type = DrawingType.GeneratePrimeDrawings;
            Drawing.GeneratePrimeDrawings(Color.LightGreen, Color.CornflowerBlue);
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void ShowPictureBox()
    {
        PictureBox.Visible = true;
        PictureBox.BringToFront();

        // restore graphic zoom icons
        ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
        ZoomOutLabel.Enabled = (m_graphics_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));
    }
    private void HidePictureBox()
    {
        PictureBox.Visible = false;

        // restore text heading
        UpdateHeaderLabel();

        // restore text zoom icons
        ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
        ZoomOutLabel.Enabled = (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));
    }
    private void RedrawImage()
    {
        if (PictureBox.Visible)
        {
            switch (m_current_drawing_type)
            {
                case DrawingType.LetterValues:
                    DrawLetterValuesLabel_Click(null, null);
                    break;
                case DrawingType.WordValues:
                    DrawWordAllahLabel_Click(null, null);
                    break;
                case DrawingType.WordLengths:
                    DrawWordValuesLabel_Click(null, null);
                    break;
                case DrawingType.SearchTerms:
                    DrawSearchTermsLabel_Click(null, null);
                    break;
                case DrawingType.AllahWords:
                    DrawWordAllahLabel_Click(null, null);
                    break;
                case DrawingType.WithAllahWords:
                    DrawWordsWithAllahLabel_Click(null, null);
                    break;
                case DrawingType.Primes:
                    DrawPrimesLabel_Click(null, null);
                    break;
                case DrawingType.AdditivePrimes:
                    DrawAdditivePrimesLabel_Click(null, null);
                    break;
                case DrawingType.NonAdditivePrimes:
                    DrawNonAdditivePrimesLabel_Click(null, null);
                    break;
                default:
                    break;
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Statistics
    ///////////////////////////////////////////////////////////////////////////////
    private List<char> m_selected_letters = new List<char>();
    private void LetterFrequencyListView_ColumnClick(object sender, ColumnClickEventArgs e)
    {
        if (sender is ListView)
        {
            ListView listview = sender as ListView;
            try
            {
                if (m_client != null)
                {
                    m_client.SortLetterStatistics((StatisticSortMethod)e.Column);
                    DisplayLetterFrequencies();

                    // choose sort marker
                    string sort_marker = (LetterStatistic.SortOrder == StatisticSortOrder.Ascending) ? "▲" : "▼";

                    // remove all sort markers
                    foreach (ColumnHeader column in listview.Columns)
                    {
                        if (column.Text.EndsWith("▲"))
                        {
                            column.Text = column.Text.Replace("▲", " ");
                        }
                        else if (column.Text.EndsWith("▼"))
                        {
                            column.Text = column.Text.Replace("▼", " ");
                        }
                    }

                    // display sort marker
                    listview.Columns[e.Column].Text = listview.Columns[e.Column].Text.Replace("  ", " " + sort_marker);
                }
            }
            catch
            {
                // log exception
            }
        }
    }
    private void LetterFrequencyListView_SelectedIndexChanged(object sender, EventArgs e)
    {
        // only update m_selected_letters if user manually select items
        // otherwise we would lose items in they don't appear in a selection
        // and would give wrong results for subsequent selections with these items 
        if (LetterFrequencyListView.Focused)
        {
            m_selected_letters.Clear();
            if (LetterFrequencyListView.SelectedIndices.Count > 0)
            {
                foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
                {
                    m_selected_letters.Add(item.SubItems[1].Text[0]);
                }
            }
        }

        DisplayLetterFrequenciesTotals();

        FindByFrequencyButton.Enabled = (LetterFrequencyListView.SelectedIndices.Count > 0);
    }
    private void LetterFrequencyListView_DoubleClick(object sender, EventArgs e)
    {
        char letter = '\0';

        Dictionary<char, List<int>> letter_positions = new Dictionary<char, List<int>>();
        Dictionary<char, List<int>> letter_distances = new Dictionary<char, List<int>>();
        foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
        {
            letter = item.SubItems[1].Text[0];
            letter_positions.Add(letter, new List<int>());
            letter_distances.Add(letter, new List<int>());
        }

        if (!String.IsNullOrEmpty(m_current_text))
        {
            string text = m_current_text.SimplifyTo(m_client.NumerologySystem.TextMode);
            text = text.Replace("\r", "");
            text = text.Replace("\n", "");
            text = text.Replace("\t", "");
            text = text.Replace("_", "");
            text = text.Replace(" ", "");
            text = text.Replace(Constants.OPEN_BRACKET, "");
            text = text.Replace(Constants.CLOSE_BRACKET, "");
            foreach (char c in Constants.INDIAN_DIGITS)
            {
                text = text.Replace(c.ToString(), "");
            }

            foreach (char key in letter_positions.Keys)
            {
                int pos = text.IndexOf(key);
                if (pos > -1)
                {
                    letter_positions[key].Add(pos + 1);
                    for (int i = pos + 1; i < text.Length; i++)
                    {
                        if (text[i] == key)
                        {
                            letter_positions[key].Add(i + 1);

                            int letter_distance = i - pos;
                            if (letter_distances.ContainsKey(key))
                            {
                                letter_distances[key].Add(letter_distance);
                            }
                            pos = i;
                        }
                    }
                }
            }

            Dictionary<char, int> letter_position_sums = new Dictionary<char, int>();
            foreach (char key in letter_positions.Keys)
            {
                int sum = 0;
                foreach (int n in letter_positions[key])
                {
                    sum += n;
                }
                letter_position_sums.Add(key, sum);
            }
            Dictionary<char, int> letter_distance_sums = new Dictionary<char, int>();
            foreach (char key in letter_distances.Keys)
            {
                int sum = 0;
                foreach (int n in letter_distances[key])
                {
                    sum += n;
                }
                letter_distance_sums.Add(key, sum);
            }

            StringBuilder str = new StringBuilder();
            foreach (char key in letter_positions.Keys)
            {
                str.Append("Positions" + "\t" + key.ToString() + "\t");
                str.Append(letter_position_sums[key].ToString() + "\t");
                foreach (int ld in letter_positions[key])
                {
                    str.Append(ld.ToString() + ",");
                }
                if (str.Length > 0)
                {
                    str.Remove(str.Length - 1, 1);
                }
                str.AppendLine();
            }

            foreach (char key in letter_distances.Keys)
            {
                str.Append("Distances" + "\t" + key.ToString() + "\t");
                str.Append(letter_distance_sums[key].ToString() + "\t");
                foreach (int ld in letter_distances[key])
                {
                    str.Append(ld.ToString() + ",");
                }
                if (str.Length > 0)
                {
                    str.Remove(str.Length - 1, 1);
                }
                str.AppendLine();
            }

            string filename = letter.ToString() + "_" + "LetterPositionsAndDistances" + Globals.OUTPUT_FILE_EXT;
            if (Directory.Exists(Globals.RESEARCH_FOLDER))
            {
                string path = Globals.RESEARCH_FOLDER + "/" + filename;
                FileHelper.SaveText(path, str.ToString());
                FileHelper.DisplayFile(path);
            }
        }
    }
    private void PositionsToolStripMenuItem_Click(object sender, EventArgs e)
    {
        Dictionary<char, List<int>> letter_positions = new Dictionary<char, List<int>>();
        foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
        {
            char key = item.SubItems[1].Text[0];
            letter_positions.Add(key, new List<int>());
        }

        if (!String.IsNullOrEmpty(m_current_text))
        {
            string text = m_current_text.SimplifyTo(m_client.NumerologySystem.TextMode);
            text = text.Replace("\r", "");
            text = text.Replace("\n", "");
            text = text.Replace("\t", "");
            text = text.Replace("_", "");
            text = text.Replace(" ", "");
            text = text.Replace(Constants.OPEN_BRACKET, "");
            text = text.Replace(Constants.CLOSE_BRACKET, "");
            foreach (char c in Constants.INDIAN_DIGITS)
            {
                text = text.Replace(c.ToString(), "");
            }

            foreach (char key in letter_positions.Keys)
            {
                int pos = text.IndexOf(key);
                if (pos > -1)
                {
                    letter_positions[key].Add(pos + 1);
                    for (int i = pos + 1; i < text.Length; i++)
                    {
                        if (text[i] == key)
                        {
                            letter_positions[key].Add(i + 1);
                        }
                    }
                }
            }

            Dictionary<char, int> letter_position_sums = new Dictionary<char, int>();
            foreach (char key in letter_positions.Keys)
            {
                int sum = 0;
                foreach (int n in letter_positions[key])
                {
                    sum += n;
                }
                letter_position_sums.Add(key, sum);
            }

            StringBuilder str = new StringBuilder();
            foreach (char key in letter_positions.Keys)
            {
                str.Append("Positions" + "\t" + key.ToString() + "\t");
                str.Append(letter_position_sums[key].ToString() + "\t");
                foreach (int ld in letter_positions[key])
                {
                    str.Append(ld.ToString() + ",");
                }
                if (str.Length > 0)
                {
                    str.Remove(str.Length - 1, 1);
                }
                str.AppendLine();
            }

            string filename = "LetterPositions" + Globals.OUTPUT_FILE_EXT;
            if (Directory.Exists(Globals.RESEARCH_FOLDER))
            {
                string path = Globals.RESEARCH_FOLDER + "/" + filename;
                FileHelper.SaveText(path, str.ToString());
                FileHelper.DisplayFile(path);
            }
        }
    }
    private void DistancesToolStripMenuItem_Click(object sender, EventArgs e)
    {
        Dictionary<char, List<int>> letter_distances = new Dictionary<char, List<int>>();
        foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
        {
            char key = item.SubItems[1].Text[0];
            letter_distances.Add(key, new List<int>());
        }

        if (!String.IsNullOrEmpty(m_current_text))
        {
            string text = m_current_text.SimplifyTo(m_client.NumerologySystem.TextMode);
            text = text.Replace("\r", "");
            text = text.Replace("\n", "");
            text = text.Replace("\t", "");
            text = text.Replace("_", "");
            text = text.Replace(" ", "");
            text = text.Replace(Constants.OPEN_BRACKET, "");
            text = text.Replace(Constants.CLOSE_BRACKET, "");
            foreach (char c in Constants.INDIAN_DIGITS)
            {
                text = text.Replace(c.ToString(), "");
            }

            foreach (char key in letter_distances.Keys)
            {
                int pos = text.IndexOf(key);
                if (pos > -1)
                {
                    for (int i = pos + 1; i < text.Length; i++)
                    {
                        if (text[i] == key)
                        {
                            int letter_distance = i - pos;
                            if (letter_distances.ContainsKey(key))
                            {
                                letter_distances[key].Add(letter_distance);
                            }
                            pos = i;
                        }
                    }
                }
            }

            Dictionary<char, int> letter_distance_sums = new Dictionary<char, int>();
            foreach (char key in letter_distances.Keys)
            {
                int sum = 0;
                foreach (int n in letter_distances[key])
                {
                    sum += n;
                }
                letter_distance_sums.Add(key, sum);
            }

            StringBuilder str = new StringBuilder();
            foreach (char key in letter_distances.Keys)
            {
                str.Append("Distances" + "\t" + key.ToString() + "\t");
                str.Append(letter_distance_sums[key].ToString() + "\t");
                foreach (int ld in letter_distances[key])
                {
                    str.Append(ld.ToString() + ",");
                }
                if (str.Length > 0)
                {
                    str.Remove(str.Length - 1, 1);
                }
                str.AppendLine();
            }

            string filename = "LetterDistances" + Globals.OUTPUT_FILE_EXT;
            if (Directory.Exists(Globals.RESEARCH_FOLDER))
            {
                string path = Globals.RESEARCH_FOLDER + "/" + filename;
                FileHelper.SaveText(path, str.ToString());
                FileHelper.DisplayFile(path);
            }
        }
    }
    private void BuildLetterFrequencies()
    {
        if (m_client != null)
        {
            if (
                 (m_text_display_mode == TextDisplayMode.None) ||
                 (m_text_display_mode == TextDisplayMode.TranslationOnly)
               )
            {
                if (!m_found_verses_displayed)
                {
                    if (m_client.Selection != null)
                    {
                        m_current_text = m_client.Selection.Text;
                    }
                }
            }

            if (!String.IsNullOrEmpty(m_current_text))
            {
                if (m_find_by_phrase_letter_frequency)
                {
                    if (FindByFrequencyPhraseTextBox.SelectionLength > 0)
                    {
                        m_current_phrase = FindByFrequencyPhraseTextBox.SelectedText;
                    }
                    else
                    {
                        // current line text
                        int char_index = FindByFrequencyPhraseTextBox.SelectionStart;
                        int line_index = FindByFrequencyPhraseTextBox.GetLineFromCharIndex(char_index);
                        if ((line_index >= 0) && (line_index < FindByFrequencyPhraseTextBox.Lines.Length))
                        {
                            m_current_phrase = FindByFrequencyPhraseTextBox.Lines[line_index].ToString();
                        }
                        else
                        {
                            m_current_phrase = FindByFrequencyPhraseTextBox.Text;
                        }
                    }
                    if (m_current_phrase.Length > 0)
                    {
                        m_client.BuildLetterStatistics(m_current_text, m_current_phrase, m_frequency_search_type, m_with_diacritics);
                    }
                    else
                    {
                        m_client.LetterStatistics.Clear();
                    }
                }
                else
                {
                    m_client.BuildLetterStatistics(m_current_text, m_with_diacritics);
                }
            }
            else
            {
                if (m_client.LetterStatistics != null)
                {
                    m_client.LetterStatistics.Clear();
                }
            }
        }
    }
    private void DisplayLetterFrequencies()
    {
        try
        {
            for (int i = 0; i < 3; i++) LetterFrequencyListView.SelectedIndexChanged -= new EventHandler(LetterFrequencyListView_SelectedIndexChanged);

            if (m_client != null)
            {
                if (m_client.LetterStatistics != null)
                {
                    LetterFrequencyListView.Items.Clear();
                    if (m_client.LetterStatistics.Count > 0)
                    {
                        List<int> selected_indexes = new List<int>();
                        for (int i = 0; i < m_client.LetterStatistics.Count; i++)
                        {
                            string[] item_parts = new string[5];
                            item_parts[0] = m_client.LetterStatistics[i].Order.ToString();
                            item_parts[1] = m_client.LetterStatistics[i].Letter.ToString();
                            item_parts[2] = m_client.LetterStatistics[i].Frequency.ToString();
                            item_parts[3] = m_client.LetterStatistics[i].PositionSum.ToString();
                            item_parts[4] = m_client.LetterStatistics[i].DistanceSum.ToString();
                            LetterFrequencyListView.Items.Add(new ListViewItem(item_parts, i));

                            // re-select user items if any were selected for previous selection
                            if (m_selected_letters != null)
                            {
                                if (m_selected_letters.Contains(m_client.LetterStatistics[i].Letter))
                                {
                                    selected_indexes.Add(i);
                                }
                            }
                        }
                        // must be done after adding all items
                        foreach (int index in selected_indexes)
                        {
                            LetterFrequencyListView.SelectedIndices.Add(index);
                            LetterFrequencyListView.EnsureVisible(index);
                        }
                    }

                    DisplayLetterFrequenciesTotals();

                    // reset sort-markers
                    foreach (ColumnHeader column in LetterFrequencyListView.Columns)
                    {
                        if (column.Text.EndsWith("▲"))
                        {
                            column.Text = column.Text.Replace("▲", " ");
                        }
                        else if (column.Text.EndsWith("▼"))
                        {
                            column.Text = column.Text.Replace("▼", " ");
                        }
                    }
                    LetterFrequencyListView.Columns[0].Text = LetterFrequencyListView.Columns[0].Text.Replace("  ", " ▲");
                    LetterFrequencyListView.Refresh();
                }
            }
        }
        finally
        {
            LetterFrequencyListView.SelectedIndexChanged += new EventHandler(LetterFrequencyListView_SelectedIndexChanged);
        }
    }
    private void DisplayLetterFrequenciesTotals()
    {
        try
        {
            int count = 0;
            long frequency_sum = 0L;
            long position_sum = 0L;
            long distance_sum = 0L;

            if (LetterFrequencyListView.SelectedIndices.Count > 0)
            {
                count = LetterFrequencyListView.SelectedIndices.Count;
                foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
                {
                    frequency_sum += long.Parse(item.SubItems[2].Text);
                }
            }
            else
            {
                count = LetterFrequencyListView.Items.Count;
                foreach (ListViewItem item in LetterFrequencyListView.Items)
                {
                    frequency_sum += long.Parse(item.SubItems[2].Text);
                }
            }

            if (m_find_by_phrase_letter_frequency)
            {
                // position_sum = base-10 frequency sum --- طسم letter frequencies in Initial Letters = 1754
                // distance_sum = base-19 frequency sum --- طسم letter frequencies in Initial Letters = 4*1 + 5*19 + 17*19*19 = 6236
                long base10_multiplier = 1L;
                long base19_multiplier = 1L;
                if (LetterFrequencyListView.SelectedIndices.Count > 0)
                {
                    foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
                    {
                        long digit = long.Parse(item.SubItems[2].Text);
                        position_sum += digit * base10_multiplier;
                        distance_sum += digit * base19_multiplier;
                        base10_multiplier *= 10L;
                        base19_multiplier *= 19L;
                    }
                }
                else
                {
                    foreach (ListViewItem item in LetterFrequencyListView.Items)
                    {
                        long digit = long.Parse(item.SubItems[2].Text);
                        position_sum += digit * base10_multiplier;
                        distance_sum += digit * base19_multiplier;
                        base10_multiplier *= 10L;
                        base19_multiplier *= 19L;
                    }
                }
            }
            else
            {
                if (LetterFrequencyListView.SelectedIndices.Count > 0)
                {
                    foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
                    {
                        position_sum += long.Parse(item.SubItems[3].Text);
                        distance_sum += long.Parse(item.SubItems[4].Text);
                    }
                }
                else
                {
                    foreach (ListViewItem item in LetterFrequencyListView.Items)
                    {
                        position_sum += long.Parse(item.SubItems[3].Text);
                        distance_sum += long.Parse(item.SubItems[4].Text);
                    }
                }
            }

            LetterFrequencyCountLabel.Text = count.ToString();
            LetterFrequencyCountLabel.ForeColor = Numbers.GetNumberTypeColor(count);
            LetterFrequencyCountLabel.Refresh();

            LetterFrequencySumLabel.Text = frequency_sum.ToString();
            LetterFrequencySumLabel.ForeColor = Numbers.GetNumberTypeColor(frequency_sum);
            LetterFrequencySumLabel.Refresh();

            LetterFrequencyPositionSumSumLabel.Text = position_sum.ToString();
            LetterFrequencyPositionSumSumLabel.ForeColor = Numbers.GetNumberTypeColor(position_sum);
            LetterFrequencyPositionSumSumLabel.Refresh();

            LetterFrequencyDistanceSumSumLabel.Text = distance_sum.ToString();
            LetterFrequencyDistanceSumSumLabel.ForeColor = Numbers.GetNumberTypeColor(distance_sum);
            LetterFrequencyDistanceSumSumLabel.Refresh();

            if (m_find_by_phrase_letter_frequency)
            {
                if (FindByFrequencyPhraseTextBox.SelectionLength > 0)
                {
                    FactorizeValue(frequency_sum, true);

                    if (m_show_add_controls)
                    {
                        ValueLabel.Text = "-- " + L[l]["Freq"];
                        ToolTip.SetToolTip(ValueLabel, L[l]["Hide value-added positions and distances"]);
                    }
                    else
                    {
                        ValueLabel.Text = "+ " + L[l]["Freq"];
                        ToolTip.SetToolTip(ValueLabel, L[l]["Show value-added positions and distances"]);
                    }
                }
            }
        }
        catch
        {
            // log exception
        }
    }

    private void LetterFrequencyInspectLabel_Click(object sender, EventArgs e)
    {
        InspectLetterStatistics();
    }
    private void InspectLetterStatistics()
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.NumerologySystem != null)
                {
                    string filename = DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss") + "_" + m_client.NumerologySystem.Name + ".txt";

                    string text = m_current_text;
                    if (!String.IsNullOrEmpty(text))
                    {
                        if (m_find_by_phrase_letter_frequency)
                        {
                            m_client.SaveLetterStatistics(filename, text, m_current_phrase);
                        }
                        else
                        {
                            m_client.SaveLetterStatistics(filename, text, (ModifierKeys == Keys.Control));
                        }
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void ValueInspectLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            m_client.Logging = true;    // log Adjust letter/word/verse/chapter
            CalculateCurrentValue();    // SLOW calculations due to logging

            InspectValueCalculations(); // display inspection information

            m_client.Logging = false;   // return to FAST calculations without logging
        }
    }
    private void InspectValueCalculations()
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.NumerologySystem != null)
                {
                    string filename = DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss") + "_" + m_client.NumerologySystem.Name + ".txt";

                    long value = 0;
                    StringBuilder str = new StringBuilder();
                    if (long.TryParse(ValueTextBox.Text, out value))
                    {
                        str.AppendLine("--------------------------------------------------------------------------------------------------");
                        str.AppendLine(m_current_text);
                        str.AppendLine("--------------------------------------------------------------------------------------------------");
                        str.AppendLine();
                        str.AppendLine("Verses\t\t=\t" + VersesTextBox.Text);
                        str.AppendLine("Words\t\t=\t" + WordsTextBox.Text);
                        str.AppendLine("Letters\t\t=\t" + LettersTextBox.Text);
                        str.AppendLine("Value\t\t=\t" + ValueTextBox.Text + ((m_radix == DEFAULT_RADIX) ? "" : " in base " + m_radix.ToString()));

                        str.AppendLine();
                        str.AppendLine("Prime Factors\t=\t" + Numbers.FactorizeToString(value));
                        int nth_number_index = 0;
                        int nth_additive_number_index = 0;
                        int nth_non_additive_number_index = 0;
                        if (Numbers.IsPrime(value))
                        {
                            m_index_type = IndexType.Prime;
                            nth_number_index = Numbers.PrimeIndexOf(value) + 1;
                            nth_additive_number_index = Numbers.AdditivePrimeIndexOf(value) + 1;
                            nth_non_additive_number_index = Numbers.NonAdditivePrimeIndexOf(value) + 1;
                            str.AppendLine("P  Index\t=\t" + ((nth_number_index > 0) ? nth_number_index.ToString() : ""));
                            str.AppendLine("AP Index\t=\t" + ((nth_additive_number_index > 0) ? nth_additive_number_index.ToString() : ""));
                            str.AppendLine("XP Index\t=\t" + ((nth_non_additive_number_index > 0) ? nth_non_additive_number_index.ToString() : ""));
                        }
                        else // any other index type will be treated as IndexNumberType.Composite
                        {
                            m_index_type = IndexType.Composite;
                            nth_number_index = Numbers.CompositeIndexOf(value) + 1;
                            nth_additive_number_index = Numbers.AdditiveCompositeIndexOf(value) + 1;
                            nth_non_additive_number_index = Numbers.NonAdditiveCompositeIndexOf(value) + 1;
                            str.AppendLine("C  Index\t=\t" + ((nth_number_index > 0) ? nth_number_index.ToString() : ""));
                            str.AppendLine("AC Index\t=\t" + ((nth_additive_number_index > 0) ? nth_additive_number_index.ToString() : ""));
                            str.AppendLine("XC Index\t=\t" + ((nth_non_additive_number_index > 0) ? nth_non_additive_number_index.ToString() : ""));
                        }

                        str.AppendLine();
                        string divisors = Numbers.GetDivisorsString(value);
                        long sum_of_divisors = Numbers.SumOfDivisors(value);
                        str.AppendLine(L[l]["Sum of divisors"] + "\t\t=\t" + sum_of_divisors + " = " + divisors);

                        string proper_divisors = Numbers.GetProperDivisorsString(value);
                        long sum_of_proper_divisors = Numbers.SumOfProperDivisors(value);
                        str.AppendLine(L[l]["Sum of proper divisors"] + "\t=\t" + sum_of_proper_divisors + " = " + proper_divisors);

                        m_number_kind = Numbers.GetNumberKind(value);
                        int number_kind_index = 0;
                        switch (m_number_kind)
                        {
                            case NumberKind.Deficient:
                                {
                                    number_kind_index = Numbers.DeficientIndexOf(value) + 1;
                                }
                                break;
                            case NumberKind.Perfect:
                                {
                                    number_kind_index = Numbers.PerfectIndexOf(value) + 1;
                                }
                                break;
                            case NumberKind.Abundant:
                                {
                                    number_kind_index = Numbers.AbundantIndexOf(value) + 1;
                                }
                                break;
                            default:
                                {
                                    number_kind_index = 0;
                                }
                                break;
                        }
                        str.AppendLine(m_number_kind.ToString() + " Index\t\t=\t" + number_kind_index);

                        str.AppendLine();
                        string squares1_str = "";
                        string squares2_str = "";
                        int _4nplus1_index = -1;
                        if (Numbers.IsUnit(value) || Numbers.IsPrime(value))
                        {
                            squares1_str = Numbers.Get4nPlus1EqualsSumOfTwoSquares(value);
                            squares2_str = Numbers.Get4nPlus1EqualsDiffOfTwoTrivialSquares(value);
                            _4nplus1_index = Numbers.Prime4nPlus1IndexOf(value) + 1;
                        }
                        else //if composite
                        {
                            squares1_str = Numbers.Get4nPlus1EqualsDiffOfTwoSquares(value);
                            squares2_str = Numbers.Get4nPlus1EqualsDiffOfTwoTrivialSquares(value);
                            _4nplus1_index = Numbers.Composite4nPlus1IndexOf(value) + 1;
                        }
                        str.AppendLine("4n+1 Squares1\t\t=\t" + squares1_str + "\t\t4n+1 Index = " + _4nplus1_index.ToString());
                        str.AppendLine("4n+1 Squares2\t\t=\t" + squares2_str);

                        str.AppendLine();
                        if (m_client.Book != null)
                        {
                            Verse verse = m_client.Book.GetVerseByVerseNumber((int)value);
                            if (verse != null)
                            {
                                str.AppendLine("VerseByVerseNumber\t=\t" + verse.Address);
                            }
                            else
                            {
                                str.AppendLine("VerseByVerseNumber\t=\t\"---:---\"");
                            }

                            verse = m_client.Book.GetVerseByWordNumber((int)value);
                            if (verse != null)
                            {
                                str.AppendLine("VerseByWordNumber\t=\t" + verse.Address);
                            }
                            else
                            {
                                str.AppendLine("VerseByWordNumber\t=\t\"---:---\"");
                            }

                            verse = m_client.Book.GetVerseByLetterNumber((int)value);
                            if (verse != null)
                            {
                                str.AppendLine("VerseByLetterNumber\t=\t" + verse.Address);
                            }
                            else
                            {
                                str.AppendLine("VerseByLetterNumber\t=\t\"---:---\"");
                            }
                        }

                        str.AppendLine();
                        str.AppendLine("Left-to-right prime/composite index chain | P=0 C=1\r\n" + GetPCIndexChainL2R(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryPCIndexChainL2R(value) + "  =  " + DecimalPCIndexChainL2R(value));
                        str.AppendLine();
                        str.AppendLine("Right-to-left prime/composite index chain | P=0 C=1\r\n" + GetPCIndexChainR2L(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryPCIndexChainR2L(value) + "  =  " + DecimalPCIndexChainR2L(value));
                        str.AppendLine();
                        str.AppendLine("Left-to-right composite/prime index chain | C=0 P=1\r\n" + GetCPIndexChainL2R(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryCPIndexChainL2R(value) + "  =  " + DecimalCPIndexChainL2R(value));
                        str.AppendLine();
                        str.AppendLine("Right-to-left composite/prime index chain | C=0 P=1\r\n" + GetCPIndexChainR2L(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryCPIndexChainR2L(value) + "  =  " + DecimalCPIndexChainR2L(value));
                        str.AppendLine("--------------------------------------------------------------------------------------------------");
                        str.AppendLine();

                        m_client.SaveValueCalculations(filename, str.ToString(), m_current_verses, m_current_start_letter, m_current_end_letter);
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void LetterFrequencyWithDiacriticsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        FindByTextWithDiacriticsCheckBox.Checked = LetterFrequencyWithDiacriticsCheckBox.Checked;
    }

    private void StatisticsControls_Enter(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);
        this.AcceptButton = null;
    }
    private void TextBoxLabelControls_CtrlClick(object sender, EventArgs e)
    {
        // Ctrl+Click factorizes number
        if (ModifierKeys == Keys.Control)
        {
            if (sender is Label)
            {
                FactorizeNumber(sender as Label);
            }
            else if (sender is TextBox)
            {
                FactorizeNumber(sender as TextBox);
            }
        }
        else
        {
            if (m_active_textbox != null)
            {
                if (sender == HeaderLabel)
                {
                    m_user_text_mode = false;
                    CalculateCurrentValue();
                    BuildLetterFrequencies();
                    DisplayLetterFrequencies();
                }
            }
        }
    }
    private void PCIndexChainL2RTextBox_TextChanged(object sender, EventArgs e)
    {
        long value = 0;
        if (long.TryParse(ValueTextBox.Text, out value))
        {
            this.ToolTip.SetToolTip(this.PCIndexChainL2RTextBox, "Left-to-right prime/composite index chain | P=0 C=1\r\n" + GetPCIndexChainL2R(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryPCIndexChainL2R(value) + "  =  " + DecimalPCIndexChainL2R(value));
        }
    }
    private void PCIndexChainR2LTextBox_TextChanged(object sender, EventArgs e)
    {
        long value = 0;
        if (long.TryParse(ValueTextBox.Text, out value))
        {
            this.ToolTip.SetToolTip(this.PCIndexChainR2LTextBox, "Right-to-left prime/composite index chain | P=0 C=1\r\n" + GetPCIndexChainR2L(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryPCIndexChainR2L(value) + "  =  " + DecimalPCIndexChainR2L(value));
        }
    }
    private void CPIndexChainL2RTextBox_TextChanged(object sender, EventArgs e)
    {
        long value = 0;
        if (long.TryParse(ValueTextBox.Text, out value))
        {
            this.ToolTip.SetToolTip(this.CPIndexChainL2RTextBox, "Left-to-right composite/prime index chain | C=0 P=1\r\n" + GetCPIndexChainL2R(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryCPIndexChainL2R(value) + "  =  " + DecimalCPIndexChainL2R(value));
        }
    }
    private void CPIndexChainR2LTextBox_TextChanged(object sender, EventArgs e)
    {
        long value = 0;
        if (long.TryParse(ValueTextBox.Text, out value))
        {
            this.ToolTip.SetToolTip(this.CPIndexChainR2LTextBox, "Right-to-left composite/prime index chain | C=0 P=1\r\n" + GetCPIndexChainR2L(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryCPIndexChainR2L(value) + "  =  " + DecimalCPIndexChainR2L(value));
        }
    }
    private void IndexChainLengthTextBox_Click(object sender, EventArgs e)
    {
        if (ModifierKeys == Keys.Control)
        {
            TextBoxLabelControls_CtrlClick(sender, e);
        }
        else
        {
            int length = 0;
            if (int.TryParse(IndexChainLengthTextBox.Text, out length))
            {
                NumbersOfIndexChainLength(length);
            }
        }
    }
    private void StatusControls_Enter(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);
        this.AcceptButton = null;
    }
    private void Control_MouseHover(object sender, EventArgs e)
    {
        Control control = sender as Control;
        if (control != null)
        {
            string text = control.Text;
            if (!String.IsNullOrEmpty(text))
            {
                if (text.StartsWith(SUM_SYMBOL))
                {
                    text = text.Substring(1);
                }

                double number;
                if (double.TryParse(text, out number))
                {
                    string factors_str = Numbers.FactorizeToString((long)number);
                    ToolTip.SetToolTip(control, factors_str);
                }
                else
                {
                    ToolTip.SetToolTip(control, null);
                }
            }
            else
            {
                ToolTip.SetToolTip(control, null);
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Help
    ///////////////////////////////////////////////////////////////////////////////
    private int m_help_message_index = 0;
    private void HelpMessageLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.HelpMessages != null)
            {
                int maximum = m_client.HelpMessages.Count - 1;
                if (ModifierKeys == Keys.Shift)
                {
                    m_help_message_index--;
                    if (m_help_message_index < 0) m_help_message_index = maximum;
                }
                else
                {
                    m_help_message_index++;
                    if (m_help_message_index > maximum) m_help_message_index = 0;
                }

                if (m_client.HelpMessages.Count > m_help_message_index)
                {
                    HelpMessageLabel.Text = m_client.HelpMessages[m_help_message_index];
                }
            }
        }
    }
    private void BrowseGroupBox_Click(object sender, EventArgs e)
    {
        string path = Globals.HELP_FOLDER + "/" + "QuickInfo.txt";
        if (File.Exists(path))
        {
            FileHelper.DisplayFile(path);
        }
    }
    private void StatisticsGroupBox_Click(object sender, EventArgs e)
    {
        //string path = Globals.HELP_FOLDER + "/" + "114.txt";
        //if (File.Exists(path))
        //{
        //    FileHelper.DisplayFile(path);
        //}
    }
    private void PrimalogyLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            string filename = "Primalogy.pdf";
            string path = Application.StartupPath + "/" + Globals.HELP_FOLDER + "/" + filename;
            if (!File.Exists(path))
            {
                DownloadFile("http://heliwave.com/" + filename, path);
            }
            if (File.Exists(path))
            {
                FileHelper.WaitForReady(path);

                System.Diagnostics.Process.Start(path);
            }
        }
        catch (Exception ex)
        {
            while (ex != null)
            {
                //Console.WriteLine(ex.Message);
                MessageBox.Show(ex.Message, Application.ProductName);
                ex = ex.InnerException;
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void PrimalogyARLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            string filename = "Primalogy_AR.pdf";
            string path = Application.StartupPath + "/" + Globals.HELP_FOLDER + "/" + filename;
            if (!File.Exists(path))
            {
                DownloadFile("http://heliwave.com/" + filename, path);
            }
            if (File.Exists(path))
            {
                FileHelper.WaitForReady(path);

                System.Diagnostics.Process.Start(path);
            }
        }
        catch (Exception ex)
        {
            while (ex != null)
            {
                //Console.WriteLine(ex.Message);
                MessageBox.Show(ex.Message, Application.ProductName);
                ex = ex.InnerException;
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void HelpFolderLabel_Click(object sender, EventArgs e)
    {
        if (Directory.Exists(Globals.HELP_FOLDER))
        {
            System.Diagnostics.Process.Start(Globals.HELP_FOLDER);
        }

        //this.Cursor = Cursors.WaitCursor;
        //try
        //{
        //    string filename = "EncryptedQuran.pdf";
        //    string path = Application.StartupPath + "/" + Globals.HELP_FOLDER + "/" + filename;
        //    if (!File.Exists(path))
        //    {
        //        DownloadFile("http://heliwave.com/" + filename, path);
        //    }
        //    if (File.Exists(path))
        //    {
        //        FileHelper.WaitForReady(path);

        //        System.Diagnostics.Process.Start(path);
        //    }
        //}
        //catch (Exception ex)
        //{
        //    while (ex != null)
        //    {
        //        //Console.WriteLine(ex.Message);
        //        MessageBox.Show(ex.Message, Application.ProductName);
        //        ex = ex.InnerException;
        //    }
        //}
        //finally
        //{
        //    this.Cursor = Cursors.Default;
        //}
    }
    private void LinkLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            Control control = (sender as Control);
            if (control != null)
            {
                if (control.Tag != null)
                {
                    if (!String.IsNullOrEmpty(control.Tag.ToString()))
                    {
                        try
                        {
                            System.Diagnostics.Process.Start(control.Tag.ToString());
                        }
                        catch (Exception ex)
                        {
                            while (ex != null)
                            {
                                //Console.WriteLine(ex.Message);
                                MessageBox.Show(ex.Message, Application.ProductName);
                                ex = ex.InnerException;
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private AboutBox m_about_box = null;
    private void VersionLabel_Click(object sender, EventArgs e)
    {
        if (m_about_box == null)
        {
            m_about_box = new AboutBox();
        }
        if (m_about_box != null)
        {
            if (!m_about_box.Visible)
            {
                m_about_box.ShowDialog();
            }
        }
    }
    /////////////////////////////////////////////////////////////////////////////
    #endregion
}
